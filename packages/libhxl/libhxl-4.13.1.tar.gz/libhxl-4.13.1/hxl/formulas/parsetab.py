
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA DIVIDE FLOAT INT LPAREN MINUS MODULO NAME PLUS RPAREN STRING TAGPATTERN TIMESexpression : expression PLUS expressionexpression : expression MINUS expressionexpression : termexpression : term TIMES factorexpression : term DIVIDE factorexpression : term MODULO factorterm : factorfactor : INTfactor : FLOATfactor : STRINGfactor : TAGPATTERNfactor : MINUS factorfactor : NAME LPAREN args RPARENargs : factor COMMA argsargs : factorargs :factor : LPAREN expression RPAREN'
    
_lr_action_items = {'INT':([0,2,10,11,12,14,15,16,17,28,],[5,5,5,5,5,5,5,5,5,5,]),'FLOAT':([0,2,10,11,12,14,15,16,17,28,],[6,6,6,6,6,6,6,6,6,6,]),'STRING':([0,2,10,11,12,14,15,16,17,28,],[7,7,7,7,7,7,7,7,7,7,]),'TAGPATTERN':([0,2,10,11,12,14,15,16,17,28,],[8,8,8,8,8,8,8,8,8,8,]),'MINUS':([0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,26,27,28,],[2,12,2,-3,-7,-8,-9,-10,-11,2,2,2,-12,2,2,2,2,12,12,12,-4,-5,-6,-17,-13,2,]),'NAME':([0,2,10,11,12,14,15,16,17,28,],[9,9,9,9,9,9,9,9,9,9,]),'LPAREN':([0,2,9,10,11,12,14,15,16,17,28,],[10,10,17,10,10,10,10,10,10,10,10,]),'$end':([1,3,4,5,6,7,8,13,19,20,21,22,23,26,27,],[0,-3,-7,-8,-9,-10,-11,-12,-1,-2,-4,-5,-6,-17,-13,]),'PLUS':([1,3,4,5,6,7,8,13,18,19,20,21,22,23,26,27,],[11,-3,-7,-8,-9,-10,-11,-12,11,11,11,-4,-5,-6,-17,-13,]),'RPAREN':([3,4,5,6,7,8,13,17,18,19,20,21,22,23,24,25,26,27,28,29,],[-3,-7,-8,-9,-10,-11,-12,-16,26,-1,-2,-4,-5,-6,27,-15,-17,-13,-16,-14,]),'TIMES':([3,4,5,6,7,8,13,26,27,],[14,-7,-8,-9,-10,-11,-12,-17,-13,]),'DIVIDE':([3,4,5,6,7,8,13,26,27,],[15,-7,-8,-9,-10,-11,-12,-17,-13,]),'MODULO':([3,4,5,6,7,8,13,26,27,],[16,-7,-8,-9,-10,-11,-12,-17,-13,]),'COMMA':([5,6,7,8,13,25,26,27,],[-8,-9,-10,-11,-12,28,-17,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,10,11,12,],[1,18,19,20,]),'term':([0,10,11,12,],[3,3,3,3,]),'factor':([0,2,10,11,12,14,15,16,17,28,],[4,13,4,4,4,21,22,23,25,25,]),'args':([17,28,],[24,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS expression','expression',3,'p_expression_plus','parser.py',11),
  ('expression -> expression MINUS expression','expression',3,'p_expression_minus','parser.py',15),
  ('expression -> term','expression',1,'p_expression_term','parser.py',19),
  ('expression -> term TIMES factor','expression',3,'p_term_times','parser.py',23),
  ('expression -> term DIVIDE factor','expression',3,'p_term_divide','parser.py',27),
  ('expression -> term MODULO factor','expression',3,'p_term_modulo','parser.py',31),
  ('term -> factor','term',1,'p_term_factor','parser.py',35),
  ('factor -> INT','factor',1,'p_factor_int','parser.py',39),
  ('factor -> FLOAT','factor',1,'p_factor_float','parser.py',43),
  ('factor -> STRING','factor',1,'p_factor_string','parser.py',47),
  ('factor -> TAGPATTERN','factor',1,'p_factor_tagpattern','parser.py',51),
  ('factor -> MINUS factor','factor',2,'p_factor_uminus','parser.py',55),
  ('factor -> NAME LPAREN args RPAREN','factor',4,'p_factor_function','parser.py',59),
  ('args -> factor COMMA args','args',3,'p_args_multiple','parser.py',63),
  ('args -> factor','args',1,'p_args_single','parser.py',67),
  ('args -> <empty>','args',0,'p_args_empty','parser.py',71),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_group','parser.py',75),
]
