# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_virgil_crypto_python')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_virgil_crypto_python')
    _virgil_crypto_python = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_virgil_crypto_python', [dirname(__file__)])
        except ImportError:
            import _virgil_crypto_python
            return _virgil_crypto_python
        try:
            _mod = imp.load_module('_virgil_crypto_python', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _virgil_crypto_python = swig_import_helper()
    del swig_import_helper
else:
    import _virgil_crypto_python
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


VIRGIL_CRYPTO_FEATURE_LOW_LEVEL_WRAP = _virgil_crypto_python.VIRGIL_CRYPTO_FEATURE_LOW_LEVEL_WRAP
VIRGIL_CRYPTO_FEATURE_PYTHIA = _virgil_crypto_python.VIRGIL_CRYPTO_FEATURE_PYTHIA
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _virgil_crypto_python.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _virgil_crypto_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _virgil_crypto_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _virgil_crypto_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _virgil_crypto_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _virgil_crypto_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _virgil_crypto_python.SwigPyIterator_copy(self)

    def next(self):
        return _virgil_crypto_python.SwigPyIterator_next(self)

    def __next__(self):
        return _virgil_crypto_python.SwigPyIterator___next__(self)

    def previous(self):
        return _virgil_crypto_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _virgil_crypto_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _virgil_crypto_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _virgil_crypto_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _virgil_crypto_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _virgil_crypto_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _virgil_crypto_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _virgil_crypto_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _virgil_crypto_python.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VirgilByteArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilByteArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilByteArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _virgil_crypto_python.VirgilByteArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _virgil_crypto_python.VirgilByteArray___nonzero__(self)

    def __bool__(self):
        return _virgil_crypto_python.VirgilByteArray___bool__(self)

    def __len__(self):
        return _virgil_crypto_python.VirgilByteArray___len__(self)

    def __getslice__(self, i, j):
        return _virgil_crypto_python.VirgilByteArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _virgil_crypto_python.VirgilByteArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _virgil_crypto_python.VirgilByteArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _virgil_crypto_python.VirgilByteArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _virgil_crypto_python.VirgilByteArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _virgil_crypto_python.VirgilByteArray___setitem__(self, *args)

    def pop(self):
        return _virgil_crypto_python.VirgilByteArray_pop(self)

    def append(self, x):
        return _virgil_crypto_python.VirgilByteArray_append(self, x)

    def empty(self):
        return _virgil_crypto_python.VirgilByteArray_empty(self)

    def size(self):
        return _virgil_crypto_python.VirgilByteArray_size(self)

    def swap(self, v):
        return _virgil_crypto_python.VirgilByteArray_swap(self, v)

    def begin(self):
        return _virgil_crypto_python.VirgilByteArray_begin(self)

    def end(self):
        return _virgil_crypto_python.VirgilByteArray_end(self)

    def rbegin(self):
        return _virgil_crypto_python.VirgilByteArray_rbegin(self)

    def rend(self):
        return _virgil_crypto_python.VirgilByteArray_rend(self)

    def clear(self):
        return _virgil_crypto_python.VirgilByteArray_clear(self)

    def get_allocator(self):
        return _virgil_crypto_python.VirgilByteArray_get_allocator(self)

    def pop_back(self):
        return _virgil_crypto_python.VirgilByteArray_pop_back(self)

    def erase(self, *args):
        return _virgil_crypto_python.VirgilByteArray_erase(self, *args)

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilByteArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _virgil_crypto_python.VirgilByteArray_push_back(self, x)

    def front(self):
        return _virgil_crypto_python.VirgilByteArray_front(self)

    def back(self):
        return _virgil_crypto_python.VirgilByteArray_back(self)

    def assign(self, n, x):
        return _virgil_crypto_python.VirgilByteArray_assign(self, n, x)

    def resize(self, *args):
        return _virgil_crypto_python.VirgilByteArray_resize(self, *args)

    def insert(self, *args):
        return _virgil_crypto_python.VirgilByteArray_insert(self, *args)

    def reserve(self, n):
        return _virgil_crypto_python.VirgilByteArray_reserve(self, n)

    def capacity(self):
        return _virgil_crypto_python.VirgilByteArray_capacity(self)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilByteArray
    __del__ = lambda self: None
VirgilByteArray_swigregister = _virgil_crypto_python.VirgilByteArray_swigregister
VirgilByteArray_swigregister(VirgilByteArray)

class VirgilVersion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilVersion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilVersion, name)
    __repr__ = _swig_repr
    if _newclass:
        asNumber = staticmethod(_virgil_crypto_python.VirgilVersion_asNumber)
    else:
        asNumber = _virgil_crypto_python.VirgilVersion_asNumber
    if _newclass:
        asString = staticmethod(_virgil_crypto_python.VirgilVersion_asString)
    else:
        asString = _virgil_crypto_python.VirgilVersion_asString
    if _newclass:
        majorVersion = staticmethod(_virgil_crypto_python.VirgilVersion_majorVersion)
    else:
        majorVersion = _virgil_crypto_python.VirgilVersion_majorVersion
    if _newclass:
        minorVersion = staticmethod(_virgil_crypto_python.VirgilVersion_minorVersion)
    else:
        minorVersion = _virgil_crypto_python.VirgilVersion_minorVersion
    if _newclass:
        patchVersion = staticmethod(_virgil_crypto_python.VirgilVersion_patchVersion)
    else:
        patchVersion = _virgil_crypto_python.VirgilVersion_patchVersion
    if _newclass:
        fullName = staticmethod(_virgil_crypto_python.VirgilVersion_fullName)
    else:
        fullName = _virgil_crypto_python.VirgilVersion_fullName

    def __init__(self):
        this = _virgil_crypto_python.new_VirgilVersion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilVersion
    __del__ = lambda self: None
VirgilVersion_swigregister = _virgil_crypto_python.VirgilVersion_swigregister
VirgilVersion_swigregister(VirgilVersion)

def VirgilVersion_asNumber():
    return _virgil_crypto_python.VirgilVersion_asNumber()
VirgilVersion_asNumber = _virgil_crypto_python.VirgilVersion_asNumber

def VirgilVersion_asString():
    return _virgil_crypto_python.VirgilVersion_asString()
VirgilVersion_asString = _virgil_crypto_python.VirgilVersion_asString

def VirgilVersion_majorVersion():
    return _virgil_crypto_python.VirgilVersion_majorVersion()
VirgilVersion_majorVersion = _virgil_crypto_python.VirgilVersion_majorVersion

def VirgilVersion_minorVersion():
    return _virgil_crypto_python.VirgilVersion_minorVersion()
VirgilVersion_minorVersion = _virgil_crypto_python.VirgilVersion_minorVersion

def VirgilVersion_patchVersion():
    return _virgil_crypto_python.VirgilVersion_patchVersion()
VirgilVersion_patchVersion = _virgil_crypto_python.VirgilVersion_patchVersion

def VirgilVersion_fullName():
    return _virgil_crypto_python.VirgilVersion_fullName()
VirgilVersion_fullName = _virgil_crypto_python.VirgilVersion_fullName

class VirgilDataSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilDataSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilDataSource, name)
    __repr__ = _swig_repr

    def hasData(self):
        return _virgil_crypto_python.VirgilDataSource_hasData(self)

    def read(self):
        return _virgil_crypto_python.VirgilDataSource_read(self)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilDataSource
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == VirgilDataSource:
            _self = None
        else:
            _self = self
        this = _virgil_crypto_python.new_VirgilDataSource(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _virgil_crypto_python.disown_VirgilDataSource(self)
        return weakref_proxy(self)
VirgilDataSource_swigregister = _virgil_crypto_python.VirgilDataSource_swigregister
VirgilDataSource_swigregister(VirgilDataSource)

class VirgilDataSink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilDataSink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilDataSink, name)
    __repr__ = _swig_repr

    def isGood(self):
        return _virgil_crypto_python.VirgilDataSink_isGood(self)

    def write(self, data):
        return _virgil_crypto_python.VirgilDataSink_write(self, data)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilDataSink
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == VirgilDataSink:
            _self = None
        else:
            _self = self
        this = _virgil_crypto_python.new_VirgilDataSink(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _virgil_crypto_python.disown_VirgilDataSink(self)
        return weakref_proxy(self)
VirgilDataSink_swigregister = _virgil_crypto_python.VirgilDataSink_swigregister
VirgilDataSink_swigregister(VirgilDataSink)

class VirgilAsn1Compatible(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilAsn1Compatible, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilAsn1Compatible, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def toAsn1(self):
        return _virgil_crypto_python.VirgilAsn1Compatible_toAsn1(self)

    def fromAsn1(self, asn1):
        return _virgil_crypto_python.VirgilAsn1Compatible_fromAsn1(self, asn1)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilAsn1Compatible
    __del__ = lambda self: None
VirgilAsn1Compatible_swigregister = _virgil_crypto_python.VirgilAsn1Compatible_swigregister
VirgilAsn1Compatible_swigregister(VirgilAsn1Compatible)

class VirgilKeyPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilKeyPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilKeyPair, name)
    __repr__ = _swig_repr
    Type_RSA_256 = _virgil_crypto_python.VirgilKeyPair_Type_RSA_256
    Type_RSA_512 = _virgil_crypto_python.VirgilKeyPair_Type_RSA_512
    Type_RSA_1024 = _virgil_crypto_python.VirgilKeyPair_Type_RSA_1024
    Type_RSA_2048 = _virgil_crypto_python.VirgilKeyPair_Type_RSA_2048
    Type_RSA_3072 = _virgil_crypto_python.VirgilKeyPair_Type_RSA_3072
    Type_RSA_4096 = _virgil_crypto_python.VirgilKeyPair_Type_RSA_4096
    Type_RSA_8192 = _virgil_crypto_python.VirgilKeyPair_Type_RSA_8192
    Type_EC_SECP192R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP192R1
    Type_EC_SECP224R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP224R1
    Type_EC_SECP256R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP256R1
    Type_EC_SECP384R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP384R1
    Type_EC_SECP521R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP521R1
    Type_EC_BP256R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_BP256R1
    Type_EC_BP384R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_BP384R1
    Type_EC_BP512R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_BP512R1
    Type_EC_SECP192K1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP192K1
    Type_EC_SECP224K1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP224K1
    Type_EC_SECP256K1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP256K1
    Type_EC_CURVE25519 = _virgil_crypto_python.VirgilKeyPair_Type_EC_CURVE25519
    Type_FAST_EC_X25519 = _virgil_crypto_python.VirgilKeyPair_Type_FAST_EC_X25519
    Type_FAST_EC_ED25519 = _virgil_crypto_python.VirgilKeyPair_Type_FAST_EC_ED25519
    if _newclass:
        generate = staticmethod(_virgil_crypto_python.VirgilKeyPair_generate)
    else:
        generate = _virgil_crypto_python.VirgilKeyPair_generate
    if _newclass:
        generateRecommended = staticmethod(_virgil_crypto_python.VirgilKeyPair_generateRecommended)
    else:
        generateRecommended = _virgil_crypto_python.VirgilKeyPair_generateRecommended
    if _newclass:
        generateFrom = staticmethod(_virgil_crypto_python.VirgilKeyPair_generateFrom)
    else:
        generateFrom = _virgil_crypto_python.VirgilKeyPair_generateFrom
    if _newclass:
        generateFromKeyMaterial = staticmethod(_virgil_crypto_python.VirgilKeyPair_generateFromKeyMaterial)
    else:
        generateFromKeyMaterial = _virgil_crypto_python.VirgilKeyPair_generateFromKeyMaterial
    if _newclass:
        generateRecommendedFromKeyMaterial = staticmethod(_virgil_crypto_python.VirgilKeyPair_generateRecommendedFromKeyMaterial)
    else:
        generateRecommendedFromKeyMaterial = _virgil_crypto_python.VirgilKeyPair_generateRecommendedFromKeyMaterial
    if _newclass:
        isKeyPairMatch = staticmethod(_virgil_crypto_python.VirgilKeyPair_isKeyPairMatch)
    else:
        isKeyPairMatch = _virgil_crypto_python.VirgilKeyPair_isKeyPairMatch
    if _newclass:
        checkPrivateKeyPassword = staticmethod(_virgil_crypto_python.VirgilKeyPair_checkPrivateKeyPassword)
    else:
        checkPrivateKeyPassword = _virgil_crypto_python.VirgilKeyPair_checkPrivateKeyPassword
    if _newclass:
        isPrivateKeyEncrypted = staticmethod(_virgil_crypto_python.VirgilKeyPair_isPrivateKeyEncrypted)
    else:
        isPrivateKeyEncrypted = _virgil_crypto_python.VirgilKeyPair_isPrivateKeyEncrypted
    if _newclass:
        resetPrivateKeyPassword = staticmethod(_virgil_crypto_python.VirgilKeyPair_resetPrivateKeyPassword)
    else:
        resetPrivateKeyPassword = _virgil_crypto_python.VirgilKeyPair_resetPrivateKeyPassword
    if _newclass:
        encryptPrivateKey = staticmethod(_virgil_crypto_python.VirgilKeyPair_encryptPrivateKey)
    else:
        encryptPrivateKey = _virgil_crypto_python.VirgilKeyPair_encryptPrivateKey
    if _newclass:
        decryptPrivateKey = staticmethod(_virgil_crypto_python.VirgilKeyPair_decryptPrivateKey)
    else:
        decryptPrivateKey = _virgil_crypto_python.VirgilKeyPair_decryptPrivateKey
    if _newclass:
        extractPublicKey = staticmethod(_virgil_crypto_python.VirgilKeyPair_extractPublicKey)
    else:
        extractPublicKey = _virgil_crypto_python.VirgilKeyPair_extractPublicKey
    if _newclass:
        publicKeyToPEM = staticmethod(_virgil_crypto_python.VirgilKeyPair_publicKeyToPEM)
    else:
        publicKeyToPEM = _virgil_crypto_python.VirgilKeyPair_publicKeyToPEM
    if _newclass:
        publicKeyToDER = staticmethod(_virgil_crypto_python.VirgilKeyPair_publicKeyToDER)
    else:
        publicKeyToDER = _virgil_crypto_python.VirgilKeyPair_publicKeyToDER
    if _newclass:
        privateKeyToPEM = staticmethod(_virgil_crypto_python.VirgilKeyPair_privateKeyToPEM)
    else:
        privateKeyToPEM = _virgil_crypto_python.VirgilKeyPair_privateKeyToPEM
    if _newclass:
        privateKeyToDER = staticmethod(_virgil_crypto_python.VirgilKeyPair_privateKeyToDER)
    else:
        privateKeyToDER = _virgil_crypto_python.VirgilKeyPair_privateKeyToDER

    def publicKey(self):
        return _virgil_crypto_python.VirgilKeyPair_publicKey(self)

    def privateKey(self):
        return _virgil_crypto_python.VirgilKeyPair_privateKey(self)

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilKeyPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilKeyPair
    __del__ = lambda self: None
VirgilKeyPair_swigregister = _virgil_crypto_python.VirgilKeyPair_swigregister
VirgilKeyPair_swigregister(VirgilKeyPair)

def VirgilKeyPair_generate(*args):
    return _virgil_crypto_python.VirgilKeyPair_generate(*args)
VirgilKeyPair_generate = _virgil_crypto_python.VirgilKeyPair_generate

def VirgilKeyPair_generateRecommended(*args):
    return _virgil_crypto_python.VirgilKeyPair_generateRecommended(*args)
VirgilKeyPair_generateRecommended = _virgil_crypto_python.VirgilKeyPair_generateRecommended

def VirgilKeyPair_generateFrom(*args):
    return _virgil_crypto_python.VirgilKeyPair_generateFrom(*args)
VirgilKeyPair_generateFrom = _virgil_crypto_python.VirgilKeyPair_generateFrom

def VirgilKeyPair_generateFromKeyMaterial(*args):
    return _virgil_crypto_python.VirgilKeyPair_generateFromKeyMaterial(*args)
VirgilKeyPair_generateFromKeyMaterial = _virgil_crypto_python.VirgilKeyPair_generateFromKeyMaterial

def VirgilKeyPair_generateRecommendedFromKeyMaterial(*args):
    return _virgil_crypto_python.VirgilKeyPair_generateRecommendedFromKeyMaterial(*args)
VirgilKeyPair_generateRecommendedFromKeyMaterial = _virgil_crypto_python.VirgilKeyPair_generateRecommendedFromKeyMaterial

def VirgilKeyPair_isKeyPairMatch(*args):
    return _virgil_crypto_python.VirgilKeyPair_isKeyPairMatch(*args)
VirgilKeyPair_isKeyPairMatch = _virgil_crypto_python.VirgilKeyPair_isKeyPairMatch

def VirgilKeyPair_checkPrivateKeyPassword(key, pwd):
    return _virgil_crypto_python.VirgilKeyPair_checkPrivateKeyPassword(key, pwd)
VirgilKeyPair_checkPrivateKeyPassword = _virgil_crypto_python.VirgilKeyPair_checkPrivateKeyPassword

def VirgilKeyPair_isPrivateKeyEncrypted(privateKey):
    return _virgil_crypto_python.VirgilKeyPair_isPrivateKeyEncrypted(privateKey)
VirgilKeyPair_isPrivateKeyEncrypted = _virgil_crypto_python.VirgilKeyPair_isPrivateKeyEncrypted

def VirgilKeyPair_resetPrivateKeyPassword(privateKey, oldPassword, newPassword):
    return _virgil_crypto_python.VirgilKeyPair_resetPrivateKeyPassword(privateKey, oldPassword, newPassword)
VirgilKeyPair_resetPrivateKeyPassword = _virgil_crypto_python.VirgilKeyPair_resetPrivateKeyPassword

def VirgilKeyPair_encryptPrivateKey(privateKey, privateKeyPassword):
    return _virgil_crypto_python.VirgilKeyPair_encryptPrivateKey(privateKey, privateKeyPassword)
VirgilKeyPair_encryptPrivateKey = _virgil_crypto_python.VirgilKeyPair_encryptPrivateKey

def VirgilKeyPair_decryptPrivateKey(privateKey, privateKeyPassword):
    return _virgil_crypto_python.VirgilKeyPair_decryptPrivateKey(privateKey, privateKeyPassword)
VirgilKeyPair_decryptPrivateKey = _virgil_crypto_python.VirgilKeyPair_decryptPrivateKey

def VirgilKeyPair_extractPublicKey(privateKey, privateKeyPassword):
    return _virgil_crypto_python.VirgilKeyPair_extractPublicKey(privateKey, privateKeyPassword)
VirgilKeyPair_extractPublicKey = _virgil_crypto_python.VirgilKeyPair_extractPublicKey

def VirgilKeyPair_publicKeyToPEM(publicKey):
    return _virgil_crypto_python.VirgilKeyPair_publicKeyToPEM(publicKey)
VirgilKeyPair_publicKeyToPEM = _virgil_crypto_python.VirgilKeyPair_publicKeyToPEM

def VirgilKeyPair_publicKeyToDER(publicKey):
    return _virgil_crypto_python.VirgilKeyPair_publicKeyToDER(publicKey)
VirgilKeyPair_publicKeyToDER = _virgil_crypto_python.VirgilKeyPair_publicKeyToDER

def VirgilKeyPair_privateKeyToPEM(*args):
    return _virgil_crypto_python.VirgilKeyPair_privateKeyToPEM(*args)
VirgilKeyPair_privateKeyToPEM = _virgil_crypto_python.VirgilKeyPair_privateKeyToPEM

def VirgilKeyPair_privateKeyToDER(*args):
    return _virgil_crypto_python.VirgilKeyPair_privateKeyToDER(*args)
VirgilKeyPair_privateKeyToDER = _virgil_crypto_python.VirgilKeyPair_privateKeyToDER

class VirgilAsn1Reader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilAsn1Reader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilAsn1Reader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilAsn1Reader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilAsn1Reader
    __del__ = lambda self: None

    def reset(self, data):
        return _virgil_crypto_python.VirgilAsn1Reader_reset(self, data)

    def readInteger(self):
        return _virgil_crypto_python.VirgilAsn1Reader_readInteger(self)

    def readBool(self):
        return _virgil_crypto_python.VirgilAsn1Reader_readBool(self)

    def readNull(self):
        return _virgil_crypto_python.VirgilAsn1Reader_readNull(self)

    def readOctetString(self):
        return _virgil_crypto_python.VirgilAsn1Reader_readOctetString(self)

    def readUTF8String(self):
        return _virgil_crypto_python.VirgilAsn1Reader_readUTF8String(self)

    def readData(self):
        return _virgil_crypto_python.VirgilAsn1Reader_readData(self)

    def readContextTag(self, tag):
        return _virgil_crypto_python.VirgilAsn1Reader_readContextTag(self, tag)

    def readOID(self):
        return _virgil_crypto_python.VirgilAsn1Reader_readOID(self)

    def readSequence(self):
        return _virgil_crypto_python.VirgilAsn1Reader_readSequence(self)

    def readSet(self):
        return _virgil_crypto_python.VirgilAsn1Reader_readSet(self)
VirgilAsn1Reader_swigregister = _virgil_crypto_python.VirgilAsn1Reader_swigregister
VirgilAsn1Reader_swigregister(VirgilAsn1Reader)

class VirgilAsn1Writer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilAsn1Writer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilAsn1Writer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilAsn1Writer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilAsn1Writer
    __del__ = lambda self: None

    def reset(self, *args):
        return _virgil_crypto_python.VirgilAsn1Writer_reset(self, *args)

    def finish(self):
        return _virgil_crypto_python.VirgilAsn1Writer_finish(self)

    def writeInteger(self, value):
        return _virgil_crypto_python.VirgilAsn1Writer_writeInteger(self, value)

    def writeBool(self, value):
        return _virgil_crypto_python.VirgilAsn1Writer_writeBool(self, value)

    def writeNull(self):
        return _virgil_crypto_python.VirgilAsn1Writer_writeNull(self)

    def writeOctetString(self, data):
        return _virgil_crypto_python.VirgilAsn1Writer_writeOctetString(self, data)

    def writeUTF8String(self, data):
        return _virgil_crypto_python.VirgilAsn1Writer_writeUTF8String(self, data)

    def writeContextTag(self, tag, len):
        return _virgil_crypto_python.VirgilAsn1Writer_writeContextTag(self, tag, len)

    def writeData(self, data):
        return _virgil_crypto_python.VirgilAsn1Writer_writeData(self, data)

    def writeOID(self, oid):
        return _virgil_crypto_python.VirgilAsn1Writer_writeOID(self, oid)

    def writeSequence(self, len):
        return _virgil_crypto_python.VirgilAsn1Writer_writeSequence(self, len)

    def writeSet(self, set):
        return _virgil_crypto_python.VirgilAsn1Writer_writeSet(self, set)
VirgilAsn1Writer_swigregister = _virgil_crypto_python.VirgilAsn1Writer_swigregister
VirgilAsn1Writer_swigregister(VirgilAsn1Writer)

class VirgilCMSKeyTransRecipient(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilCMSKeyTransRecipient, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilCMSKeyTransRecipient, name)
    __repr__ = _swig_repr
    __swig_setmethods__["recipientIdentifier"] = _virgil_crypto_python.VirgilCMSKeyTransRecipient_recipientIdentifier_set
    __swig_getmethods__["recipientIdentifier"] = _virgil_crypto_python.VirgilCMSKeyTransRecipient_recipientIdentifier_get
    if _newclass:
        recipientIdentifier = _swig_property(_virgil_crypto_python.VirgilCMSKeyTransRecipient_recipientIdentifier_get, _virgil_crypto_python.VirgilCMSKeyTransRecipient_recipientIdentifier_set)
    __swig_setmethods__["keyEncryptionAlgorithm"] = _virgil_crypto_python.VirgilCMSKeyTransRecipient_keyEncryptionAlgorithm_set
    __swig_getmethods__["keyEncryptionAlgorithm"] = _virgil_crypto_python.VirgilCMSKeyTransRecipient_keyEncryptionAlgorithm_get
    if _newclass:
        keyEncryptionAlgorithm = _swig_property(_virgil_crypto_python.VirgilCMSKeyTransRecipient_keyEncryptionAlgorithm_get, _virgil_crypto_python.VirgilCMSKeyTransRecipient_keyEncryptionAlgorithm_set)
    __swig_setmethods__["encryptedKey"] = _virgil_crypto_python.VirgilCMSKeyTransRecipient_encryptedKey_set
    __swig_getmethods__["encryptedKey"] = _virgil_crypto_python.VirgilCMSKeyTransRecipient_encryptedKey_get
    if _newclass:
        encryptedKey = _swig_property(_virgil_crypto_python.VirgilCMSKeyTransRecipient_encryptedKey_get, _virgil_crypto_python.VirgilCMSKeyTransRecipient_encryptedKey_set)

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilCMSKeyTransRecipient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilCMSKeyTransRecipient
    __del__ = lambda self: None
VirgilCMSKeyTransRecipient_swigregister = _virgil_crypto_python.VirgilCMSKeyTransRecipient_swigregister
VirgilCMSKeyTransRecipient_swigregister(VirgilCMSKeyTransRecipient)

class VirgilCMSPasswordRecipient(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilCMSPasswordRecipient, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilCMSPasswordRecipient, name)
    __repr__ = _swig_repr
    __swig_setmethods__["keyDerivationAlgorithm"] = _virgil_crypto_python.VirgilCMSPasswordRecipient_keyDerivationAlgorithm_set
    __swig_getmethods__["keyDerivationAlgorithm"] = _virgil_crypto_python.VirgilCMSPasswordRecipient_keyDerivationAlgorithm_get
    if _newclass:
        keyDerivationAlgorithm = _swig_property(_virgil_crypto_python.VirgilCMSPasswordRecipient_keyDerivationAlgorithm_get, _virgil_crypto_python.VirgilCMSPasswordRecipient_keyDerivationAlgorithm_set)
    __swig_setmethods__["keyEncryptionAlgorithm"] = _virgil_crypto_python.VirgilCMSPasswordRecipient_keyEncryptionAlgorithm_set
    __swig_getmethods__["keyEncryptionAlgorithm"] = _virgil_crypto_python.VirgilCMSPasswordRecipient_keyEncryptionAlgorithm_get
    if _newclass:
        keyEncryptionAlgorithm = _swig_property(_virgil_crypto_python.VirgilCMSPasswordRecipient_keyEncryptionAlgorithm_get, _virgil_crypto_python.VirgilCMSPasswordRecipient_keyEncryptionAlgorithm_set)
    __swig_setmethods__["encryptedKey"] = _virgil_crypto_python.VirgilCMSPasswordRecipient_encryptedKey_set
    __swig_getmethods__["encryptedKey"] = _virgil_crypto_python.VirgilCMSPasswordRecipient_encryptedKey_get
    if _newclass:
        encryptedKey = _swig_property(_virgil_crypto_python.VirgilCMSPasswordRecipient_encryptedKey_get, _virgil_crypto_python.VirgilCMSPasswordRecipient_encryptedKey_set)

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilCMSPasswordRecipient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilCMSPasswordRecipient
    __del__ = lambda self: None
VirgilCMSPasswordRecipient_swigregister = _virgil_crypto_python.VirgilCMSPasswordRecipient_swigregister
VirgilCMSPasswordRecipient_swigregister(VirgilCMSPasswordRecipient)

class VirgilCMSEncryptedContent(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilCMSEncryptedContent, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilCMSEncryptedContent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["contentEncryptionAlgorithm"] = _virgil_crypto_python.VirgilCMSEncryptedContent_contentEncryptionAlgorithm_set
    __swig_getmethods__["contentEncryptionAlgorithm"] = _virgil_crypto_python.VirgilCMSEncryptedContent_contentEncryptionAlgorithm_get
    if _newclass:
        contentEncryptionAlgorithm = _swig_property(_virgil_crypto_python.VirgilCMSEncryptedContent_contentEncryptionAlgorithm_get, _virgil_crypto_python.VirgilCMSEncryptedContent_contentEncryptionAlgorithm_set)
    __swig_setmethods__["encryptedContent"] = _virgil_crypto_python.VirgilCMSEncryptedContent_encryptedContent_set
    __swig_getmethods__["encryptedContent"] = _virgil_crypto_python.VirgilCMSEncryptedContent_encryptedContent_get
    if _newclass:
        encryptedContent = _swig_property(_virgil_crypto_python.VirgilCMSEncryptedContent_encryptedContent_get, _virgil_crypto_python.VirgilCMSEncryptedContent_encryptedContent_set)

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilCMSEncryptedContent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilCMSEncryptedContent
    __del__ = lambda self: None
VirgilCMSEncryptedContent_swigregister = _virgil_crypto_python.VirgilCMSEncryptedContent_swigregister
VirgilCMSEncryptedContent_swigregister(VirgilCMSEncryptedContent)

class VirgilCMSEnvelopedData(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilCMSEnvelopedData, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilCMSEnvelopedData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["keyTransRecipients"] = _virgil_crypto_python.VirgilCMSEnvelopedData_keyTransRecipients_set
    __swig_getmethods__["keyTransRecipients"] = _virgil_crypto_python.VirgilCMSEnvelopedData_keyTransRecipients_get
    if _newclass:
        keyTransRecipients = _swig_property(_virgil_crypto_python.VirgilCMSEnvelopedData_keyTransRecipients_get, _virgil_crypto_python.VirgilCMSEnvelopedData_keyTransRecipients_set)
    __swig_setmethods__["passwordRecipients"] = _virgil_crypto_python.VirgilCMSEnvelopedData_passwordRecipients_set
    __swig_getmethods__["passwordRecipients"] = _virgil_crypto_python.VirgilCMSEnvelopedData_passwordRecipients_get
    if _newclass:
        passwordRecipients = _swig_property(_virgil_crypto_python.VirgilCMSEnvelopedData_passwordRecipients_get, _virgil_crypto_python.VirgilCMSEnvelopedData_passwordRecipients_set)
    __swig_setmethods__["encryptedContent"] = _virgil_crypto_python.VirgilCMSEnvelopedData_encryptedContent_set
    __swig_getmethods__["encryptedContent"] = _virgil_crypto_python.VirgilCMSEnvelopedData_encryptedContent_get
    if _newclass:
        encryptedContent = _swig_property(_virgil_crypto_python.VirgilCMSEnvelopedData_encryptedContent_get, _virgil_crypto_python.VirgilCMSEnvelopedData_encryptedContent_set)

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilCMSEnvelopedData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilCMSEnvelopedData
    __del__ = lambda self: None
VirgilCMSEnvelopedData_swigregister = _virgil_crypto_python.VirgilCMSEnvelopedData_swigregister
VirgilCMSEnvelopedData_swigregister(VirgilCMSEnvelopedData)

class VirgilCMSContent(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilCMSContent, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilCMSContent, name)
    __repr__ = _swig_repr
    Type_Data = _virgil_crypto_python.VirgilCMSContent_Type_Data
    Type_SignedData = _virgil_crypto_python.VirgilCMSContent_Type_SignedData
    Type_EnvelopedData = _virgil_crypto_python.VirgilCMSContent_Type_EnvelopedData
    Type_DigestedData = _virgil_crypto_python.VirgilCMSContent_Type_DigestedData
    Type_EncryptedData = _virgil_crypto_python.VirgilCMSContent_Type_EncryptedData
    Type_AuthenticatedData = _virgil_crypto_python.VirgilCMSContent_Type_AuthenticatedData
    Type_SignedAndEnvelopedData = _virgil_crypto_python.VirgilCMSContent_Type_SignedAndEnvelopedData
    Type_DataWithAttributes = _virgil_crypto_python.VirgilCMSContent_Type_DataWithAttributes
    Type_EncryptedPrivateKeyInfo = _virgil_crypto_python.VirgilCMSContent_Type_EncryptedPrivateKeyInfo
    __swig_setmethods__["contentType"] = _virgil_crypto_python.VirgilCMSContent_contentType_set
    __swig_getmethods__["contentType"] = _virgil_crypto_python.VirgilCMSContent_contentType_get
    if _newclass:
        contentType = _swig_property(_virgil_crypto_python.VirgilCMSContent_contentType_get, _virgil_crypto_python.VirgilCMSContent_contentType_set)
    __swig_setmethods__["content"] = _virgil_crypto_python.VirgilCMSContent_content_set
    __swig_getmethods__["content"] = _virgil_crypto_python.VirgilCMSContent_content_get
    if _newclass:
        content = _swig_property(_virgil_crypto_python.VirgilCMSContent_content_get, _virgil_crypto_python.VirgilCMSContent_content_set)

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilCMSContent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilCMSContent
    __del__ = lambda self: None
VirgilCMSContent_swigregister = _virgil_crypto_python.VirgilCMSContent_swigregister
VirgilCMSContent_swigregister(VirgilCMSContent)

class VirgilCMSContentInfo(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilCMSContentInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilCMSContentInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cmsContent"] = _virgil_crypto_python.VirgilCMSContentInfo_cmsContent_set
    __swig_getmethods__["cmsContent"] = _virgil_crypto_python.VirgilCMSContentInfo_cmsContent_get
    if _newclass:
        cmsContent = _swig_property(_virgil_crypto_python.VirgilCMSContentInfo_cmsContent_get, _virgil_crypto_python.VirgilCMSContentInfo_cmsContent_set)
    __swig_setmethods__["customParams"] = _virgil_crypto_python.VirgilCMSContentInfo_customParams_set
    __swig_getmethods__["customParams"] = _virgil_crypto_python.VirgilCMSContentInfo_customParams_get
    if _newclass:
        customParams = _swig_property(_virgil_crypto_python.VirgilCMSContentInfo_customParams_get, _virgil_crypto_python.VirgilCMSContentInfo_customParams_set)
    if _newclass:
        defineSize = staticmethod(_virgil_crypto_python.VirgilCMSContentInfo_defineSize)
    else:
        defineSize = _virgil_crypto_python.VirgilCMSContentInfo_defineSize

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilCMSContentInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilCMSContentInfo
    __del__ = lambda self: None
VirgilCMSContentInfo_swigregister = _virgil_crypto_python.VirgilCMSContentInfo_swigregister
VirgilCMSContentInfo_swigregister(VirgilCMSContentInfo)

def VirgilCMSContentInfo_defineSize(data):
    return _virgil_crypto_python.VirgilCMSContentInfo_defineSize(data)
VirgilCMSContentInfo_defineSize = _virgil_crypto_python.VirgilCMSContentInfo_defineSize

class VirgilHash(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilHash, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilHash, name)
    __repr__ = _swig_repr
    Algorithm_MD5 = _virgil_crypto_python.VirgilHash_Algorithm_MD5
    Algorithm_SHA1 = _virgil_crypto_python.VirgilHash_Algorithm_SHA1
    Algorithm_SHA224 = _virgil_crypto_python.VirgilHash_Algorithm_SHA224
    Algorithm_SHA256 = _virgil_crypto_python.VirgilHash_Algorithm_SHA256
    Algorithm_SHA384 = _virgil_crypto_python.VirgilHash_Algorithm_SHA384
    Algorithm_SHA512 = _virgil_crypto_python.VirgilHash_Algorithm_SHA512

    def name(self):
        return _virgil_crypto_python.VirgilHash_name(self)

    def algorithm(self):
        return _virgil_crypto_python.VirgilHash_algorithm(self)

    def type(self):
        return _virgil_crypto_python.VirgilHash_type(self)

    def size(self):
        return _virgil_crypto_python.VirgilHash_size(self)

    def hash(self, data):
        return _virgil_crypto_python.VirgilHash_hash(self, data)

    def start(self):
        return _virgil_crypto_python.VirgilHash_start(self)

    def update(self, data):
        return _virgil_crypto_python.VirgilHash_update(self, data)

    def finish(self):
        return _virgil_crypto_python.VirgilHash_finish(self)

    def hmac(self, key, data):
        return _virgil_crypto_python.VirgilHash_hmac(self, key, data)

    def hmacStart(self, key):
        return _virgil_crypto_python.VirgilHash_hmacStart(self, key)

    def hmacReset(self):
        return _virgil_crypto_python.VirgilHash_hmacReset(self)

    def hmacUpdate(self, data):
        return _virgil_crypto_python.VirgilHash_hmacUpdate(self, data)

    def hmacFinish(self):
        return _virgil_crypto_python.VirgilHash_hmacFinish(self)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilHash
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilHash(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
VirgilHash_swigregister = _virgil_crypto_python.VirgilHash_swigregister
VirgilHash_swigregister(VirgilHash)

class VirgilKDF(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilKDF, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilKDF, name)
    __repr__ = _swig_repr
    Algorithm_KDF1 = _virgil_crypto_python.VirgilKDF_Algorithm_KDF1
    Algorithm_KDF2 = _virgil_crypto_python.VirgilKDF_Algorithm_KDF2

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilKDF(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def name(self):
        return _virgil_crypto_python.VirgilKDF_name(self)

    def derive(self, arg2, outSize):
        return _virgil_crypto_python.VirgilKDF_derive(self, arg2, outSize)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilKDF
    __del__ = lambda self: None
VirgilKDF_swigregister = _virgil_crypto_python.VirgilKDF_swigregister
VirgilKDF_swigregister(VirgilKDF)

class VirgilSymmetricCipher(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilSymmetricCipher, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilSymmetricCipher, name)
    __repr__ = _swig_repr
    Padding_PKCS7 = _virgil_crypto_python.VirgilSymmetricCipher_Padding_PKCS7
    Padding_OneAndZeros = _virgil_crypto_python.VirgilSymmetricCipher_Padding_OneAndZeros
    Padding_ZerosAndLen = _virgil_crypto_python.VirgilSymmetricCipher_Padding_ZerosAndLen
    Padding_Zeros = _virgil_crypto_python.VirgilSymmetricCipher_Padding_Zeros
    Padding__None = _virgil_crypto_python.VirgilSymmetricCipher_Padding__None
    Algorithm_AES_128_CBC = _virgil_crypto_python.VirgilSymmetricCipher_Algorithm_AES_128_CBC
    Algorithm_AES_128_GCM = _virgil_crypto_python.VirgilSymmetricCipher_Algorithm_AES_128_GCM
    Algorithm_AES_256_CBC = _virgil_crypto_python.VirgilSymmetricCipher_Algorithm_AES_256_CBC
    Algorithm_AES_256_GCM = _virgil_crypto_python.VirgilSymmetricCipher_Algorithm_AES_256_GCM

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilSymmetricCipher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isInited(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_isInited(self)

    def name(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_name(self)

    def blockSize(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_blockSize(self)

    def ivSize(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_ivSize(self)

    def keySize(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_keySize(self)

    def keyLength(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_keyLength(self)

    def authTagLength(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_authTagLength(self)

    def isEncryptionMode(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_isEncryptionMode(self)

    def isDecryptionMode(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_isDecryptionMode(self)

    def isAuthMode(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_isAuthMode(self)

    def isSupportPadding(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_isSupportPadding(self)

    def iv(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_iv(self)

    def setEncryptionKey(self, key):
        return _virgil_crypto_python.VirgilSymmetricCipher_setEncryptionKey(self, key)

    def setDecryptionKey(self, key):
        return _virgil_crypto_python.VirgilSymmetricCipher_setDecryptionKey(self, key)

    def setPadding(self, padding):
        return _virgil_crypto_python.VirgilSymmetricCipher_setPadding(self, padding)

    def setIV(self, iv):
        return _virgil_crypto_python.VirgilSymmetricCipher_setIV(self, iv)

    def setAuthData(self, authData):
        return _virgil_crypto_python.VirgilSymmetricCipher_setAuthData(self, authData)

    def reset(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_reset(self)

    def clear(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_clear(self)

    def crypt(self, input, iv):
        return _virgil_crypto_python.VirgilSymmetricCipher_crypt(self, input, iv)

    def update(self, input):
        return _virgil_crypto_python.VirgilSymmetricCipher_update(self, input)

    def finish(self):
        return _virgil_crypto_python.VirgilSymmetricCipher_finish(self)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilSymmetricCipher
    __del__ = lambda self: None
VirgilSymmetricCipher_swigregister = _virgil_crypto_python.VirgilSymmetricCipher_swigregister
VirgilSymmetricCipher_swigregister(VirgilSymmetricCipher)

class VirgilAsymmetricCipher(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilAsymmetricCipher, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilAsymmetricCipher, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _virgil_crypto_python.new_VirgilAsymmetricCipher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def keySize(self):
        return _virgil_crypto_python.VirgilAsymmetricCipher_keySize(self)

    def keyLength(self):
        return _virgil_crypto_python.VirgilAsymmetricCipher_keyLength(self)
    if _newclass:
        isKeyPairMatch = staticmethod(_virgil_crypto_python.VirgilAsymmetricCipher_isKeyPairMatch)
    else:
        isKeyPairMatch = _virgil_crypto_python.VirgilAsymmetricCipher_isKeyPairMatch
    if _newclass:
        isPublicKeyValid = staticmethod(_virgil_crypto_python.VirgilAsymmetricCipher_isPublicKeyValid)
    else:
        isPublicKeyValid = _virgil_crypto_python.VirgilAsymmetricCipher_isPublicKeyValid
    if _newclass:
        checkPublicKey = staticmethod(_virgil_crypto_python.VirgilAsymmetricCipher_checkPublicKey)
    else:
        checkPublicKey = _virgil_crypto_python.VirgilAsymmetricCipher_checkPublicKey
    if _newclass:
        checkPrivateKeyPassword = staticmethod(_virgil_crypto_python.VirgilAsymmetricCipher_checkPrivateKeyPassword)
    else:
        checkPrivateKeyPassword = _virgil_crypto_python.VirgilAsymmetricCipher_checkPrivateKeyPassword
    if _newclass:
        isPrivateKeyEncrypted = staticmethod(_virgil_crypto_python.VirgilAsymmetricCipher_isPrivateKeyEncrypted)
    else:
        isPrivateKeyEncrypted = _virgil_crypto_python.VirgilAsymmetricCipher_isPrivateKeyEncrypted

    def setPrivateKey(self, *args):
        return _virgil_crypto_python.VirgilAsymmetricCipher_setPrivateKey(self, *args)

    def setPublicKey(self, key):
        return _virgil_crypto_python.VirgilAsymmetricCipher_setPublicKey(self, key)

    def genKeyPair(self, type):
        return _virgil_crypto_python.VirgilAsymmetricCipher_genKeyPair(self, type)

    def genKeyPairFrom(self, other):
        return _virgil_crypto_python.VirgilAsymmetricCipher_genKeyPairFrom(self, other)

    def genKeyPairFromKeyMaterial(self, type, keyMaterial):
        return _virgil_crypto_python.VirgilAsymmetricCipher_genKeyPairFromKeyMaterial(self, type, keyMaterial)
    if _newclass:
        computeShared = staticmethod(_virgil_crypto_python.VirgilAsymmetricCipher_computeShared)
    else:
        computeShared = _virgil_crypto_python.VirgilAsymmetricCipher_computeShared

    def exportPrivateKeyToDER(self, *args):
        return _virgil_crypto_python.VirgilAsymmetricCipher_exportPrivateKeyToDER(self, *args)

    def exportPublicKeyToDER(self):
        return _virgil_crypto_python.VirgilAsymmetricCipher_exportPublicKeyToDER(self)

    def exportPrivateKeyToPEM(self, *args):
        return _virgil_crypto_python.VirgilAsymmetricCipher_exportPrivateKeyToPEM(self, *args)

    def exportPublicKeyToPEM(self):
        return _virgil_crypto_python.VirgilAsymmetricCipher_exportPublicKeyToPEM(self)

    def getKeyType(self):
        return _virgil_crypto_python.VirgilAsymmetricCipher_getKeyType(self)

    def setKeyType(self, keyType):
        return _virgil_crypto_python.VirgilAsymmetricCipher_setKeyType(self, keyType)

    def getPublicKeyBits(self):
        return _virgil_crypto_python.VirgilAsymmetricCipher_getPublicKeyBits(self)

    def setPublicKeyBits(self, bits):
        return _virgil_crypto_python.VirgilAsymmetricCipher_setPublicKeyBits(self, bits)

    def encrypt(self, arg2):
        return _virgil_crypto_python.VirgilAsymmetricCipher_encrypt(self, arg2)

    def decrypt(self, arg2):
        return _virgil_crypto_python.VirgilAsymmetricCipher_decrypt(self, arg2)

    def sign(self, digest, hashType):
        return _virgil_crypto_python.VirgilAsymmetricCipher_sign(self, digest, hashType)

    def verify(self, digest, sign, hashType):
        return _virgil_crypto_python.VirgilAsymmetricCipher_verify(self, digest, sign, hashType)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilAsymmetricCipher
    __del__ = lambda self: None
VirgilAsymmetricCipher_swigregister = _virgil_crypto_python.VirgilAsymmetricCipher_swigregister
VirgilAsymmetricCipher_swigregister(VirgilAsymmetricCipher)

def VirgilAsymmetricCipher_isKeyPairMatch(*args):
    return _virgil_crypto_python.VirgilAsymmetricCipher_isKeyPairMatch(*args)
VirgilAsymmetricCipher_isKeyPairMatch = _virgil_crypto_python.VirgilAsymmetricCipher_isKeyPairMatch

def VirgilAsymmetricCipher_isPublicKeyValid(key):
    return _virgil_crypto_python.VirgilAsymmetricCipher_isPublicKeyValid(key)
VirgilAsymmetricCipher_isPublicKeyValid = _virgil_crypto_python.VirgilAsymmetricCipher_isPublicKeyValid

def VirgilAsymmetricCipher_checkPublicKey(key):
    return _virgil_crypto_python.VirgilAsymmetricCipher_checkPublicKey(key)
VirgilAsymmetricCipher_checkPublicKey = _virgil_crypto_python.VirgilAsymmetricCipher_checkPublicKey

def VirgilAsymmetricCipher_checkPrivateKeyPassword(key, pwd):
    return _virgil_crypto_python.VirgilAsymmetricCipher_checkPrivateKeyPassword(key, pwd)
VirgilAsymmetricCipher_checkPrivateKeyPassword = _virgil_crypto_python.VirgilAsymmetricCipher_checkPrivateKeyPassword

def VirgilAsymmetricCipher_isPrivateKeyEncrypted(privateKey):
    return _virgil_crypto_python.VirgilAsymmetricCipher_isPrivateKeyEncrypted(privateKey)
VirgilAsymmetricCipher_isPrivateKeyEncrypted = _virgil_crypto_python.VirgilAsymmetricCipher_isPrivateKeyEncrypted

def VirgilAsymmetricCipher_computeShared(publicContext, privateContext):
    return _virgil_crypto_python.VirgilAsymmetricCipher_computeShared(publicContext, privateContext)
VirgilAsymmetricCipher_computeShared = _virgil_crypto_python.VirgilAsymmetricCipher_computeShared

class VirgilPBE(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilPBE, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilPBE, name)
    __repr__ = _swig_repr
    Algorithm_PKCS5 = _virgil_crypto_python.VirgilPBE_Algorithm_PKCS5
    Algorithm_PKCS12 = _virgil_crypto_python.VirgilPBE_Algorithm_PKCS12
    kIterationCountMin = _virgil_crypto_python.VirgilPBE_kIterationCountMin

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilPBE(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def encrypt(self, data, pwd):
        return _virgil_crypto_python.VirgilPBE_encrypt(self, data, pwd)

    def decrypt(self, data, pwd):
        return _virgil_crypto_python.VirgilPBE_decrypt(self, data, pwd)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilPBE
    __del__ = lambda self: None
VirgilPBE_swigregister = _virgil_crypto_python.VirgilPBE_swigregister
VirgilPBE_swigregister(VirgilPBE)

class VirgilHKDF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilHKDF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilHKDF, name)
    __repr__ = _swig_repr

    def __init__(self, hashAlgorithm):
        this = _virgil_crypto_python.new_VirgilHKDF(hashAlgorithm)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def derive(self, arg2, salt, info, outSize):
        return _virgil_crypto_python.VirgilHKDF_derive(self, arg2, salt, info, outSize)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilHKDF
    __del__ = lambda self: None
VirgilHKDF_swigregister = _virgil_crypto_python.VirgilHKDF_swigregister
VirgilHKDF_swigregister(VirgilHKDF)

class VirgilBase64(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilBase64, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilBase64, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        encode = staticmethod(_virgil_crypto_python.VirgilBase64_encode)
    else:
        encode = _virgil_crypto_python.VirgilBase64_encode
    if _newclass:
        decode = staticmethod(_virgil_crypto_python.VirgilBase64_decode)
    else:
        decode = _virgil_crypto_python.VirgilBase64_decode
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilBase64
    __del__ = lambda self: None
VirgilBase64_swigregister = _virgil_crypto_python.VirgilBase64_swigregister
VirgilBase64_swigregister(VirgilBase64)

def VirgilBase64_encode(data):
    return _virgil_crypto_python.VirgilBase64_encode(data)
VirgilBase64_encode = _virgil_crypto_python.VirgilBase64_encode

def VirgilBase64_decode(base64str):
    return _virgil_crypto_python.VirgilBase64_decode(base64str)
VirgilBase64_decode = _virgil_crypto_python.VirgilBase64_decode

class VirgilPBKDF(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilPBKDF, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilPBKDF, name)
    __repr__ = _swig_repr
    kIterationCount_Default = _virgil_crypto_python.VirgilPBKDF_kIterationCount_Default
    Algorithm_PBKDF2 = _virgil_crypto_python.VirgilPBKDF_Algorithm_PBKDF2

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilPBKDF(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getSalt(self):
        return _virgil_crypto_python.VirgilPBKDF_getSalt(self)

    def getIterationCount(self):
        return _virgil_crypto_python.VirgilPBKDF_getIterationCount(self)

    def setAlgorithm(self, alg):
        return _virgil_crypto_python.VirgilPBKDF_setAlgorithm(self, alg)

    def getAlgorithm(self):
        return _virgil_crypto_python.VirgilPBKDF_getAlgorithm(self)

    def setHashAlgorithm(self, hash):
        return _virgil_crypto_python.VirgilPBKDF_setHashAlgorithm(self, hash)

    def getHashAlgorithm(self):
        return _virgil_crypto_python.VirgilPBKDF_getHashAlgorithm(self)

    def enableRecommendationsCheck(self):
        return _virgil_crypto_python.VirgilPBKDF_enableRecommendationsCheck(self)

    def disableRecommendationsCheck(self):
        return _virgil_crypto_python.VirgilPBKDF_disableRecommendationsCheck(self)

    def derive(self, pwd, outSize=0):
        return _virgil_crypto_python.VirgilPBKDF_derive(self, pwd, outSize)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilPBKDF
    __del__ = lambda self: None
VirgilPBKDF_swigregister = _virgil_crypto_python.VirgilPBKDF_swigregister
VirgilPBKDF_swigregister(VirgilPBKDF)

class VirgilRandom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilRandom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilRandom, name)
    __repr__ = _swig_repr

    def randomize(self, *args):
        return _virgil_crypto_python.VirgilRandom_randomize(self, *args)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilRandom
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilRandom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
VirgilRandom_swigregister = _virgil_crypto_python.VirgilRandom_swigregister
VirgilRandom_swigregister(VirgilRandom)

VIRGIL_CRYPTO_FEATURE_STREAM_IMPL = _virgil_crypto_python.VIRGIL_CRYPTO_FEATURE_STREAM_IMPL
VIRGIL_CRYPTO_FEATURE_PYTHIA_MT = _virgil_crypto_python.VIRGIL_CRYPTO_FEATURE_PYTHIA_MT
class VirgilConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilConfig, name)
    __repr__ = _swig_repr
    if _newclass:
        hasFeatureStreamImpl = staticmethod(_virgil_crypto_python.VirgilConfig_hasFeatureStreamImpl)
    else:
        hasFeatureStreamImpl = _virgil_crypto_python.VirgilConfig_hasFeatureStreamImpl
    if _newclass:
        hasFeaturePythiaImpl = staticmethod(_virgil_crypto_python.VirgilConfig_hasFeaturePythiaImpl)
    else:
        hasFeaturePythiaImpl = _virgil_crypto_python.VirgilConfig_hasFeaturePythiaImpl
    if _newclass:
        hasFeaturePythiaMultiThread = staticmethod(_virgil_crypto_python.VirgilConfig_hasFeaturePythiaMultiThread)
    else:
        hasFeaturePythiaMultiThread = _virgil_crypto_python.VirgilConfig_hasFeaturePythiaMultiThread

    def __init__(self):
        this = _virgil_crypto_python.new_VirgilConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilConfig
    __del__ = lambda self: None
VirgilConfig_swigregister = _virgil_crypto_python.VirgilConfig_swigregister
VirgilConfig_swigregister(VirgilConfig)

def VirgilConfig_hasFeatureStreamImpl():
    return _virgil_crypto_python.VirgilConfig_hasFeatureStreamImpl()
VirgilConfig_hasFeatureStreamImpl = _virgil_crypto_python.VirgilConfig_hasFeatureStreamImpl

def VirgilConfig_hasFeaturePythiaImpl():
    return _virgil_crypto_python.VirgilConfig_hasFeaturePythiaImpl()
VirgilConfig_hasFeaturePythiaImpl = _virgil_crypto_python.VirgilConfig_hasFeaturePythiaImpl

def VirgilConfig_hasFeaturePythiaMultiThread():
    return _virgil_crypto_python.VirgilConfig_hasFeaturePythiaMultiThread()
VirgilConfig_hasFeaturePythiaMultiThread = _virgil_crypto_python.VirgilConfig_hasFeaturePythiaMultiThread

class VirgilCustomParams(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilCustomParams, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilCustomParams, name)
    __repr__ = _swig_repr

    def isEmpty(self):
        return _virgil_crypto_python.VirgilCustomParams_isEmpty(self)

    def setInteger(self, key, value):
        return _virgil_crypto_python.VirgilCustomParams_setInteger(self, key, value)

    def getInteger(self, key):
        return _virgil_crypto_python.VirgilCustomParams_getInteger(self, key)

    def removeInteger(self, key):
        return _virgil_crypto_python.VirgilCustomParams_removeInteger(self, key)

    def setString(self, key, value):
        return _virgil_crypto_python.VirgilCustomParams_setString(self, key, value)

    def getString(self, key):
        return _virgil_crypto_python.VirgilCustomParams_getString(self, key)

    def removeString(self, key):
        return _virgil_crypto_python.VirgilCustomParams_removeString(self, key)

    def setData(self, key, value):
        return _virgil_crypto_python.VirgilCustomParams_setData(self, key, value)

    def getData(self, key):
        return _virgil_crypto_python.VirgilCustomParams_getData(self, key)

    def removeData(self, key):
        return _virgil_crypto_python.VirgilCustomParams_removeData(self, key)

    def clear(self):
        return _virgil_crypto_python.VirgilCustomParams_clear(self)

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilCustomParams(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilCustomParams
    __del__ = lambda self: None
VirgilCustomParams_swigregister = _virgil_crypto_python.VirgilCustomParams_swigregister
VirgilCustomParams_swigregister(VirgilCustomParams)

class VirgilCipherBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilCipherBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilCipherBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _virgil_crypto_python.new_VirgilCipherBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addKeyRecipient(self, recipientId, publicKey):
        return _virgil_crypto_python.VirgilCipherBase_addKeyRecipient(self, recipientId, publicKey)

    def removeKeyRecipient(self, recipientId):
        return _virgil_crypto_python.VirgilCipherBase_removeKeyRecipient(self, recipientId)

    def keyRecipientExists(self, recipientId):
        return _virgil_crypto_python.VirgilCipherBase_keyRecipientExists(self, recipientId)

    def addPasswordRecipient(self, pwd):
        return _virgil_crypto_python.VirgilCipherBase_addPasswordRecipient(self, pwd)

    def removePasswordRecipient(self, pwd):
        return _virgil_crypto_python.VirgilCipherBase_removePasswordRecipient(self, pwd)

    def passwordRecipientExists(self, password):
        return _virgil_crypto_python.VirgilCipherBase_passwordRecipientExists(self, password)

    def removeAllRecipients(self):
        return _virgil_crypto_python.VirgilCipherBase_removeAllRecipients(self)

    def getContentInfo(self):
        return _virgil_crypto_python.VirgilCipherBase_getContentInfo(self)

    def setContentInfo(self, contentInfo):
        return _virgil_crypto_python.VirgilCipherBase_setContentInfo(self, contentInfo)
    if _newclass:
        defineContentInfoSize = staticmethod(_virgil_crypto_python.VirgilCipherBase_defineContentInfoSize)
    else:
        defineContentInfoSize = _virgil_crypto_python.VirgilCipherBase_defineContentInfoSize

    def customParams(self, *args):
        return _virgil_crypto_python.VirgilCipherBase_customParams(self, *args)
    if _newclass:
        computeShared = staticmethod(_virgil_crypto_python.VirgilCipherBase_computeShared)
    else:
        computeShared = _virgil_crypto_python.VirgilCipherBase_computeShared
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilCipherBase
    __del__ = lambda self: None
VirgilCipherBase_swigregister = _virgil_crypto_python.VirgilCipherBase_swigregister
VirgilCipherBase_swigregister(VirgilCipherBase)

def VirgilCipherBase_defineContentInfoSize(data):
    return _virgil_crypto_python.VirgilCipherBase_defineContentInfoSize(data)
VirgilCipherBase_defineContentInfoSize = _virgil_crypto_python.VirgilCipherBase_defineContentInfoSize

def VirgilCipherBase_computeShared(*args):
    return _virgil_crypto_python.VirgilCipherBase_computeShared(*args)
VirgilCipherBase_computeShared = _virgil_crypto_python.VirgilCipherBase_computeShared

class VirgilCipher(VirgilCipherBase):
    __swig_setmethods__ = {}
    for _s in [VirgilCipherBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilCipher, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilCipherBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilCipher, name)
    __repr__ = _swig_repr

    def encrypt(self, data, embedContentInfo=True):
        return _virgil_crypto_python.VirgilCipher_encrypt(self, data, embedContentInfo)

    def decryptWithKey(self, *args):
        return _virgil_crypto_python.VirgilCipher_decryptWithKey(self, *args)

    def decryptWithPassword(self, encryptedData, pwd):
        return _virgil_crypto_python.VirgilCipher_decryptWithPassword(self, encryptedData, pwd)

    def __init__(self):
        this = _virgil_crypto_python.new_VirgilCipher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilCipher
    __del__ = lambda self: None
VirgilCipher_swigregister = _virgil_crypto_python.VirgilCipher_swigregister
VirgilCipher_swigregister(VirgilCipher)

class VirgilChunkCipher(VirgilCipherBase):
    __swig_setmethods__ = {}
    for _s in [VirgilCipherBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilChunkCipher, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilCipherBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilChunkCipher, name)
    __repr__ = _swig_repr
    kPreferredChunkSize = _virgil_crypto_python.VirgilChunkCipher_kPreferredChunkSize

    def encrypt(self, *args):
        return _virgil_crypto_python.VirgilChunkCipher_encrypt(self, *args)

    def decryptWithKey(self, *args):
        return _virgil_crypto_python.VirgilChunkCipher_decryptWithKey(self, *args)

    def decryptWithPassword(self, source, sink, pwd):
        return _virgil_crypto_python.VirgilChunkCipher_decryptWithPassword(self, source, sink, pwd)

    def __init__(self):
        this = _virgil_crypto_python.new_VirgilChunkCipher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilChunkCipher
    __del__ = lambda self: None
VirgilChunkCipher_swigregister = _virgil_crypto_python.VirgilChunkCipher_swigregister
VirgilChunkCipher_swigregister(VirgilChunkCipher)

class VirgilSeqCipher(VirgilCipherBase):
    __swig_setmethods__ = {}
    for _s in [VirgilCipherBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilSeqCipher, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilCipherBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilSeqCipher, name)
    __repr__ = _swig_repr

    def startEncryption(self):
        return _virgil_crypto_python.VirgilSeqCipher_startEncryption(self)

    def startDecryptionWithKey(self, *args):
        return _virgil_crypto_python.VirgilSeqCipher_startDecryptionWithKey(self, *args)

    def startDecryptionWithPassword(self, pwd):
        return _virgil_crypto_python.VirgilSeqCipher_startDecryptionWithPassword(self, pwd)

    def process(self, data):
        return _virgil_crypto_python.VirgilSeqCipher_process(self, data)

    def finish(self):
        return _virgil_crypto_python.VirgilSeqCipher_finish(self)

    def __init__(self):
        this = _virgil_crypto_python.new_VirgilSeqCipher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilSeqCipher
    __del__ = lambda self: None
VirgilSeqCipher_swigregister = _virgil_crypto_python.VirgilSeqCipher_swigregister
VirgilSeqCipher_swigregister(VirgilSeqCipher)

class VirgilSignerBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilSignerBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilSignerBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilSignerBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getHashAlgorithm(self):
        return _virgil_crypto_python.VirgilSignerBase_getHashAlgorithm(self)

    def signHash(self, *args):
        return _virgil_crypto_python.VirgilSignerBase_signHash(self, *args)

    def verifyHash(self, digest, signature, publicKey):
        return _virgil_crypto_python.VirgilSignerBase_verifyHash(self, digest, signature, publicKey)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilSignerBase
    __del__ = lambda self: None
VirgilSignerBase_swigregister = _virgil_crypto_python.VirgilSignerBase_swigregister
VirgilSignerBase_swigregister(VirgilSignerBase)

class VirgilSigner(VirgilSignerBase):
    __swig_setmethods__ = {}
    for _s in [VirgilSignerBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilSigner, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilSignerBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilSigner, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilSigner(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def sign(self, *args):
        return _virgil_crypto_python.VirgilSigner_sign(self, *args)

    def verify(self, data, sign, publicKey):
        return _virgil_crypto_python.VirgilSigner_verify(self, data, sign, publicKey)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilSigner
    __del__ = lambda self: None
VirgilSigner_swigregister = _virgil_crypto_python.VirgilSigner_swigregister
VirgilSigner_swigregister(VirgilSigner)

class VirgilSeqSigner(VirgilSignerBase):
    __swig_setmethods__ = {}
    for _s in [VirgilSignerBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilSeqSigner, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilSignerBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilSeqSigner, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilSeqSigner(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def startSigning(self):
        return _virgil_crypto_python.VirgilSeqSigner_startSigning(self)

    def startVerifying(self, signature):
        return _virgil_crypto_python.VirgilSeqSigner_startVerifying(self, signature)

    def update(self, data):
        return _virgil_crypto_python.VirgilSeqSigner_update(self, data)

    def sign(self, *args):
        return _virgil_crypto_python.VirgilSeqSigner_sign(self, *args)

    def verify(self, publicKey):
        return _virgil_crypto_python.VirgilSeqSigner_verify(self, publicKey)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilSeqSigner
    __del__ = lambda self: None
VirgilSeqSigner_swigregister = _virgil_crypto_python.VirgilSeqSigner_swigregister
VirgilSeqSigner_swigregister(VirgilSeqSigner)

class VirgilStreamSigner(VirgilSignerBase):
    __swig_setmethods__ = {}
    for _s in [VirgilSignerBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilStreamSigner, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilSignerBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilStreamSigner, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilStreamSigner(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def sign(self, *args):
        return _virgil_crypto_python.VirgilStreamSigner_sign(self, *args)

    def verify(self, source, sign, publicKey):
        return _virgil_crypto_python.VirgilStreamSigner_verify(self, source, sign, publicKey)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilStreamSigner
    __del__ = lambda self: None
VirgilStreamSigner_swigregister = _virgil_crypto_python.VirgilStreamSigner_swigregister
VirgilStreamSigner_swigregister(VirgilStreamSigner)

class VirgilStreamCipher(VirgilCipherBase):
    __swig_setmethods__ = {}
    for _s in [VirgilCipherBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilStreamCipher, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilCipherBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilStreamCipher, name)
    __repr__ = _swig_repr

    def encrypt(self, source, sink, embedContentInfo=True):
        return _virgil_crypto_python.VirgilStreamCipher_encrypt(self, source, sink, embedContentInfo)

    def decryptWithKey(self, *args):
        return _virgil_crypto_python.VirgilStreamCipher_decryptWithKey(self, *args)

    def decryptWithPassword(self, source, sink, pwd):
        return _virgil_crypto_python.VirgilStreamCipher_decryptWithPassword(self, source, sink, pwd)

    def __init__(self):
        this = _virgil_crypto_python.new_VirgilStreamCipher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilStreamCipher
    __del__ = lambda self: None
VirgilStreamCipher_swigregister = _virgil_crypto_python.VirgilStreamCipher_swigregister
VirgilStreamCipher_swigregister(VirgilStreamCipher)

class VirgilTinyCipher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilTinyCipher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilTinyCipher, name)
    __repr__ = _swig_repr
    PackageSize_Min = _virgil_crypto_python.VirgilTinyCipher_PackageSize_Min
    PackageSize_Short_SMS = _virgil_crypto_python.VirgilTinyCipher_PackageSize_Short_SMS
    PackageSize_Long_SMS = _virgil_crypto_python.VirgilTinyCipher_PackageSize_Long_SMS

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilTinyCipher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _virgil_crypto_python.VirgilTinyCipher_reset(self)

    def encrypt(self, data, recipientPublicKey):
        return _virgil_crypto_python.VirgilTinyCipher_encrypt(self, data, recipientPublicKey)

    def encryptAndSign(self, *args):
        return _virgil_crypto_python.VirgilTinyCipher_encryptAndSign(self, *args)

    def getPackageCount(self):
        return _virgil_crypto_python.VirgilTinyCipher_getPackageCount(self)

    def getPackage(self, index):
        return _virgil_crypto_python.VirgilTinyCipher_getPackage(self, index)

    def addPackage(self, package):
        return _virgil_crypto_python.VirgilTinyCipher_addPackage(self, package)

    def isPackagesAccumulated(self):
        return _virgil_crypto_python.VirgilTinyCipher_isPackagesAccumulated(self)

    def decrypt(self, *args):
        return _virgil_crypto_python.VirgilTinyCipher_decrypt(self, *args)

    def verifyAndDecrypt(self, *args):
        return _virgil_crypto_python.VirgilTinyCipher_verifyAndDecrypt(self, *args)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilTinyCipher
    __del__ = lambda self: None
VirgilTinyCipher_swigregister = _virgil_crypto_python.VirgilTinyCipher_swigregister
VirgilTinyCipher_swigregister(VirgilTinyCipher)

class VirgilByteArrayUtils(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilByteArrayUtils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilByteArrayUtils, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        jsonToBytes = staticmethod(_virgil_crypto_python.VirgilByteArrayUtils_jsonToBytes)
    else:
        jsonToBytes = _virgil_crypto_python.VirgilByteArrayUtils_jsonToBytes
    if _newclass:
        stringToBytes = staticmethod(_virgil_crypto_python.VirgilByteArrayUtils_stringToBytes)
    else:
        stringToBytes = _virgil_crypto_python.VirgilByteArrayUtils_stringToBytes
    if _newclass:
        bytesToString = staticmethod(_virgil_crypto_python.VirgilByteArrayUtils_bytesToString)
    else:
        bytesToString = _virgil_crypto_python.VirgilByteArrayUtils_bytesToString
    if _newclass:
        hexToBytes = staticmethod(_virgil_crypto_python.VirgilByteArrayUtils_hexToBytes)
    else:
        hexToBytes = _virgil_crypto_python.VirgilByteArrayUtils_hexToBytes
    if _newclass:
        bytesToHex = staticmethod(_virgil_crypto_python.VirgilByteArrayUtils_bytesToHex)
    else:
        bytesToHex = _virgil_crypto_python.VirgilByteArrayUtils_bytesToHex
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilByteArrayUtils
    __del__ = lambda self: None
VirgilByteArrayUtils_swigregister = _virgil_crypto_python.VirgilByteArrayUtils_swigregister
VirgilByteArrayUtils_swigregister(VirgilByteArrayUtils)

def VirgilByteArrayUtils_jsonToBytes(json):
    return _virgil_crypto_python.VirgilByteArrayUtils_jsonToBytes(json)
VirgilByteArrayUtils_jsonToBytes = _virgil_crypto_python.VirgilByteArrayUtils_jsonToBytes

def VirgilByteArrayUtils_stringToBytes(str):
    return _virgil_crypto_python.VirgilByteArrayUtils_stringToBytes(str)
VirgilByteArrayUtils_stringToBytes = _virgil_crypto_python.VirgilByteArrayUtils_stringToBytes

def VirgilByteArrayUtils_bytesToString(array):
    return _virgil_crypto_python.VirgilByteArrayUtils_bytesToString(array)
VirgilByteArrayUtils_bytesToString = _virgil_crypto_python.VirgilByteArrayUtils_bytesToString

def VirgilByteArrayUtils_hexToBytes(hexStr):
    return _virgil_crypto_python.VirgilByteArrayUtils_hexToBytes(hexStr)
VirgilByteArrayUtils_hexToBytes = _virgil_crypto_python.VirgilByteArrayUtils_hexToBytes

def VirgilByteArrayUtils_bytesToHex(array, formatted=False):
    return _virgil_crypto_python.VirgilByteArrayUtils_bytesToHex(array, formatted)
VirgilByteArrayUtils_bytesToHex = _virgil_crypto_python.VirgilByteArrayUtils_bytesToHex

class VirgilPFSEncryptedMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilPFSEncryptedMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilPFSEncryptedMessage, name)
    __repr__ = _swig_repr

    def __init__(self, sessionIdentifier, salt, cipherText):
        this = _virgil_crypto_python.new_VirgilPFSEncryptedMessage(sessionIdentifier, salt, cipherText)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getSessionIdentifier(self):
        return _virgil_crypto_python.VirgilPFSEncryptedMessage_getSessionIdentifier(self)

    def getSalt(self):
        return _virgil_crypto_python.VirgilPFSEncryptedMessage_getSalt(self)

    def getCipherText(self):
        return _virgil_crypto_python.VirgilPFSEncryptedMessage_getCipherText(self)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilPFSEncryptedMessage
    __del__ = lambda self: None
VirgilPFSEncryptedMessage_swigregister = _virgil_crypto_python.VirgilPFSEncryptedMessage_swigregister
VirgilPFSEncryptedMessage_swigregister(VirgilPFSEncryptedMessage)

class VirgilPFSPublicKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilPFSPublicKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilPFSPublicKey, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilPFSPublicKey(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isEmpty(self):
        return _virgil_crypto_python.VirgilPFSPublicKey_isEmpty(self)

    def getKey(self):
        return _virgil_crypto_python.VirgilPFSPublicKey_getKey(self)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilPFSPublicKey
    __del__ = lambda self: None
VirgilPFSPublicKey_swigregister = _virgil_crypto_python.VirgilPFSPublicKey_swigregister
VirgilPFSPublicKey_swigregister(VirgilPFSPublicKey)

class VirgilPFSPrivateKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilPFSPrivateKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilPFSPrivateKey, name)
    __repr__ = _swig_repr

    def isEmpty(self):
        return _virgil_crypto_python.VirgilPFSPrivateKey_isEmpty(self)

    def getKey(self):
        return _virgil_crypto_python.VirgilPFSPrivateKey_getKey(self)

    def getPassword(self):
        return _virgil_crypto_python.VirgilPFSPrivateKey_getPassword(self)

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilPFSPrivateKey(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilPFSPrivateKey
    __del__ = lambda self: None
VirgilPFSPrivateKey_swigregister = _virgil_crypto_python.VirgilPFSPrivateKey_swigregister
VirgilPFSPrivateKey_swigregister(VirgilPFSPrivateKey)

class VirgilPFSInitiatorPublicInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilPFSInitiatorPublicInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilPFSInitiatorPublicInfo, name)
    __repr__ = _swig_repr

    def __init__(self, identityPublicKey, ephemeralPublicKey):
        this = _virgil_crypto_python.new_VirgilPFSInitiatorPublicInfo(identityPublicKey, ephemeralPublicKey)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getIdentityPublicKey(self):
        return _virgil_crypto_python.VirgilPFSInitiatorPublicInfo_getIdentityPublicKey(self)

    def getEphemeralPublicKey(self):
        return _virgil_crypto_python.VirgilPFSInitiatorPublicInfo_getEphemeralPublicKey(self)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilPFSInitiatorPublicInfo
    __del__ = lambda self: None
VirgilPFSInitiatorPublicInfo_swigregister = _virgil_crypto_python.VirgilPFSInitiatorPublicInfo_swigregister
VirgilPFSInitiatorPublicInfo_swigregister(VirgilPFSInitiatorPublicInfo)

class VirgilPFSInitiatorPrivateInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilPFSInitiatorPrivateInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilPFSInitiatorPrivateInfo, name)
    __repr__ = _swig_repr

    def __init__(self, identityPrivateKey, ephemeralPrivateKey):
        this = _virgil_crypto_python.new_VirgilPFSInitiatorPrivateInfo(identityPrivateKey, ephemeralPrivateKey)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getIdentityPrivateKey(self):
        return _virgil_crypto_python.VirgilPFSInitiatorPrivateInfo_getIdentityPrivateKey(self)

    def getEphemeralPrivateKey(self):
        return _virgil_crypto_python.VirgilPFSInitiatorPrivateInfo_getEphemeralPrivateKey(self)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilPFSInitiatorPrivateInfo
    __del__ = lambda self: None
VirgilPFSInitiatorPrivateInfo_swigregister = _virgil_crypto_python.VirgilPFSInitiatorPrivateInfo_swigregister
VirgilPFSInitiatorPrivateInfo_swigregister(VirgilPFSInitiatorPrivateInfo)

class VirgilPFSResponderPublicInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilPFSResponderPublicInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilPFSResponderPublicInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilPFSResponderPublicInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getIdentityPublicKey(self):
        return _virgil_crypto_python.VirgilPFSResponderPublicInfo_getIdentityPublicKey(self)

    def getLongTermPublicKey(self):
        return _virgil_crypto_python.VirgilPFSResponderPublicInfo_getLongTermPublicKey(self)

    def getOneTimePublicKey(self):
        return _virgil_crypto_python.VirgilPFSResponderPublicInfo_getOneTimePublicKey(self)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilPFSResponderPublicInfo
    __del__ = lambda self: None
VirgilPFSResponderPublicInfo_swigregister = _virgil_crypto_python.VirgilPFSResponderPublicInfo_swigregister
VirgilPFSResponderPublicInfo_swigregister(VirgilPFSResponderPublicInfo)

class VirgilPFSResponderPrivateInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilPFSResponderPrivateInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilPFSResponderPrivateInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilPFSResponderPrivateInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getIdentityPrivateKey(self):
        return _virgil_crypto_python.VirgilPFSResponderPrivateInfo_getIdentityPrivateKey(self)

    def getLongTermPrivateKey(self):
        return _virgil_crypto_python.VirgilPFSResponderPrivateInfo_getLongTermPrivateKey(self)

    def getOneTimePrivateKey(self):
        return _virgil_crypto_python.VirgilPFSResponderPrivateInfo_getOneTimePrivateKey(self)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilPFSResponderPrivateInfo
    __del__ = lambda self: None
VirgilPFSResponderPrivateInfo_swigregister = _virgil_crypto_python.VirgilPFSResponderPrivateInfo_swigregister
VirgilPFSResponderPrivateInfo_swigregister(VirgilPFSResponderPrivateInfo)

class VirgilPFSSession(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilPFSSession, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilPFSSession, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilPFSSession(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isEmpty(self):
        return _virgil_crypto_python.VirgilPFSSession_isEmpty(self)

    def getIdentifier(self):
        return _virgil_crypto_python.VirgilPFSSession_getIdentifier(self)

    def getEncryptionSecretKey(self):
        return _virgil_crypto_python.VirgilPFSSession_getEncryptionSecretKey(self)

    def getDecryptionSecretKey(self):
        return _virgil_crypto_python.VirgilPFSSession_getDecryptionSecretKey(self)

    def getAdditionalData(self):
        return _virgil_crypto_python.VirgilPFSSession_getAdditionalData(self)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilPFSSession
    __del__ = lambda self: None
VirgilPFSSession_swigregister = _virgil_crypto_python.VirgilPFSSession_swigregister
VirgilPFSSession_swigregister(VirgilPFSSession)

class VirgilPFS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilPFS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilPFS, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _virgil_crypto_python.new_VirgilPFS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def startInitiatorSession(self, *args):
        return _virgil_crypto_python.VirgilPFS_startInitiatorSession(self, *args)

    def startResponderSession(self, *args):
        return _virgil_crypto_python.VirgilPFS_startResponderSession(self, *args)

    def encrypt(self, data):
        return _virgil_crypto_python.VirgilPFS_encrypt(self, data)

    def decrypt(self, encryptedMessage):
        return _virgil_crypto_python.VirgilPFS_decrypt(self, encryptedMessage)

    def getSession(self):
        return _virgil_crypto_python.VirgilPFS_getSession(self)

    def setSession(self, session):
        return _virgil_crypto_python.VirgilPFS_setSession(self, session)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilPFS
    __del__ = lambda self: None
VirgilPFS_swigregister = _virgil_crypto_python.VirgilPFS_swigregister
VirgilPFS_swigregister(VirgilPFS)

# This file is compatible with both classic and new-style classes.


