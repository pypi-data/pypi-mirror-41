# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from minFQ.rpc import analysis_configuration_pb2 as minknow_dot_rpc_dot_analysis__configuration__pb2


class AnalysisConfigurationServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.get_analysis_configuration = channel.unary_unary(
        '/ont.rpc.analysis_configuration.AnalysisConfigurationService/get_analysis_configuration',
        request_serializer=minknow_dot_rpc_dot_analysis__configuration__pb2.GetAnalysisConfigurationRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_analysis__configuration__pb2.AnalysisConfiguration.FromString,
        )
    self.set_analysis_configuration = channel.unary_unary(
        '/ont.rpc.analysis_configuration.AnalysisConfigurationService/set_analysis_configuration',
        request_serializer=minknow_dot_rpc_dot_analysis__configuration__pb2.AnalysisConfiguration.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_analysis__configuration__pb2.SetAnalysisConfigurationResponse.FromString,
        )
    self.set_analysis_enabled_state = channel.unary_unary(
        '/ont.rpc.analysis_configuration.AnalysisConfigurationService/set_analysis_enabled_state',
        request_serializer=minknow_dot_rpc_dot_analysis__configuration__pb2.SetAnalysisEnabledStateRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_analysis__configuration__pb2.SetAnalysisEnabledStateResponse.FromString,
        )
    self.get_channel_states_desc = channel.unary_unary(
        '/ont.rpc.analysis_configuration.AnalysisConfigurationService/get_channel_states_desc',
        request_serializer=minknow_dot_rpc_dot_analysis__configuration__pb2.GetChannelStatesDescRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_analysis__configuration__pb2.GetChannelStatesDescResponse.FromString,
        )
    self.get_summary = channel.unary_unary(
        '/ont.rpc.analysis_configuration.AnalysisConfigurationService/get_summary',
        request_serializer=minknow_dot_rpc_dot_analysis__configuration__pb2.GetSummaryRequest.SerializeToString,
        response_deserializer=minknow_dot_rpc_dot_analysis__configuration__pb2.GetSummaryResponse.FromString,
        )


class AnalysisConfigurationServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def get_analysis_configuration(self, request, context):
    """Get the analysis configuration
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_analysis_configuration(self, request, context):
    """Sets the analysis configuration

    This sets the whole configuration as-is, so you have to specify the whole analysis configuration as any fields
    there previously will be overwritten. To preserve the current analysis configuration, use a get-modify-set
    approach. Use get_analysis_configuration to retrieve the current config and modify the fields on that copy.
    Then use this call to set the modified version.

    The AnalysisConfiguration message is converted to/from json in Minknow, but this will be removed from later
    versions of MinKNOW. The basecaller params are the first ones to move away from the jsn format. The old structure
    has been kept for backwards compatibility, but it will be removed.

    The AnalysisConfiguration message is intended to be used to convert easily from protobuf to json and back again.
    To convert from json to a protobuf message (assuming 'analysis_conf_json' holds the json data:

    >>> import minknow
    >>> from google.protobuf import json_format
    >>>
    >>> analysis_conf_pb = minFQ.rpc.analysis_configuration_service.AnalysisConfiguration()
    >>> json_format.Parse(json.dumps(analysis_conf_json), analysis_conf_pb)

    To convert from a protobuf message to json:

    >>> json_data = json_format.MessageToJson(analysis_conf_resp, preserving_proto_field_name=True, including_default_value_fields=True)

    'preserving_proto_field_name' is needed because json_format will try convert keys to json-standard(?) format, like converting
    my_key to myKey, and the key names as seen in the protobuf file are important to minknow

    'including_default_value_fields' is needed because in proto3, primitive values that are default initialised (like a uint32 with value 0) 
    will not be sent on the wire, so the value wouldn't appear when converting to json. In practice, most values are wrapper types and this
    field won't have an affect in wrapper types, but it does affect enum types as the default initailised value is the 0th enum.

    NOTE: if the analysis configuration was set using the new parameters (with the filename for albacore config files), the old parameters
    from jsn will be ignored. So set_analysis_configuration must be used with either the old protobuf message for the basecaller parameters,
    or with the new one, but it cannot be used interleaved!
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_analysis_enabled_state(self, request, context):
    """Enable or disable analysis entirely.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_channel_states_desc(self, request, context):
    """Get a description of the possible channel states.

    This is a subset of the information included in the channel states section of the analysis
    configuration. It will change when the analysis configuration changes.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_summary(self, request, context):
    """Get a brief summary of the analysis configuration.

    This is a high-level overview of what major parts of the analysis pipeline are enabled.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AnalysisConfigurationServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'get_analysis_configuration': grpc.unary_unary_rpc_method_handler(
          servicer.get_analysis_configuration,
          request_deserializer=minknow_dot_rpc_dot_analysis__configuration__pb2.GetAnalysisConfigurationRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_analysis__configuration__pb2.AnalysisConfiguration.SerializeToString,
      ),
      'set_analysis_configuration': grpc.unary_unary_rpc_method_handler(
          servicer.set_analysis_configuration,
          request_deserializer=minknow_dot_rpc_dot_analysis__configuration__pb2.AnalysisConfiguration.FromString,
          response_serializer=minknow_dot_rpc_dot_analysis__configuration__pb2.SetAnalysisConfigurationResponse.SerializeToString,
      ),
      'set_analysis_enabled_state': grpc.unary_unary_rpc_method_handler(
          servicer.set_analysis_enabled_state,
          request_deserializer=minknow_dot_rpc_dot_analysis__configuration__pb2.SetAnalysisEnabledStateRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_analysis__configuration__pb2.SetAnalysisEnabledStateResponse.SerializeToString,
      ),
      'get_channel_states_desc': grpc.unary_unary_rpc_method_handler(
          servicer.get_channel_states_desc,
          request_deserializer=minknow_dot_rpc_dot_analysis__configuration__pb2.GetChannelStatesDescRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_analysis__configuration__pb2.GetChannelStatesDescResponse.SerializeToString,
      ),
      'get_summary': grpc.unary_unary_rpc_method_handler(
          servicer.get_summary,
          request_deserializer=minknow_dot_rpc_dot_analysis__configuration__pb2.GetSummaryRequest.FromString,
          response_serializer=minknow_dot_rpc_dot_analysis__configuration__pb2.GetSummaryResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ont.rpc.analysis_configuration.AnalysisConfigurationService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
