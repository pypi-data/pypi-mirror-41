### THIS FILE IS AUTOGENERATED. DO NOT EDIT THIS FILE DIRECTLY ###
from .analysis_configuration_pb2_grpc import *
from . import analysis_configuration_pb2
from minFQ.rpc.analysis_configuration_pb2 import *
from minFQ.rpc._support import MessageWrapper, ArgumentError

__all__ = [
    "AnalysisConfigurationService",
    "EventDetection",
    "ReadDetectionParams",
    "ReadClassificationParams",
    "HistogramDocument",
    "BasecallerParams",
    "ChannelStates",
    "GetAnalysisConfigurationRequest",
    "AnalysisConfiguration",
    "SetAnalysisConfigurationResponse",
    "SetAnalysisEnabledStateRequest",
    "SetAnalysisEnabledStateResponse",
    "GetChannelStatesDescRequest",
    "GetChannelStatesDescResponse",
    "GetSummaryRequest",
    "GetSummaryResponse",
]

class AnalysisConfigurationService(object):
    def __init__(self, channel):
        self._stub = AnalysisConfigurationServiceStub(channel)
        self._pb = analysis_configuration_pb2

    def get_analysis_configuration(self, _message=None, _timeout=None, **kwargs):
        """
        Get the analysis configuration

        :rtype: AnalysisConfiguration
        """
        if _message is not None:
            return MessageWrapper(self._stub.get_analysis_configuration(_message, timeout=_timeout), unwraps=[])

        unused_args = set(kwargs.keys())

        _message = GetAnalysisConfigurationRequest()

        if len(unused_args) > 0:
            raise ArgumentError("get_analysis_configuration got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        return MessageWrapper(self._stub.get_analysis_configuration(_message, timeout=_timeout), unwraps=[])

    def set_analysis_configuration(self, _message=None, _timeout=None, **kwargs):
        """
        Sets the analysis configuration

        This sets the whole configuration as-is, so you have to specify the whole analysis configuration as any fields
        there previously will be overwritten. To preserve the current analysis configuration, use a get-modify-set
        approach. Use get_analysis_configuration to retrieve the current config and modify the fields on that copy.
        Then use this call to set the modified version.

        The AnalysisConfiguration message is converted to/from json in Minknow, but this will be removed from later
        versions of MinKNOW. The basecaller params are the first ones to move away from the jsn format. The old structure
        has been kept for backwards compatibility, but it will be removed.

        The AnalysisConfiguration message is intended to be used to convert easily from protobuf to json and back again.
        To convert from json to a protobuf message (assuming 'analysis_conf_json' holds the json data:

        >>> import minknow
        >>> from google.protobuf import json_format
        >>>
        >>> analysis_conf_pb = minFQ.rpc.analysis_configuration_service.AnalysisConfiguration()
        >>> json_format.Parse(json.dumps(analysis_conf_json), analysis_conf_pb)

        To convert from a protobuf message to json:

        >>> json_data = json_format.MessageToJson(analysis_conf_resp, preserving_proto_field_name=True, including_default_value_fields=True)

        'preserving_proto_field_name' is needed because json_format will try convert keys to json-standard(?) format, like converting
        my_key to myKey, and the key names as seen in the protobuf file are important to minknow

        'including_default_value_fields' is needed because in proto3, primitive values that are default initialised (like a uint32 with value 0) 
        will not be sent on the wire, so the value wouldn't appear when converting to json. In practice, most values are wrapper types and this
        field won't have an affect in wrapper types, but it does affect enum types as the default initailised value is the 0th enum.

        NOTE: if the analysis configuration was set using the new parameters (with the filename for albacore config files), the old parameters
        from jsn will be ignored. So set_analysis_configuration must be used with either the old protobuf message for the basecaller parameters,
        or with the new one, but it cannot be used interleaved!

        :param event_detection:
        :param read_detection:
        :param read_detection_alt:
        :param read_classification:
        :param histograms:
        :param channel_states:
        :param basecaller_params:
        :rtype: SetAnalysisConfigurationResponse
        """
        if _message is not None:
            return MessageWrapper(self._stub.set_analysis_configuration(_message, timeout=_timeout), unwraps=[])

        unused_args = set(kwargs.keys())

        _message = AnalysisConfiguration()

        if 'event_detection' in kwargs:
            unused_args.remove('event_detection')
            _message.event_detection.CopyFrom(kwargs['event_detection'])

        if 'read_detection' in kwargs:
            unused_args.remove('read_detection')
            _message.read_detection.CopyFrom(kwargs['read_detection'])

        if 'read_detection_alt' in kwargs:
            unused_args.remove('read_detection_alt')
            _message.read_detection_alt.CopyFrom(kwargs['read_detection_alt'])

        if 'read_classification' in kwargs:
            unused_args.remove('read_classification')
            _message.read_classification.CopyFrom(kwargs['read_classification'])

        if 'histograms' in kwargs:
            unused_args.remove('histograms')
            for key, value in kwargs['histograms'].items():
                _message.histograms[key].CopyFrom(value)

        if 'channel_states' in kwargs:
            unused_args.remove('channel_states')
            for key, value in kwargs['channel_states'].items():
                _message.channel_states[key].CopyFrom(value)

        if 'basecaller_params' in kwargs:
            unused_args.remove('basecaller_params')
            _message.basecaller_params.CopyFrom(kwargs['basecaller_params'])

        if len(unused_args) > 0:
            raise ArgumentError("set_analysis_configuration got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        return MessageWrapper(self._stub.set_analysis_configuration(_message, timeout=_timeout), unwraps=[])

    def set_analysis_enabled_state(self, _message=None, _timeout=None, **kwargs):
        """
        Enable or disable analysis entirely.

        :param enable: (required)
        :rtype: SetAnalysisEnabledStateResponse
        """
        if _message is not None:
            return MessageWrapper(self._stub.set_analysis_enabled_state(_message, timeout=_timeout), unwraps=[])

        unused_args = set(kwargs.keys())

        _message = SetAnalysisEnabledStateRequest()

        if 'enable' in kwargs:
            unused_args.remove('enable')
            _message.enable = kwargs['enable']
        else:
            raise ArgumentError("set_analysis_enabled_state requires a 'enable' argument")

        if len(unused_args) > 0:
            raise ArgumentError("set_analysis_enabled_state got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        return MessageWrapper(self._stub.set_analysis_enabled_state(_message, timeout=_timeout), unwraps=[])

    def get_channel_states_desc(self, _message=None, _timeout=None, **kwargs):
        """
        Get a description of the possible channel states.

        This is a subset of the information included in the channel states section of the analysis
        configuration. It will change when the analysis configuration changes.

        :rtype: GetChannelStatesDescResponse
        """
        if _message is not None:
            return MessageWrapper(self._stub.get_channel_states_desc(_message, timeout=_timeout), unwraps=[])

        unused_args = set(kwargs.keys())

        _message = GetChannelStatesDescRequest()

        if len(unused_args) > 0:
            raise ArgumentError("get_channel_states_desc got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        return MessageWrapper(self._stub.get_channel_states_desc(_message, timeout=_timeout), unwraps=[])

    def get_summary(self, _message=None, _timeout=None, **kwargs):
        """
        Get a brief summary of the analysis configuration.

        This is a high-level overview of what major parts of the analysis pipeline are enabled.

        :rtype: GetSummaryResponse
        """
        if _message is not None:
            return MessageWrapper(self._stub.get_summary(_message, timeout=_timeout), unwraps=[])

        unused_args = set(kwargs.keys())

        _message = GetSummaryRequest()

        if len(unused_args) > 0:
            raise ArgumentError("get_summary got unexpected keyword arguments '{}'".format("', '".join(unused_args)))
        return MessageWrapper(self._stub.get_summary(_message, timeout=_timeout), unwraps=[])


