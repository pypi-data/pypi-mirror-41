# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImageRTKPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImageRTKPython', [dirname(__file__)])
        except ImportError:
            import _itkImageRTKPython
            return _itkImageRTKPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImageRTKPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImageRTKPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImageRTKPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkCovariantVectorPython
import vnl_vector_refPython
import itkVectorPython
import itkFixedArrayPython
import itkPointPython
import vnl_matrix_fixedPython
import ITKCommonBasePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageBaseRTKPython
import itkImageRegionRTKPython
import itkMatrixRTKPython
import itkCovariantVectorRTKPython
import itkPointRTKPython

def itkImageUS4_New():
  return itkImageUS4.New()


def itkImageCVF34_New():
  return itkImageCVF34.New()


def itkImageVF34_New():
  return itkImageVF34.New()


def itkImageF4_New():
  return itkImageF4.New()


def itkImageUC1_New():
  return itkImageUC1.New()


def itkImageF1_New():
  return itkImageF1.New()


def itkImageD1_New():
  return itkImageD1.New()

class itkImageCVF34(itkImagePython.itkImageBase4):
    """Proxy of C++ itkImageCVF34 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVF34_Pointer":
        """__New_orig__() -> itkImageCVF34_Pointer"""
        return _itkImageRTKPython.itkImageCVF34___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVF34_Pointer":
        """Clone(itkImageCVF34 self) -> itkImageCVF34_Pointer"""
        return _itkImageRTKPython.itkImageCVF34_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVF34 self, bool initializePixels=False)
        Allocate(itkImageCVF34 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions() or SetBufferedRegion().

        This method should be pure virtual, if backwards compatibility was not
        required. 
        """
        return _itkImageRTKPython.itkImageCVF34_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorF3') -> "void":
        """FillBuffer(itkImageCVF34 self, itkCovariantVectorF3 value)"""
        return _itkImageRTKPython.itkImageCVF34_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex4', value: 'itkCovariantVectorF3') -> "void":
        """SetPixel(itkImageCVF34 self, itkIndex4 index, itkCovariantVectorF3 value)"""
        return _itkImageRTKPython.itkImageCVF34_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF3 &":
        """
        GetPixel(itkImageCVF34 self, itkIndex4 index) -> itkCovariantVectorF3
        GetPixel(itkImageCVF34 self, itkIndex4 index) -> itkCovariantVectorF3
        """
        return _itkImageRTKPython.itkImageCVF34_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF3 const *":
        """
        GetBufferPointer(itkImageCVF34 self) -> itkCovariantVectorF3
        GetBufferPointer(itkImageCVF34 self) -> itkCovariantVectorF3
        """
        return _itkImageRTKPython.itkImageCVF34_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > const *":
        """
        GetPixelContainer(itkImageCVF34 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > >
        GetPixelContainer(itkImageCVF34 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > const *
        """
        return _itkImageRTKPython.itkImageCVF34_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > *') -> "void":
        """SetPixelContainer(itkImageCVF34 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > * container)"""
        return _itkImageRTKPython.itkImageCVF34_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVF34') -> "void":
        """
        Graft(itkImageCVF34 self, itkImageCVF34 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. Subclasses of
        ImageBase are responsible for copying the pixel container. 
        """
        return _itkImageRTKPython.itkImageCVF34_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const":
        """
        GetPixelAccessor(itkImageCVF34 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > >
        GetPixelAccessor(itkImageCVF34 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const
        """
        return _itkImageRTKPython.itkImageCVF34_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,4 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVF34 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,4 > >
        GetNeighborhoodAccessor(itkImageCVF34 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,4 > > const
        """
        return _itkImageRTKPython.itkImageCVF34_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF34

    def cast(obj: 'itkLightObject') -> "itkImageCVF34 *":
        """cast(itkLightObject obj) -> itkImageCVF34"""
        return _itkImageRTKPython.itkImageCVF34_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCVF34

        Create a new object of the class itkImageCVF34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF34.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF34.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF34.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF34.Clone = new_instancemethod(_itkImageRTKPython.itkImageCVF34_Clone, None, itkImageCVF34)
itkImageCVF34.Allocate = new_instancemethod(_itkImageRTKPython.itkImageCVF34_Allocate, None, itkImageCVF34)
itkImageCVF34.FillBuffer = new_instancemethod(_itkImageRTKPython.itkImageCVF34_FillBuffer, None, itkImageCVF34)
itkImageCVF34.SetPixel = new_instancemethod(_itkImageRTKPython.itkImageCVF34_SetPixel, None, itkImageCVF34)
itkImageCVF34.GetPixel = new_instancemethod(_itkImageRTKPython.itkImageCVF34_GetPixel, None, itkImageCVF34)
itkImageCVF34.GetBufferPointer = new_instancemethod(_itkImageRTKPython.itkImageCVF34_GetBufferPointer, None, itkImageCVF34)
itkImageCVF34.GetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageCVF34_GetPixelContainer, None, itkImageCVF34)
itkImageCVF34.SetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageCVF34_SetPixelContainer, None, itkImageCVF34)
itkImageCVF34.Graft = new_instancemethod(_itkImageRTKPython.itkImageCVF34_Graft, None, itkImageCVF34)
itkImageCVF34.GetPixelAccessor = new_instancemethod(_itkImageRTKPython.itkImageCVF34_GetPixelAccessor, None, itkImageCVF34)
itkImageCVF34.GetNeighborhoodAccessor = new_instancemethod(_itkImageRTKPython.itkImageCVF34_GetNeighborhoodAccessor, None, itkImageCVF34)
itkImageCVF34_swigregister = _itkImageRTKPython.itkImageCVF34_swigregister
itkImageCVF34_swigregister(itkImageCVF34)

def itkImageCVF34___New_orig__() -> "itkImageCVF34_Pointer":
    """itkImageCVF34___New_orig__() -> itkImageCVF34_Pointer"""
    return _itkImageRTKPython.itkImageCVF34___New_orig__()

def itkImageCVF34_cast(obj: 'itkLightObject') -> "itkImageCVF34 *":
    """itkImageCVF34_cast(itkLightObject obj) -> itkImageCVF34"""
    return _itkImageRTKPython.itkImageCVF34_cast(obj)

class itkImageCVF34_ConstPointer(object):
    """Proxy of C++ itkImageCVF34_ConstPointer class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkImageCVF34_ConstPointer self) -> itkImageCVF34_ConstPointer
        __init__(itkImageCVF34_ConstPointer self, itkImageCVF34_ConstPointer p) -> itkImageCVF34_ConstPointer
        __init__(itkImageCVF34_ConstPointer self, itkImageCVF34 p) -> itkImageCVF34_ConstPointer
        """
        _itkImageRTKPython.itkImageCVF34_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageCVF34_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF34_ConstPointer

    def __deref__(self) -> "itkImageCVF34 const *":
        """__deref__(itkImageCVF34_ConstPointer self) -> itkImageCVF34"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer___deref__(self)


    def __ref__(self) -> "itkImageCVF34 const &":
        """__ref__(itkImageCVF34_ConstPointer self) -> itkImageCVF34"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer___ref__(self)


    def IsNotNull(self) -> "bool":
        """IsNotNull(itkImageCVF34_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_IsNotNull(self)


    def IsNull(self) -> "bool":
        """IsNull(itkImageCVF34_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_IsNull(self)


    def GetPointer(self) -> "itkImageCVF34 const *":
        """GetPointer(itkImageCVF34_ConstPointer self) -> itkImageCVF34"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetPointer(self)


    def Print(self, os: 'ostream') -> "itkImageCVF34 const *":
        """Print(itkImageCVF34_ConstPointer self, ostream os) -> itkImageCVF34"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_Print(self, os)


    def swap(self, other: 'itkImageCVF34_ConstPointer') -> "void":
        """swap(itkImageCVF34_ConstPointer self, itkImageCVF34_ConstPointer other)"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_swap(self, other)


    def Swap(self, other: 'itkImageCVF34_ConstPointer') -> "void":
        """Swap(itkImageCVF34_ConstPointer self, itkImageCVF34_ConstPointer other)"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_Swap(self, other)


    def Clone(self) -> "itkImageCVF34_Pointer":
        """Clone(itkImageCVF34_ConstPointer self) -> itkImageCVF34_Pointer"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_Clone(self)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF3 const *":
        """
        GetBufferPointer(itkImageCVF34_ConstPointer self) -> itkCovariantVectorF3
        GetBufferPointer(itkImageCVF34_ConstPointer self) -> itkCovariantVectorF3
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > const *":
        """
        GetPixelContainer(itkImageCVF34_ConstPointer self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > >
        GetPixelContainer(itkImageCVF34_ConstPointer self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > const *
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetPixelContainer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const":
        """
        GetPixelAccessor(itkImageCVF34_ConstPointer self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > >
        GetPixelAccessor(itkImageCVF34_ConstPointer self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,4 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVF34_ConstPointer self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,4 > >
        GetNeighborhoodAccessor(itkImageCVF34_ConstPointer self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,4 > > const
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetNeighborhoodAccessor(self, *args)


    def GetDirection(self) -> "itkMatrixD44 const &":
        """
        GetDirection(itkImageCVF34_ConstPointer self) -> itkMatrixD44

        Get the direction
        cosines of the image. The direction cosines are vectors that point
        from one pixel to the next. For ImageBase and Image, the default
        direction is identity. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetDirection(self)


    def GetInverseDirection(self) -> "itkMatrixD44 const &":
        """
        GetInverseDirection(itkImageCVF34_ConstPointer self) -> itkMatrixD44

        Get the inverse
        direction cosines of the image. These are calculated automatically in
        SetDirection, thus there is no Set accessor. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetInverseDirection(self)


    def GetSpacing(self) -> "itkVectorD4 const &":
        """
        GetSpacing(itkImageCVF34_ConstPointer self) -> itkVectorD4

        Get the spacing (size of
        a pixel) `of the image. The spacing is the geometric distance between
        image samples along each dimension. The value returned is a
        Vector<double, VImageDimension>. For ImageBase and Image, the default
        data spacing is unity. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetSpacing(self)


    def GetOrigin(self) -> "itkPointD4 const &":
        """
        GetOrigin(itkImageCVF34_ConstPointer self) -> itkPointD4

        Get the origin of the
        image. The origin is the geometric coordinates of the index (0,0). The
        value returned is a Point<double, VImageDimension>. For ImageBase and
        Image, the default origin is 0. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetOrigin(self)


    def GetLargestPossibleRegion(self) -> "itk::ImageRegion< 4 > const &":
        """
        GetLargestPossibleRegion(itkImageCVF34_ConstPointer self) -> itk::ImageRegion< 4 > const &

        Get the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary true conditions. See:
        ImageRegion, GetBufferedRegion(), GetRequestedRegion() 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetLargestPossibleRegion(self)


    def GetBufferedRegion(self) -> "itk::ImageRegion< 4 > const &":
        """
        GetBufferedRegion(itkImageCVF34_ConstPointer self) -> itk::ImageRegion< 4 > const &

        Get the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:   ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetBufferedRegion(self)


    def GetRequestedRegion(self) -> "itk::ImageRegion< 4 > const &":
        """
        GetRequestedRegion(itkImageCVF34_ConstPointer self) -> itk::ImageRegion< 4 > const &

        Get the region
        object that defines the size and starting index for the region of the
        image requested (i.e., the region of the image to be operated on by a
        filter). See:   ImageRegion, SetLargestPossibleRegion(),
        SetBufferedRegion() 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetRequestedRegion(self)


    def GetOffsetTable(self) -> "long const *":
        """
        GetOffsetTable(itkImageCVF34_ConstPointer self) -> long const *

        Get the offset
        table. The offset table gives increments for moving from one pixel to
        next in the current row, column, slice, etc.. This table if of size
        [VImageDimension+1], because its values are computed progressively as:
        {1, N1, N1*N2, N1*N2*N3,...,(N1*...*Nn)} Where the values {N1,...,Nn}
        are the elements of the BufferedRegion::Size array. The last element
        of the OffsetTable is equivalent to the BufferSize. Having a
        [VImageDimension+1] size array, simplifies the implementation of some
        data accessing algorithms. The entries in the offset table are only
        valid after the BufferedRegion is set. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetOffsetTable(self)


    def ComputeOffset(self, ind: 'itkIndex4') -> "long":
        """
        ComputeOffset(itkImageCVF34_ConstPointer self, itkIndex4 ind) -> long

        Compute an offset
        from the beginning of the buffer for a pixel at the specified index.
        The index is not checked as to whether it is inside the current
        buffer, so the computed offset could conceivably be outside the
        buffer. If bounds checking is needed, one can call
        ImageRegion::IsInside(ind) on the BufferedRegion prior to calling
        ComputeOffset. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_ComputeOffset(self, ind)


    def ComputeIndex(self, offset: 'long') -> "itkIndex4":
        """
        ComputeIndex(itkImageCVF34_ConstPointer self, long offset) -> itkIndex4

        Compute the index of
        the pixel at a specified offset from the beginning of the buffered
        region. Bounds checking is not performed. Thus, the computed index
        could be outside the BufferedRegion. To ensure a valid index, the
        parameter "offset" should be between 0 and the number of pixels in
        the BufferedRegion (the latter can be found using
        ImageRegion::GetNumberOfPixels()). 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_ComputeIndex(self, offset)


    def GetNumberOfComponentsPerPixel(self) -> "unsigned int":
        """
        GetNumberOfComponentsPerPixel(itkImageCVF34_ConstPointer self) -> unsigned int

        INTERNAL This method is used internally by filters to copy meta-data
        from the output to the input. Users should not have a need to use this
        method.

        Filters that override the ProcessObject's GenerateOutputInformation()
        should generally have the following line if they want to propagate
        meta- data for both Image and VectorImage

        See:   ImageBase, VectorImage  Returns/Sets the number of components
        in the image. Note that in the ImageBase implementation, this always
        returns 1. Image returns thereturned from NumericTraits for the pixel
        type, and VectorImage

        returns the vector length set by the user. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetNumberOfComponentsPerPixel(self)


    def GetSource(self) -> "itkProcessObject_Pointer":
        """GetSource(itkImageCVF34_ConstPointer self) -> itkProcessObject_Pointer"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetSource(self)


    def GetSourceOutputName(self) -> "std::string const &":
        """GetSourceOutputName(itkImageCVF34_ConstPointer self) -> std::string const &"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetSourceOutputName(self)


    def GetSourceOutputIndex(self) -> "unsigned long":
        """GetSourceOutputIndex(itkImageCVF34_ConstPointer self) -> unsigned long"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetSourceOutputIndex(self)


    def GetReleaseDataFlag(self) -> "bool const &":
        """GetReleaseDataFlag(itkImageCVF34_ConstPointer self) -> bool const &"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetReleaseDataFlag(self)


    def ShouldIReleaseData(self) -> "bool":
        """ShouldIReleaseData(itkImageCVF34_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_ShouldIReleaseData(self)


    def GetDataReleased(self) -> "bool":
        """GetDataReleased(itkImageCVF34_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetDataReleased(self)


    def GetPipelineMTime(self) -> "unsigned long const &":
        """GetPipelineMTime(itkImageCVF34_ConstPointer self) -> unsigned long const &"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetPipelineMTime(self)


    def GetUpdateMTime(self) -> "unsigned long":
        """GetUpdateMTime(itkImageCVF34_ConstPointer self) -> unsigned long"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetUpdateMTime(self)


    def GetRealTimeStamp(self) -> "itkRealTimeStamp const &":
        """GetRealTimeStamp(itkImageCVF34_ConstPointer self) -> itkRealTimeStamp"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetRealTimeStamp(self)


    def DebugOn(self) -> "void":
        """
        DebugOn(itkImageCVF34_ConstPointer self)

        Turn debugging output on.

        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_DebugOn(self)


    def DebugOff(self) -> "void":
        """
        DebugOff(itkImageCVF34_ConstPointer self)

        Turn debugging output off.

        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_DebugOff(self)


    def GetDebug(self) -> "bool":
        """
        GetDebug(itkImageCVF34_ConstPointer self) -> bool

        Get the value of the debug
        flag. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetDebug(self)


    def SetDebug(self, debugFlag: 'bool') -> "void":
        """
        SetDebug(itkImageCVF34_ConstPointer self, bool debugFlag)

        Set the value of the debug
        flag. A non-zero value turns debugging on. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_SetDebug(self, debugFlag)


    def GetMTime(self) -> "unsigned long":
        """
        GetMTime(itkImageCVF34_ConstPointer self) -> unsigned long

        Return this object's
        modified time. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetMTime(self)


    def GetTimeStamp(self) -> "itkTimeStamp const &":
        """
        GetTimeStamp(itkImageCVF34_ConstPointer self) -> itkTimeStamp

        Return this object's
        time stamp. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetTimeStamp(self)


    def Modified(self) -> "void":
        """
        Modified(itkImageCVF34_ConstPointer self)

        Update the modification
        time for this object. Many filters rely on the modification time to
        determine if they need to recompute their data. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_Modified(self)


    def AddObserver(self, *args) -> "unsigned long":
        """
        AddObserver(itkImageCVF34_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkImageCVF34_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long

        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageCVF34_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args) -> "void":
        """
        InvokeEvent(itkImageCVF34_ConstPointer self, itkEventObject arg0)
        InvokeEvent(itkImageCVF34_ConstPointer self, itkEventObject arg0)

        Call Execute on all the
        Commands observing this event id. The actions triggered by this call
        doesn't modify this object. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_InvokeEvent(self, *args)


    def HasObserver(self, event: 'itkEventObject') -> "bool":
        """
        HasObserver(itkImageCVF34_ConstPointer self, itkEventObject event) -> bool

        Return true if an
        observer is registered for this event. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_HasObserver(self, event)


    def GetMetaDataDictionary(self, *args) -> "itkMetaDataDictionary const &":
        """
        GetMetaDataDictionary(itkImageCVF34_ConstPointer self) -> itkMetaDataDictionary
        GetMetaDataDictionary(itkImageCVF34_ConstPointer self) -> itkMetaDataDictionary



        A constant reference to this objects MetaDataDictionary. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetMetaDataDictionary(self, *args)


    def GetObjectName(self) -> "std::string const &":
        """GetObjectName(itkImageCVF34_ConstPointer self) -> std::string const &"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetObjectName(self)


    def CreateAnother(self) -> "itkLightObject_Pointer":
        """
        CreateAnother(itkImageCVF34_ConstPointer self) -> itkLightObject_Pointer

        Create an object from
        an instance, potentially deferring to a factory. This method allows
        you to create an instance of an object that is exactly the same type
        as the referring object. This is useful in cases where an object has
        been cast back to a base class. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_CreateAnother(self)


    def GetNameOfClass(self) -> "char const *":
        """
        GetNameOfClass(itkImageCVF34_ConstPointer self) -> char const *

        Return the name of
        this class as a string. Used by the object factory (implemented in
        New()) to instantiate objects of a named type. Also used for debugging
        and other output information. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetNameOfClass(self)


    def GetReferenceCount(self) -> "int":
        """
        GetReferenceCount(itkImageCVF34_ConstPointer self) -> int

        Gets the
        reference count on this object. 
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetReferenceCount(self)

itkImageCVF34_ConstPointer.__deref__ = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer___deref__, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.__ref__ = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer___ref__, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.IsNotNull = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_IsNotNull, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.IsNull = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_IsNull, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetPointer = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetPointer, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.Print = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_Print, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.swap = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_swap, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.Swap = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_Swap, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.Clone = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_Clone, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetBufferPointer = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetBufferPointer, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetPixelContainer, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetPixelAccessor = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetPixelAccessor, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetNeighborhoodAccessor = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetNeighborhoodAccessor, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetDirection = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetDirection, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetInverseDirection = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetInverseDirection, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetSpacing = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetSpacing, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetOrigin = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetOrigin, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetLargestPossibleRegion = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetLargestPossibleRegion, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetBufferedRegion = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetBufferedRegion, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetRequestedRegion = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetRequestedRegion, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetOffsetTable = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetOffsetTable, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.ComputeOffset = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_ComputeOffset, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.ComputeIndex = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_ComputeIndex, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetNumberOfComponentsPerPixel = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetNumberOfComponentsPerPixel, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetSource = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetSource, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetSourceOutputName = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetSourceOutputName, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetSourceOutputIndex = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetSourceOutputIndex, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetReleaseDataFlag = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetReleaseDataFlag, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.ShouldIReleaseData = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_ShouldIReleaseData, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetDataReleased = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetDataReleased, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetPipelineMTime = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetPipelineMTime, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetUpdateMTime = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetUpdateMTime, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetRealTimeStamp = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetRealTimeStamp, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.DebugOn = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_DebugOn, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.DebugOff = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_DebugOff, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetDebug = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetDebug, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.SetDebug = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_SetDebug, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetMTime = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetMTime, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetTimeStamp = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetTimeStamp, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.Modified = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_Modified, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.InvokeEvent = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_InvokeEvent, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.HasObserver = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_HasObserver, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetMetaDataDictionary = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetMetaDataDictionary, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetObjectName = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetObjectName, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.CreateAnother = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_CreateAnother, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetNameOfClass = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetNameOfClass, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer.GetReferenceCount = new_instancemethod(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetReferenceCount, None, itkImageCVF34_ConstPointer)
itkImageCVF34_ConstPointer_swigregister = _itkImageRTKPython.itkImageCVF34_ConstPointer_swigregister
itkImageCVF34_ConstPointer_swigregister(itkImageCVF34_ConstPointer)

class itkImageD1(itkImageBaseRTKPython.itkImageBase1):
    """Proxy of C++ itkImageD1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageD1_Pointer":
        """__New_orig__() -> itkImageD1_Pointer"""
        return _itkImageRTKPython.itkImageD1___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageD1_Pointer":
        """Clone(itkImageD1 self) -> itkImageD1_Pointer"""
        return _itkImageRTKPython.itkImageD1_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageD1 self, bool initializePixels=False)
        Allocate(itkImageD1 self)
        """
        return _itkImageRTKPython.itkImageD1_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'double const &') -> "void":
        """FillBuffer(itkImageD1 self, double const & value)"""
        return _itkImageRTKPython.itkImageD1_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex1', value: 'double const &') -> "void":
        """SetPixel(itkImageD1 self, itkIndex1 index, double const & value)"""
        return _itkImageRTKPython.itkImageD1_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "double &":
        """
        GetPixel(itkImageD1 self, itkIndex1 index) -> double const
        GetPixel(itkImageD1 self, itkIndex1 index) -> double &
        """
        return _itkImageRTKPython.itkImageD1_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "double const *":
        """
        GetBufferPointer(itkImageD1 self) -> double
        GetBufferPointer(itkImageD1 self) -> double const *
        """
        return _itkImageRTKPython.itkImageD1_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,double > const *":
        """
        GetPixelContainer(itkImageD1 self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(itkImageD1 self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkImageRTKPython.itkImageD1_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,double > *') -> "void":
        """SetPixelContainer(itkImageD1 self, itk::ImportImageContainer< unsigned long,double > * container)"""
        return _itkImageRTKPython.itkImageD1_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageD1') -> "void":
        """Graft(itkImageD1 self, itkImageD1 data)"""
        return _itkImageRTKPython.itkImageD1_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< double > const":
        """
        GetPixelAccessor(itkImageD1 self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(itkImageD1 self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkImageRTKPython.itkImageD1_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< double,1 > > const":
        """
        GetNeighborhoodAccessor(itkImageD1 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,1 > >
        GetNeighborhoodAccessor(itkImageD1 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,1 > > const
        """
        return _itkImageRTKPython.itkImageD1_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImageRTKPython.delete_itkImageD1

    def cast(obj: 'itkLightObject') -> "itkImageD1 *":
        """cast(itkLightObject obj) -> itkImageD1"""
        return _itkImageRTKPython.itkImageD1_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageD1

        Create a new object of the class itkImageD1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageD1.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageD1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageD1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageD1.Clone = new_instancemethod(_itkImageRTKPython.itkImageD1_Clone, None, itkImageD1)
itkImageD1.Allocate = new_instancemethod(_itkImageRTKPython.itkImageD1_Allocate, None, itkImageD1)
itkImageD1.FillBuffer = new_instancemethod(_itkImageRTKPython.itkImageD1_FillBuffer, None, itkImageD1)
itkImageD1.SetPixel = new_instancemethod(_itkImageRTKPython.itkImageD1_SetPixel, None, itkImageD1)
itkImageD1.GetPixel = new_instancemethod(_itkImageRTKPython.itkImageD1_GetPixel, None, itkImageD1)
itkImageD1.GetBufferPointer = new_instancemethod(_itkImageRTKPython.itkImageD1_GetBufferPointer, None, itkImageD1)
itkImageD1.GetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageD1_GetPixelContainer, None, itkImageD1)
itkImageD1.SetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageD1_SetPixelContainer, None, itkImageD1)
itkImageD1.Graft = new_instancemethod(_itkImageRTKPython.itkImageD1_Graft, None, itkImageD1)
itkImageD1.GetPixelAccessor = new_instancemethod(_itkImageRTKPython.itkImageD1_GetPixelAccessor, None, itkImageD1)
itkImageD1.GetNeighborhoodAccessor = new_instancemethod(_itkImageRTKPython.itkImageD1_GetNeighborhoodAccessor, None, itkImageD1)
itkImageD1_swigregister = _itkImageRTKPython.itkImageD1_swigregister
itkImageD1_swigregister(itkImageD1)

def itkImageD1___New_orig__() -> "itkImageD1_Pointer":
    """itkImageD1___New_orig__() -> itkImageD1_Pointer"""
    return _itkImageRTKPython.itkImageD1___New_orig__()

def itkImageD1_cast(obj: 'itkLightObject') -> "itkImageD1 *":
    """itkImageD1_cast(itkLightObject obj) -> itkImageD1"""
    return _itkImageRTKPython.itkImageD1_cast(obj)

class itkImageF1(itkImageBaseRTKPython.itkImageBase1):
    """Proxy of C++ itkImageF1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageF1_Pointer":
        """__New_orig__() -> itkImageF1_Pointer"""
        return _itkImageRTKPython.itkImageF1___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageF1_Pointer":
        """Clone(itkImageF1 self) -> itkImageF1_Pointer"""
        return _itkImageRTKPython.itkImageF1_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageF1 self, bool initializePixels=False)
        Allocate(itkImageF1 self)
        """
        return _itkImageRTKPython.itkImageF1_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'float const &') -> "void":
        """FillBuffer(itkImageF1 self, float const & value)"""
        return _itkImageRTKPython.itkImageF1_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex1', value: 'float const &') -> "void":
        """SetPixel(itkImageF1 self, itkIndex1 index, float const & value)"""
        return _itkImageRTKPython.itkImageF1_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "float &":
        """
        GetPixel(itkImageF1 self, itkIndex1 index) -> float const
        GetPixel(itkImageF1 self, itkIndex1 index) -> float &
        """
        return _itkImageRTKPython.itkImageF1_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "float const *":
        """
        GetBufferPointer(itkImageF1 self) -> float
        GetBufferPointer(itkImageF1 self) -> float const *
        """
        return _itkImageRTKPython.itkImageF1_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,float > const *":
        """
        GetPixelContainer(itkImageF1 self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(itkImageF1 self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkImageRTKPython.itkImageF1_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,float > *') -> "void":
        """SetPixelContainer(itkImageF1 self, itk::ImportImageContainer< unsigned long,float > * container)"""
        return _itkImageRTKPython.itkImageF1_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageF1') -> "void":
        """Graft(itkImageF1 self, itkImageF1 data)"""
        return _itkImageRTKPython.itkImageF1_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< float > const":
        """
        GetPixelAccessor(itkImageF1 self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(itkImageF1 self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkImageRTKPython.itkImageF1_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< float,1 > > const":
        """
        GetNeighborhoodAccessor(itkImageF1 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,1 > >
        GetNeighborhoodAccessor(itkImageF1 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,1 > > const
        """
        return _itkImageRTKPython.itkImageF1_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF1

    def cast(obj: 'itkLightObject') -> "itkImageF1 *":
        """cast(itkLightObject obj) -> itkImageF1"""
        return _itkImageRTKPython.itkImageF1_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageF1

        Create a new object of the class itkImageF1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF1.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageF1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageF1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageF1.Clone = new_instancemethod(_itkImageRTKPython.itkImageF1_Clone, None, itkImageF1)
itkImageF1.Allocate = new_instancemethod(_itkImageRTKPython.itkImageF1_Allocate, None, itkImageF1)
itkImageF1.FillBuffer = new_instancemethod(_itkImageRTKPython.itkImageF1_FillBuffer, None, itkImageF1)
itkImageF1.SetPixel = new_instancemethod(_itkImageRTKPython.itkImageF1_SetPixel, None, itkImageF1)
itkImageF1.GetPixel = new_instancemethod(_itkImageRTKPython.itkImageF1_GetPixel, None, itkImageF1)
itkImageF1.GetBufferPointer = new_instancemethod(_itkImageRTKPython.itkImageF1_GetBufferPointer, None, itkImageF1)
itkImageF1.GetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageF1_GetPixelContainer, None, itkImageF1)
itkImageF1.SetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageF1_SetPixelContainer, None, itkImageF1)
itkImageF1.Graft = new_instancemethod(_itkImageRTKPython.itkImageF1_Graft, None, itkImageF1)
itkImageF1.GetPixelAccessor = new_instancemethod(_itkImageRTKPython.itkImageF1_GetPixelAccessor, None, itkImageF1)
itkImageF1.GetNeighborhoodAccessor = new_instancemethod(_itkImageRTKPython.itkImageF1_GetNeighborhoodAccessor, None, itkImageF1)
itkImageF1_swigregister = _itkImageRTKPython.itkImageF1_swigregister
itkImageF1_swigregister(itkImageF1)

def itkImageF1___New_orig__() -> "itkImageF1_Pointer":
    """itkImageF1___New_orig__() -> itkImageF1_Pointer"""
    return _itkImageRTKPython.itkImageF1___New_orig__()

def itkImageF1_cast(obj: 'itkLightObject') -> "itkImageF1 *":
    """itkImageF1_cast(itkLightObject obj) -> itkImageF1"""
    return _itkImageRTKPython.itkImageF1_cast(obj)

class itkImageF2_ConstPointer(object):
    """Proxy of C++ itkImageF2_ConstPointer class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkImageF2_ConstPointer self) -> itkImageF2_ConstPointer
        __init__(itkImageF2_ConstPointer self, itkImageF2_ConstPointer p) -> itkImageF2_ConstPointer
        __init__(itkImageF2_ConstPointer self, itkImageF2 p) -> itkImageF2_ConstPointer
        """
        _itkImageRTKPython.itkImageF2_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageF2_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF2_ConstPointer

    def __deref__(self) -> "itkImageF2 const *":
        """__deref__(itkImageF2_ConstPointer self) -> itkImageF2"""
        return _itkImageRTKPython.itkImageF2_ConstPointer___deref__(self)


    def __ref__(self) -> "itkImageF2 const &":
        """__ref__(itkImageF2_ConstPointer self) -> itkImageF2"""
        return _itkImageRTKPython.itkImageF2_ConstPointer___ref__(self)


    def IsNotNull(self) -> "bool":
        """IsNotNull(itkImageF2_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_IsNotNull(self)


    def IsNull(self) -> "bool":
        """IsNull(itkImageF2_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_IsNull(self)


    def GetPointer(self) -> "itkImageF2 const *":
        """GetPointer(itkImageF2_ConstPointer self) -> itkImageF2"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetPointer(self)


    def Print(self, os: 'ostream') -> "itkImageF2 const *":
        """Print(itkImageF2_ConstPointer self, ostream os) -> itkImageF2"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_Print(self, os)


    def swap(self, other: 'itkImageF2_ConstPointer') -> "void":
        """swap(itkImageF2_ConstPointer self, itkImageF2_ConstPointer other)"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_swap(self, other)


    def Swap(self, other: 'itkImageF2_ConstPointer') -> "void":
        """Swap(itkImageF2_ConstPointer self, itkImageF2_ConstPointer other)"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_Swap(self, other)


    def Clone(self) -> "itkImageF2_Pointer":
        """Clone(itkImageF2_ConstPointer self) -> itkImageF2_Pointer"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_Clone(self)


    def GetBufferPointer(self, *args) -> "float const *":
        """
        GetBufferPointer(itkImageF2_ConstPointer self) -> float
        GetBufferPointer(itkImageF2_ConstPointer self) -> float const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,float > const *":
        """
        GetPixelContainer(itkImageF2_ConstPointer self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(itkImageF2_ConstPointer self) -> itk::ImportImageContainer< unsigned long,float > const *

        Return a pointer
        to the container. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetPixelContainer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< float > const":
        """
        GetPixelAccessor(itkImageF2_ConstPointer self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(itkImageF2_ConstPointer self) -> itk::DefaultPixelAccessor< float > const

        Return the Pixel
        Accesor object 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< float,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageF2_ConstPointer self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,2 > >
        GetNeighborhoodAccessor(itkImageF2_ConstPointer self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetNeighborhoodAccessor(self, *args)


    def GetDirection(self) -> "itkMatrixD22 const &":
        """
        GetDirection(itkImageF2_ConstPointer self) -> itkMatrixD22

        Get the direction
        cosines of the image. The direction cosines are vectors that point
        from one pixel to the next. For ImageBase and Image, the default
        direction is identity. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetDirection(self)


    def GetInverseDirection(self) -> "itkMatrixD22 const &":
        """
        GetInverseDirection(itkImageF2_ConstPointer self) -> itkMatrixD22

        Get the inverse
        direction cosines of the image. These are calculated automatically in
        SetDirection, thus there is no Set accessor. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetInverseDirection(self)


    def GetSpacing(self) -> "itkVectorD2 const &":
        """
        GetSpacing(itkImageF2_ConstPointer self) -> itkVectorD2

        Get the spacing (size of
        a pixel) `of the image. The spacing is the geometric distance between
        image samples along each dimension. The value returned is a
        Vector<double, VImageDimension>. For ImageBase and Image, the default
        data spacing is unity. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetSpacing(self)


    def GetOrigin(self) -> "itkPointD2 const &":
        """
        GetOrigin(itkImageF2_ConstPointer self) -> itkPointD2

        Get the origin of the
        image. The origin is the geometric coordinates of the index (0,0). The
        value returned is a Point<double, VImageDimension>. For ImageBase and
        Image, the default origin is 0. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetOrigin(self)


    def GetLargestPossibleRegion(self) -> "itkImageRegion2 const &":
        """
        GetLargestPossibleRegion(itkImageF2_ConstPointer self) -> itkImageRegion2

        Get the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary true conditions. See:
        ImageRegion, GetBufferedRegion(), GetRequestedRegion() 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetLargestPossibleRegion(self)


    def GetBufferedRegion(self) -> "itkImageRegion2 const &":
        """
        GetBufferedRegion(itkImageF2_ConstPointer self) -> itkImageRegion2

        Get the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:   ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetBufferedRegion(self)


    def GetRequestedRegion(self) -> "itkImageRegion2 const &":
        """
        GetRequestedRegion(itkImageF2_ConstPointer self) -> itkImageRegion2

        Get the region
        object that defines the size and starting index for the region of the
        image requested (i.e., the region of the image to be operated on by a
        filter). See:   ImageRegion, SetLargestPossibleRegion(),
        SetBufferedRegion() 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetRequestedRegion(self)


    def GetOffsetTable(self) -> "long const *":
        """
        GetOffsetTable(itkImageF2_ConstPointer self) -> long const *

        Get the offset
        table. The offset table gives increments for moving from one pixel to
        next in the current row, column, slice, etc.. This table if of size
        [VImageDimension+1], because its values are computed progressively as:
        {1, N1, N1*N2, N1*N2*N3,...,(N1*...*Nn)} Where the values {N1,...,Nn}
        are the elements of the BufferedRegion::Size array. The last element
        of the OffsetTable is equivalent to the BufferSize. Having a
        [VImageDimension+1] size array, simplifies the implementation of some
        data accessing algorithms. The entries in the offset table are only
        valid after the BufferedRegion is set. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetOffsetTable(self)


    def ComputeOffset(self, ind: 'itkIndex2') -> "long":
        """
        ComputeOffset(itkImageF2_ConstPointer self, itkIndex2 ind) -> long

        Compute an offset
        from the beginning of the buffer for a pixel at the specified index.
        The index is not checked as to whether it is inside the current
        buffer, so the computed offset could conceivably be outside the
        buffer. If bounds checking is needed, one can call
        ImageRegion::IsInside(ind) on the BufferedRegion prior to calling
        ComputeOffset. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_ComputeOffset(self, ind)


    def ComputeIndex(self, offset: 'long') -> "itkIndex2":
        """
        ComputeIndex(itkImageF2_ConstPointer self, long offset) -> itkIndex2

        Compute the index of
        the pixel at a specified offset from the beginning of the buffered
        region. Bounds checking is not performed. Thus, the computed index
        could be outside the BufferedRegion. To ensure a valid index, the
        parameter "offset" should be between 0 and the number of pixels in
        the BufferedRegion (the latter can be found using
        ImageRegion::GetNumberOfPixels()). 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_ComputeIndex(self, offset)


    def GetNumberOfComponentsPerPixel(self) -> "unsigned int":
        """
        GetNumberOfComponentsPerPixel(itkImageF2_ConstPointer self) -> unsigned int

        INTERNAL This method is used internally by filters to copy meta-data
        from the output to the input. Users should not have a need to use this
        method.

        Filters that override the ProcessObject's GenerateOutputInformation()
        should generally have the following line if they want to propagate
        meta- data for both Image and VectorImage

        See:   ImageBase, VectorImage  Returns/Sets the number of components
        in the image. Note that in the ImageBase implementation, this always
        returns 1. Image returns thereturned from NumericTraits for the pixel
        type, and VectorImage

        returns the vector length set by the user. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetNumberOfComponentsPerPixel(self)


    def GetSource(self) -> "itkProcessObject_Pointer":
        """GetSource(itkImageF2_ConstPointer self) -> itkProcessObject_Pointer"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetSource(self)


    def GetSourceOutputName(self) -> "std::string const &":
        """GetSourceOutputName(itkImageF2_ConstPointer self) -> std::string const &"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetSourceOutputName(self)


    def GetSourceOutputIndex(self) -> "unsigned long":
        """GetSourceOutputIndex(itkImageF2_ConstPointer self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetSourceOutputIndex(self)


    def GetReleaseDataFlag(self) -> "bool const &":
        """GetReleaseDataFlag(itkImageF2_ConstPointer self) -> bool const &"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetReleaseDataFlag(self)


    def ShouldIReleaseData(self) -> "bool":
        """ShouldIReleaseData(itkImageF2_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_ShouldIReleaseData(self)


    def GetDataReleased(self) -> "bool":
        """GetDataReleased(itkImageF2_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetDataReleased(self)


    def GetPipelineMTime(self) -> "unsigned long const &":
        """GetPipelineMTime(itkImageF2_ConstPointer self) -> unsigned long const &"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetPipelineMTime(self)


    def GetUpdateMTime(self) -> "unsigned long":
        """GetUpdateMTime(itkImageF2_ConstPointer self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetUpdateMTime(self)


    def GetRealTimeStamp(self) -> "itkRealTimeStamp const &":
        """GetRealTimeStamp(itkImageF2_ConstPointer self) -> itkRealTimeStamp"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetRealTimeStamp(self)


    def DebugOn(self) -> "void":
        """
        DebugOn(itkImageF2_ConstPointer self)

        Turn debugging output on.

        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_DebugOn(self)


    def DebugOff(self) -> "void":
        """
        DebugOff(itkImageF2_ConstPointer self)

        Turn debugging output off.

        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_DebugOff(self)


    def GetDebug(self) -> "bool":
        """
        GetDebug(itkImageF2_ConstPointer self) -> bool

        Get the value of the debug
        flag. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetDebug(self)


    def SetDebug(self, debugFlag: 'bool') -> "void":
        """
        SetDebug(itkImageF2_ConstPointer self, bool debugFlag)

        Set the value of the debug
        flag. A non-zero value turns debugging on. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_SetDebug(self, debugFlag)


    def GetMTime(self) -> "unsigned long":
        """
        GetMTime(itkImageF2_ConstPointer self) -> unsigned long

        Return this object's
        modified time. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetMTime(self)


    def GetTimeStamp(self) -> "itkTimeStamp const &":
        """
        GetTimeStamp(itkImageF2_ConstPointer self) -> itkTimeStamp

        Return this object's
        time stamp. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetTimeStamp(self)


    def Modified(self) -> "void":
        """
        Modified(itkImageF2_ConstPointer self)

        Update the modification
        time for this object. Many filters rely on the modification time to
        determine if they need to recompute their data. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_Modified(self)


    def AddObserver(self, *args) -> "unsigned long":
        """
        AddObserver(itkImageF2_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkImageF2_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long

        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageF2_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args) -> "void":
        """
        InvokeEvent(itkImageF2_ConstPointer self, itkEventObject arg0)
        InvokeEvent(itkImageF2_ConstPointer self, itkEventObject arg0)

        Call Execute on all the
        Commands observing this event id. The actions triggered by this call
        doesn't modify this object. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_InvokeEvent(self, *args)


    def HasObserver(self, event: 'itkEventObject') -> "bool":
        """
        HasObserver(itkImageF2_ConstPointer self, itkEventObject event) -> bool

        Return true if an
        observer is registered for this event. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_HasObserver(self, event)


    def GetMetaDataDictionary(self, *args) -> "itkMetaDataDictionary const &":
        """
        GetMetaDataDictionary(itkImageF2_ConstPointer self) -> itkMetaDataDictionary
        GetMetaDataDictionary(itkImageF2_ConstPointer self) -> itkMetaDataDictionary



        A constant reference to this objects MetaDataDictionary. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetMetaDataDictionary(self, *args)


    def GetObjectName(self) -> "std::string const &":
        """GetObjectName(itkImageF2_ConstPointer self) -> std::string const &"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetObjectName(self)


    def CreateAnother(self) -> "itkLightObject_Pointer":
        """
        CreateAnother(itkImageF2_ConstPointer self) -> itkLightObject_Pointer

        Create an object from
        an instance, potentially deferring to a factory. This method allows
        you to create an instance of an object that is exactly the same type
        as the referring object. This is useful in cases where an object has
        been cast back to a base class. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_CreateAnother(self)


    def GetNameOfClass(self) -> "char const *":
        """
        GetNameOfClass(itkImageF2_ConstPointer self) -> char const *

        Return the name of
        this class as a string. Used by the object factory (implemented in
        New()) to instantiate objects of a named type. Also used for debugging
        and other output information. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetNameOfClass(self)


    def GetReferenceCount(self) -> "int":
        """
        GetReferenceCount(itkImageF2_ConstPointer self) -> int

        Gets the
        reference count on this object. 
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetReferenceCount(self)

itkImageF2_ConstPointer.__deref__ = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer___deref__, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.__ref__ = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer___ref__, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.IsNotNull = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_IsNotNull, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.IsNull = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_IsNull, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetPointer = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetPointer, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.Print = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_Print, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.swap = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_swap, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.Swap = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_Swap, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.Clone = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_Clone, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetBufferPointer = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetBufferPointer, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetPixelContainer, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetPixelAccessor = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetPixelAccessor, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetNeighborhoodAccessor = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetNeighborhoodAccessor, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetDirection = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetDirection, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetInverseDirection = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetInverseDirection, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetSpacing = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetSpacing, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetOrigin = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetOrigin, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetLargestPossibleRegion = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetLargestPossibleRegion, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetBufferedRegion = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetBufferedRegion, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetRequestedRegion = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetRequestedRegion, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetOffsetTable = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetOffsetTable, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.ComputeOffset = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_ComputeOffset, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.ComputeIndex = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_ComputeIndex, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetNumberOfComponentsPerPixel = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetNumberOfComponentsPerPixel, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetSource = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetSource, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetSourceOutputName = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetSourceOutputName, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetSourceOutputIndex = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetSourceOutputIndex, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetReleaseDataFlag = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetReleaseDataFlag, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.ShouldIReleaseData = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_ShouldIReleaseData, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetDataReleased = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetDataReleased, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetPipelineMTime = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetPipelineMTime, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetUpdateMTime = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetUpdateMTime, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetRealTimeStamp = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetRealTimeStamp, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.DebugOn = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_DebugOn, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.DebugOff = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_DebugOff, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetDebug = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetDebug, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.SetDebug = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_SetDebug, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetMTime = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetMTime, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetTimeStamp = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetTimeStamp, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.Modified = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_Modified, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.InvokeEvent = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_InvokeEvent, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.HasObserver = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_HasObserver, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetMetaDataDictionary = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetMetaDataDictionary, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetObjectName = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetObjectName, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.CreateAnother = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_CreateAnother, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetNameOfClass = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetNameOfClass, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer.GetReferenceCount = new_instancemethod(_itkImageRTKPython.itkImageF2_ConstPointer_GetReferenceCount, None, itkImageF2_ConstPointer)
itkImageF2_ConstPointer_swigregister = _itkImageRTKPython.itkImageF2_ConstPointer_swigregister
itkImageF2_ConstPointer_swigregister(itkImageF2_ConstPointer)

class itkImageF3_ConstPointer(object):
    """Proxy of C++ itkImageF3_ConstPointer class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkImageF3_ConstPointer self) -> itkImageF3_ConstPointer
        __init__(itkImageF3_ConstPointer self, itkImageF3_ConstPointer p) -> itkImageF3_ConstPointer
        __init__(itkImageF3_ConstPointer self, itkImageF3 p) -> itkImageF3_ConstPointer
        """
        _itkImageRTKPython.itkImageF3_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageF3_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF3_ConstPointer

    def __deref__(self) -> "itkImageF3 const *":
        """__deref__(itkImageF3_ConstPointer self) -> itkImageF3"""
        return _itkImageRTKPython.itkImageF3_ConstPointer___deref__(self)


    def __ref__(self) -> "itkImageF3 const &":
        """__ref__(itkImageF3_ConstPointer self) -> itkImageF3"""
        return _itkImageRTKPython.itkImageF3_ConstPointer___ref__(self)


    def IsNotNull(self) -> "bool":
        """IsNotNull(itkImageF3_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_IsNotNull(self)


    def IsNull(self) -> "bool":
        """IsNull(itkImageF3_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_IsNull(self)


    def GetPointer(self) -> "itkImageF3 const *":
        """GetPointer(itkImageF3_ConstPointer self) -> itkImageF3"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetPointer(self)


    def Print(self, os: 'ostream') -> "itkImageF3 const *":
        """Print(itkImageF3_ConstPointer self, ostream os) -> itkImageF3"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_Print(self, os)


    def swap(self, other: 'itkImageF3_ConstPointer') -> "void":
        """swap(itkImageF3_ConstPointer self, itkImageF3_ConstPointer other)"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_swap(self, other)


    def Swap(self, other: 'itkImageF3_ConstPointer') -> "void":
        """Swap(itkImageF3_ConstPointer self, itkImageF3_ConstPointer other)"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_Swap(self, other)


    def Clone(self) -> "itkImageF3_Pointer":
        """Clone(itkImageF3_ConstPointer self) -> itkImageF3_Pointer"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_Clone(self)


    def GetBufferPointer(self, *args) -> "float const *":
        """
        GetBufferPointer(itkImageF3_ConstPointer self) -> float
        GetBufferPointer(itkImageF3_ConstPointer self) -> float const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,float > const *":
        """
        GetPixelContainer(itkImageF3_ConstPointer self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(itkImageF3_ConstPointer self) -> itk::ImportImageContainer< unsigned long,float > const *

        Return a pointer
        to the container. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetPixelContainer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< float > const":
        """
        GetPixelAccessor(itkImageF3_ConstPointer self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(itkImageF3_ConstPointer self) -> itk::DefaultPixelAccessor< float > const

        Return the Pixel
        Accesor object 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageF3_ConstPointer self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > >
        GetNeighborhoodAccessor(itkImageF3_ConstPointer self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetNeighborhoodAccessor(self, *args)


    def GetDirection(self) -> "itkMatrixD33 const &":
        """
        GetDirection(itkImageF3_ConstPointer self) -> itkMatrixD33

        Get the direction
        cosines of the image. The direction cosines are vectors that point
        from one pixel to the next. For ImageBase and Image, the default
        direction is identity. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetDirection(self)


    def GetInverseDirection(self) -> "itkMatrixD33 const &":
        """
        GetInverseDirection(itkImageF3_ConstPointer self) -> itkMatrixD33

        Get the inverse
        direction cosines of the image. These are calculated automatically in
        SetDirection, thus there is no Set accessor. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetInverseDirection(self)


    def GetSpacing(self) -> "itkVectorD3 const &":
        """
        GetSpacing(itkImageF3_ConstPointer self) -> itkVectorD3

        Get the spacing (size of
        a pixel) `of the image. The spacing is the geometric distance between
        image samples along each dimension. The value returned is a
        Vector<double, VImageDimension>. For ImageBase and Image, the default
        data spacing is unity. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetSpacing(self)


    def GetOrigin(self) -> "itkPointD3 const &":
        """
        GetOrigin(itkImageF3_ConstPointer self) -> itkPointD3

        Get the origin of the
        image. The origin is the geometric coordinates of the index (0,0). The
        value returned is a Point<double, VImageDimension>. For ImageBase and
        Image, the default origin is 0. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetOrigin(self)


    def GetLargestPossibleRegion(self) -> "itkImageRegion3 const &":
        """
        GetLargestPossibleRegion(itkImageF3_ConstPointer self) -> itkImageRegion3

        Get the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary true conditions. See:
        ImageRegion, GetBufferedRegion(), GetRequestedRegion() 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetLargestPossibleRegion(self)


    def GetBufferedRegion(self) -> "itkImageRegion3 const &":
        """
        GetBufferedRegion(itkImageF3_ConstPointer self) -> itkImageRegion3

        Get the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:   ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetBufferedRegion(self)


    def GetRequestedRegion(self) -> "itkImageRegion3 const &":
        """
        GetRequestedRegion(itkImageF3_ConstPointer self) -> itkImageRegion3

        Get the region
        object that defines the size and starting index for the region of the
        image requested (i.e., the region of the image to be operated on by a
        filter). See:   ImageRegion, SetLargestPossibleRegion(),
        SetBufferedRegion() 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetRequestedRegion(self)


    def GetOffsetTable(self) -> "long const *":
        """
        GetOffsetTable(itkImageF3_ConstPointer self) -> long const *

        Get the offset
        table. The offset table gives increments for moving from one pixel to
        next in the current row, column, slice, etc.. This table if of size
        [VImageDimension+1], because its values are computed progressively as:
        {1, N1, N1*N2, N1*N2*N3,...,(N1*...*Nn)} Where the values {N1,...,Nn}
        are the elements of the BufferedRegion::Size array. The last element
        of the OffsetTable is equivalent to the BufferSize. Having a
        [VImageDimension+1] size array, simplifies the implementation of some
        data accessing algorithms. The entries in the offset table are only
        valid after the BufferedRegion is set. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetOffsetTable(self)


    def ComputeOffset(self, ind: 'itkIndex3') -> "long":
        """
        ComputeOffset(itkImageF3_ConstPointer self, itkIndex3 ind) -> long

        Compute an offset
        from the beginning of the buffer for a pixel at the specified index.
        The index is not checked as to whether it is inside the current
        buffer, so the computed offset could conceivably be outside the
        buffer. If bounds checking is needed, one can call
        ImageRegion::IsInside(ind) on the BufferedRegion prior to calling
        ComputeOffset. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_ComputeOffset(self, ind)


    def ComputeIndex(self, offset: 'long') -> "itkIndex3":
        """
        ComputeIndex(itkImageF3_ConstPointer self, long offset) -> itkIndex3

        Compute the index of
        the pixel at a specified offset from the beginning of the buffered
        region. Bounds checking is not performed. Thus, the computed index
        could be outside the BufferedRegion. To ensure a valid index, the
        parameter "offset" should be between 0 and the number of pixels in
        the BufferedRegion (the latter can be found using
        ImageRegion::GetNumberOfPixels()). 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_ComputeIndex(self, offset)


    def GetNumberOfComponentsPerPixel(self) -> "unsigned int":
        """
        GetNumberOfComponentsPerPixel(itkImageF3_ConstPointer self) -> unsigned int

        INTERNAL This method is used internally by filters to copy meta-data
        from the output to the input. Users should not have a need to use this
        method.

        Filters that override the ProcessObject's GenerateOutputInformation()
        should generally have the following line if they want to propagate
        meta- data for both Image and VectorImage

        See:   ImageBase, VectorImage  Returns/Sets the number of components
        in the image. Note that in the ImageBase implementation, this always
        returns 1. Image returns thereturned from NumericTraits for the pixel
        type, and VectorImage

        returns the vector length set by the user. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetNumberOfComponentsPerPixel(self)


    def GetSource(self) -> "itkProcessObject_Pointer":
        """GetSource(itkImageF3_ConstPointer self) -> itkProcessObject_Pointer"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetSource(self)


    def GetSourceOutputName(self) -> "std::string const &":
        """GetSourceOutputName(itkImageF3_ConstPointer self) -> std::string const &"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetSourceOutputName(self)


    def GetSourceOutputIndex(self) -> "unsigned long":
        """GetSourceOutputIndex(itkImageF3_ConstPointer self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetSourceOutputIndex(self)


    def GetReleaseDataFlag(self) -> "bool const &":
        """GetReleaseDataFlag(itkImageF3_ConstPointer self) -> bool const &"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetReleaseDataFlag(self)


    def ShouldIReleaseData(self) -> "bool":
        """ShouldIReleaseData(itkImageF3_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_ShouldIReleaseData(self)


    def GetDataReleased(self) -> "bool":
        """GetDataReleased(itkImageF3_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetDataReleased(self)


    def GetPipelineMTime(self) -> "unsigned long const &":
        """GetPipelineMTime(itkImageF3_ConstPointer self) -> unsigned long const &"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetPipelineMTime(self)


    def GetUpdateMTime(self) -> "unsigned long":
        """GetUpdateMTime(itkImageF3_ConstPointer self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetUpdateMTime(self)


    def GetRealTimeStamp(self) -> "itkRealTimeStamp const &":
        """GetRealTimeStamp(itkImageF3_ConstPointer self) -> itkRealTimeStamp"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetRealTimeStamp(self)


    def DebugOn(self) -> "void":
        """
        DebugOn(itkImageF3_ConstPointer self)

        Turn debugging output on.

        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_DebugOn(self)


    def DebugOff(self) -> "void":
        """
        DebugOff(itkImageF3_ConstPointer self)

        Turn debugging output off.

        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_DebugOff(self)


    def GetDebug(self) -> "bool":
        """
        GetDebug(itkImageF3_ConstPointer self) -> bool

        Get the value of the debug
        flag. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetDebug(self)


    def SetDebug(self, debugFlag: 'bool') -> "void":
        """
        SetDebug(itkImageF3_ConstPointer self, bool debugFlag)

        Set the value of the debug
        flag. A non-zero value turns debugging on. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_SetDebug(self, debugFlag)


    def GetMTime(self) -> "unsigned long":
        """
        GetMTime(itkImageF3_ConstPointer self) -> unsigned long

        Return this object's
        modified time. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetMTime(self)


    def GetTimeStamp(self) -> "itkTimeStamp const &":
        """
        GetTimeStamp(itkImageF3_ConstPointer self) -> itkTimeStamp

        Return this object's
        time stamp. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetTimeStamp(self)


    def Modified(self) -> "void":
        """
        Modified(itkImageF3_ConstPointer self)

        Update the modification
        time for this object. Many filters rely on the modification time to
        determine if they need to recompute their data. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_Modified(self)


    def AddObserver(self, *args) -> "unsigned long":
        """
        AddObserver(itkImageF3_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkImageF3_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long

        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageF3_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args) -> "void":
        """
        InvokeEvent(itkImageF3_ConstPointer self, itkEventObject arg0)
        InvokeEvent(itkImageF3_ConstPointer self, itkEventObject arg0)

        Call Execute on all the
        Commands observing this event id. The actions triggered by this call
        doesn't modify this object. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_InvokeEvent(self, *args)


    def HasObserver(self, event: 'itkEventObject') -> "bool":
        """
        HasObserver(itkImageF3_ConstPointer self, itkEventObject event) -> bool

        Return true if an
        observer is registered for this event. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_HasObserver(self, event)


    def GetMetaDataDictionary(self, *args) -> "itkMetaDataDictionary const &":
        """
        GetMetaDataDictionary(itkImageF3_ConstPointer self) -> itkMetaDataDictionary
        GetMetaDataDictionary(itkImageF3_ConstPointer self) -> itkMetaDataDictionary



        A constant reference to this objects MetaDataDictionary. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetMetaDataDictionary(self, *args)


    def GetObjectName(self) -> "std::string const &":
        """GetObjectName(itkImageF3_ConstPointer self) -> std::string const &"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetObjectName(self)


    def CreateAnother(self) -> "itkLightObject_Pointer":
        """
        CreateAnother(itkImageF3_ConstPointer self) -> itkLightObject_Pointer

        Create an object from
        an instance, potentially deferring to a factory. This method allows
        you to create an instance of an object that is exactly the same type
        as the referring object. This is useful in cases where an object has
        been cast back to a base class. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_CreateAnother(self)


    def GetNameOfClass(self) -> "char const *":
        """
        GetNameOfClass(itkImageF3_ConstPointer self) -> char const *

        Return the name of
        this class as a string. Used by the object factory (implemented in
        New()) to instantiate objects of a named type. Also used for debugging
        and other output information. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetNameOfClass(self)


    def GetReferenceCount(self) -> "int":
        """
        GetReferenceCount(itkImageF3_ConstPointer self) -> int

        Gets the
        reference count on this object. 
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetReferenceCount(self)

itkImageF3_ConstPointer.__deref__ = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer___deref__, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.__ref__ = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer___ref__, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.IsNotNull = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_IsNotNull, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.IsNull = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_IsNull, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetPointer = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetPointer, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.Print = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_Print, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.swap = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_swap, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.Swap = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_Swap, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.Clone = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_Clone, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetBufferPointer = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetBufferPointer, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetPixelContainer, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetPixelAccessor = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetPixelAccessor, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetNeighborhoodAccessor = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetNeighborhoodAccessor, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetDirection = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetDirection, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetInverseDirection = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetInverseDirection, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetSpacing = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetSpacing, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetOrigin = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetOrigin, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetLargestPossibleRegion = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetLargestPossibleRegion, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetBufferedRegion = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetBufferedRegion, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetRequestedRegion = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetRequestedRegion, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetOffsetTable = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetOffsetTable, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.ComputeOffset = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_ComputeOffset, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.ComputeIndex = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_ComputeIndex, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetNumberOfComponentsPerPixel = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetNumberOfComponentsPerPixel, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetSource = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetSource, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetSourceOutputName = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetSourceOutputName, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetSourceOutputIndex = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetSourceOutputIndex, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetReleaseDataFlag = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetReleaseDataFlag, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.ShouldIReleaseData = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_ShouldIReleaseData, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetDataReleased = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetDataReleased, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetPipelineMTime = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetPipelineMTime, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetUpdateMTime = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetUpdateMTime, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetRealTimeStamp = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetRealTimeStamp, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.DebugOn = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_DebugOn, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.DebugOff = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_DebugOff, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetDebug = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetDebug, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.SetDebug = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_SetDebug, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetMTime = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetMTime, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetTimeStamp = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetTimeStamp, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.Modified = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_Modified, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.InvokeEvent = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_InvokeEvent, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.HasObserver = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_HasObserver, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetMetaDataDictionary = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetMetaDataDictionary, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetObjectName = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetObjectName, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.CreateAnother = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_CreateAnother, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetNameOfClass = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetNameOfClass, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer.GetReferenceCount = new_instancemethod(_itkImageRTKPython.itkImageF3_ConstPointer_GetReferenceCount, None, itkImageF3_ConstPointer)
itkImageF3_ConstPointer_swigregister = _itkImageRTKPython.itkImageF3_ConstPointer_swigregister
itkImageF3_ConstPointer_swigregister(itkImageF3_ConstPointer)

class itkImageF4(itkImagePython.itkImageBase4):
    """Proxy of C++ itkImageF4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageF4_Pointer":
        """__New_orig__() -> itkImageF4_Pointer"""
        return _itkImageRTKPython.itkImageF4___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageF4_Pointer":
        """Clone(itkImageF4 self) -> itkImageF4_Pointer"""
        return _itkImageRTKPython.itkImageF4_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageF4 self, bool initializePixels=False)
        Allocate(itkImageF4 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions() or SetBufferedRegion().

        This method should be pure virtual, if backwards compatibility was not
        required. 
        """
        return _itkImageRTKPython.itkImageF4_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'float const &') -> "void":
        """FillBuffer(itkImageF4 self, float const & value)"""
        return _itkImageRTKPython.itkImageF4_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex4', value: 'float const &') -> "void":
        """SetPixel(itkImageF4 self, itkIndex4 index, float const & value)"""
        return _itkImageRTKPython.itkImageF4_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "float &":
        """
        GetPixel(itkImageF4 self, itkIndex4 index) -> float const
        GetPixel(itkImageF4 self, itkIndex4 index) -> float &
        """
        return _itkImageRTKPython.itkImageF4_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "float const *":
        """
        GetBufferPointer(itkImageF4 self) -> float
        GetBufferPointer(itkImageF4 self) -> float const *
        """
        return _itkImageRTKPython.itkImageF4_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,float > const *":
        """
        GetPixelContainer(itkImageF4 self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(itkImageF4 self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkImageRTKPython.itkImageF4_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,float > *') -> "void":
        """SetPixelContainer(itkImageF4 self, itk::ImportImageContainer< unsigned long,float > * container)"""
        return _itkImageRTKPython.itkImageF4_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageF4') -> "void":
        """
        Graft(itkImageF4 self, itkImageF4 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. Subclasses of
        ImageBase are responsible for copying the pixel container. 
        """
        return _itkImageRTKPython.itkImageF4_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< float > const":
        """
        GetPixelAccessor(itkImageF4 self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(itkImageF4 self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkImageRTKPython.itkImageF4_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< float,4 > > const":
        """
        GetNeighborhoodAccessor(itkImageF4 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,4 > >
        GetNeighborhoodAccessor(itkImageF4 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,4 > > const
        """
        return _itkImageRTKPython.itkImageF4_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF4

    def cast(obj: 'itkLightObject') -> "itkImageF4 *":
        """cast(itkLightObject obj) -> itkImageF4"""
        return _itkImageRTKPython.itkImageF4_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageF4

        Create a new object of the class itkImageF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF4.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageF4.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageF4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageF4.Clone = new_instancemethod(_itkImageRTKPython.itkImageF4_Clone, None, itkImageF4)
itkImageF4.Allocate = new_instancemethod(_itkImageRTKPython.itkImageF4_Allocate, None, itkImageF4)
itkImageF4.FillBuffer = new_instancemethod(_itkImageRTKPython.itkImageF4_FillBuffer, None, itkImageF4)
itkImageF4.SetPixel = new_instancemethod(_itkImageRTKPython.itkImageF4_SetPixel, None, itkImageF4)
itkImageF4.GetPixel = new_instancemethod(_itkImageRTKPython.itkImageF4_GetPixel, None, itkImageF4)
itkImageF4.GetBufferPointer = new_instancemethod(_itkImageRTKPython.itkImageF4_GetBufferPointer, None, itkImageF4)
itkImageF4.GetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageF4_GetPixelContainer, None, itkImageF4)
itkImageF4.SetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageF4_SetPixelContainer, None, itkImageF4)
itkImageF4.Graft = new_instancemethod(_itkImageRTKPython.itkImageF4_Graft, None, itkImageF4)
itkImageF4.GetPixelAccessor = new_instancemethod(_itkImageRTKPython.itkImageF4_GetPixelAccessor, None, itkImageF4)
itkImageF4.GetNeighborhoodAccessor = new_instancemethod(_itkImageRTKPython.itkImageF4_GetNeighborhoodAccessor, None, itkImageF4)
itkImageF4_swigregister = _itkImageRTKPython.itkImageF4_swigregister
itkImageF4_swigregister(itkImageF4)

def itkImageF4___New_orig__() -> "itkImageF4_Pointer":
    """itkImageF4___New_orig__() -> itkImageF4_Pointer"""
    return _itkImageRTKPython.itkImageF4___New_orig__()

def itkImageF4_cast(obj: 'itkLightObject') -> "itkImageF4 *":
    """itkImageF4_cast(itkLightObject obj) -> itkImageF4"""
    return _itkImageRTKPython.itkImageF4_cast(obj)

class itkImageF4_ConstPointer(object):
    """Proxy of C++ itkImageF4_ConstPointer class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkImageF4_ConstPointer self) -> itkImageF4_ConstPointer
        __init__(itkImageF4_ConstPointer self, itkImageF4_ConstPointer p) -> itkImageF4_ConstPointer
        __init__(itkImageF4_ConstPointer self, itkImageF4 p) -> itkImageF4_ConstPointer
        """
        _itkImageRTKPython.itkImageF4_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageF4_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF4_ConstPointer

    def __deref__(self) -> "itkImageF4 const *":
        """__deref__(itkImageF4_ConstPointer self) -> itkImageF4"""
        return _itkImageRTKPython.itkImageF4_ConstPointer___deref__(self)


    def __ref__(self) -> "itkImageF4 const &":
        """__ref__(itkImageF4_ConstPointer self) -> itkImageF4"""
        return _itkImageRTKPython.itkImageF4_ConstPointer___ref__(self)


    def IsNotNull(self) -> "bool":
        """IsNotNull(itkImageF4_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_IsNotNull(self)


    def IsNull(self) -> "bool":
        """IsNull(itkImageF4_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_IsNull(self)


    def GetPointer(self) -> "itkImageF4 const *":
        """GetPointer(itkImageF4_ConstPointer self) -> itkImageF4"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetPointer(self)


    def Print(self, os: 'ostream') -> "itkImageF4 const *":
        """Print(itkImageF4_ConstPointer self, ostream os) -> itkImageF4"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_Print(self, os)


    def swap(self, other: 'itkImageF4_ConstPointer') -> "void":
        """swap(itkImageF4_ConstPointer self, itkImageF4_ConstPointer other)"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_swap(self, other)


    def Swap(self, other: 'itkImageF4_ConstPointer') -> "void":
        """Swap(itkImageF4_ConstPointer self, itkImageF4_ConstPointer other)"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_Swap(self, other)


    def Clone(self) -> "itkImageF4_Pointer":
        """Clone(itkImageF4_ConstPointer self) -> itkImageF4_Pointer"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_Clone(self)


    def GetBufferPointer(self, *args) -> "float const *":
        """
        GetBufferPointer(itkImageF4_ConstPointer self) -> float
        GetBufferPointer(itkImageF4_ConstPointer self) -> float const *
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,float > const *":
        """
        GetPixelContainer(itkImageF4_ConstPointer self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(itkImageF4_ConstPointer self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetPixelContainer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< float > const":
        """
        GetPixelAccessor(itkImageF4_ConstPointer self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(itkImageF4_ConstPointer self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< float,4 > > const":
        """
        GetNeighborhoodAccessor(itkImageF4_ConstPointer self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,4 > >
        GetNeighborhoodAccessor(itkImageF4_ConstPointer self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,4 > > const
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetNeighborhoodAccessor(self, *args)


    def GetDirection(self) -> "itkMatrixD44 const &":
        """
        GetDirection(itkImageF4_ConstPointer self) -> itkMatrixD44

        Get the direction
        cosines of the image. The direction cosines are vectors that point
        from one pixel to the next. For ImageBase and Image, the default
        direction is identity. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetDirection(self)


    def GetInverseDirection(self) -> "itkMatrixD44 const &":
        """
        GetInverseDirection(itkImageF4_ConstPointer self) -> itkMatrixD44

        Get the inverse
        direction cosines of the image. These are calculated automatically in
        SetDirection, thus there is no Set accessor. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetInverseDirection(self)


    def GetSpacing(self) -> "itkVectorD4 const &":
        """
        GetSpacing(itkImageF4_ConstPointer self) -> itkVectorD4

        Get the spacing (size of
        a pixel) `of the image. The spacing is the geometric distance between
        image samples along each dimension. The value returned is a
        Vector<double, VImageDimension>. For ImageBase and Image, the default
        data spacing is unity. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetSpacing(self)


    def GetOrigin(self) -> "itkPointD4 const &":
        """
        GetOrigin(itkImageF4_ConstPointer self) -> itkPointD4

        Get the origin of the
        image. The origin is the geometric coordinates of the index (0,0). The
        value returned is a Point<double, VImageDimension>. For ImageBase and
        Image, the default origin is 0. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetOrigin(self)


    def GetLargestPossibleRegion(self) -> "itk::ImageRegion< 4 > const &":
        """
        GetLargestPossibleRegion(itkImageF4_ConstPointer self) -> itk::ImageRegion< 4 > const &

        Get the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary true conditions. See:
        ImageRegion, GetBufferedRegion(), GetRequestedRegion() 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetLargestPossibleRegion(self)


    def GetBufferedRegion(self) -> "itk::ImageRegion< 4 > const &":
        """
        GetBufferedRegion(itkImageF4_ConstPointer self) -> itk::ImageRegion< 4 > const &

        Get the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:   ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetBufferedRegion(self)


    def GetRequestedRegion(self) -> "itk::ImageRegion< 4 > const &":
        """
        GetRequestedRegion(itkImageF4_ConstPointer self) -> itk::ImageRegion< 4 > const &

        Get the region
        object that defines the size and starting index for the region of the
        image requested (i.e., the region of the image to be operated on by a
        filter). See:   ImageRegion, SetLargestPossibleRegion(),
        SetBufferedRegion() 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetRequestedRegion(self)


    def GetOffsetTable(self) -> "long const *":
        """
        GetOffsetTable(itkImageF4_ConstPointer self) -> long const *

        Get the offset
        table. The offset table gives increments for moving from one pixel to
        next in the current row, column, slice, etc.. This table if of size
        [VImageDimension+1], because its values are computed progressively as:
        {1, N1, N1*N2, N1*N2*N3,...,(N1*...*Nn)} Where the values {N1,...,Nn}
        are the elements of the BufferedRegion::Size array. The last element
        of the OffsetTable is equivalent to the BufferSize. Having a
        [VImageDimension+1] size array, simplifies the implementation of some
        data accessing algorithms. The entries in the offset table are only
        valid after the BufferedRegion is set. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetOffsetTable(self)


    def ComputeOffset(self, ind: 'itkIndex4') -> "long":
        """
        ComputeOffset(itkImageF4_ConstPointer self, itkIndex4 ind) -> long

        Compute an offset
        from the beginning of the buffer for a pixel at the specified index.
        The index is not checked as to whether it is inside the current
        buffer, so the computed offset could conceivably be outside the
        buffer. If bounds checking is needed, one can call
        ImageRegion::IsInside(ind) on the BufferedRegion prior to calling
        ComputeOffset. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_ComputeOffset(self, ind)


    def ComputeIndex(self, offset: 'long') -> "itkIndex4":
        """
        ComputeIndex(itkImageF4_ConstPointer self, long offset) -> itkIndex4

        Compute the index of
        the pixel at a specified offset from the beginning of the buffered
        region. Bounds checking is not performed. Thus, the computed index
        could be outside the BufferedRegion. To ensure a valid index, the
        parameter "offset" should be between 0 and the number of pixels in
        the BufferedRegion (the latter can be found using
        ImageRegion::GetNumberOfPixels()). 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_ComputeIndex(self, offset)


    def GetNumberOfComponentsPerPixel(self) -> "unsigned int":
        """
        GetNumberOfComponentsPerPixel(itkImageF4_ConstPointer self) -> unsigned int

        INTERNAL This method is used internally by filters to copy meta-data
        from the output to the input. Users should not have a need to use this
        method.

        Filters that override the ProcessObject's GenerateOutputInformation()
        should generally have the following line if they want to propagate
        meta- data for both Image and VectorImage

        See:   ImageBase, VectorImage  Returns/Sets the number of components
        in the image. Note that in the ImageBase implementation, this always
        returns 1. Image returns thereturned from NumericTraits for the pixel
        type, and VectorImage

        returns the vector length set by the user. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetNumberOfComponentsPerPixel(self)


    def GetSource(self) -> "itkProcessObject_Pointer":
        """GetSource(itkImageF4_ConstPointer self) -> itkProcessObject_Pointer"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetSource(self)


    def GetSourceOutputName(self) -> "std::string const &":
        """GetSourceOutputName(itkImageF4_ConstPointer self) -> std::string const &"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetSourceOutputName(self)


    def GetSourceOutputIndex(self) -> "unsigned long":
        """GetSourceOutputIndex(itkImageF4_ConstPointer self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetSourceOutputIndex(self)


    def GetReleaseDataFlag(self) -> "bool const &":
        """GetReleaseDataFlag(itkImageF4_ConstPointer self) -> bool const &"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetReleaseDataFlag(self)


    def ShouldIReleaseData(self) -> "bool":
        """ShouldIReleaseData(itkImageF4_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_ShouldIReleaseData(self)


    def GetDataReleased(self) -> "bool":
        """GetDataReleased(itkImageF4_ConstPointer self) -> bool"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetDataReleased(self)


    def GetPipelineMTime(self) -> "unsigned long const &":
        """GetPipelineMTime(itkImageF4_ConstPointer self) -> unsigned long const &"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetPipelineMTime(self)


    def GetUpdateMTime(self) -> "unsigned long":
        """GetUpdateMTime(itkImageF4_ConstPointer self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetUpdateMTime(self)


    def GetRealTimeStamp(self) -> "itkRealTimeStamp const &":
        """GetRealTimeStamp(itkImageF4_ConstPointer self) -> itkRealTimeStamp"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetRealTimeStamp(self)


    def DebugOn(self) -> "void":
        """
        DebugOn(itkImageF4_ConstPointer self)

        Turn debugging output on.

        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_DebugOn(self)


    def DebugOff(self) -> "void":
        """
        DebugOff(itkImageF4_ConstPointer self)

        Turn debugging output off.

        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_DebugOff(self)


    def GetDebug(self) -> "bool":
        """
        GetDebug(itkImageF4_ConstPointer self) -> bool

        Get the value of the debug
        flag. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetDebug(self)


    def SetDebug(self, debugFlag: 'bool') -> "void":
        """
        SetDebug(itkImageF4_ConstPointer self, bool debugFlag)

        Set the value of the debug
        flag. A non-zero value turns debugging on. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_SetDebug(self, debugFlag)


    def GetMTime(self) -> "unsigned long":
        """
        GetMTime(itkImageF4_ConstPointer self) -> unsigned long

        Return this object's
        modified time. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetMTime(self)


    def GetTimeStamp(self) -> "itkTimeStamp const &":
        """
        GetTimeStamp(itkImageF4_ConstPointer self) -> itkTimeStamp

        Return this object's
        time stamp. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetTimeStamp(self)


    def Modified(self) -> "void":
        """
        Modified(itkImageF4_ConstPointer self)

        Update the modification
        time for this object. Many filters rely on the modification time to
        determine if they need to recompute their data. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_Modified(self)


    def AddObserver(self, *args) -> "unsigned long":
        """
        AddObserver(itkImageF4_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkImageF4_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long

        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageF4_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args) -> "void":
        """
        InvokeEvent(itkImageF4_ConstPointer self, itkEventObject arg0)
        InvokeEvent(itkImageF4_ConstPointer self, itkEventObject arg0)

        Call Execute on all the
        Commands observing this event id. The actions triggered by this call
        doesn't modify this object. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_InvokeEvent(self, *args)


    def HasObserver(self, event: 'itkEventObject') -> "bool":
        """
        HasObserver(itkImageF4_ConstPointer self, itkEventObject event) -> bool

        Return true if an
        observer is registered for this event. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_HasObserver(self, event)


    def GetMetaDataDictionary(self, *args) -> "itkMetaDataDictionary const &":
        """
        GetMetaDataDictionary(itkImageF4_ConstPointer self) -> itkMetaDataDictionary
        GetMetaDataDictionary(itkImageF4_ConstPointer self) -> itkMetaDataDictionary



        A constant reference to this objects MetaDataDictionary. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetMetaDataDictionary(self, *args)


    def GetObjectName(self) -> "std::string const &":
        """GetObjectName(itkImageF4_ConstPointer self) -> std::string const &"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetObjectName(self)


    def CreateAnother(self) -> "itkLightObject_Pointer":
        """
        CreateAnother(itkImageF4_ConstPointer self) -> itkLightObject_Pointer

        Create an object from
        an instance, potentially deferring to a factory. This method allows
        you to create an instance of an object that is exactly the same type
        as the referring object. This is useful in cases where an object has
        been cast back to a base class. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_CreateAnother(self)


    def GetNameOfClass(self) -> "char const *":
        """
        GetNameOfClass(itkImageF4_ConstPointer self) -> char const *

        Return the name of
        this class as a string. Used by the object factory (implemented in
        New()) to instantiate objects of a named type. Also used for debugging
        and other output information. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetNameOfClass(self)


    def GetReferenceCount(self) -> "int":
        """
        GetReferenceCount(itkImageF4_ConstPointer self) -> int

        Gets the
        reference count on this object. 
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetReferenceCount(self)

itkImageF4_ConstPointer.__deref__ = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer___deref__, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.__ref__ = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer___ref__, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.IsNotNull = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_IsNotNull, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.IsNull = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_IsNull, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetPointer = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetPointer, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.Print = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_Print, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.swap = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_swap, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.Swap = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_Swap, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.Clone = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_Clone, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetBufferPointer = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetBufferPointer, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetPixelContainer, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetPixelAccessor = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetPixelAccessor, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetNeighborhoodAccessor = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetNeighborhoodAccessor, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetDirection = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetDirection, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetInverseDirection = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetInverseDirection, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetSpacing = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetSpacing, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetOrigin = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetOrigin, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetLargestPossibleRegion = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetLargestPossibleRegion, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetBufferedRegion = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetBufferedRegion, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetRequestedRegion = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetRequestedRegion, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetOffsetTable = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetOffsetTable, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.ComputeOffset = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_ComputeOffset, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.ComputeIndex = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_ComputeIndex, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetNumberOfComponentsPerPixel = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetNumberOfComponentsPerPixel, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetSource = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetSource, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetSourceOutputName = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetSourceOutputName, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetSourceOutputIndex = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetSourceOutputIndex, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetReleaseDataFlag = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetReleaseDataFlag, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.ShouldIReleaseData = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_ShouldIReleaseData, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetDataReleased = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetDataReleased, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetPipelineMTime = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetPipelineMTime, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetUpdateMTime = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetUpdateMTime, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetRealTimeStamp = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetRealTimeStamp, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.DebugOn = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_DebugOn, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.DebugOff = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_DebugOff, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetDebug = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetDebug, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.SetDebug = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_SetDebug, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetMTime = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetMTime, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetTimeStamp = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetTimeStamp, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.Modified = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_Modified, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.InvokeEvent = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_InvokeEvent, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.HasObserver = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_HasObserver, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetMetaDataDictionary = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetMetaDataDictionary, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetObjectName = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetObjectName, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.CreateAnother = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_CreateAnother, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetNameOfClass = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetNameOfClass, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer.GetReferenceCount = new_instancemethod(_itkImageRTKPython.itkImageF4_ConstPointer_GetReferenceCount, None, itkImageF4_ConstPointer)
itkImageF4_ConstPointer_swigregister = _itkImageRTKPython.itkImageF4_ConstPointer_swigregister
itkImageF4_ConstPointer_swigregister(itkImageF4_ConstPointer)

class itkImageUC1(itkImageBaseRTKPython.itkImageBase1):
    """Proxy of C++ itkImageUC1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageUC1_Pointer":
        """__New_orig__() -> itkImageUC1_Pointer"""
        return _itkImageRTKPython.itkImageUC1___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageUC1_Pointer":
        """Clone(itkImageUC1 self) -> itkImageUC1_Pointer"""
        return _itkImageRTKPython.itkImageUC1_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageUC1 self, bool initializePixels=False)
        Allocate(itkImageUC1 self)
        """
        return _itkImageRTKPython.itkImageUC1_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned char const &') -> "void":
        """FillBuffer(itkImageUC1 self, unsigned char const & value)"""
        return _itkImageRTKPython.itkImageUC1_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex1', value: 'unsigned char const &') -> "void":
        """SetPixel(itkImageUC1 self, itkIndex1 index, unsigned char const & value)"""
        return _itkImageRTKPython.itkImageUC1_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned char &":
        """
        GetPixel(itkImageUC1 self, itkIndex1 index) -> unsigned char const
        GetPixel(itkImageUC1 self, itkIndex1 index) -> unsigned char &
        """
        return _itkImageRTKPython.itkImageUC1_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned char const *":
        """
        GetBufferPointer(itkImageUC1 self) -> unsigned char
        GetBufferPointer(itkImageUC1 self) -> unsigned char const *
        """
        return _itkImageRTKPython.itkImageUC1_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned char > const *":
        """
        GetPixelContainer(itkImageUC1 self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(itkImageUC1 self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *
        """
        return _itkImageRTKPython.itkImageUC1_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned char > *') -> "void":
        """SetPixelContainer(itkImageUC1 self, itk::ImportImageContainer< unsigned long,unsigned char > * container)"""
        return _itkImageRTKPython.itkImageUC1_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageUC1') -> "void":
        """Graft(itkImageUC1 self, itkImageUC1 data)"""
        return _itkImageRTKPython.itkImageUC1_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned char > const":
        """
        GetPixelAccessor(itkImageUC1 self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(itkImageUC1 self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkImageRTKPython.itkImageUC1_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,1 > > const":
        """
        GetNeighborhoodAccessor(itkImageUC1 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,1 > >
        GetNeighborhoodAccessor(itkImageUC1 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,1 > > const
        """
        return _itkImageRTKPython.itkImageUC1_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImageRTKPython.delete_itkImageUC1

    def cast(obj: 'itkLightObject') -> "itkImageUC1 *":
        """cast(itkLightObject obj) -> itkImageUC1"""
        return _itkImageRTKPython.itkImageUC1_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageUC1

        Create a new object of the class itkImageUC1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUC1.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUC1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUC1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUC1.Clone = new_instancemethod(_itkImageRTKPython.itkImageUC1_Clone, None, itkImageUC1)
itkImageUC1.Allocate = new_instancemethod(_itkImageRTKPython.itkImageUC1_Allocate, None, itkImageUC1)
itkImageUC1.FillBuffer = new_instancemethod(_itkImageRTKPython.itkImageUC1_FillBuffer, None, itkImageUC1)
itkImageUC1.SetPixel = new_instancemethod(_itkImageRTKPython.itkImageUC1_SetPixel, None, itkImageUC1)
itkImageUC1.GetPixel = new_instancemethod(_itkImageRTKPython.itkImageUC1_GetPixel, None, itkImageUC1)
itkImageUC1.GetBufferPointer = new_instancemethod(_itkImageRTKPython.itkImageUC1_GetBufferPointer, None, itkImageUC1)
itkImageUC1.GetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageUC1_GetPixelContainer, None, itkImageUC1)
itkImageUC1.SetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageUC1_SetPixelContainer, None, itkImageUC1)
itkImageUC1.Graft = new_instancemethod(_itkImageRTKPython.itkImageUC1_Graft, None, itkImageUC1)
itkImageUC1.GetPixelAccessor = new_instancemethod(_itkImageRTKPython.itkImageUC1_GetPixelAccessor, None, itkImageUC1)
itkImageUC1.GetNeighborhoodAccessor = new_instancemethod(_itkImageRTKPython.itkImageUC1_GetNeighborhoodAccessor, None, itkImageUC1)
itkImageUC1_swigregister = _itkImageRTKPython.itkImageUC1_swigregister
itkImageUC1_swigregister(itkImageUC1)

def itkImageUC1___New_orig__() -> "itkImageUC1_Pointer":
    """itkImageUC1___New_orig__() -> itkImageUC1_Pointer"""
    return _itkImageRTKPython.itkImageUC1___New_orig__()

def itkImageUC1_cast(obj: 'itkLightObject') -> "itkImageUC1 *":
    """itkImageUC1_cast(itkLightObject obj) -> itkImageUC1"""
    return _itkImageRTKPython.itkImageUC1_cast(obj)

class itkImageUS4(itkImagePython.itkImageBase4):
    """Proxy of C++ itkImageUS4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageUS4_Pointer":
        """__New_orig__() -> itkImageUS4_Pointer"""
        return _itkImageRTKPython.itkImageUS4___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageUS4_Pointer":
        """Clone(itkImageUS4 self) -> itkImageUS4_Pointer"""
        return _itkImageRTKPython.itkImageUS4_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageUS4 self, bool initializePixels=False)
        Allocate(itkImageUS4 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions() or SetBufferedRegion().

        This method should be pure virtual, if backwards compatibility was not
        required. 
        """
        return _itkImageRTKPython.itkImageUS4_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned short const &') -> "void":
        """FillBuffer(itkImageUS4 self, unsigned short const & value)"""
        return _itkImageRTKPython.itkImageUS4_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex4', value: 'unsigned short const &') -> "void":
        """SetPixel(itkImageUS4 self, itkIndex4 index, unsigned short const & value)"""
        return _itkImageRTKPython.itkImageUS4_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned short &":
        """
        GetPixel(itkImageUS4 self, itkIndex4 index) -> unsigned short const
        GetPixel(itkImageUS4 self, itkIndex4 index) -> unsigned short &
        """
        return _itkImageRTKPython.itkImageUS4_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned short const *":
        """
        GetBufferPointer(itkImageUS4 self) -> unsigned short
        GetBufferPointer(itkImageUS4 self) -> unsigned short const *
        """
        return _itkImageRTKPython.itkImageUS4_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned short > const *":
        """
        GetPixelContainer(itkImageUS4 self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(itkImageUS4 self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *
        """
        return _itkImageRTKPython.itkImageUS4_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned short > *') -> "void":
        """SetPixelContainer(itkImageUS4 self, itk::ImportImageContainer< unsigned long,unsigned short > * container)"""
        return _itkImageRTKPython.itkImageUS4_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageUS4') -> "void":
        """
        Graft(itkImageUS4 self, itkImageUS4 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. Subclasses of
        ImageBase are responsible for copying the pixel container. 
        """
        return _itkImageRTKPython.itkImageUS4_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned short > const":
        """
        GetPixelAccessor(itkImageUS4 self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(itkImageUS4 self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkImageRTKPython.itkImageUS4_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,4 > > const":
        """
        GetNeighborhoodAccessor(itkImageUS4 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,4 > >
        GetNeighborhoodAccessor(itkImageUS4 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,4 > > const
        """
        return _itkImageRTKPython.itkImageUS4_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImageRTKPython.delete_itkImageUS4

    def cast(obj: 'itkLightObject') -> "itkImageUS4 *":
        """cast(itkLightObject obj) -> itkImageUS4"""
        return _itkImageRTKPython.itkImageUS4_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageUS4

        Create a new object of the class itkImageUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUS4.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUS4.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUS4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUS4.Clone = new_instancemethod(_itkImageRTKPython.itkImageUS4_Clone, None, itkImageUS4)
itkImageUS4.Allocate = new_instancemethod(_itkImageRTKPython.itkImageUS4_Allocate, None, itkImageUS4)
itkImageUS4.FillBuffer = new_instancemethod(_itkImageRTKPython.itkImageUS4_FillBuffer, None, itkImageUS4)
itkImageUS4.SetPixel = new_instancemethod(_itkImageRTKPython.itkImageUS4_SetPixel, None, itkImageUS4)
itkImageUS4.GetPixel = new_instancemethod(_itkImageRTKPython.itkImageUS4_GetPixel, None, itkImageUS4)
itkImageUS4.GetBufferPointer = new_instancemethod(_itkImageRTKPython.itkImageUS4_GetBufferPointer, None, itkImageUS4)
itkImageUS4.GetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageUS4_GetPixelContainer, None, itkImageUS4)
itkImageUS4.SetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageUS4_SetPixelContainer, None, itkImageUS4)
itkImageUS4.Graft = new_instancemethod(_itkImageRTKPython.itkImageUS4_Graft, None, itkImageUS4)
itkImageUS4.GetPixelAccessor = new_instancemethod(_itkImageRTKPython.itkImageUS4_GetPixelAccessor, None, itkImageUS4)
itkImageUS4.GetNeighborhoodAccessor = new_instancemethod(_itkImageRTKPython.itkImageUS4_GetNeighborhoodAccessor, None, itkImageUS4)
itkImageUS4_swigregister = _itkImageRTKPython.itkImageUS4_swigregister
itkImageUS4_swigregister(itkImageUS4)

def itkImageUS4___New_orig__() -> "itkImageUS4_Pointer":
    """itkImageUS4___New_orig__() -> itkImageUS4_Pointer"""
    return _itkImageRTKPython.itkImageUS4___New_orig__()

def itkImageUS4_cast(obj: 'itkLightObject') -> "itkImageUS4 *":
    """itkImageUS4_cast(itkLightObject obj) -> itkImageUS4"""
    return _itkImageRTKPython.itkImageUS4_cast(obj)

class itkImageVF34(itkImagePython.itkImageBase4):
    """Proxy of C++ itkImageVF34 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF34_Pointer":
        """__New_orig__() -> itkImageVF34_Pointer"""
        return _itkImageRTKPython.itkImageVF34___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF34_Pointer":
        """Clone(itkImageVF34 self) -> itkImageVF34_Pointer"""
        return _itkImageRTKPython.itkImageVF34_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF34 self, bool initializePixels=False)
        Allocate(itkImageVF34 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions() or SetBufferedRegion().

        This method should be pure virtual, if backwards compatibility was not
        required. 
        """
        return _itkImageRTKPython.itkImageVF34_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF3') -> "void":
        """FillBuffer(itkImageVF34 self, itkVectorF3 value)"""
        return _itkImageRTKPython.itkImageVF34_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex4', value: 'itkVectorF3') -> "void":
        """SetPixel(itkImageVF34 self, itkIndex4 index, itkVectorF3 value)"""
        return _itkImageRTKPython.itkImageVF34_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF3 &":
        """
        GetPixel(itkImageVF34 self, itkIndex4 index) -> itkVectorF3
        GetPixel(itkImageVF34 self, itkIndex4 index) -> itkVectorF3
        """
        return _itkImageRTKPython.itkImageVF34_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF3 const *":
        """
        GetBufferPointer(itkImageVF34 self) -> itkVectorF3
        GetBufferPointer(itkImageVF34 self) -> itkVectorF3
        """
        return _itkImageRTKPython.itkImageVF34_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > const *":
        """
        GetPixelContainer(itkImageVF34 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > >
        GetPixelContainer(itkImageVF34 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > const *
        """
        return _itkImageRTKPython.itkImageVF34_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > *') -> "void":
        """SetPixelContainer(itkImageVF34 self, itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > * container)"""
        return _itkImageRTKPython.itkImageVF34_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF34') -> "void":
        """
        Graft(itkImageVF34 self, itkImageVF34 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. Subclasses of
        ImageBase are responsible for copying the pixel container. 
        """
        return _itkImageRTKPython.itkImageVF34_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,3 > > const":
        """
        GetPixelAccessor(itkImageVF34 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > >
        GetPixelAccessor(itkImageVF34 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > > const
        """
        return _itkImageRTKPython.itkImageVF34_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,4 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF34 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,4 > >
        GetNeighborhoodAccessor(itkImageVF34 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,4 > > const
        """
        return _itkImageRTKPython.itkImageVF34_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImageRTKPython.delete_itkImageVF34

    def cast(obj: 'itkLightObject') -> "itkImageVF34 *":
        """cast(itkLightObject obj) -> itkImageVF34"""
        return _itkImageRTKPython.itkImageVF34_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVF34

        Create a new object of the class itkImageVF34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF34.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF34.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF34.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF34.Clone = new_instancemethod(_itkImageRTKPython.itkImageVF34_Clone, None, itkImageVF34)
itkImageVF34.Allocate = new_instancemethod(_itkImageRTKPython.itkImageVF34_Allocate, None, itkImageVF34)
itkImageVF34.FillBuffer = new_instancemethod(_itkImageRTKPython.itkImageVF34_FillBuffer, None, itkImageVF34)
itkImageVF34.SetPixel = new_instancemethod(_itkImageRTKPython.itkImageVF34_SetPixel, None, itkImageVF34)
itkImageVF34.GetPixel = new_instancemethod(_itkImageRTKPython.itkImageVF34_GetPixel, None, itkImageVF34)
itkImageVF34.GetBufferPointer = new_instancemethod(_itkImageRTKPython.itkImageVF34_GetBufferPointer, None, itkImageVF34)
itkImageVF34.GetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageVF34_GetPixelContainer, None, itkImageVF34)
itkImageVF34.SetPixelContainer = new_instancemethod(_itkImageRTKPython.itkImageVF34_SetPixelContainer, None, itkImageVF34)
itkImageVF34.Graft = new_instancemethod(_itkImageRTKPython.itkImageVF34_Graft, None, itkImageVF34)
itkImageVF34.GetPixelAccessor = new_instancemethod(_itkImageRTKPython.itkImageVF34_GetPixelAccessor, None, itkImageVF34)
itkImageVF34.GetNeighborhoodAccessor = new_instancemethod(_itkImageRTKPython.itkImageVF34_GetNeighborhoodAccessor, None, itkImageVF34)
itkImageVF34_swigregister = _itkImageRTKPython.itkImageVF34_swigregister
itkImageVF34_swigregister(itkImageVF34)

def itkImageVF34___New_orig__() -> "itkImageVF34_Pointer":
    """itkImageVF34___New_orig__() -> itkImageVF34_Pointer"""
    return _itkImageRTKPython.itkImageVF34___New_orig__()

def itkImageVF34_cast(obj: 'itkLightObject') -> "itkImageVF34 *":
    """itkImageVF34_cast(itkLightObject obj) -> itkImageVF34"""
    return _itkImageRTKPython.itkImageVF34_cast(obj)



