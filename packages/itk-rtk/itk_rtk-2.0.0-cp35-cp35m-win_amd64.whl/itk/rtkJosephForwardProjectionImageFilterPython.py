# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkJosephForwardProjectionImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkJosephForwardProjectionImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkJosephForwardProjectionImageFilterPython
            return _rtkJosephForwardProjectionImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkJosephForwardProjectionImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkJosephForwardProjectionImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkJosephForwardProjectionImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import rtkForwardProjectionImageFilterPython
import rtkThreeDCircularProjectionGeometryPython
import rtkProjectionGeometryPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkPointPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkVectorPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import ITKCommonBasePython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkImageToImageFilterCommonPython
import itkImagePython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterBPython

def rtkJosephForwardProjectionImageFilterIF3IF3_New():
  return rtkJosephForwardProjectionImageFilterIF3IF3.New()

class rtkJosephForwardProjectionImageFilterIF3IF3(rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterIF3IF3):
    """Proxy of C++ rtkJosephForwardProjectionImageFilterIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkJosephForwardProjectionImageFilterIF3IF3_Pointer":
        """__New_orig__() -> rtkJosephForwardProjectionImageFilterIF3IF3_Pointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkJosephForwardProjectionImageFilterIF3IF3_Pointer":
        """Clone(rtkJosephForwardProjectionImageFilterIF3IF3 self) -> rtkJosephForwardProjectionImageFilterIF3IF3_Pointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_Clone(self)


    def GetInterpolationWeightMultiplication(self, *args) -> "rtk::Functor::InterpolationWeightMultiplication< float,float,float > const &":
        """
        GetInterpolationWeightMultiplication(rtkJosephForwardProjectionImageFilterIF3IF3 self) -> rtk::Functor::InterpolationWeightMultiplication< float,float,float >
        GetInterpolationWeightMultiplication(rtkJosephForwardProjectionImageFilterIF3IF3 self) -> rtk::Functor::InterpolationWeightMultiplication< float,float,float > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetInterpolationWeightMultiplication(self, *args)


    def SetInterpolationWeightMultiplication(self, _arg: 'rtk::Functor::InterpolationWeightMultiplication< float,float,float > const &') -> "void":
        """SetInterpolationWeightMultiplication(rtkJosephForwardProjectionImageFilterIF3IF3 self, rtk::Functor::InterpolationWeightMultiplication< float,float,float > const & _arg)"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetInterpolationWeightMultiplication(self, _arg)


    def GetProjectedValueAccumulation(self, *args) -> "rtk::Functor::ProjectedValueAccumulation< float,float > const &":
        """
        GetProjectedValueAccumulation(rtkJosephForwardProjectionImageFilterIF3IF3 self) -> rtk::Functor::ProjectedValueAccumulation< float,float >
        GetProjectedValueAccumulation(rtkJosephForwardProjectionImageFilterIF3IF3 self) -> rtk::Functor::ProjectedValueAccumulation< float,float > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetProjectedValueAccumulation(self, *args)


    def SetProjectedValueAccumulation(self, _arg: 'rtk::Functor::ProjectedValueAccumulation< float,float > const &') -> "void":
        """SetProjectedValueAccumulation(rtkJosephForwardProjectionImageFilterIF3IF3 self, rtk::Functor::ProjectedValueAccumulation< float,float > const & _arg)"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetProjectedValueAccumulation(self, _arg)


    def GetSumAlongRay(self, *args) -> "rtk::Functor::SumAlongRay< float,float > const &":
        """
        GetSumAlongRay(rtkJosephForwardProjectionImageFilterIF3IF3 self) -> rtk::Functor::SumAlongRay< float,float >
        GetSumAlongRay(rtkJosephForwardProjectionImageFilterIF3IF3 self) -> rtk::Functor::SumAlongRay< float,float > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetSumAlongRay(self, *args)


    def SetSumAlongRay(self, _arg: 'rtk::Functor::SumAlongRay< float,float > const &') -> "void":
        """SetSumAlongRay(rtkJosephForwardProjectionImageFilterIF3IF3 self, rtk::Functor::SumAlongRay< float,float > const & _arg)"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetSumAlongRay(self, _arg)


    def GetInferiorClip(self) -> "double":
        """GetInferiorClip(rtkJosephForwardProjectionImageFilterIF3IF3 self) -> double"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetInferiorClip(self)


    def SetInferiorClip(self, _arg: 'double const') -> "void":
        """SetInferiorClip(rtkJosephForwardProjectionImageFilterIF3IF3 self, double const _arg)"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetInferiorClip(self, _arg)


    def GetSuperiorClip(self) -> "double":
        """GetSuperiorClip(rtkJosephForwardProjectionImageFilterIF3IF3 self) -> double"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetSuperiorClip(self)


    def SetSuperiorClip(self, _arg: 'double const') -> "void":
        """SetSuperiorClip(rtkJosephForwardProjectionImageFilterIF3IF3 self, double const _arg)"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetSuperiorClip(self, _arg)

    __swig_destroy__ = _rtkJosephForwardProjectionImageFilterPython.delete_rtkJosephForwardProjectionImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "rtkJosephForwardProjectionImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> rtkJosephForwardProjectionImageFilterIF3IF3"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkJosephForwardProjectionImageFilterIF3IF3

        Create a new object of the class rtkJosephForwardProjectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephForwardProjectionImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkJosephForwardProjectionImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkJosephForwardProjectionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkJosephForwardProjectionImageFilterIF3IF3.Clone = new_instancemethod(_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_Clone, None, rtkJosephForwardProjectionImageFilterIF3IF3)
rtkJosephForwardProjectionImageFilterIF3IF3.GetInterpolationWeightMultiplication = new_instancemethod(_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetInterpolationWeightMultiplication, None, rtkJosephForwardProjectionImageFilterIF3IF3)
rtkJosephForwardProjectionImageFilterIF3IF3.SetInterpolationWeightMultiplication = new_instancemethod(_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetInterpolationWeightMultiplication, None, rtkJosephForwardProjectionImageFilterIF3IF3)
rtkJosephForwardProjectionImageFilterIF3IF3.GetProjectedValueAccumulation = new_instancemethod(_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetProjectedValueAccumulation, None, rtkJosephForwardProjectionImageFilterIF3IF3)
rtkJosephForwardProjectionImageFilterIF3IF3.SetProjectedValueAccumulation = new_instancemethod(_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetProjectedValueAccumulation, None, rtkJosephForwardProjectionImageFilterIF3IF3)
rtkJosephForwardProjectionImageFilterIF3IF3.GetSumAlongRay = new_instancemethod(_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetSumAlongRay, None, rtkJosephForwardProjectionImageFilterIF3IF3)
rtkJosephForwardProjectionImageFilterIF3IF3.SetSumAlongRay = new_instancemethod(_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetSumAlongRay, None, rtkJosephForwardProjectionImageFilterIF3IF3)
rtkJosephForwardProjectionImageFilterIF3IF3.GetInferiorClip = new_instancemethod(_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetInferiorClip, None, rtkJosephForwardProjectionImageFilterIF3IF3)
rtkJosephForwardProjectionImageFilterIF3IF3.SetInferiorClip = new_instancemethod(_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetInferiorClip, None, rtkJosephForwardProjectionImageFilterIF3IF3)
rtkJosephForwardProjectionImageFilterIF3IF3.GetSuperiorClip = new_instancemethod(_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetSuperiorClip, None, rtkJosephForwardProjectionImageFilterIF3IF3)
rtkJosephForwardProjectionImageFilterIF3IF3.SetSuperiorClip = new_instancemethod(_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetSuperiorClip, None, rtkJosephForwardProjectionImageFilterIF3IF3)
rtkJosephForwardProjectionImageFilterIF3IF3_swigregister = _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_swigregister
rtkJosephForwardProjectionImageFilterIF3IF3_swigregister(rtkJosephForwardProjectionImageFilterIF3IF3)

def rtkJosephForwardProjectionImageFilterIF3IF3___New_orig__() -> "rtkJosephForwardProjectionImageFilterIF3IF3_Pointer":
    """rtkJosephForwardProjectionImageFilterIF3IF3___New_orig__() -> rtkJosephForwardProjectionImageFilterIF3IF3_Pointer"""
    return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3___New_orig__()

def rtkJosephForwardProjectionImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "rtkJosephForwardProjectionImageFilterIF3IF3 *":
    """rtkJosephForwardProjectionImageFilterIF3IF3_cast(itkLightObject obj) -> rtkJosephForwardProjectionImageFilterIF3IF3"""
    return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_cast(obj)


def joseph_forward_projection_image_filter(*args, **kwargs):
    """Procedural interface for JosephForwardProjectionImageFilter"""
    import itk
    return itk.JosephForwardProjectionImageFilter.__call__(*args, **kwargs)



