# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/home/travis/build/randovania/randovania/randovania/gui/logic_settings_window.ui',
# licensing of '/home/travis/build/randovania/randovania/randovania/gui/logic_settings_window.ui' applies.
#
# Created: Sun Jan 27 00:27:50 2019
#      by: pyside2-uic  running on PySide2 5.12.0
#
# WARNING! All changes made in this file will be lost!

from PySide2 import QtCore, QtGui, QtWidgets

class Ui_LogicSettingsWindow(object):
    def setupUi(self, LogicSettingsWindow):
        LogicSettingsWindow.setObjectName("LogicSettingsWindow")
        LogicSettingsWindow.resize(802, 672)
        self.centralWidget = QtWidgets.QWidget(LogicSettingsWindow)
        self.centralWidget.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.centralWidget.setObjectName("centralWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralWidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.vertical_layout_left = QtWidgets.QVBoxLayout()
        self.vertical_layout_left.setObjectName("vertical_layout_left")
        self.logic_group = QtWidgets.QGroupBox(self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.logic_group.sizePolicy().hasHeightForWidth())
        self.logic_group.setSizePolicy(sizePolicy)
        self.logic_group.setMinimumSize(QtCore.QSize(0, 350))
        self.logic_group.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.logic_group.setChecked(False)
        self.logic_group.setObjectName("logic_group")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.logic_group)
        self.verticalLayout.setObjectName("verticalLayout")
        self.logic_description_label = QtWidgets.QLabel(self.logic_group)
        self.logic_description_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.logic_description_label.setWordWrap(True)
        self.logic_description_label.setObjectName("logic_description_label")
        self.verticalLayout.addWidget(self.logic_description_label)
        self.logic_combo_box = QtWidgets.QComboBox(self.logic_group)
        self.logic_combo_box.setObjectName("logic_combo_box")
        self.logic_combo_box.addItem("")
        self.logic_combo_box.addItem("")
        self.logic_combo_box.addItem("")
        self.logic_combo_box.addItem("")
        self.logic_combo_box.addItem("")
        self.logic_combo_box.addItem("")
        self.logic_combo_box.addItem("")
        self.verticalLayout.addWidget(self.logic_combo_box)
        self.logic_noglitches_label = QtWidgets.QLabel(self.logic_group)
        self.logic_noglitches_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.logic_noglitches_label.setWordWrap(True)
        self.logic_noglitches_label.setObjectName("logic_noglitches_label")
        self.verticalLayout.addWidget(self.logic_noglitches_label)
        self.logic_trivial_label = QtWidgets.QLabel(self.logic_group)
        self.logic_trivial_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.logic_trivial_label.setWordWrap(True)
        self.logic_trivial_label.setObjectName("logic_trivial_label")
        self.verticalLayout.addWidget(self.logic_trivial_label)
        self.logic_easy_label = QtWidgets.QLabel(self.logic_group)
        self.logic_easy_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.logic_easy_label.setWordWrap(True)
        self.logic_easy_label.setObjectName("logic_easy_label")
        self.verticalLayout.addWidget(self.logic_easy_label)
        self.logic_normal_label = QtWidgets.QLabel(self.logic_group)
        self.logic_normal_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.logic_normal_label.setWordWrap(True)
        self.logic_normal_label.setObjectName("logic_normal_label")
        self.verticalLayout.addWidget(self.logic_normal_label)
        self.logic_hard_label = QtWidgets.QLabel(self.logic_group)
        self.logic_hard_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.logic_hard_label.setWordWrap(True)
        self.logic_hard_label.setObjectName("logic_hard_label")
        self.verticalLayout.addWidget(self.logic_hard_label)
        self.logic_hypermode_label = QtWidgets.QLabel(self.logic_group)
        self.logic_hypermode_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.logic_hypermode_label.setWordWrap(True)
        self.logic_hypermode_label.setObjectName("logic_hypermode_label")
        self.verticalLayout.addWidget(self.logic_hypermode_label)
        self.logic_minimalrestrictions_label = QtWidgets.QLabel(self.logic_group)
        self.logic_minimalrestrictions_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.logic_minimalrestrictions_label.setWordWrap(True)
        self.logic_minimalrestrictions_label.setObjectName("logic_minimalrestrictions_label")
        self.verticalLayout.addWidget(self.logic_minimalrestrictions_label)
        self.vertical_layout_left.addWidget(self.logic_group)
        self.itemloss_group = QtWidgets.QGroupBox(self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.itemloss_group.sizePolicy().hasHeightForWidth())
        self.itemloss_group.setSizePolicy(sizePolicy)
        self.itemloss_group.setObjectName("itemloss_group")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.itemloss_group)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.itemloss_check = QtWidgets.QCheckBox(self.itemloss_group)
        self.itemloss_check.setObjectName("itemloss_check")
        self.verticalLayout_6.addWidget(self.itemloss_check)
        self.itemloss_description_label = QtWidgets.QLabel(self.itemloss_group)
        self.itemloss_description_label.setWordWrap(True)
        self.itemloss_description_label.setObjectName("itemloss_description_label")
        self.verticalLayout_6.addWidget(self.itemloss_description_label)
        self.vertical_layout_left.addWidget(self.itemloss_group)
        self.horizontalLayout.addLayout(self.vertical_layout_left)
        self.vertical_layout_right = QtWidgets.QVBoxLayout()
        self.vertical_layout_right.setObjectName("vertical_layout_right")
        self.elevators_group = QtWidgets.QGroupBox(self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.elevators_group.sizePolicy().hasHeightForWidth())
        self.elevators_group.setSizePolicy(sizePolicy)
        self.elevators_group.setObjectName("elevators_group")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.elevators_group)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.elevators_description_label = QtWidgets.QLabel(self.elevators_group)
        self.elevators_description_label.setWordWrap(True)
        self.elevators_description_label.setObjectName("elevators_description_label")
        self.verticalLayout_7.addWidget(self.elevators_description_label)
        self.elevators_combo = QtWidgets.QComboBox(self.elevators_group)
        self.elevators_combo.setObjectName("elevators_combo")
        self.elevators_combo.addItem("")
        self.elevators_combo.addItem("")
        self.verticalLayout_7.addWidget(self.elevators_combo)
        self.vertical_layout_right.addWidget(self.elevators_group)
        self.skytemple_group = QtWidgets.QGroupBox(self.centralWidget)
        self.skytemple_group.setObjectName("skytemple_group")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.skytemple_group)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.skytemple_description = QtWidgets.QLabel(self.skytemple_group)
        self.skytemple_description.setWordWrap(True)
        self.skytemple_description.setObjectName("skytemple_description")
        self.verticalLayout_5.addWidget(self.skytemple_description)
        self.skytemple_combo = QtWidgets.QComboBox(self.skytemple_group)
        self.skytemple_combo.setObjectName("skytemple_combo")
        self.skytemple_combo.addItem("")
        self.skytemple_combo.addItem("")
        self.skytemple_combo.addItem("")
        self.skytemple_combo.addItem("")
        self.verticalLayout_5.addWidget(self.skytemple_combo)
        self.vertical_layout_right.addWidget(self.skytemple_group)
        self.horizontalLayout.addLayout(self.vertical_layout_right)
        LogicSettingsWindow.setCentralWidget(self.centralWidget)
        self.menuBar = QtWidgets.QMenuBar(LogicSettingsWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 802, 21))
        self.menuBar.setObjectName("menuBar")
        LogicSettingsWindow.setMenuBar(self.menuBar)

        self.retranslateUi(LogicSettingsWindow)
        QtCore.QMetaObject.connectSlotsByName(LogicSettingsWindow)

    def retranslateUi(self, LogicSettingsWindow):
        LogicSettingsWindow.setWindowTitle(QtWidgets.QApplication.translate("LogicSettingsWindow", "Someone forgot to name this", None, -1))
        self.logic_group.setTitle(QtWidgets.QApplication.translate("LogicSettingsWindow", "Trick Level", None, -1))
        self.logic_description_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p align=\"justify\">There are logic rules in place which prevent you from being locked out of progression and guaranteeing that you’ll be able to finish the game every time regardless of the distribution of items. More advanced trick levels assumes more knowledge of how the game works and ability to abuse game mechanics.</p><p align=\"justify\">No matter the level, it is always possible to softlock when you enter a room or area that you\'re unable to leave. For example, vanilla beam rooms without the necessary beam to escape, Dark World without Light Beam/Anihhilator Beam, Torvus Bog without Super Missile.</p><p align=\"justify\">However, it may be <span style=\" font-style:italic;\">necessary</span> to enter Dark World without a way to escape if that item is located in the Dark World.</p></body></html>", None, -1))
        self.logic_combo_box.setItemText(0, QtWidgets.QApplication.translate("LogicSettingsWindow", "No Tricks", None, -1))
        self.logic_combo_box.setItemText(1, QtWidgets.QApplication.translate("LogicSettingsWindow", "Trivial", None, -1))
        self.logic_combo_box.setItemText(2, QtWidgets.QApplication.translate("LogicSettingsWindow", "Easy", None, -1))
        self.logic_combo_box.setItemText(3, QtWidgets.QApplication.translate("LogicSettingsWindow", "Normal", None, -1))
        self.logic_combo_box.setItemText(4, QtWidgets.QApplication.translate("LogicSettingsWindow", "Hard", None, -1))
        self.logic_combo_box.setItemText(5, QtWidgets.QApplication.translate("LogicSettingsWindow", "Hypermode", None, -1))
        self.logic_combo_box.setItemText(6, QtWidgets.QApplication.translate("LogicSettingsWindow", "Minimal Checking", None, -1))
        self.logic_noglitches_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p align=\"justify\">This mode requires no knowledge about the game, nor does it require any abuse of game mechanics, making it ideal for casual and first time players.</p></body></html>", None, -1))
        self.logic_trivial_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p align=\"justify\">This mode includes strategies that abuses oversights in the game, such as being able to activate the Hive Dynamo Works portal from the other side of the chasm and bomb jumping in Temple Assembly Site.</p></body></html>", None, -1))
        self.logic_easy_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>This mode assumes you can do simple tricks.</p></body></html>", None, -1))
        self.logic_normal_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>This mode expands on the Easy mode, including more difficult to execute tricks.</p></body></html>", None, -1))
        self.logic_hard_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>This mode expands on Normal with additional tricks, such as Grand Abyss scan dash.</p></body></html>", None, -1))
        self.logic_hypermode_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>This mode considers every single trick and path known to Randovania as valid, such as Polluted Mire without Space Jump. No OOB is included.</p></body></html>", None, -1))
        self.logic_minimalrestrictions_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p align=\"justify\">This mode only checks that Screw Attack, Dark Visor and Light Suit won\'t all be behind Ing Caches and Dark Water, removing the biggest reasons for a pure random layout to be impossible.</p><p align=\"justify\">Since there aren\'t many checks, out of bounds tricks will probably be necessary for many items.</p></body></html>", None, -1))
        self.itemloss_group.setTitle(QtWidgets.QApplication.translate("LogicSettingsWindow", "Item Loss", None, -1))
        self.itemloss_check.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "Samus loses her items in Hive Chamber B", None, -1))
        self.itemloss_description_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p align=\"justify\">Going out of bounds to avoid item loss is not recomended, since one item is permanently unacessible.</p></body></html>", None, -1))
        self.elevators_group.setTitle(QtWidgets.QApplication.translate("LogicSettingsWindow", "Elevators", None, -1))
        self.elevators_description_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>Controls what each elevator connects to.</p><p>Two-way: after taking an elevator, the elevator in the room you\'re left brings you to where you where.<br/>Between Areas: An elevator will never connect to another in the same area.</p></body></html>", None, -1))
        self.elevators_combo.setItemText(0, QtWidgets.QApplication.translate("LogicSettingsWindow", "Original Connections", None, -1))
        self.elevators_combo.setItemText(1, QtWidgets.QApplication.translate("LogicSettingsWindow", "Random: Two-way, between areas", None, -1))
        self.skytemple_group.setTitle(QtWidgets.QApplication.translate("LogicSettingsWindow", "Sky Temple Keys", None, -1))
        self.skytemple_description.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>Controls where the Sky Temple Keys will be located.</p><p>Vanilla Locations: All keys will be located in their original Flying Ing Caches.<br/>All Guardians and Sub-Guardians: One key will be placed in each of the guardians and sub-guardians.<br/>3 in Guardians, 6 fully random: One key will be placed as the reward of each of the guardians, and the rest placed randomly over the game.<br/>9 fully random: Each key will be placed randomly over the game.</p><p>The Guardians are: Amorbis, Chykka and Quadraxis.<br/>The Sub-Guardians are: Bomb Guardian, Jump Guardian, Boost Guardian, Grapple Guardian, Spider Guardian and Power Bomb Guardian.</p><p>The in-game hints for Sky Temple Key locations are <span style=\" font-weight:600;\">not</span> updated.</p></body></html>", None, -1))
        self.skytemple_combo.setItemText(0, QtWidgets.QApplication.translate("LogicSettingsWindow", "Vanilla Locations (Not Randomized)", None, -1))
        self.skytemple_combo.setItemText(1, QtWidgets.QApplication.translate("LogicSettingsWindow", "All Guardians and Sub-Guardians", None, -1))
        self.skytemple_combo.setItemText(2, QtWidgets.QApplication.translate("LogicSettingsWindow", "3 in Guardians, 6 fully random", None, -1))
        self.skytemple_combo.setItemText(3, QtWidgets.QApplication.translate("LogicSettingsWindow", "9 fully random", None, -1))

