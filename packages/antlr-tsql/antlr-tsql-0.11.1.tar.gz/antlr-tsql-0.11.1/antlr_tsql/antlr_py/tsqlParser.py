# Generated from antlr_tsql/tsql.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u01be")
        buf.write("\u0c34\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\3\2\7\2\u015a\n\2\f\2")
        buf.write("\16\2\u015d\13\2\3\2\3\2\3\3\3\3\5\3\u0163\n\3\3\4\3\4")
        buf.write("\5\4\u0167\n\4\6\4\u0169\n\4\r\4\16\4\u016a\3\5\3\5\3")
        buf.write("\5\3\5\5\5\u0171\n\5\3\6\3\6\3\6\3\6\5\6\u0177\n\6\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\5\7\u0188\n\7\3\b\3\b\5\b\u018c\n\b\3\b\5\b\u018f\n")
        buf.write("\b\3\b\3\b\5\b\u0193\n\b\3\b\3\b\5\b\u0197\n\b\3\b\3\b")
        buf.write("\5\b\u019b\n\b\3\b\3\b\3\b\5\b\u01a0\n\b\3\b\3\b\3\b\5")
        buf.write("\b\u01a5\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u01ac\n\b\3\b\5\b")
        buf.write("\u01af\n\b\3\b\3\b\5\b\u01b3\n\b\3\b\5\b\u01b6\n\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\5\b\u01be\n\b\3\b\5\b\u01c1\n\b\3")
        buf.write("\b\3\b\3\b\5\b\u01c6\n\b\3\b\5\b\u01c9\n\b\3\b\3\b\3\b")
        buf.write("\5\b\u01ce\n\b\3\b\3\b\3\b\5\b\u01d3\n\b\3\b\5\b\u01d6")
        buf.write("\n\b\3\b\3\b\3\b\5\b\u01db\n\b\3\b\3\b\3\b\3\b\5\b\u01e1")
        buf.write("\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u01e8\n\b\3\b\3\b\5\b\u01ec")
        buf.write("\n\b\5\b\u01ee\n\b\3\b\3\b\3\b\5\b\u01f3\n\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u01fe\n\b\f\b\16\b\u0201")
        buf.write("\13\b\3\b\3\b\5\b\u0205\n\b\5\b\u0207\n\b\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\5\t\u0210\n\t\3\n\5\n\u0213\n\n\3\n\3")
        buf.write("\n\5\n\u0217\n\n\3\n\5\n\u021a\n\n\3\n\3\n\5\n\u021e\n")
        buf.write("\n\3\n\5\n\u0221\n\n\3\n\3\n\5\n\u0225\n\n\3\n\5\n\u0228")
        buf.write("\n\n\3\n\5\n\u022b\n\n\3\n\5\n\u022e\n\n\3\n\5\n\u0231")
        buf.write("\n\n\3\13\3\13\5\13\u0235\n\13\3\13\3\13\3\13\5\13\u023a")
        buf.write("\n\13\3\f\5\f\u023d\n\f\3\f\3\f\5\f\u0241\n\f\3\f\5\f")
        buf.write("\u0244\n\f\3\f\3\f\5\f\u0248\n\f\3\f\5\f\u024b\n\f\3\f")
        buf.write("\3\f\3\f\3\f\5\f\u0251\n\f\3\f\5\f\u0254\n\f\3\f\3\f\5")
        buf.write("\f\u0258\n\f\3\f\5\f\u025b\n\f\3\f\5\f\u025e\n\f\3\r\3")
        buf.write("\r\3\r\3\r\3\r\5\r\u0265\n\r\3\16\5\16\u0268\n\16\3\16")
        buf.write("\3\16\5\16\u026c\n\16\3\16\5\16\u026f\n\16\3\16\5\16\u0272")
        buf.write("\n\16\3\16\5\16\u0275\n\16\3\17\5\17\u0278\n\17\3\17\3")
        buf.write("\17\5\17\u027c\n\17\3\17\3\17\5\17\u0280\n\17\3\17\5\17")
        buf.write("\u0283\n\17\3\17\3\17\3\17\3\17\7\17\u0289\n\17\f\17\16")
        buf.write("\17\u028c\13\17\3\17\5\17\u028f\n\17\3\17\3\17\5\17\u0293")
        buf.write("\n\17\3\17\5\17\u0296\n\17\3\17\5\17\u0299\n\17\3\17\5")
        buf.write("\17\u029c\n\17\3\17\5\17\u029f\n\17\3\20\3\20\3\20\3\20")
        buf.write("\3\20\5\20\u02a6\n\20\3\20\3\20\5\20\u02aa\n\20\5\20\u02ac")
        buf.write("\n\20\3\21\3\21\3\21\3\21\7\21\u02b2\n\21\f\21\16\21\u02b5")
        buf.write("\13\21\3\21\3\21\3\21\5\21\u02ba\n\21\3\21\3\21\3\21\3")
        buf.write("\21\5\21\u02c0\n\21\5\21\u02c2\n\21\3\22\3\22\5\22\u02c6")
        buf.write("\n\22\3\22\5\22\u02c9\n\22\3\22\5\22\u02cc\n\22\3\23\3")
        buf.write("\23\3\23\5\23\u02d1\n\23\3\23\3\23\3\23\5\23\u02d6\n\23")
        buf.write("\3\23\5\23\u02d9\n\23\3\24\3\24\3\24\3\24\3\24\3\24\5")
        buf.write("\24\u02e1\n\24\3\24\3\24\5\24\u02e5\n\24\3\24\3\24\3\24")
        buf.write("\7\24\u02ea\n\24\f\24\16\24\u02ed\13\24\5\24\u02ef\n\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\7\24\u02f6\n\24\f\24\16\24\u02f9")
        buf.write("\13\24\5\24\u02fb\n\24\3\24\3\24\5\24\u02ff\n\24\3\24")
        buf.write("\3\24\3\24\3\24\7\24\u0305\n\24\f\24\16\24\u0308\13\24")
        buf.write("\5\24\u030a\n\24\3\25\3\25\5\25\u030e\n\25\3\25\5\25\u0311")
        buf.write("\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u031a\n")
        buf.write("\25\3\25\3\25\5\25\u031e\n\25\3\25\3\25\5\25\u0322\n\25")
        buf.write("\3\25\5\25\u0325\n\25\3\26\3\26\3\26\3\26\3\26\5\26\u032c")
        buf.write("\n\26\3\26\5\26\u032f\n\26\3\26\3\26\3\26\7\26\u0334\n")
        buf.write("\26\f\26\16\26\u0337\13\26\3\26\5\26\u033a\n\26\5\26\u033c")
        buf.write("\n\26\3\26\3\26\3\26\3\26\7\26\u0342\n\26\f\26\16\26\u0345")
        buf.write("\13\26\5\26\u0347\n\26\3\26\3\26\5\26\u034b\n\26\3\26")
        buf.write("\3\26\3\26\3\27\3\27\3\27\3\27\5\27\u0354\n\27\3\27\5")
        buf.write("\27\u0357\n\27\3\27\3\27\5\27\u035b\n\27\3\27\3\27\5\27")
        buf.write("\u035f\n\27\3\27\5\27\u0362\n\27\3\30\3\30\3\30\5\30\u0367")
        buf.write("\n\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\5\31\u0377\n\31\3\31\3\31\5\31\u037b")
        buf.write("\n\31\3\31\3\31\3\31\3\31\5\31\u0381\n\31\5\31\u0383\n")
        buf.write("\31\3\31\5\31\u0386\n\31\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\5\32\u038e\n\32\3\32\3\32\3\32\3\32\5\32\u0394\n\32\3")
        buf.write("\32\3\32\3\32\5\32\u0399\n\32\3\32\5\32\u039c\n\32\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u03a5\n\33\3\33\3")
        buf.write("\33\3\33\3\33\7\33\u03ab\n\33\f\33\16\33\u03ae\13\33\5")
        buf.write("\33\u03b0\n\33\3\33\3\33\3\33\3\33\3\33\5\33\u03b7\n\33")
        buf.write("\3\33\5\33\u03ba\n\33\3\34\3\34\3\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u03df\n\35\3")
        buf.write("\35\5\35\u03e2\n\35\3\36\3\36\3\36\3\36\5\36\u03e8\n\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36")
        buf.write("\u03f4\n\36\5\36\u03f6\n\36\3\36\5\36\u03f9\n\36\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37")
        buf.write("\u0411\n\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u041c\n \3 ")
        buf.write("\3 \3 \3 \3 \3 \5 \u0424\n \3!\3!\3!\3!\3!\3!\3!\7!\u042d")
        buf.write("\n!\f!\16!\u0430\13!\7!\u0432\n!\f!\16!\u0435\13!\5!\u0437")
        buf.write("\n!\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u043f\n\"\3#\3#\3#\3#")
        buf.write("\3$\3$\3$\3$\5$\u0449\n$\3%\3%\3%\3&\3&\3&\3\'\3\'\3(")
        buf.write("\3(\3)\3)\3*\3*\3*\3*\3+\3+\3+\3+\3+\3+\3+\3+\5+\u0463")
        buf.write("\n+\3+\3+\3+\3+\5+\u0469\n+\3+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\5+\u0474\n+\3,\3,\3,\3-\3-\3-\3.\3.\3.\3.\3.\3.\5.\u0482")
        buf.write("\n.\3/\3/\3/\3/\3/\3/\5/\u048a\n/\3\60\3\60\3\60\3\60")
        buf.write("\3\60\5\60\u0491\n\60\3\61\3\61\3\61\3\61\3\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\5\61\u04a8\n\61\3\62\3\62\3\62\3")
        buf.write("\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u04b5\n\63")
        buf.write("\3\64\3\64\3\64\3\64\5\64\u04bb\n\64\3\64\3\64\3\64\5")
        buf.write("\64\u04c0\n\64\3\64\5\64\u04c3\n\64\3\65\3\65\3\65\3\65")
        buf.write("\5\65\u04c9\n\65\3\65\3\65\5\65\u04cd\n\65\3\66\3\66\3")
        buf.write("\66\3\66\3\66\5\66\u04d4\n\66\3\66\3\66\3\66\3\67\3\67")
        buf.write("\3\67\3\67\5\67\u04dd\n\67\3\67\3\67\5\67\u04e1\n\67\3")
        buf.write("8\38\38\38\58\u04e7\n8\38\38\38\78\u04ec\n8\f8\168\u04ef")
        buf.write("\138\38\58\u04f2\n8\39\39\39\39\39\39\39\3:\3:\3:\3:\5")
        buf.write(":\u04ff\n:\3:\3:\3;\3;\5;\u0505\n;\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3=\3=\3=\3=\3=\3=\3=\3=\5=\u0516\n=\3=\3=\5=\u051a\n")
        buf.write("=\3=\3=\3=\3>\3>\3>\5>\u0522\n>\3>\3>\5>\u0526\n>\3>\3")
        buf.write(">\3>\3>\7>\u052c\n>\f>\16>\u052f\13>\3>\5>\u0532\n>\5")
        buf.write(">\u0534\n>\3?\3?\5?\u0538\n?\3?\3?\5?\u053c\n?\3?\3?\5")
        buf.write("?\u0540\n?\3?\3?\5?\u0544\n?\3?\3?\3?\3?\5?\u054a\n?\3")
        buf.write("?\3?\5?\u054e\n?\5?\u0550\n?\3@\3@\3@\5@\u0555\n@\3@\3")
        buf.write("@\3@\3@\7@\u055b\n@\f@\16@\u055e\13@\5@\u0560\n@\3@\5")
        buf.write("@\u0563\n@\3@\3@\3@\3@\3@\7@\u056a\n@\f@\16@\u056d\13")
        buf.write("@\3@\3@\5@\u0571\n@\3@\3@\3@\5@\u0576\n@\3@\5@\u0579\n")
        buf.write("@\5@\u057b\n@\3A\3A\5A\u057f\nA\3A\3A\5A\u0583\nA\3A\5")
        buf.write("A\u0586\nA\3A\3A\5A\u058a\nA\3B\3B\3C\3C\5C\u0590\nC\3")
        buf.write("C\3C\3C\5C\u0595\nC\3C\3C\3C\3C\3C\5C\u059c\nC\5C\u059e")
        buf.write("\nC\3C\3C\5C\u05a2\nC\3C\3C\3C\3C\3C\5C\u05a9\nC\3C\3")
        buf.write("C\5C\u05ad\nC\3C\5C\u05b0\nC\3C\3C\3C\3C\3C\3C\3C\5C\u05b9")
        buf.write("\nC\3C\5C\u05bc\nC\5C\u05be\nC\3D\3D\3D\3D\3D\3D\3D\5")
        buf.write("D\u05c7\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u05d2\nD\3D\3")
        buf.write("D\5D\u05d6\nD\5D\u05d8\nD\5D\u05da\nD\3E\3E\3E\3E\5E\u05e0")
        buf.write("\nE\3E\3E\3E\5E\u05e5\nE\3E\3E\3E\3E\3E\5E\u05ec\nE\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u05f9\nE\5E\u05fb\n")
        buf.write("E\5E\u05fd\nE\3E\5E\u0600\nE\3E\5E\u0603\nE\3F\3F\3F\3")
        buf.write("F\3F\5F\u060a\nF\3F\5F\u060d\nF\3F\3F\3F\3F\5F\u0613\n")
        buf.write("F\3F\3F\3F\5F\u0618\nF\5F\u061a\nF\3F\5F\u061d\nF\3F\3")
        buf.write("F\3F\3F\5F\u0623\nF\3F\3F\3F\3F\3F\3F\5F\u062b\nF\5F\u062d")
        buf.write("\nF\3F\5F\u0630\nF\3F\3F\5F\u0634\nF\3F\5F\u0637\nF\3")
        buf.write("F\3F\3F\3F\5F\u063d\nF\3F\5F\u0640\nF\3F\3F\5F\u0644\n")
        buf.write("F\3F\5F\u0647\nF\3F\3F\3F\3F\5F\u064d\nF\3F\5F\u0650\n")
        buf.write("F\5F\u0652\nF\3G\3G\5G\u0656\nG\3H\3H\3H\5H\u065b\nH\3")
        buf.write("I\3I\3I\3I\3J\3J\5J\u0663\nJ\3J\3J\3J\5J\u0668\nJ\3K\3")
        buf.write("K\3K\3K\3K\3L\3L\5L\u0671\nL\3L\7L\u0674\nL\fL\16L\u0677")
        buf.write("\13L\3M\3M\5M\u067b\nM\3N\3N\3N\3N\5N\u0681\nN\3N\3N\5")
        buf.write("N\u0685\nN\3N\5N\u0688\nN\3N\3N\5N\u068c\nN\3N\3N\3N\3")
        buf.write("N\5N\u0692\nN\3N\3N\3N\3N\3N\3N\5N\u069a\nN\3N\3N\3N\5")
        buf.write("N\u069f\nN\5N\u06a1\nN\3N\5N\u06a4\nN\3N\7N\u06a7\nN\f")
        buf.write("N\16N\u06aa\13N\3O\3O\5O\u06ae\nO\3O\5O\u06b1\nO\3O\3")
        buf.write("O\3O\5O\u06b6\nO\3O\5O\u06b9\nO\3O\5O\u06bc\nO\3O\3O\3")
        buf.write("O\3O\5O\u06c2\nO\3O\3O\3O\3O\5O\u06c8\nO\3P\3P\5P\u06cc")
        buf.write("\nP\3P\3P\3P\5P\u06d1\nP\3P\5P\u06d4\nP\3P\3P\3P\5P\u06d9")
        buf.write("\nP\3P\3P\5P\u06dd\nP\3P\3P\5P\u06e1\nP\3P\3P\3P\3P\5")
        buf.write("P\u06e7\nP\3P\3P\3P\3P\5P\u06ed\nP\3Q\3Q\3Q\3Q\3Q\7Q\u06f4")
        buf.write("\nQ\fQ\16Q\u06f7\13Q\3Q\3Q\3R\3R\3R\3R\3R\5R\u0700\nR")
        buf.write("\3S\3S\3S\3S\3S\3S\3S\3S\5S\u070a\nS\5S\u070c\nS\5S\u070e")
        buf.write("\nS\3S\5S\u0711\nS\3S\5S\u0714\nS\3S\3S\3S\3S\3S\3S\3")
        buf.write("S\3S\3S\5S\u071f\nS\5S\u0721\nS\5S\u0723\nS\3S\5S\u0726")
        buf.write("\nS\3T\5T\u0729\nT\3T\5T\u072c\nT\3T\5T\u072f\nT\3T\5")
        buf.write("T\u0732\nT\3T\5T\u0735\nT\3T\3T\3T\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\5U\u0741\nU\3U\5U\u0744\nU\3U\5U\u0747\nU\3U\3U\3U\3")
        buf.write("U\3U\7U\u074e\nU\fU\16U\u0751\13U\5U\u0753\nU\3U\5U\u0756")
        buf.write("\nU\3V\3V\3V\3V\3V\5V\u075d\nV\3V\5V\u0760\nV\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u076e\nV\3V\5V\u0771\n")
        buf.write("V\3V\3V\3V\3V\3V\5V\u0778\nV\3V\3V\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\5V\u0783\nV\3W\3W\5W\u0787\nW\3X\3X\3X\3X\3X\3X\3X\3")
        buf.write("X\3X\6X\u0792\nX\rX\16X\u0793\3X\3X\5X\u0798\nX\3X\3X")
        buf.write("\3X\3X\6X\u079e\nX\rX\16X\u079f\3X\3X\5X\u07a4\nX\3X\3")
        buf.write("X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u07b6\n")
        buf.write("X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\7X\u07c5\nX\f")
        buf.write("X\16X\u07c8\13X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u07d2\nY\3")
        buf.write("Z\3Z\3[\3[\3[\5[\u07d9\n[\3[\3[\3[\7[\u07de\n[\f[\16[")
        buf.write("\u07e1\13[\3\\\3\\\3\\\3\\\3\\\5\\\u07e8\n\\\3\\\3\\\3")
        buf.write("\\\3\\\3\\\3]\3]\5]\u07f1\n]\3]\3]\5]\u07f5\n]\3]\3]\3")
        buf.write("]\3]\3]\3]\3]\3]\5]\u07ff\n]\3^\3^\3^\7^\u0804\n^\f^\16")
        buf.write("^\u0807\13^\3_\3_\3_\3_\3_\3_\3_\3_\3_\7_\u0812\n_\f_")
        buf.write("\16_\u0815\13_\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`")
        buf.write("\3`\3`\3`\3`\3`\3`\3`\5`\u082b\n`\3`\3`\3`\3`\3`\3`\3")
        buf.write("`\5`\u0834\n`\3`\3`\3`\3`\5`\u083a\n`\3`\3`\3`\3`\5`\u0840")
        buf.write("\n`\3`\3`\3`\3`\5`\u0846\n`\3`\3`\3`\3`\3`\3`\3`\3`\3")
        buf.write("`\5`\u0851\n`\3a\3a\3a\3a\3a\3a\5a\u0859\na\3a\3a\3a\3")
        buf.write("a\7a\u085f\na\fa\16a\u0862\13a\3b\3b\5b\u0866\nb\3b\3")
        buf.write("b\5b\u086a\nb\3c\3c\5c\u086e\nc\3c\5c\u0871\nc\3c\3c\3")
        buf.write("c\5c\u0876\nc\3c\3c\5c\u087a\nc\3c\3c\5c\u087e\nc\3c\3")
        buf.write("c\3c\3c\3c\7c\u0885\nc\fc\16c\u0888\13c\5c\u088a\nc\3")
        buf.write("c\3c\5c\u088e\nc\3d\3d\3d\5d\u0893\nd\3d\3d\5d\u0897\n")
        buf.write("d\3e\3e\3e\3e\3e\5e\u089e\ne\3f\3f\3f\3f\3f\7f\u08a5\n")
        buf.write("f\ff\16f\u08a8\13f\3f\3f\3f\3f\5f\u08ae\nf\5f\u08b0\n")
        buf.write("f\3g\3g\3g\3g\3g\3g\3h\3h\3h\3h\3h\3h\5h\u08be\nh\3h\3")
        buf.write("h\3h\3h\3h\3h\5h\u08c6\nh\3h\5h\u08c9\nh\5h\u08cb\nh\3")
        buf.write("i\3i\3i\3i\3i\5i\u08d2\ni\3j\3j\5j\u08d6\nj\3k\3k\3l\3")
        buf.write("l\3l\3l\3l\7l\u08df\nl\fl\16l\u08e2\13l\3l\3l\3m\3m\3")
        buf.write("m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3")
        buf.write("m\3m\3m\3m\3m\3m\3m\7m\u0901\nm\fm\16m\u0904\13m\3m\3")
        buf.write("m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\5m\u0913\nm\3n\3n\3")
        buf.write("n\3n\5n\u0919\nn\3o\3o\3o\7o\u091e\no\fo\16o\u0921\13")
        buf.write("o\3p\3p\3p\5p\u0926\np\3p\3p\3p\5p\u092b\np\3p\3p\3p\3")
        buf.write("p\3p\3p\5p\u0933\np\3p\5p\u0936\np\5p\u0938\np\3q\3q\3")
        buf.write("q\7q\u093d\nq\fq\16q\u0940\13q\3r\3r\3r\3r\3r\3r\5r\u0948")
        buf.write("\nr\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\7r\u0959")
        buf.write("\nr\fr\16r\u095c\13r\3s\3s\5s\u0960\ns\3s\5s\u0963\ns")
        buf.write("\3s\3s\5s\u0967\ns\3s\3s\3s\5s\u096c\ns\5s\u096e\ns\3")
        buf.write("s\3s\5s\u0972\ns\3s\3s\5s\u0976\ns\3s\3s\5s\u097a\ns\3")
        buf.write("s\3s\3s\3s\3s\5s\u0981\ns\5s\u0983\ns\5s\u0985\ns\3t\5")
        buf.write("t\u0988\nt\3t\3t\3u\3u\3u\3u\3u\3u\3u\3u\3v\5v\u0995\n")
        buf.write("v\3v\3v\5v\u0999\nv\5v\u099b\nv\3v\5v\u099e\nv\3w\3w\5")
        buf.write("w\u09a2\nw\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3")
        buf.write("x\3x\7x\u09b4\nx\fx\16x\u09b7\13x\3x\5x\u09ba\nx\3x\3")
        buf.write("x\5x\u09be\nx\3y\3y\3y\3y\3z\3z\3z\3z\3z\5z\u09c9\nz\3")
        buf.write("{\3{\3{\3{\3{\5{\u09d0\n{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3")
        buf.write("{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\5{\u09e7\n{\3{\3{\3")
        buf.write("{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3")
        buf.write("{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3")
        buf.write("{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\5{\u0a1b\n{\3{\3{\5")
        buf.write("{\u0a1f\n{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3")
        buf.write("{\3{\3{\3{\3{\3{\3{\5{\u0a36\n{\3|\3|\3|\3|\3|\3}\3}\3")
        buf.write("}\3}\3}\3~\5~\u0a43\n~\3~\3~\3~\3~\7~\u0a49\n~\f~\16~")
        buf.write("\u0a4c\13~\3~\3~\3\177\3\177\3\177\3\177\3\177\7\177\u0a55")
        buf.write("\n\177\f\177\16\177\u0a58\13\177\3\177\3\177\3\u0080\5")
        buf.write("\u0080\u0a5d\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3")
        buf.write("\u0080\7\u0080\u0a64\n\u0080\f\u0080\16\u0080\u0a67\13")
        buf.write("\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\7\u0080")
        buf.write("\u0a75\n\u0080\f\u0080\16\u0080\u0a78\13\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\5\u0080\u0a7d\n\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0a85\n\u0080")
        buf.write("\3\u0081\3\u0081\5\u0081\u0a89\n\u0081\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\7\u0082\u0a8f\n\u0082\f\u0082\16\u0082")
        buf.write("\u0a92\13\u0082\3\u0082\3\u0082\3\u0083\3\u0083\5\u0083")
        buf.write("\u0a98\n\u0083\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\7\u0085\u0aa0\n\u0085\f\u0085\16\u0085\u0aa3")
        buf.write("\13\u0085\3\u0086\3\u0086\3\u0086\7\u0086\u0aa8\n\u0086")
        buf.write("\f\u0086\16\u0086\u0aab\13\u0086\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0ac3")
        buf.write("\n\u008a\3\u008b\3\u008b\3\u008b\5\u008b\u0ac8\n\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\5\u008b\u0acd\n\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\5\u008b\u0ad3\n\u008b\3\u008b")
        buf.write("\5\u008b\u0ad6\n\u008b\3\u008b\3\u008b\5\u008b\u0ada\n")
        buf.write("\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0adf\n\u008b\3")
        buf.write("\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b")
        buf.write("\u0aee\n\u008b\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\5\u008d\u0af7\n\u008d\3\u008d\5\u008d")
        buf.write("\u0afa\n\u008d\3\u008d\5\u008d\u0afd\n\u008d\3\u008d\3")
        buf.write("\u008d\3\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\5\u008f\u0b0a\n\u008f\3\u0090")
        buf.write("\3\u0090\5\u0090\u0b0e\n\u0090\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\5\u0091\u0b16\n\u0091\3\u0092")
        buf.write("\3\u0092\3\u0092\3\u0092\5\u0092\u0b1c\n\u0092\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\7\u0093\u0b22\n\u0093\f\u0093")
        buf.write("\16\u0093\u0b25\13\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\5\u0093\u0b2b\n\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\5\u0093\u0b31\n\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\5\u0093\u0b40\n\u0093\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0b49")
        buf.write("\n\u0094\3\u0094\3\u0094\3\u0095\3\u0095\5\u0095\u0b4f")
        buf.write("\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0b55")
        buf.write("\n\u0096\3\u0096\5\u0096\u0b58\n\u0096\3\u0096\3\u0096")
        buf.write("\5\u0096\u0b5c\n\u0096\3\u0096\3\u0096\3\u0096\7\u0096")
        buf.write("\u0b61\n\u0096\f\u0096\16\u0096\u0b64\13\u0096\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0b6b\n\u0097")
        buf.write("\3\u0097\5\u0097\u0b6e\n\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\5\u0097\u0b74\n\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\5\u0097\u0b7a\n\u0097\5\u0097\u0b7c\n\u0097\3")
        buf.write("\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0b82\n\u0097\3")
        buf.write("\u0097\5\u0097\u0b85\n\u0097\5\u0097\u0b87\n\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\5\u0097\u0b8d\n\u0097\5\u0097")
        buf.write("\u0b8f\n\u0097\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098")
        buf.write("\5\u0098\u0b9d\n\u0098\3\u0098\3\u0098\3\u0098\3\u0098")
        buf.write("\3\u0098\5\u0098\u0ba4\n\u0098\3\u0098\3\u0098\3\u0099")
        buf.write("\3\u0099\3\u0099\5\u0099\u0bab\n\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\5\u0099\u0bb2\n\u0099\3\u0099")
        buf.write("\3\u0099\3\u009a\3\u009a\3\u009a\5\u009a\u0bb9\n\u009a")
        buf.write("\3\u009a\3\u009a\3\u009b\3\u009b\3\u009b\5\u009b\u0bc0")
        buf.write("\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b")
        buf.write("\u0bc7\n\u009b\3\u009b\3\u009b\3\u009c\3\u009c\5\u009c")
        buf.write("\u0bcd\n\u009c\3\u009d\3\u009d\3\u009d\5\u009d\u0bd2\n")
        buf.write("\u009d\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\7\u009e")
        buf.write("\u0bd9\n\u009e\f\u009e\16\u009e\u0bdc\13\u009e\3\u009f")
        buf.write("\3\u009f\5\u009f\u0be0\n\u009f\3\u00a0\3\u00a0\3\u00a1")
        buf.write("\3\u00a1\3\u00a2\5\u00a2\u0be7\n\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0bf0")
        buf.write("\n\u00a3\3\u00a4\3\u00a4\5\u00a4\u0bf4\n\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0bfa\n\u00a4\3\u00a4")
        buf.write("\5\u00a4\u0bfd\n\u00a4\3\u00a5\3\u00a5\5\u00a5\u0c01\n")
        buf.write("\u00a5\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0c06\n\u00a6\3")
        buf.write("\u00a6\3\u00a6\5\u00a6\u0c0a\n\u00a6\3\u00a6\3\u00a6\5")
        buf.write("\u00a6\u0c0e\n\u00a6\3\u00a6\3\u00a6\5\u00a6\u0c12\n\u00a6")
        buf.write("\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0c19")
        buf.write("\n\u00a8\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0c2c\n\u00aa")
        buf.write("\3\u00ab\3\u00ab\3\u00ac\3\u00ac\5\u00ac\u0c32\n\u00ac")
        buf.write("\3\u00ac\2\6\u00ae\u00bc\u00c0\u00e2\u00ad\2\4\6\b\n\f")
        buf.write("\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@")
        buf.write("BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2")
        buf.write("\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104")
        buf.write("\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116")
        buf.write("\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128")
        buf.write("\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a")
        buf.write("\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c")
        buf.write("\u014e\u0150\u0152\u0154\u0156\2>\3\2\u0199\u019a\4\2")
        buf.write("\u0199\u0199\u019c\u019c\4\2\u00f5\u00f5\u017f\u017f\4")
        buf.write("\2\u0199\u019a\u019c\u019c\4\2nn\u0080\u0080\4\2\n\n\65")
        buf.write("\65\3\2\u0087\u0088\4\2\u0149\u014a\u0156\u0156\4\2\u0081")
        buf.write("\u0081\u0165\u0165\5\2\u0100\u0100\u0168\u0168\u018f\u018f")
        buf.write("\5\2\u00a8\u00a8\u00d0\u00d0\u00fa\u00fa\4\2ssuu\5\2\u00f1")
        buf.write("\u00f1\u0117\u0117\u0133\u0133\4\2\u0110\u0110\u0127\u0127")
        buf.write("\5\2\u00fe\u00fe\u0143\u0143\u0145\u0145\3\2\u0158\u0159")
        buf.write("\5\2\u0137\u0137\u0160\u0160\u0170\u0170\5\2\u00c8\u00c8")
        buf.write("\u00fb\u00fb\u010c\u010c\4\2\u010c\u010c\u016f\u016f\5")
        buf.write("\2OO\u00da\u00da\u016f\u016f\5\2nn\u00e0\u00e0\u0180\u0180")
        buf.write("\4\2\u0133\u0133\u016b\u016b\4\2\u00ba\u00ba\u0129\u0129")
        buf.write("\3\2\u0149\u014a\4\2\u00a8\u00a8\u00be\u00be\3\2\u00ae")
        buf.write("\u00af\6\2\u00db\u00db\u014b\u014b\u016c\u016c\u019c\u019c")
        buf.write("\4\2\u010d\u010d\u0169\u0169\6\2\u00fd\u00fd\u0104\u0104")
        buf.write("\u0122\u0122\u0174\u0174\5\2\u0147\u0147\u0158\u0158\u016a")
        buf.write("\u016a\4\2\u00c6\u00c6\u015d\u015d\3\2\u01b9\u01ba\3\2")
        buf.write("\u01b6\u01b8\4\2\u01b9\u01ba\u01bc\u01be\5\2\5\5\b\b\u00a5")
        buf.write("\u00a5\4\2\5\5\67\67\4\2\u0163\u0163\u0165\u0165\4\2k")
        buf.write("k\u0108\u0108\4\2}}\u0115\u0115\5\2ii\u00e4\u00e4\u0115")
        buf.write("\u0115\5\2ii\u0115\u0115\u012a\u012a\4\2UU\u0164\u0164")
        buf.write("\4\2\'\'~~\4\2pp\u0199\u019a\5\2OOdd\u0095\u0095\6\2i")
        buf.write("i\u0115\u0115\u012a\u012a\u015e\u015e\4\2\u019a\u019a")
        buf.write("\u019c\u019c\5\2\u00f8\u00f8\u0155\u0155\u0166\u0166\6")
        buf.write("\2\u0109\u0109\u0123\u0123\u0125\u0125\u0140\u0140\7\2")
        buf.write("\u00d7\u00d7\u012c\u012c\u0132\u0132\u0176\u0178\u018c")
        buf.write("\u018d\3\2\u00e8\u00e9\4\2\u0154\u0154\u0165\u0165\5\2")
        buf.write("OOss\u0158\u0158\4\2\32\32mm\4\2\u012c\u012c\u019a\u019a")
        buf.write("\3\2\u019e\u019f\4\2\u019a\u019a\u019e\u019e.\2JJkk\u00c6")
        buf.write("\u00c6\u00ce\u00ce\u00d0\u00d0\u00d7\u00d8\u00db\u00dd")
        buf.write("\u00e1\u00e2\u00e4\u00e4\u00e6\u00e9\u00f5\u00f5\u00f7")
        buf.write("\u00f8\u00fa\u00fa\u00fd\u00fd\u0100\u0100\u0102\u0104")
        buf.write("\u0108\u010e\u0110\u0113\u0115\u0115\u0118\u0118\u011a")
        buf.write("\u011a\u011c\u011e\u0120\u012e\u0132\u0132\u0136\u0136")
        buf.write("\u0138\u0138\u013b\u013c\u013e\u013e\u0140\u0141\u0144")
        buf.write("\u014b\u014d\u0152\u0154\u0156\u0158\u0158\u015a\u015a")
        buf.write("\u015d\u015f\u0161\u016a\u016c\u016d\u016f\u016f\u0171")
        buf.write("\u0178\u017c\u017f\u0183\u0183\u0185\u0189\u018b\u0192")
        buf.write("\u019b\u019b\3\2\u01a4\u01ab\7\2\u010f\u010f\u011f\u011f")
        buf.write("\u0130\u0130\u017b\u017b\u01b8\u01b8\2\u0e35\2\u015b\3")
        buf.write("\2\2\2\4\u0160\3\2\2\2\6\u0168\3\2\2\2\b\u0170\3\2\2\2")
        buf.write("\n\u0176\3\2\2\2\f\u0187\3\2\2\2\16\u0206\3\2\2\2\20\u020f")
        buf.write("\3\2\2\2\22\u0212\3\2\2\2\24\u0239\3\2\2\2\26\u023c\3")
        buf.write("\2\2\2\30\u0264\3\2\2\2\32\u0267\3\2\2\2\34\u0277\3\2")
        buf.write("\2\2\36\u02a0\3\2\2\2 \u02ad\3\2\2\2\"\u02c5\3\2\2\2$")
        buf.write("\u02d8\3\2\2\2&\u02da\3\2\2\2(\u030b\3\2\2\2*\u0326\3")
        buf.write("\2\2\2,\u034f\3\2\2\2.\u0366\3\2\2\2\60\u0368\3\2\2\2")
        buf.write("\62\u0387\3\2\2\2\64\u039d\3\2\2\2\66\u03bb\3\2\2\28\u03bd")
        buf.write("\3\2\2\2:\u03e3\3\2\2\2<\u0410\3\2\2\2>\u0423\3\2\2\2")
        buf.write("@\u0425\3\2\2\2B\u043e\3\2\2\2D\u0440\3\2\2\2F\u0448\3")
        buf.write("\2\2\2H\u044a\3\2\2\2J\u044d\3\2\2\2L\u0450\3\2\2\2N\u0452")
        buf.write("\3\2\2\2P\u0454\3\2\2\2R\u0456\3\2\2\2T\u0473\3\2\2\2")
        buf.write("V\u0475\3\2\2\2X\u0478\3\2\2\2Z\u0481\3\2\2\2\\\u0489")
        buf.write("\3\2\2\2^\u0490\3\2\2\2`\u04a7\3\2\2\2b\u04a9\3\2\2\2")
        buf.write("d\u04b4\3\2\2\2f\u04b6\3\2\2\2h\u04c4\3\2\2\2j\u04ce\3")
        buf.write("\2\2\2l\u04d8\3\2\2\2n\u04e2\3\2\2\2p\u04f3\3\2\2\2r\u04fa")
        buf.write("\3\2\2\2t\u0504\3\2\2\2v\u0506\3\2\2\2x\u050d\3\2\2\2")
        buf.write("z\u0533\3\2\2\2|\u054f\3\2\2\2~\u057a\3\2\2\2\u0080\u057e")
        buf.write("\3\2\2\2\u0082\u058b\3\2\2\2\u0084\u05bd\3\2\2\2\u0086")
        buf.write("\u05d9\3\2\2\2\u0088\u0602\3\2\2\2\u008a\u0651\3\2\2\2")
        buf.write("\u008c\u0653\3\2\2\2\u008e\u0657\3\2\2\2\u0090\u065c\3")
        buf.write("\2\2\2\u0092\u0660\3\2\2\2\u0094\u0669\3\2\2\2\u0096\u066e")
        buf.write("\3\2\2\2\u0098\u067a\3\2\2\2\u009a\u067c\3\2\2\2\u009c")
        buf.write("\u06ad\3\2\2\2\u009e\u06cb\3\2\2\2\u00a0\u06ee\3\2\2\2")
        buf.write("\u00a2\u06fa\3\2\2\2\u00a4\u0701\3\2\2\2\u00a6\u0728\3")
        buf.write("\2\2\2\u00a8\u0739\3\2\2\2\u00aa\u0782\3\2\2\2\u00ac\u0786")
        buf.write("\3\2\2\2\u00ae\u07b5\3\2\2\2\u00b0\u07d1\3\2\2\2\u00b2")
        buf.write("\u07d3\3\2\2\2\u00b4\u07d5\3\2\2\2\u00b6\u07e2\3\2\2\2")
        buf.write("\u00b8\u07fe\3\2\2\2\u00ba\u0800\3\2\2\2\u00bc\u0808\3")
        buf.write("\2\2\2\u00be\u0850\3\2\2\2\u00c0\u0858\3\2\2\2\u00c2\u0869")
        buf.write("\3\2\2\2\u00c4\u086b\3\2\2\2\u00c6\u088f\3\2\2\2\u00c8")
        buf.write("\u0898\3\2\2\2\u00ca\u089f\3\2\2\2\u00cc\u08b1\3\2\2\2")
        buf.write("\u00ce\u08ca\3\2\2\2\u00d0\u08cc\3\2\2\2\u00d2\u08d3\3")
        buf.write("\2\2\2\u00d4\u08d7\3\2\2\2\u00d6\u08d9\3\2\2\2\u00d8\u0912")
        buf.write("\3\2\2\2\u00da\u0914\3\2\2\2\u00dc\u091a\3\2\2\2\u00de")
        buf.write("\u0937\3\2\2\2\u00e0\u0939\3\2\2\2\u00e2\u0947\3\2\2\2")
        buf.write("\u00e4\u0984\3\2\2\2\u00e6\u0987\3\2\2\2\u00e8\u098b\3")
        buf.write("\2\2\2\u00ea\u099a\3\2\2\2\u00ec\u099f\3\2\2\2\u00ee\u09bd")
        buf.write("\3\2\2\2\u00f0\u09bf\3\2\2\2\u00f2\u09c8\3\2\2\2\u00f4")
        buf.write("\u0a35\3\2\2\2\u00f6\u0a37\3\2\2\2\u00f8\u0a3c\3\2\2\2")
        buf.write("\u00fa\u0a42\3\2\2\2\u00fc\u0a4f\3\2\2\2\u00fe\u0a5c\3")
        buf.write("\2\2\2\u0100\u0a88\3\2\2\2\u0102\u0a8a\3\2\2\2\u0104\u0a97")
        buf.write("\3\2\2\2\u0106\u0a99\3\2\2\2\u0108\u0a9b\3\2\2\2\u010a")
        buf.write("\u0aa4\3\2\2\2\u010c\u0aac\3\2\2\2\u010e\u0ab0\3\2\2\2")
        buf.write("\u0110\u0ab4\3\2\2\2\u0112\u0ac2\3\2\2\2\u0114\u0aed\3")
        buf.write("\2\2\2\u0116\u0aef\3\2\2\2\u0118\u0af1\3\2\2\2\u011a\u0b00")
        buf.write("\3\2\2\2\u011c\u0b09\3\2\2\2\u011e\u0b0d\3\2\2\2\u0120")
        buf.write("\u0b15\3\2\2\2\u0122\u0b1b\3\2\2\2\u0124\u0b3f\3\2\2\2")
        buf.write("\u0126\u0b41\3\2\2\2\u0128\u0b4e\3\2\2\2\u012a\u0b50\3")
        buf.write("\2\2\2\u012c\u0b65\3\2\2\2\u012e\u0ba3\3\2\2\2\u0130\u0bb1")
        buf.write("\3\2\2\2\u0132\u0bb8\3\2\2\2\u0134\u0bc6\3\2\2\2\u0136")
        buf.write("\u0bcc\3\2\2\2\u0138\u0bd1\3\2\2\2\u013a\u0bd5\3\2\2\2")
        buf.write("\u013c\u0bdf\3\2\2\2\u013e\u0be1\3\2\2\2\u0140\u0be3\3")
        buf.write("\2\2\2\u0142\u0be6\3\2\2\2\u0144\u0bef\3\2\2\2\u0146\u0bf1")
        buf.write("\3\2\2\2\u0148\u0c00\3\2\2\2\u014a\u0c11\3\2\2\2\u014c")
        buf.write("\u0c13\3\2\2\2\u014e\u0c18\3\2\2\2\u0150\u0c1a\3\2\2\2")
        buf.write("\u0152\u0c2b\3\2\2\2\u0154\u0c2d\3\2\2\2\u0156\u0c2f\3")
        buf.write("\2\2\2\u0158\u015a\5\4\3\2\u0159\u0158\3\2\2\2\u015a\u015d")
        buf.write("\3\2\2\2\u015b\u0159\3\2\2\2\u015b\u015c\3\2\2\2\u015c")
        buf.write("\u015e\3\2\2\2\u015d\u015b\3\2\2\2\u015e\u015f\7\2\2\3")
        buf.write("\u015f\3\3\2\2\2\u0160\u0162\5\6\4\2\u0161\u0163\5\u008c")
        buf.write("G\2\u0162\u0161\3\2\2\2\u0162\u0163\3\2\2\2\u0163\5\3")
        buf.write("\2\2\2\u0164\u0166\5\b\5\2\u0165\u0167\7\u01b4\2\2\u0166")
        buf.write("\u0165\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u0169\3\2\2\2")
        buf.write("\u0168\u0164\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u0168\3")
        buf.write("\2\2\2\u016a\u016b\3\2\2\2\u016b\7\3\2\2\2\u016c\u0171")
        buf.write("\5\n\6\2\u016d\u0171\5\f\7\2\u016e\u0171\5\16\b\2\u016f")
        buf.write("\u0171\5\20\t\2\u0170\u016c\3\2\2\2\u0170\u016d\3\2\2")
        buf.write("\2\u0170\u016e\3\2\2\2\u0170\u016f\3\2\2\2\u0171\t\3\2")
        buf.write("\2\2\u0172\u0177\5\22\n\2\u0173\u0177\5\26\f\2\u0174\u0177")
        buf.write("\5\32\16\2\u0175\u0177\5\34\17\2\u0176\u0172\3\2\2\2\u0176")
        buf.write("\u0173\3\2\2\2\u0176\u0174\3\2\2\2\u0176\u0175\3\2\2\2")
        buf.write("\u0177\13\3\2\2\2\u0178\u0188\5&\24\2\u0179\u0188\5(\25")
        buf.write("\2\u017a\u0188\5*\26\2\u017b\u0188\5\60\31\2\u017c\u0188")
        buf.write("\5\62\32\2\u017d\u0188\5p9\2\u017e\u0188\5\64\33\2\u017f")
        buf.write("\u0188\58\35\2\u0180\u0188\5:\36\2\u0181\u0188\5f\64\2")
        buf.write("\u0182\u0188\5h\65\2\u0183\u0188\5j\66\2\u0184\u0188\5")
        buf.write("l\67\2\u0185\u0188\5r:\2\u0186\u0188\5n8\2\u0187\u0178")
        buf.write("\3\2\2\2\u0187\u0179\3\2\2\2\u0187\u017a\3\2\2\2\u0187")
        buf.write("\u017b\3\2\2\2\u0187\u017c\3\2\2\2\u0187\u017d\3\2\2\2")
        buf.write("\u0187\u017e\3\2\2\2\u0187\u017f\3\2\2\2\u0187\u0180\3")
        buf.write("\2\2\2\u0187\u0181\3\2\2\2\u0187\u0182\3\2\2\2\u0187\u0183")
        buf.write("\3\2\2\2\u0187\u0184\3\2\2\2\u0187\u0185\3\2\2\2\u0187")
        buf.write("\u0186\3\2\2\2\u0188\r\3\2\2\2\u0189\u018b\7\r\2\2\u018a")
        buf.write("\u018c\7\u01b4\2\2\u018b\u018a\3\2\2\2\u018b\u018c\3\2")
        buf.write("\2\2\u018c\u018e\3\2\2\2\u018d\u018f\5\6\4\2\u018e\u018d")
        buf.write("\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u0190\3\2\2\2\u0190")
        buf.write("\u0192\7=\2\2\u0191\u0193\7\u01b4\2\2\u0192\u0191\3\2")
        buf.write("\2\2\u0192\u0193\3\2\2\2\u0193\u0207\3\2\2\2\u0194\u0196")
        buf.write("\7\17\2\2\u0195\u0197\7\u01b4\2\2\u0196\u0195\3\2\2\2")
        buf.write("\u0196\u0197\3\2\2\2\u0197\u0207\3\2\2\2\u0198\u019a\7")
        buf.write("$\2\2\u0199\u019b\7\u01b4\2\2\u019a\u0199\3\2\2\2\u019a")
        buf.write("\u019b\3\2\2\2\u019b\u0207\3\2\2\2\u019c\u019d\7Q\2\2")
        buf.write("\u019d\u019f\5\u014e\u00a8\2\u019e\u01a0\7\u01b4\2\2\u019f")
        buf.write("\u019e\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u0207\3\2\2\2")
        buf.write("\u01a1\u01a2\5\u014e\u00a8\2\u01a2\u01a4\7\u01b5\2\2\u01a3")
        buf.write("\u01a5\7\u01b4\2\2\u01a4\u01a3\3\2\2\2\u01a4\u01a5\3\2")
        buf.write("\2\2\u01a5\u0207\3\2\2\2\u01a6\u01a7\7Y\2\2\u01a7\u01a8")
        buf.write("\5\u00bc_\2\u01a8\u01ab\5\b\5\2\u01a9\u01aa\7<\2\2\u01aa")
        buf.write("\u01ac\5\b\5\2\u01ab\u01a9\3\2\2\2\u01ab\u01ac\3\2\2\2")
        buf.write("\u01ac\u01ae\3\2\2\2\u01ad\u01af\7\u01b4\2\2\u01ae\u01ad")
        buf.write("\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u0207\3\2\2\2\u01b0")
        buf.write("\u01b2\7\u0092\2\2\u01b1\u01b3\5\u00aeX\2\u01b2\u01b1")
        buf.write("\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b5\3\2\2\2\u01b4")
        buf.write("\u01b6\7\u01b4\2\2\u01b5\u01b4\3\2\2\2\u01b5\u01b6\3\2")
        buf.write("\2\2\u01b6\u0207\3\2\2\2\u01b7\u01bd\7\u017d\2\2\u01b8")
        buf.write("\u01b9\t\2\2\2\u01b9\u01ba\7\u01b3\2\2\u01ba\u01bb\t\3")
        buf.write("\2\2\u01bb\u01bc\7\u01b3\2\2\u01bc\u01be\t\2\2\2\u01bd")
        buf.write("\u01b8\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01c0\3\2\2\2")
        buf.write("\u01bf\u01c1\7\u01b4\2\2\u01c0\u01bf\3\2\2\2\u01c0\u01c1")
        buf.write("\3\2\2\2\u01c1\u0207\3\2\2\2\u01c2\u01c3\7\r\2\2\u01c3")
        buf.write("\u01c5\7\u0183\2\2\u01c4\u01c6\7\u01b4\2\2\u01c5\u01c4")
        buf.write("\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6\u01c8\3\2\2\2\u01c7")
        buf.write("\u01c9\5\6\4\2\u01c8\u01c7\3\2\2\2\u01c8\u01c9\3\2\2\2")
        buf.write("\u01c9\u01ca\3\2\2\2\u01ca\u01cb\7=\2\2\u01cb\u01cd\7")
        buf.write("\u0183\2\2\u01cc\u01ce\7\u01b4\2\2\u01cd\u01cc\3\2\2\2")
        buf.write("\u01cd\u01ce\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u01d0\7")
        buf.write("\r\2\2\u01d0\u01d2\7\u00dd\2\2\u01d1\u01d3\7\u01b4\2\2")
        buf.write("\u01d2\u01d1\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d5\3")
        buf.write("\2\2\2\u01d4\u01d6\5\6\4\2\u01d5\u01d4\3\2\2\2\u01d5\u01d6")
        buf.write("\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01d8\7=\2\2\u01d8")
        buf.write("\u01da\7\u00dd\2\2\u01d9\u01db\7\u01b4\2\2\u01da\u01d9")
        buf.write("\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u0207\3\2\2\2\u01dc")
        buf.write("\u01dd\7\u00bf\2\2\u01dd\u01de\t\4\2\2\u01de\u01e0\5\u00ae")
        buf.write("X\2\u01df\u01e1\7\u01b4\2\2\u01e0\u01df\3\2\2\2\u01e0")
        buf.write("\u01e1\3\2\2\2\u01e1\u0207\3\2\2\2\u01e2\u01e3\7\u00c2")
        buf.write("\2\2\u01e3\u01ed\5\u00bc_\2\u01e4\u01ee\5\b\5\2\u01e5")
        buf.write("\u01e7\7\17\2\2\u01e6\u01e8\7\u01b4\2\2\u01e7\u01e6\3")
        buf.write("\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01ee\3\2\2\2\u01e9\u01eb")
        buf.write("\7$\2\2\u01ea\u01ec\7\u01b4\2\2\u01eb\u01ea\3\2\2\2\u01eb")
        buf.write("\u01ec\3\2\2\2\u01ec\u01ee\3\2\2\2\u01ed\u01e4\3\2\2\2")
        buf.write("\u01ed\u01e5\3\2\2\2\u01ed\u01e9\3\2\2\2\u01ee\u0207\3")
        buf.write("\2\2\2\u01ef\u01f0\7\u0086\2\2\u01f0\u01f2\5\u00aeX\2")
        buf.write("\u01f1\u01f3\7\u01b4\2\2\u01f2\u01f1\3\2\2\2\u01f2\u01f3")
        buf.write("\3\2\2\2\u01f3\u0207\3\2\2\2\u01f4\u01f5\7\u008a\2\2\u01f5")
        buf.write("\u01f6\7\u01b1\2\2\u01f6\u01f7\t\5\2\2\u01f7\u01f8\7\u01b3")
        buf.write("\2\2\u01f8\u01f9\5\u00acW\2\u01f9\u01fa\7\u01b3\2\2\u01fa")
        buf.write("\u01ff\5\u00acW\2\u01fb\u01fc\7\u01b3\2\2\u01fc\u01fe")
        buf.write("\5\u00acW\2\u01fd\u01fb\3\2\2\2\u01fe\u0201\3\2\2\2\u01ff")
        buf.write("\u01fd\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0202\3\2\2\2")
        buf.write("\u0201\u01ff\3\2\2\2\u0202\u0204\7\u01b2\2\2\u0203\u0205")
        buf.write("\7\u01b4\2\2\u0204\u0203\3\2\2\2\u0204\u0205\3\2\2\2\u0205")
        buf.write("\u0207\3\2\2\2\u0206\u0189\3\2\2\2\u0206\u0194\3\2\2\2")
        buf.write("\u0206\u0198\3\2\2\2\u0206\u019c\3\2\2\2\u0206\u01a1\3")
        buf.write("\2\2\2\u0206\u01a6\3\2\2\2\u0206\u01b0\3\2\2\2\u0206\u01b7")
        buf.write("\3\2\2\2\u0206\u01c2\3\2\2\2\u0206\u01dc\3\2\2\2\u0206")
        buf.write("\u01e2\3\2\2\2\u0206\u01ef\3\2\2\2\u0206\u01f4\3\2\2\2")
        buf.write("\u0207\17\3\2\2\2\u0208\u0210\5z>\2\u0209\u0210\5|?\2")
        buf.write("\u020a\u0210\5~@\2\u020b\u0210\5\u0084C\2\u020c\u0210")
        buf.write("\5\u0088E\2\u020d\u0210\5\u008aF\2\u020e\u0210\5\u008e")
        buf.write("H\2\u020f\u0208\3\2\2\2\u020f\u0209\3\2\2\2\u020f\u020a")
        buf.write("\3\2\2\2\u020f\u020b\3\2\2\2\u020f\u020c\3\2\2\2\u020f")
        buf.write("\u020d\3\2\2\2\u020f\u020e\3\2\2\2\u0210\21\3\2\2\2\u0211")
        buf.write("\u0213\5\u00b4[\2\u0212\u0211\3\2\2\2\u0212\u0213\3\2")
        buf.write("\2\2\u0213\u0214\3\2\2\2\u0214\u0216\7\63\2\2\u0215\u0217")
        buf.write("\5\u00c8e\2\u0216\u0215\3\2\2\2\u0216\u0217\3\2\2\2\u0217")
        buf.write("\u0219\3\2\2\2\u0218\u021a\7N\2\2\u0219\u0218\3\2\2\2")
        buf.write("\u0219\u021a\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u021d\5")
        buf.write("\24\13\2\u021c\u021e\5\u00fc\177\2\u021d\u021c\3\2\2\2")
        buf.write("\u021d\u021e\3\2\2\2\u021e\u0220\3\2\2\2\u021f\u0221\5")
        buf.write(" \21\2\u0220\u021f\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0224")
        buf.write("\3\2\2\2\u0222\u0223\7N\2\2\u0223\u0225\5\u00e0q\2\u0224")
        buf.write("\u0222\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0227\3\2\2\2")
        buf.write("\u0226\u0228\5\36\20\2\u0227\u0226\3\2\2\2\u0227\u0228")
        buf.write("\3\2\2\2\u0228\u022a\3\2\2\2\u0229\u022b\5\u00ceh\2\u022a")
        buf.write("\u0229\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022d\3\2\2\2")
        buf.write("\u022c\u022e\5\u00d6l\2\u022d\u022c\3\2\2\2\u022d\u022e")
        buf.write("\3\2\2\2\u022e\u0230\3\2\2\2\u022f\u0231\7\u01b4\2\2\u0230")
        buf.write("\u022f\3\2\2\2\u0230\u0231\3\2\2\2\u0231\23\3\2\2\2\u0232")
        buf.write("\u0234\5\u014e\u00a8\2\u0233\u0235\5\u00fa~\2\u0234\u0233")
        buf.write("\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u023a\3\2\2\2\u0236")
        buf.write("\u023a\5\u0136\u009c\2\u0237\u023a\5t;\2\u0238\u023a\7")
        buf.write("\u0199\2\2\u0239\u0232\3\2\2\2\u0239\u0236\3\2\2\2\u0239")
        buf.write("\u0237\3\2\2\2\u0239\u0238\3\2\2\2\u023a\25\3\2\2\2\u023b")
        buf.write("\u023d\5\u00b4[\2\u023c\u023b\3\2\2\2\u023c\u023d\3\2")
        buf.write("\2\2\u023d\u023e\3\2\2\2\u023e\u0240\7]\2\2\u023f\u0241")
        buf.write("\5\u00c8e\2\u0240\u023f\3\2\2\2\u0240\u0241\3\2\2\2\u0241")
        buf.write("\u0243\3\2\2\2\u0242\u0244\7_\2\2\u0243\u0242\3\2\2\2")
        buf.write("\u0243\u0244\3\2\2\2\u0244\u0247\3\2\2\2\u0245\u0248\5")
        buf.write("\u0136\u009c\2\u0246\u0248\5t;\2\u0247\u0245\3\2\2\2\u0247")
        buf.write("\u0246\3\2\2\2\u0248\u024a\3\2\2\2\u0249\u024b\5\u00fc")
        buf.write("\177\2\u024a\u0249\3\2\2\2\u024a\u024b\3\2\2\2\u024b\u0250")
        buf.write("\3\2\2\2\u024c\u024d\7\u01b1\2\2\u024d\u024e\5\u013a\u009e")
        buf.write("\2\u024e\u024f\7\u01b2\2\2\u024f\u0251\3\2\2\2\u0250\u024c")
        buf.write("\3\2\2\2\u0250\u0251\3\2\2\2\u0251\u0253\3\2\2\2\u0252")
        buf.write("\u0254\5 \21\2\u0253\u0252\3\2\2\2\u0253\u0254\3\2\2\2")
        buf.write("\u0254\u0255\3\2\2\2\u0255\u0257\5\30\r\2\u0256\u0258")
        buf.write("\5\u00ceh\2\u0257\u0256\3\2\2\2\u0257\u0258\3\2\2\2\u0258")
        buf.write("\u025a\3\2\2\2\u0259\u025b\5\u00d6l\2\u025a\u0259\3\2")
        buf.write("\2\2\u025a\u025b\3\2\2\2\u025b\u025d\3\2\2\2\u025c\u025e")
        buf.write("\7\u01b4\2\2\u025d\u025c\3\2\2\2\u025d\u025e\3\2\2\2\u025e")
        buf.write("\27\3\2\2\2\u025f\u0265\5\u0108\u0085\2\u0260\u0265\5")
        buf.write("\u00f2z\2\u0261\u0265\5~@\2\u0262\u0263\7\62\2\2\u0263")
        buf.write("\u0265\7\u00bb\2\2\u0264\u025f\3\2\2\2\u0264\u0260\3\2")
        buf.write("\2\2\u0264\u0261\3\2\2\2\u0264\u0262\3\2\2\2\u0265\31")
        buf.write("\3\2\2\2\u0266\u0268\5\u00b4[\2\u0267\u0266\3\2\2\2\u0267")
        buf.write("\u0268\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026b\5\u00c0")
        buf.write("a\2\u026a\u026c\5\u00caf\2\u026b\u026a\3\2\2\2\u026b\u026c")
        buf.write("\3\2\2\2\u026c\u026e\3\2\2\2\u026d\u026f\5\u00ceh\2\u026e")
        buf.write("\u026d\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0271\3\2\2\2")
        buf.write("\u0270\u0272\5\u00d6l\2\u0271\u0270\3\2\2\2\u0271\u0272")
        buf.write("\3\2\2\2\u0272\u0274\3\2\2\2\u0273\u0275\7\u01b4\2\2\u0274")
        buf.write("\u0273\3\2\2\2\u0274\u0275\3\2\2\2\u0275\33\3\2\2\2\u0276")
        buf.write("\u0278\5\u00b4[\2\u0277\u0276\3\2\2\2\u0277\u0278\3\2")
        buf.write("\2\2\u0278\u0279\3\2\2\2\u0279\u027b\7\u00b7\2\2\u027a")
        buf.write("\u027c\5\u00c8e\2\u027b\u027a\3\2\2\2\u027b\u027c\3\2")
        buf.write("\2\2\u027c\u027f\3\2\2\2\u027d\u0280\5\u0136\u009c\2\u027e")
        buf.write("\u0280\5t;\2\u027f\u027d\3\2\2\2\u027f\u027e\3\2\2\2\u0280")
        buf.write("\u0282\3\2\2\2\u0281\u0283\5\u00fa~\2\u0282\u0281\3\2")
        buf.write("\2\2\u0282\u0283\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u0285")
        buf.write("\7\u00a2\2\2\u0285\u028a\5\u00b8]\2\u0286\u0287\7\u01b3")
        buf.write("\2\2\u0287\u0289\5\u00b8]\2\u0288\u0286\3\2\2\2\u0289")
        buf.write("\u028c\3\2\2\2\u028a\u0288\3\2\2\2\u028a\u028b\3\2\2\2")
        buf.write("\u028b\u028e\3\2\2\2\u028c\u028a\3\2\2\2\u028d\u028f\5")
        buf.write(" \21\2\u028e\u028d\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u0292")
        buf.write("\3\2\2\2\u0290\u0291\7N\2\2\u0291\u0293\5\u00e0q\2\u0292")
        buf.write("\u0290\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0295\3\2\2\2")
        buf.write("\u0294\u0296\5\36\20\2\u0295\u0294\3\2\2\2\u0295\u0296")
        buf.write("\3\2\2\2\u0296\u0298\3\2\2\2\u0297\u0299\5\u00ceh\2\u0298")
        buf.write("\u0297\3\2\2\2\u0298\u0299\3\2\2\2\u0299\u029b\3\2\2\2")
        buf.write("\u029a\u029c\5\u00d6l\2\u029b\u029a\3\2\2\2\u029b\u029c")
        buf.write("\3\2\2\2\u029c\u029e\3\2\2\2\u029d\u029f\7\u01b4\2\2\u029e")
        buf.write("\u029d\3\2\2\2\u029e\u029f\3\2\2\2\u029f\35\3\2\2\2\u02a0")
        buf.write("\u02ab\7\u00c1\2\2\u02a1\u02ac\5\u00ba^\2\u02a2\u02a3")
        buf.write("\7(\2\2\u02a3\u02a9\7r\2\2\u02a4\u02a6\7\u0110\2\2\u02a5")
        buf.write("\u02a4\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02a7\3\2\2\2")
        buf.write("\u02a7\u02aa\5\u013c\u009f\2\u02a8\u02aa\7\u0199\2\2\u02a9")
        buf.write("\u02a5\3\2\2\2\u02a9\u02a8\3\2\2\2\u02aa\u02ac\3\2\2\2")
        buf.write("\u02ab\u02a1\3\2\2\2\u02ab\u02a2\3\2\2\2\u02ac\37\3\2")
        buf.write("\2\2\u02ad\u02ae\7\u014a\2\2\u02ae\u02b3\5\"\22\2\u02af")
        buf.write("\u02b0\7\u01b3\2\2\u02b0\u02b2\5\"\22\2\u02b1\u02af\3")
        buf.write("\2\2\2\u02b2\u02b5\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b3\u02b4")
        buf.write("\3\2\2\2\u02b4\u02c1\3\2\2\2\u02b5\u02b3\3\2\2\2\u02b6")
        buf.write("\u02b9\7_\2\2\u02b7\u02ba\7\u0199\2\2\u02b8\u02ba\5\u0130")
        buf.write("\u0099\2\u02b9\u02b7\3\2\2\2\u02b9\u02b8\3\2\2\2\u02ba")
        buf.write("\u02bf\3\2\2\2\u02bb\u02bc\7\u01b1\2\2\u02bc\u02bd\5\u013a")
        buf.write("\u009e\2\u02bd\u02be\7\u01b2\2\2\u02be\u02c0\3\2\2\2\u02bf")
        buf.write("\u02bb\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c2\3\2\2\2")
        buf.write("\u02c1\u02b6\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2!\3\2\2")
        buf.write("\2\u02c3\u02c6\5$\23\2\u02c4\u02c6\5\u00aeX\2\u02c5\u02c3")
        buf.write("\3\2\2\2\u02c5\u02c4\3\2\2\2\u02c6\u02cb\3\2\2\2\u02c7")
        buf.write("\u02c9\7\t\2\2\u02c8\u02c7\3\2\2\2\u02c8\u02c9\3\2\2\2")
        buf.write("\u02c9\u02ca\3\2\2\2\u02ca\u02cc\5\u0104\u0083\2\u02cb")
        buf.write("\u02c8\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc#\3\2\2\2\u02cd")
        buf.write("\u02d1\7\u00f7\2\2\u02ce\u02d1\7\u011d\2\2\u02cf\u02d1")
        buf.write("\5\u0130\u0099\2\u02d0\u02cd\3\2\2\2\u02d0\u02ce\3\2\2")
        buf.write("\2\u02d0\u02cf\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02d5")
        buf.write("\7\u01ac\2\2\u02d3\u02d6\7\u01b6\2\2\u02d4\u02d6\5\u014e")
        buf.write("\u00a8\2\u02d5\u02d3\3\2\2\2\u02d5\u02d4\3\2\2\2\u02d6")
        buf.write("\u02d9\3\2\2\2\u02d7\u02d9\7\u0193\2\2\u02d8\u02d0\3\2")
        buf.write("\2\2\u02d8\u02d7\3\2\2\2\u02d9%\3\2\2\2\u02da\u02db\7")
        buf.write("&\2\2\u02db\u02dc\7.\2\2\u02dc\u02e0\5\u014e\u00a8\2\u02dd")
        buf.write("\u02de\7!\2\2\u02de\u02df\7\u01a0\2\2\u02df\u02e1\t\6")
        buf.write("\2\2\u02e0\u02dd\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02ee")
        buf.write("\3\2\2\2\u02e2\u02e4\7u\2\2\u02e3\u02e5\7\u0085\2\2\u02e4")
        buf.write("\u02e3\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e6\3\2\2\2")
        buf.write("\u02e6\u02eb\5\u0128\u0095\2\u02e7\u02e8\7\u01b3\2\2\u02e8")
        buf.write("\u02ea\5\u0128\u0095\2\u02e9\u02e7\3\2\2\2\u02ea\u02ed")
        buf.write("\3\2\2\2\u02eb\u02e9\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec")
        buf.write("\u02ef\3\2\2\2\u02ed\u02eb\3\2\2\2\u02ee\u02e2\3\2\2\2")
        buf.write("\u02ee\u02ef\3\2\2\2\u02ef\u02fa\3\2\2\2\u02f0\u02f1\7")
        buf.write("h\2\2\u02f1\u02f2\7u\2\2\u02f2\u02f7\5\u0128\u0095\2\u02f3")
        buf.write("\u02f4\7\u01b3\2\2\u02f4\u02f6\5\u0128\u0095\2\u02f5\u02f3")
        buf.write("\3\2\2\2\u02f6\u02f9\3\2\2\2\u02f7\u02f5\3\2\2\2\u02f7")
        buf.write("\u02f8\3\2\2\2\u02f8\u02fb\3\2\2\2\u02f9\u02f7\3\2\2\2")
        buf.write("\u02fa\u02f0\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fe\3")
        buf.write("\2\2\2\u02fc\u02fd\7\34\2\2\u02fd\u02ff\5\u014e\u00a8")
        buf.write("\2\u02fe\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0309")
        buf.write("\3\2\2\2\u0300\u0301\7\u00c3\2\2\u0301\u0306\5\u0124\u0093")
        buf.write("\2\u0302\u0303\7\u01b3\2\2\u0303\u0305\5\u0124\u0093\2")
        buf.write("\u0304\u0302\3\2\2\2\u0305\u0308\3\2\2\2\u0306\u0304\3")
        buf.write("\2\2\2\u0306\u0307\3\2\2\2\u0307\u030a\3\2\2\2\u0308\u0306")
        buf.write("\3\2\2\2\u0309\u0300\3\2\2\2\u0309\u030a\3\2\2\2\u030a")
        buf.write("\'\3\2\2\2\u030b\u030d\7&\2\2\u030c\u030e\7\u00b5\2\2")
        buf.write("\u030d\u030c\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u0310\3")
        buf.write("\2\2\2\u030f\u0311\5\u0140\u00a1\2\u0310\u030f\3\2\2\2")
        buf.write("\u0310\u0311\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0313\7")
        buf.write("[\2\2\u0313\u0314\5\u014e\u00a8\2\u0314\u0315\7u\2\2\u0315")
        buf.write("\u0316\5\u00ecw\2\u0316\u0317\7\u01b1\2\2\u0317\u0319")
        buf.write("\5\u013a\u009e\2\u0318\u031a\t\7\2\2\u0319\u0318\3\2\2")
        buf.write("\2\u0319\u031a\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031d")
        buf.write("\7\u01b2\2\2\u031c\u031e\5\u00a0Q\2\u031d\u031c\3\2\2")
        buf.write("\2\u031d\u031e\3\2\2\2\u031e\u0321\3\2\2\2\u031f\u0320")
        buf.write("\7u\2\2\u0320\u0322\5\u014e\u00a8\2\u0321\u031f\3\2\2")
        buf.write("\2\u0321\u0322\3\2\2\2\u0322\u0324\3\2\2\2\u0323\u0325")
        buf.write("\7\u01b4\2\2\u0324\u0323\3\2\2\2\u0324\u0325\3\2\2\2\u0325")
        buf.write(")\3\2\2\2\u0326\u0327\7&\2\2\u0327\u0328\t\b\2\2\u0328")
        buf.write("\u032b\5\u0134\u009b\2\u0329\u032a\7\u01b4\2\2\u032a\u032c")
        buf.write("\7\u019a\2\2\u032b\u0329\3\2\2\2\u032b\u032c\3\2\2\2\u032c")
        buf.write("\u033b\3\2\2\2\u032d\u032f\7\u01b1\2\2\u032e\u032d\3\2")
        buf.write("\2\2\u032e\u032f\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0335")
        buf.write("\5,\27\2\u0331\u0332\7\u01b3\2\2\u0332\u0334\5,\27\2\u0333")
        buf.write("\u0331\3\2\2\2\u0334\u0337\3\2\2\2\u0335\u0333\3\2\2\2")
        buf.write("\u0335\u0336\3\2\2\2\u0336\u0339\3\2\2\2\u0337\u0335\3")
        buf.write("\2\2\2\u0338\u033a\7\u01b2\2\2\u0339\u0338\3\2\2\2\u0339")
        buf.write("\u033a\3\2\2\2\u033a\u033c\3\2\2\2\u033b\u032e\3\2\2\2")
        buf.write("\u033b\u033c\3\2\2\2\u033c\u0346\3\2\2\2\u033d\u033e\7")
        buf.write("\u00c3\2\2\u033e\u0343\5.\30\2\u033f\u0340\7\u01b3\2\2")
        buf.write("\u0340\u0342\5.\30\2\u0341\u033f\3\2\2\2\u0342\u0345\3")
        buf.write("\2\2\2\u0343\u0341\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0347")
        buf.write("\3\2\2\2\u0345\u0343\3\2\2\2\u0346\u033d\3\2\2\2\u0346")
        buf.write("\u0347\3\2\2\2\u0347\u034a\3\2\2\2\u0348\u0349\7I\2\2")
        buf.write("\u0349\u034b\7\u008f\2\2\u034a\u0348\3\2\2\2\u034a\u034b")
        buf.write("\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034d\7\t\2\2\u034d")
        buf.write("\u034e\5\6\4\2\u034e+\3\2\2\2\u034f\u0353\7\u0199\2\2")
        buf.write("\u0350\u0351\5\u014e\u00a8\2\u0351\u0352\7\u01ac\2\2\u0352")
        buf.write("\u0354\3\2\2\2\u0353\u0350\3\2\2\2\u0353\u0354\3\2\2\2")
        buf.write("\u0354\u0356\3\2\2\2\u0355\u0357\7\t\2\2\u0356\u0355\3")
        buf.write("\2\2\2\u0356\u0357\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u035a")
        buf.write("\5\u0146\u00a4\2\u0359\u035b\7\u00bd\2\2\u035a\u0359\3")
        buf.write("\2\2\2\u035a\u035b\3\2\2\2\u035b\u035e\3\2\2\2\u035c\u035d")
        buf.write("\7\u01a0\2\2\u035d\u035f\5\u0148\u00a5\2\u035e\u035c\3")
        buf.write("\2\2\2\u035e\u035f\3\2\2\2\u035f\u0361\3\2\2\2\u0360\u0362")
        buf.write("\t\t\2\2\u0361\u0360\3\2\2\2\u0361\u0362\3\2\2\2\u0362")
        buf.write("-\3\2\2\2\u0363\u0367\7\u0100\2\2\u0364\u0367\7\u015a")
        buf.write("\2\2\u0365\u0367\5\u0090I\2\u0366\u0363\3\2\2\2\u0366")
        buf.write("\u0364\3\2\2\2\u0366\u0365\3\2\2\2\u0367/\3\2\2\2\u0368")
        buf.write("\u0369\7&\2\2\u0369\u036a\7\u00a6\2\2\u036a\u036b\5\u014e")
        buf.write("\u00a8\2\u036b\u036c\7u\2\2\u036c\u036d\5\u00ecw\2\u036d")
        buf.write("\u036e\7\u01b1\2\2\u036e\u036f\5\u013a\u009e\2\u036f\u0382")
        buf.write("\7\u01b2\2\2\u0370\u0376\7\u00c3\2\2\u0371\u0377\7\u010e")
        buf.write("\2\2\u0372\u0373\7\u0167\2\2\u0373\u0374\7\u019a\2\2\u0374")
        buf.write("\u0377\t\n\2\2\u0375\u0377\7\u0175\2\2\u0376\u0371\3\2")
        buf.write("\2\2\u0376\u0372\3\2\2\2\u0376\u0375\3\2\2\2\u0377\u037a")
        buf.write("\3\2\2\2\u0378\u0379\7\u01b3\2\2\u0379\u037b\7\u013e\2")
        buf.write("\2\u037a\u0378\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u0380")
        buf.write("\3\2\2\2\u037c\u037d\7\u01b3\2\2\u037d\u037e\7\u011b\2")
        buf.write("\2\u037e\u037f\7\u01a0\2\2\u037f\u0381\5\u013e\u00a0\2")
        buf.write("\u0380\u037c\3\2\2\2\u0380\u0381\3\2\2\2\u0381\u0383\3")
        buf.write("\2\2\2\u0382\u0370\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0385")
        buf.write("\3\2\2\2\u0384\u0386\7\u01b4\2\2\u0385\u0384\3\2\2\2\u0385")
        buf.write("\u0386\3\2\2\2\u0386\61\3\2\2\2\u0387\u0388\7&\2\2\u0388")
        buf.write("\u0389\7\u00a8\2\2\u0389\u038a\5\u0130\u0099\2\u038a\u038b")
        buf.write("\7\u01b1\2\2\u038b\u038d\5\u0096L\2\u038c\u038e\7\u01b3")
        buf.write("\2\2\u038d\u038c\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u038f")
        buf.write("\3\2\2\2\u038f\u0393\7\u01b2\2\2\u0390\u0391\7u\2\2\u0391")
        buf.write("\u0394\5\u014e\u00a8\2\u0392\u0394\7\62\2\2\u0393\u0390")
        buf.write("\3\2\2\2\u0393\u0392\3\2\2\2\u0393\u0394\3\2\2\2\u0394")
        buf.write("\u0398\3\2\2\2\u0395\u0396\7\u017c\2\2\u0396\u0399\5\u014e")
        buf.write("\u00a8\2\u0397\u0399\7\62\2\2\u0398\u0395\3\2\2\2\u0398")
        buf.write("\u0397\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039b\3\2\2\2")
        buf.write("\u039a\u039c\7\u01b4\2\2\u039b\u039a\3\2\2\2\u039b\u039c")
        buf.write("\3\2\2\2\u039c\63\3\2\2\2\u039d\u039e\7&\2\2\u039e\u039f")
        buf.write("\7\u00be\2\2\u039f\u03a4\5\u0132\u009a\2\u03a0\u03a1\7")
        buf.write("\u01b1\2\2\u03a1\u03a2\5\u013a\u009e\2\u03a2\u03a3\7\u01b2")
        buf.write("\2\2\u03a3\u03a5\3\2\2\2\u03a4\u03a0\3\2\2\2\u03a4\u03a5")
        buf.write("\3\2\2\2\u03a5\u03af\3\2\2\2\u03a6\u03a7\7\u00c3\2\2\u03a7")
        buf.write("\u03ac\5\66\34\2\u03a8\u03a9\7\u01b3\2\2\u03a9\u03ab\5")
        buf.write("\66\34\2\u03aa\u03a8\3\2\2\2\u03ab\u03ae\3\2\2\2\u03ac")
        buf.write("\u03aa\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03b0\3\2\2\2")
        buf.write("\u03ae\u03ac\3\2\2\2\u03af\u03a6\3\2\2\2\u03af\u03b0\3")
        buf.write("\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b2\7\t\2\2\u03b2\u03b6")
        buf.write("\5\32\16\2\u03b3\u03b4\7\u00c3\2\2\u03b4\u03b5\7\27\2")
        buf.write("\2\u03b5\u03b7\7{\2\2\u03b6\u03b3\3\2\2\2\u03b6\u03b7")
        buf.write("\3\2\2\2\u03b7\u03b9\3\2\2\2\u03b8\u03ba\7\u01b4\2\2\u03b9")
        buf.write("\u03b8\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\65\3\2\2\2\u03bb")
        buf.write("\u03bc\t\13\2\2\u03bc\67\3\2\2\2\u03bd\u03be\7\6\2\2\u03be")
        buf.write("\u03bf\7\u00a8\2\2\u03bf\u03de\5\u0130\u0099\2\u03c0\u03c1")
        buf.write("\7\u00a2\2\2\u03c1\u03c2\7\u01b1\2\2\u03c2\u03c3\7\u0128")
        buf.write("\2\2\u03c3\u03c4\7\u01a0\2\2\u03c4\u03c5\t\f\2\2\u03c5")
        buf.write("\u03df\7\u01b2\2\2\u03c6\u03c7\7\4\2\2\u03c7\u03df\5\u0098")
        buf.write("M\2\u03c8\u03c9\7:\2\2\u03c9\u03ca\7 \2\2\u03ca\u03df")
        buf.write("\5\u014e\u00a8\2\u03cb\u03cc\7\u00c3\2\2\u03cc\u03cd\7")
        buf.write("\27\2\2\u03cd\u03ce\7\4\2\2\u03ce\u03cf\7 \2\2\u03cf\u03d0")
        buf.write("\5\u014e\u00a8\2\u03d0\u03d1\7K\2\2\u03d1\u03d2\7b\2\2")
        buf.write("\u03d2\u03d3\7\u01b1\2\2\u03d3\u03d4\5\u013a\u009e\2\u03d4")
        buf.write("\u03d5\7\u01b2\2\2\u03d5\u03d6\7\u008e\2\2\u03d6\u03d7")
        buf.write("\5\u0130\u0099\2\u03d7\u03d8\7\u01b1\2\2\u03d8\u03d9\5")
        buf.write("\u013a\u009e\2\u03d9\u03da\7\u01b2\2\2\u03da\u03df\3\2")
        buf.write("\2\2\u03db\u03dc\7\27\2\2\u03dc\u03dd\7 \2\2\u03dd\u03df")
        buf.write("\5\u014e\u00a8\2\u03de\u03c0\3\2\2\2\u03de\u03c6\3\2\2")
        buf.write("\2\u03de\u03c8\3\2\2\2\u03de\u03cb\3\2\2\2\u03de\u03db")
        buf.write("\3\2\2\2\u03df\u03e1\3\2\2\2\u03e0\u03e2\7\u01b4\2\2\u03e1")
        buf.write("\u03e0\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e29\3\2\2\2\u03e3")
        buf.write("\u03e4\7\6\2\2\u03e4\u03e7\7.\2\2\u03e5\u03e8\5\u014e")
        buf.write("\u00a8\2\u03e6\u03e8\7(\2\2\u03e7\u03e5\3\2\2\2\u03e7")
        buf.write("\u03e6\3\2\2\2\u03e8\u03f5\3\2\2\2\u03e9\u03ea\7\u0136")
        buf.write("\2\2\u03ea\u03eb\7\u0138\2\2\u03eb\u03ec\7\u01a0\2\2\u03ec")
        buf.write("\u03f6\5\u014e\u00a8\2\u03ed\u03ee\7\34\2\2\u03ee\u03f6")
        buf.write("\5\u014e\u00a8\2\u03ef\u03f0\7\u00a2\2\2\u03f0\u03f3\5")
        buf.write("<\37\2\u03f1\u03f2\7\u00c3\2\2\u03f2\u03f4\5d\63\2\u03f3")
        buf.write("\u03f1\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f6\3\2\2\2")
        buf.write("\u03f5\u03e9\3\2\2\2\u03f5\u03ed\3\2\2\2\u03f5\u03ef\3")
        buf.write("\2\2\2\u03f6\u03f8\3\2\2\2\u03f7\u03f9\7\u01b4\2\2\u03f8")
        buf.write("\u03f7\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9;\3\2\2\2\u03fa")
        buf.write("\u0411\5> \2\u03fb\u0411\5@!\2\u03fc\u0411\5D#\2\u03fd")
        buf.write("\u0411\5F$\2\u03fe\u0411\5H%\2\u03ff\u0411\5J&\2\u0400")
        buf.write("\u0411\5L\'\2\u0401\u0411\5N(\2\u0402\u0411\5P)\2\u0403")
        buf.write("\u0411\5R*\2\u0404\u0411\5T+\2\u0405\u0406\7\u0107\2\2")
        buf.write("\u0406\u0411\5\u0126\u0094\2\u0407\u0411\7\3\2\2\u0408")
        buf.write("\u0411\5V,\2\u0409\u0411\5X-\2\u040a\u0411\5Z.\2\u040b")
        buf.write("\u0411\5\\/\2\u040c\u0411\5^\60\2\u040d\u0411\5`\61\2")
        buf.write("\u040e\u0411\5b\62\2\u040f\u0411\5d\63\2\u0410\u03fa\3")
        buf.write("\2\2\2\u0410\u03fb\3\2\2\2\u0410\u03fc\3\2\2\2\u0410\u03fd")
        buf.write("\3\2\2\2\u0410\u03fe\3\2\2\2\u0410\u03ff\3\2\2\2\u0410")
        buf.write("\u0400\3\2\2\2\u0410\u0401\3\2\2\2\u0410\u0402\3\2\2\2")
        buf.write("\u0410\u0403\3\2\2\2\u0410\u0404\3\2\2\2\u0410\u0405\3")
        buf.write("\2\2\2\u0410\u0407\3\2\2\2\u0410\u0408\3\2\2\2\u0410\u0409")
        buf.write("\3\2\2\2\u0410\u040a\3\2\2\2\u0410\u040b\3\2\2\2\u0410")
        buf.write("\u040c\3\2\2\2\u0410\u040d\3\2\2\2\u0410\u040e\3\2\2\2")
        buf.write("\u0410\u040f\3\2\2\2\u0411=\3\2\2\2\u0412\u0413\7\u00d2")
        buf.write("\2\2\u0413\u0424\5\u013e\u00a0\2\u0414\u0415\7\u00d3\2")
        buf.write("\2\u0415\u0424\7s\2\2\u0416\u041b\7u\2\2\u0417\u0418\7")
        buf.write("\u011b\2\2\u0418\u0419\7\u01a0\2\2\u0419\u041c\7u\2\2")
        buf.write("\u041a\u041c\7s\2\2\u041b\u0417\3\2\2\2\u041b\u041a\3")
        buf.write("\2\2\2\u041c\u0424\3\2\2\2\u041d\u041e\7\u00d4\2\2\u041e")
        buf.write("\u0424\5\u013e\u00a0\2\u041f\u0420\7\u00d5\2\2\u0420\u0424")
        buf.write("\5\u013e\u00a0\2\u0421\u0422\7\u00d6\2\2\u0422\u0424\t")
        buf.write("\r\2\2\u0423\u0412\3\2\2\2\u0423\u0414\3\2\2\2\u0423\u0416")
        buf.write("\3\2\2\2\u0423\u041d\3\2\2\2\u0423\u041f\3\2\2\2\u0423")
        buf.write("\u0421\3\2\2\2\u0424?\3\2\2\2\u0425\u0426\7\u00df\2\2")
        buf.write("\u0426\u0436\7\u01a0\2\2\u0427\u0437\7s\2\2\u0428\u0433")
        buf.write("\7u\2\2\u0429\u042e\5B\"\2\u042a\u042b\7\u01b3\2\2\u042b")
        buf.write("\u042d\5B\"\2\u042c\u042a\3\2\2\2\u042d\u0430\3\2\2\2")
        buf.write("\u042e\u042c\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0432\3")
        buf.write("\2\2\2\u0430\u042e\3\2\2\2\u0431\u0429\3\2\2\2\u0432\u0435")
        buf.write("\3\2\2\2\u0433\u0431\3\2\2\2\u0433\u0434\3\2\2\2\u0434")
        buf.write("\u0437\3\2\2\2\u0435\u0433\3\2\2\2\u0436\u0427\3\2\2\2")
        buf.write("\u0436\u0428\3\2\2\2\u0437A\3\2\2\2\u0438\u0439\7\u00d1")
        buf.write("\2\2\u0439\u043a\7\u01a0\2\2\u043a\u043f\5\u013e\u00a0")
        buf.write("\2\u043b\u043c\7\u00de\2\2\u043c\u043d\7\u01a0\2\2\u043d")
        buf.write("\u043f\t\16\2\2\u043e\u0438\3\2\2\2\u043e\u043b\3\2\2")
        buf.write("\2\u043fC\3\2\2\2\u0440\u0441\7!\2\2\u0441\u0442\7\u01a0")
        buf.write("\2\2\u0442\u0443\t\6\2\2\u0443E\3\2\2\2\u0444\u0445\7")
        buf.write("\u00ea\2\2\u0445\u0449\5\u013e\u00a0\2\u0446\u0447\7\u00eb")
        buf.write("\2\2\u0447\u0449\t\17\2\2\u0448\u0444\3\2\2\2\u0448\u0446")
        buf.write("\3\2\2\2\u0449G\3\2\2\2\u044a\u044b\7\u00f0\2\2\u044b")
        buf.write("\u044c\5\u013e\u00a0\2\u044cI\3\2\2\2\u044d\u044e\7\u0100")
        buf.write("\2\2\u044e\u044f\5\u013e\u00a0\2\u044fK\3\2\2\2\u0450")
        buf.write("\u0451\t\20\2\2\u0451M\3\2\2\2\u0452\u0453\t\21\2\2\u0453")
        buf.write("O\3\2\2\2\u0454\u0455\t\22\2\2\u0455Q\3\2\2\2\u0456\u0457")
        buf.write("\7\u00f6\2\2\u0457\u0458\7\u01a0\2\2\u0458\u0459\t\23")
        buf.write("\2\2\u0459S\3\2\2\2\u045a\u045b\7\u00f2\2\2\u045b\u0474")
        buf.write("\5\u013e\u00a0\2\u045c\u045d\7\u0182\2\2\u045d\u0474\5")
        buf.write("\u013e\u00a0\2\u045e\u045f\7\u00f4\2\2\u045f\u0462\7\u01a0")
        buf.write("\2\2\u0460\u0463\5\u014e\u00a8\2\u0461\u0463\7\u019c\2")
        buf.write("\2\u0462\u0460\3\2\2\2\u0462\u0461\3\2\2\2\u0463\u0474")
        buf.write("\3\2\2\2\u0464\u0465\7\u00f3\2\2\u0465\u0468\7\u01a0\2")
        buf.write("\2\u0466\u0469\5\u014e\u00a8\2\u0467\u0469\7\u019c\2\2")
        buf.write("\u0468\u0466\3\2\2\2\u0468\u0467\3\2\2\2\u0469\u0474\3")
        buf.write("\2\2\2\u046a\u046b\7\u0139\2\2\u046b\u046c\7\u01a0\2\2")
        buf.write("\u046c\u0474\t\r\2\2\u046d\u046e\7\u0181\2\2\u046e\u046f")
        buf.write("\7\u01a0\2\2\u046f\u0474\t\r\2\2\u0470\u0471\7\u0184\2")
        buf.write("\2\u0471\u0472\7\u01a0\2\2\u0472\u0474\7\u019a\2\2\u0473")
        buf.write("\u045a\3\2\2\2\u0473\u045c\3\2\2\2\u0473\u045e\3\2\2\2")
        buf.write("\u0473\u0464\3\2\2\2\u0473\u046a\3\2\2\2\u0473\u046d\3")
        buf.write("\2\2\2\u0473\u0470\3\2\2\2\u0474U\3\2\2\2\u0475\u0476")
        buf.write("\7\u0135\2\2\u0476\u0477\t\r\2\2\u0477W\3\2\2\2\u0478")
        buf.write("\u0479\7\u014d\2\2\u0479\u047a\t\24\2\2\u047aY\3\2\2\2")
        buf.write("\u047b\u047c\7\u015b\2\2\u047c\u0482\t\25\2\2\u047d\u047e")
        buf.write("\7\u0180\2\2\u047e\u0482\5\u013e\u00a0\2\u047f\u0480\7")
        buf.write("\u014c\2\2\u0480\u0482\t\26\2\2\u0481\u047b\3\2\2\2\u0481")
        buf.write("\u047d\3\2\2\2\u0481\u047f\3\2\2\2\u0482[\3\2\2\2\u0483")
        buf.write("\u048a\7\u00ff\2\2\u0484\u048a\7\u00fc\2\2\u0485\u048a")
        buf.write("\7\u013a\2\2\u0486\u048a\7\u0101\2\2\u0487\u0488\7\u0116")
        buf.write("\2\2\u0488\u048a\5\u013e\u00a0\2\u0489\u0483\3\2\2\2\u0489")
        buf.write("\u0484\3\2\2\2\u0489\u0485\3\2\2\2\u0489\u0486\3\2\2\2")
        buf.write("\u0489\u0487\3\2\2\2\u048a]\3\2\2\2\u048b\u048c\7\u00c9")
        buf.write("\2\2\u048c\u0491\5\u013e\u00a0\2\u048d\u048e\7\u0157\2")
        buf.write("\2\u048e\u0491\t\r\2\2\u048f\u0491\t\r\2\2\u0490\u048b")
        buf.write("\3\2\2\2\u0490\u048d\3\2\2\2\u0490\u048f\3\2\2\2\u0491")
        buf.write("_\3\2\2\2\u0492\u0493\7\u00cb\2\2\u0493\u04a8\5\u013e")
        buf.write("\u00a0\2\u0494\u0495\7\u00ca\2\2\u0495\u04a8\5\u013e\u00a0")
        buf.write("\2\u0496\u0497\7\u00cc\2\2\u0497\u04a8\5\u013e\u00a0\2")
        buf.write("\u0498\u0499\7\u00cd\2\2\u0499\u04a8\5\u013e\u00a0\2\u049a")
        buf.write("\u049b\7\u00cf\2\2\u049b\u04a8\5\u013e\u00a0\2\u049c\u049d")
        buf.write("\7\u00e3\2\2\u049d\u049e\7\u01a0\2\2\u049e\u04a8\7\u019a")
        buf.write("\2\2\u049f\u04a0\7\u00e5\2\2\u04a0\u04a8\5\u013e\u00a0")
        buf.write("\2\u04a1\u04a2\7\u0142\2\2\u04a2\u04a8\5\u013e\u00a0\2")
        buf.write("\u04a3\u04a4\7\u0153\2\2\u04a4\u04a8\5\u013e\u00a0\2\u04a5")
        buf.write("\u04a6\7\u015c\2\2\u04a6\u04a8\5\u013e\u00a0\2\u04a7\u0492")
        buf.write("\3\2\2\2\u04a7\u0494\3\2\2\2\u04a7\u0496\3\2\2\2\u04a7")
        buf.write("\u0498\3\2\2\2\u04a7\u049a\3\2\2\2\u04a7\u049c\3\2\2\2")
        buf.write("\u04a7\u049f\3\2\2\2\u04a7\u04a1\3\2\2\2\u04a7\u04a3\3")
        buf.write("\2\2\2\u04a7\u04a5\3\2\2\2\u04a8a\3\2\2\2\u04a9\u04aa")
        buf.write("\7\u017a\2\2\u04aa\u04ab\7\u01a0\2\2\u04ab\u04ac\7\u019a")
        buf.write("\2\2\u04ac\u04ad\t\27\2\2\u04adc\3\2\2\2\u04ae\u04af\7")
        buf.write("\u0096\2\2\u04af\u04b0\7\u00c7\2\2\u04b0\u04b5\7\u019a")
        buf.write("\2\2\u04b1\u04b2\7\u0096\2\2\u04b2\u04b5\7\u0119\2\2\u04b3")
        buf.write("\u04b5\7\u013f\2\2\u04b4\u04ae\3\2\2\2\u04b4\u04b1\3\2")
        buf.write("\2\2\u04b4\u04b3\3\2\2\2\u04b5e\3\2\2\2\u04b6\u04b7\7")
        buf.write(":\2\2\u04b7\u04ba\7[\2\2\u04b8\u04b9\7Y\2\2\u04b9\u04bb")
        buf.write("\7B\2\2\u04ba\u04b8\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb")
        buf.write("\u04bc\3\2\2\2\u04bc\u04bf\5\u014e\u00a8\2\u04bd\u04be")
        buf.write("\7u\2\2\u04be\u04c0\5\u0130\u0099\2\u04bf\u04bd\3\2\2")
        buf.write("\2\u04bf\u04c0\3\2\2\2\u04c0\u04c2\3\2\2\2\u04c1\u04c3")
        buf.write("\7\u01b4\2\2\u04c2\u04c1\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3")
        buf.write("g\3\2\2\2\u04c4\u04c5\7:\2\2\u04c5\u04c8\7\u0088\2\2\u04c6")
        buf.write("\u04c7\7Y\2\2\u04c7\u04c9\7B\2\2\u04c8\u04c6\3\2\2\2\u04c8")
        buf.write("\u04c9\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04cc\5\u0134")
        buf.write("\u009b\2\u04cb\u04cd\7\u01b4\2\2\u04cc\u04cb\3\2\2\2\u04cc")
        buf.write("\u04cd\3\2\2\2\u04cdi\3\2\2\2\u04ce\u04cf\7:\2\2\u04cf")
        buf.write("\u04d3\7\u00a6\2\2\u04d0\u04d1\5\u0130\u0099\2\u04d1\u04d2")
        buf.write("\7\u01ac\2\2\u04d2\u04d4\3\2\2\2\u04d3\u04d0\3\2\2\2\u04d3")
        buf.write("\u04d4\3\2\2\2\u04d4\u04d5\3\2\2\2\u04d5\u04d6\5\u014e")
        buf.write("\u00a8\2\u04d6\u04d7\7\u01b4\2\2\u04d7k\3\2\2\2\u04d8")
        buf.write("\u04d9\7:\2\2\u04d9\u04dc\7\u00a8\2\2\u04da\u04db\7Y\2")
        buf.write("\2\u04db\u04dd\7B\2\2\u04dc\u04da\3\2\2\2\u04dc\u04dd")
        buf.write("\3\2\2\2\u04dd\u04de\3\2\2\2\u04de\u04e0\5\u0130\u0099")
        buf.write("\2\u04df\u04e1\7\u01b4\2\2\u04e0\u04df\3\2\2\2\u04e0\u04e1")
        buf.write("\3\2\2\2\u04e1m\3\2\2\2\u04e2\u04e3\7:\2\2\u04e3\u04e6")
        buf.write("\7\u00be\2\2\u04e4\u04e5\7Y\2\2\u04e5\u04e7\7B\2\2\u04e6")
        buf.write("\u04e4\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e8\3\2\2\2")
        buf.write("\u04e8\u04ed\5\u0132\u009a\2\u04e9\u04ea\7\u01b3\2\2\u04ea")
        buf.write("\u04ec\5\u0132\u009a\2\u04eb\u04e9\3\2\2\2\u04ec\u04ef")
        buf.write("\3\2\2\2\u04ed\u04eb\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee")
        buf.write("\u04f1\3\2\2\2\u04ef\u04ed\3\2\2\2\u04f0\u04f2\7\u01b4")
        buf.write("\2\2\u04f1\u04f0\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2o\3")
        buf.write("\2\2\2\u04f3\u04f4\7&\2\2\u04f4\u04f5\7\u0185\2\2\u04f5")
        buf.write("\u04f6\5\u0132\u009a\2\u04f6\u04f7\7N\2\2\u04f7\u04f8")
        buf.write("\5\u0146\u00a4\2\u04f8\u04f9\5\u0148\u00a5\2\u04f9q\3")
        buf.write("\2\2\2\u04fa\u04fb\7:\2\2\u04fb\u04fe\7\u0185\2\2\u04fc")
        buf.write("\u04fd\7Y\2\2\u04fd\u04ff\7B\2\2\u04fe\u04fc\3\2\2\2\u04fe")
        buf.write("\u04ff\3\2\2\2\u04ff\u0500\3\2\2\2\u0500\u0501\5\u0132")
        buf.write("\u009a\2\u0501s\3\2\2\2\u0502\u0505\5v<\2\u0503\u0505")
        buf.write("\5x=\2\u0504\u0502\3\2\2\2\u0504\u0503\3\2\2\2\u0505u")
        buf.write("\3\2\2\2\u0506\u0507\7x\2\2\u0507\u0508\7\u01b1\2\2\u0508")
        buf.write("\u0509\5\u014e\u00a8\2\u0509\u050a\7\u01b3\2\2\u050a\u050b")
        buf.write("\7\u019c\2\2\u050b\u050c\7\u01b2\2\2\u050cw\3\2\2\2\u050d")
        buf.write("\u050e\7w\2\2\u050e\u050f\7\u01b1\2\2\u050f\u0510\7\u019c")
        buf.write("\2\2\u0510\u0511\7\u01b3\2\2\u0511\u0512\7\u019c\2\2\u0512")
        buf.write("\u0513\7\u01b2\2\2\u0513\u0515\7\u01ac\2\2\u0514\u0516")
        buf.write("\5\u014e\u00a8\2\u0515\u0514\3\2\2\2\u0515\u0516\3\2\2")
        buf.write("\2\u0516\u0517\3\2\2\2\u0517\u0519\7\u01ac\2\2\u0518\u051a")
        buf.write("\5\u014e\u00a8\2\u0519\u0518\3\2\2\2\u0519\u051a\3\2\2")
        buf.write("\2\u051a\u051b\3\2\2\2\u051b\u051c\7\u01ac\2\2\u051c\u051d")
        buf.write("\5\u014e\u00a8\2\u051dy\3\2\2\2\u051e\u051f\7\61\2\2\u051f")
        buf.write("\u0521\7\u0199\2\2\u0520\u0522\7\t\2\2\u0521\u0520\3\2")
        buf.write("\2\2\u0521\u0522\3\2\2\2\u0522\u0523\3\2\2\2\u0523\u0525")
        buf.write("\5\u0094K\2\u0524\u0526\7\u01b4\2\2\u0525\u0524\3\2\2")
        buf.write("\2\u0525\u0526\3\2\2\2\u0526\u0534\3\2\2\2\u0527\u0528")
        buf.write("\7\61\2\2\u0528\u052d\5\u0092J\2\u0529\u052a\7\u01b3\2")
        buf.write("\2\u052a\u052c\5\u0092J\2\u052b\u0529\3\2\2\2\u052c\u052f")
        buf.write("\3\2\2\2\u052d\u052b\3\2\2\2\u052d\u052e\3\2\2\2\u052e")
        buf.write("\u0531\3\2\2\2\u052f\u052d\3\2\2\2\u0530\u0532\7\u01b4")
        buf.write("\2\2\u0531\u0530\3\2\2\2\u0531\u0532\3\2\2\2\u0532\u0534")
        buf.write("\3\2\2\2\u0533\u051e\3\2\2\2\u0533\u0527\3\2\2\2\u0534")
        buf.write("{\3\2\2\2\u0535\u0537\7\31\2\2\u0536\u0538\7\u0110\2\2")
        buf.write("\u0537\u0536\3\2\2\2\u0537\u0538\3\2\2\2\u0538\u0539\3")
        buf.write("\2\2\2\u0539\u053b\5\u013c\u009f\2\u053a\u053c\7\u01b4")
        buf.write("\2\2\u053b\u053a\3\2\2\2\u053b\u053c\3\2\2\2\u053c\u0550")
        buf.write("\3\2\2\2\u053d\u053f\7\60\2\2\u053e\u0540\7\u0110\2\2")
        buf.write("\u053f\u053e\3\2\2\2\u053f\u0540\3\2\2\2\u0540\u0541\3")
        buf.write("\2\2\2\u0541\u0543\5\u013c\u009f\2\u0542\u0544\7\u01b4")
        buf.write("\2\2\u0543\u0542\3\2\2\2\u0543\u0544\3\2\2\2\u0544\u0550")
        buf.write("\3\2\2\2\u0545\u0550\5\u00a4S\2\u0546\u0550\5\u00a8U\2")
        buf.write("\u0547\u0549\7v\2\2\u0548\u054a\7\u0110\2\2\u0549\u0548")
        buf.write("\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u054b\3\2\2\2\u054b")
        buf.write("\u054d\5\u013c\u009f\2\u054c\u054e\7\u01b4\2\2\u054d\u054c")
        buf.write("\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u0550\3\2\2\2\u054f")
        buf.write("\u0535\3\2\2\2\u054f\u053d\3\2\2\2\u054f\u0545\3\2\2\2")
        buf.write("\u054f\u0546\3\2\2\2\u054f\u0547\3\2\2\2\u0550}\3\2\2")
        buf.write("\2\u0551\u0554\7A\2\2\u0552\u0553\7\u0199\2\2\u0553\u0555")
        buf.write("\7\u01a0\2\2\u0554\u0552\3\2\2\2\u0554\u0555\3\2\2\2\u0555")
        buf.write("\u0556\3\2\2\2\u0556\u055f\5\u0134\u009b\2\u0557\u055c")
        buf.write("\5\u0080A\2\u0558\u0559\7\u01b3\2\2\u0559\u055b\5\u0080")
        buf.write("A\2\u055a\u0558\3\2\2\2\u055b\u055e\3\2\2\2\u055c\u055a")
        buf.write("\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u0560\3\2\2\2\u055e")
        buf.write("\u055c\3\2\2\2\u055f\u0557\3\2\2\2\u055f\u0560\3\2\2\2")
        buf.write("\u0560\u0562\3\2\2\2\u0561\u0563\7\u01b4\2\2\u0562\u0561")
        buf.write("\3\2\2\2\u0562\u0563\3\2\2\2\u0563\u057b\3\2\2\2\u0564")
        buf.write("\u0565\7A\2\2\u0565\u0566\7\u01b1\2\2\u0566\u056b\5\u0082")
        buf.write("B\2\u0567\u0568\7\u01b9\2\2\u0568\u056a\5\u0082B\2\u0569")
        buf.write("\u0567\3\2\2\2\u056a\u056d\3\2\2\2\u056b\u0569\3\2\2\2")
        buf.write("\u056b\u056c\3\2\2\2\u056c\u056e\3\2\2\2\u056d\u056b\3")
        buf.write("\2\2\2\u056e\u0575\7\u01b2\2\2\u056f\u0571\7\t\2\2\u0570")
        buf.write("\u056f\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0572\3\2\2\2")
        buf.write("\u0572\u0573\t\30\2\2\u0573\u0574\7\u01a0\2\2\u0574\u0576")
        buf.write("\7\u019c\2\2\u0575\u0570\3\2\2\2\u0575\u0576\3\2\2\2\u0576")
        buf.write("\u0578\3\2\2\2\u0577\u0579\7\u01b4\2\2\u0578\u0577\3\2")
        buf.write("\2\2\u0578\u0579\3\2\2\2\u0579\u057b\3\2\2\2\u057a\u0551")
        buf.write("\3\2\2\2\u057a\u0564\3\2\2\2\u057b\177\3\2\2\2\u057c\u057d")
        buf.write("\7\u0199\2\2\u057d\u057f\7\u01a0\2\2\u057e\u057c\3\2\2")
        buf.write("\2\u057e\u057f\3\2\2\2\u057f\u0589\3\2\2\2\u0580\u0583")
        buf.write("\5\u00acW\2\u0581\u0583\5\u014e\u00a8\2\u0582\u0580\3")
        buf.write("\2\2\2\u0582\u0581\3\2\2\2\u0583\u0585\3\2\2\2\u0584\u0586")
        buf.write("\t\31\2\2\u0585\u0584\3\2\2\2\u0585\u0586\3\2\2\2\u0586")
        buf.write("\u058a\3\2\2\2\u0587\u058a\7\62\2\2\u0588\u058a\7p\2\2")
        buf.write("\u0589\u0582\3\2\2\2\u0589\u0587\3\2\2\2\u0589\u0588\3")
        buf.write("\2\2\2\u058a\u0081\3\2\2\2\u058b\u058c\t\3\2\2\u058c\u0083")
        buf.write("\3\2\2\2\u058d\u058f\5\u0090I\2\u058e\u0590\7\u01b4\2")
        buf.write("\2\u058f\u058e\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u05be")
        buf.write("\3\2\2\2\u0591\u059d\7R\2\2\u0592\u0594\7\5\2\2\u0593")
        buf.write("\u0595\7\u0152\2\2\u0594\u0593\3\2\2\2\u0594\u0595\3\2")
        buf.write("\2\2\u0595\u059e\3\2\2\2\u0596\u059b\5\u0086D\2\u0597")
        buf.write("\u0598\7\u01b1\2\2\u0598\u0599\5\u013a\u009e\2\u0599\u059a")
        buf.write("\7\u01b2\2\2\u059a\u059c\3\2\2\2\u059b\u0597\3\2\2\2\u059b")
        buf.write("\u059c\3\2\2\2\u059c\u059e\3\2\2\2\u059d\u0592\3\2\2\2")
        buf.write("\u059d\u0596\3\2\2\2\u059e\u05a1\3\2\2\2\u059f\u05a0\7")
        buf.write("u\2\2\u05a0\u05a2\5\u0130\u0099\2\u05a1\u059f\3\2\2\2")
        buf.write("\u05a1\u05a2\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a4\7")
        buf.write("\u00ac\2\2\u05a4\u05a8\5\u014e\u00a8\2\u05a5\u05a6\7\u00c3")
        buf.write("\2\2\u05a6\u05a7\7R\2\2\u05a7\u05a9\7{\2\2\u05a8\u05a5")
        buf.write("\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05ac\3\2\2\2\u05aa")
        buf.write("\u05ab\7\t\2\2\u05ab\u05ad\5\u014e\u00a8\2\u05ac\u05aa")
        buf.write("\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05af\3\2\2\2\u05ae")
        buf.write("\u05b0\7\u01b4\2\2\u05af\u05ae\3\2\2\2\u05af\u05b0\3\2")
        buf.write("\2\2\u05b0\u05be\3\2\2\2\u05b1\u05b8\7\u0093\2\2\u05b2")
        buf.write("\u05b3\7\u01b1\2\2\u05b3\u05b4\7\u00c3\2\2\u05b4\u05b5")
        buf.write("\7\u00e7\2\2\u05b5\u05b6\7\u01a0\2\2\u05b6\u05b7\7\u0199")
        buf.write("\2\2\u05b7\u05b9\7\u01b2\2\2\u05b8\u05b2\3\2\2\2\u05b8")
        buf.write("\u05b9\3\2\2\2\u05b9\u05bb\3\2\2\2\u05ba\u05bc\7\u01b4")
        buf.write("\2\2\u05bb\u05ba\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc\u05be")
        buf.write("\3\2\2\2\u05bd\u058d\3\2\2\2\u05bd\u0591\3\2\2\2\u05bd")
        buf.write("\u05b1\3\2\2\2\u05be\u0085\3\2\2\2\u05bf\u05da\7A\2\2")
        buf.write("\u05c0\u05c1\7\u00be\2\2\u05c1\u05da\5\u014e\u00a8\2\u05c2")
        buf.write("\u05c3\7\u0179\2\2\u05c3\u05da\5\u014e\u00a8\2\u05c4\u05c6")
        buf.write("\7\u00e6\2\2\u05c5\u05c7\5\u014e\u00a8\2\u05c6\u05c5\3")
        buf.write("\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u05da\3\2\2\2\u05c8\u05c9")
        buf.write("\7&\2\2\u05c9\u05da\t\32\2\2\u05ca\u05da\7\u016e\2\2\u05cb")
        buf.write("\u05da\7\u011a\2\2\u05cc\u05da\7\u009d\2\2\u05cd\u05da")
        buf.write("\7\u008e\2\2\u05ce\u05da\7]\2\2\u05cf\u05d7\7\6\2\2\u05d0")
        buf.write("\u05d2\7\b\2\2\u05d1\u05d0\3\2\2\2\u05d1\u05d2\3\2\2\2")
        buf.write("\u05d2\u05d5\3\2\2\2\u05d3\u05d6\5\u014e\u00a8\2\u05d4")
        buf.write("\u05d6\7.\2\2\u05d5\u05d3\3\2\2\2\u05d5\u05d4\3\2\2\2")
        buf.write("\u05d6\u05d8\3\2\2\2\u05d7\u05d1\3\2\2\2\u05d7\u05d8\3")
        buf.write("\2\2\2\u05d8\u05da\3\2\2\2\u05d9\u05bf\3\2\2\2\u05d9\u05c0")
        buf.write("\3\2\2\2\u05d9\u05c2\3\2\2\2\u05d9\u05c4\3\2\2\2\u05d9")
        buf.write("\u05c8\3\2\2\2\u05d9\u05ca\3\2\2\2\u05d9\u05cb\3\2\2\2")
        buf.write("\u05d9\u05cc\3\2\2\2\u05d9\u05cd\3\2\2\2\u05d9\u05ce\3")
        buf.write("\2\2\2\u05d9\u05cf\3\2\2\2\u05da\u0087\3\2\2\2\u05db\u05dc")
        buf.write("\7\u00a2\2\2\u05dc\u05df\7\u0199\2\2\u05dd\u05de\7\u01ac")
        buf.write("\2\2\u05de\u05e0\5\u014e\u00a8\2\u05df\u05dd\3\2\2\2\u05df")
        buf.write("\u05e0\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05e2\7\u01a0")
        buf.write("\2\2\u05e2\u05e4\5\u00aeX\2\u05e3\u05e5\7\u01b4\2\2\u05e4")
        buf.write("\u05e3\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u0603\3\2\2\2")
        buf.write("\u05e6\u05e7\7\u00a2\2\2\u05e7\u05e8\7\u0199\2\2\u05e8")
        buf.write("\u05e9\5\u0154\u00ab\2\u05e9\u05eb\5\u00aeX\2\u05ea\u05ec")
        buf.write("\7\u01b4\2\2\u05eb\u05ea\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec")
        buf.write("\u0603\3\2\2\2\u05ed\u05ee\7\u00a2\2\2\u05ee\u05ef\7\u0199")
        buf.write("\2\2\u05ef\u05f0\7\u01a0\2\2\u05f0\u05f1\7-\2\2\u05f1")
        buf.write("\u05fc\5\u00a6T\2\u05f2\u05fa\7I\2\2\u05f3\u05f4\7\u008b")
        buf.write("\2\2\u05f4\u05fb\7\u0146\2\2\u05f5\u05f8\7\u00b7\2\2\u05f6")
        buf.write("\u05f7\7r\2\2\u05f7\u05f9\5\u013a\u009e\2\u05f8\u05f6")
        buf.write("\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u05fb\3\2\2\2\u05fa")
        buf.write("\u05f3\3\2\2\2\u05fa\u05f5\3\2\2\2\u05fb\u05fd\3\2\2\2")
        buf.write("\u05fc\u05f2\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u05ff\3")
        buf.write("\2\2\2\u05fe\u0600\7\u01b4\2\2\u05ff\u05fe\3\2\2\2\u05ff")
        buf.write("\u0600\3\2\2\2\u0600\u0603\3\2\2\2\u0601\u0603\5\u00aa")
        buf.write("V\2\u0602\u05db\3\2\2\2\u0602\u05e6\3\2\2\2\u0602\u05ed")
        buf.write("\3\2\2\2\u0602\u0601\3\2\2\2\u0603\u0089\3\2\2\2\u0604")
        buf.write("\u0605\7\r\2\2\u0605\u0606\78\2\2\u0606\u0609\t\33\2\2")
        buf.write("\u0607\u060a\5\u014e\u00a8\2\u0608\u060a\7\u0199\2\2\u0609")
        buf.write("\u0607\3\2\2\2\u0609\u0608\3\2\2\2\u0609\u060a\3\2\2\2")
        buf.write("\u060a\u060c\3\2\2\2\u060b\u060d\7\u01b4\2\2\u060c\u060b")
        buf.write("\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u0652\3\2\2\2\u060e")
        buf.write("\u060f\7\r\2\2\u060f\u0619\t\33\2\2\u0610\u0613\5\u014e")
        buf.write("\u00a8\2\u0611\u0613\7\u0199\2\2\u0612\u0610\3\2\2\2\u0612")
        buf.write("\u0611\3\2\2\2\u0613\u0617\3\2\2\2\u0614\u0615\7\u00c3")
        buf.write("\2\2\u0615\u0616\7\u012b\2\2\u0616\u0618\7\u019c\2\2\u0617")
        buf.write("\u0614\3\2\2\2\u0617\u0618\3\2\2\2\u0618\u061a\3\2\2\2")
        buf.write("\u0619\u0612\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u061c\3")
        buf.write("\2\2\2\u061b\u061d\7\u01b4\2\2\u061c\u061b\3\2\2\2\u061c")
        buf.write("\u061d\3\2\2\2\u061d\u0652\3\2\2\2\u061e\u061f\7\36\2")
        buf.write("\2\u061f\u062c\t\33\2\2\u0620\u0623\5\u014e\u00a8\2\u0621")
        buf.write("\u0623\7\u0199\2\2\u0622\u0620\3\2\2\2\u0622\u0621\3\2")
        buf.write("\2\2\u0623\u062a\3\2\2\2\u0624\u0625\7\u00c3\2\2\u0625")
        buf.write("\u0626\7\u01b1\2\2\u0626\u0627\7\u00f6\2\2\u0627\u0628")
        buf.write("\7\u01a0\2\2\u0628\u0629\t\r\2\2\u0629\u062b\7\u01b2\2")
        buf.write("\2\u062a\u0624\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062d")
        buf.write("\3\2\2\2\u062c\u0622\3\2\2\2\u062c\u062d\3\2\2\2\u062d")
        buf.write("\u062f\3\2\2\2\u062e\u0630\7\u01b4\2\2\u062f\u062e\3\2")
        buf.write("\2\2\u062f\u0630\3\2\2\2\u0630\u0652\3\2\2\2\u0631\u0633")
        buf.write("\7\36\2\2\u0632\u0634\7\u0190\2\2\u0633\u0632\3\2\2\2")
        buf.write("\u0633\u0634\3\2\2\2\u0634\u0636\3\2\2\2\u0635\u0637\7")
        buf.write("\u01b4\2\2\u0636\u0635\3\2\2\2\u0636\u0637\3\2\2\2\u0637")
        buf.write("\u0652\3\2\2\2\u0638\u0639\7\u0096\2\2\u0639\u063c\t\33")
        buf.write("\2\2\u063a\u063d\5\u014e\u00a8\2\u063b\u063d\7\u0199\2")
        buf.write("\2\u063c\u063a\3\2\2\2\u063c\u063b\3\2\2\2\u063c\u063d")
        buf.write("\3\2\2\2\u063d\u063f\3\2\2\2\u063e\u0640\7\u01b4\2\2\u063f")
        buf.write("\u063e\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0652\3\2\2\2")
        buf.write("\u0641\u0643\7\u0096\2\2\u0642\u0644\7\u0190\2\2\u0643")
        buf.write("\u0642\3\2\2\2\u0643\u0644\3\2\2\2\u0644\u0646\3\2\2\2")
        buf.write("\u0645\u0647\7\u01b4\2\2\u0646\u0645\3\2\2\2\u0646\u0647")
        buf.write("\3\2\2\2\u0647\u0652\3\2\2\2\u0648\u0649\7\u009a\2\2\u0649")
        buf.write("\u064c\t\33\2\2\u064a\u064d\5\u014e\u00a8\2\u064b\u064d")
        buf.write("\7\u0199\2\2\u064c\u064a\3\2\2\2\u064c\u064b\3\2\2\2\u064c")
        buf.write("\u064d\3\2\2\2\u064d\u064f\3\2\2\2\u064e\u0650\7\u01b4")
        buf.write("\2\2\u064f\u064e\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u0652")
        buf.write("\3\2\2\2\u0651\u0604\3\2\2\2\u0651\u060e\3\2\2\2\u0651")
        buf.write("\u061e\3\2\2\2\u0651\u0631\3\2\2\2\u0651\u0638\3\2\2\2")
        buf.write("\u0651\u0641\3\2\2\2\u0651\u0648\3\2\2\2\u0652\u008b\3")
        buf.write("\2\2\2\u0653\u0655\7\u0111\2\2\u0654\u0656\7\u019a\2\2")
        buf.write("\u0655\u0654\3\2\2\2\u0655\u0656\3\2\2\2\u0656\u008d\3")
        buf.write("\2\2\2\u0657\u0658\7\u00b9\2\2\u0658\u065a\5\u014e\u00a8")
        buf.write("\2\u0659\u065b\7\u01b4\2\2\u065a\u0659\3\2\2\2\u065a\u065b")
        buf.write("\3\2\2\2\u065b\u008f\3\2\2\2\u065c\u065d\7A\2\2\u065d")
        buf.write("\u065e\7\t\2\2\u065e\u065f\t\34\2\2\u065f\u0091\3\2\2")
        buf.write("\2\u0660\u0662\7\u0199\2\2\u0661\u0663\7\t\2\2\u0662\u0661")
        buf.write("\3\2\2\2\u0662\u0663\3\2\2\2\u0663\u0664\3\2\2\2\u0664")
        buf.write("\u0667\5\u0146\u00a4\2\u0665\u0666\7\u01a0\2\2\u0666\u0668")
        buf.write("\5\u00aeX\2\u0667\u0665\3\2\2\2\u0667\u0668\3\2\2\2\u0668")
        buf.write("\u0093\3\2\2\2\u0669\u066a\7\u00a8\2\2\u066a\u066b\7\u01b1")
        buf.write("\2\2\u066b\u066c\5\u0096L\2\u066c\u066d\7\u01b2\2\2\u066d")
        buf.write("\u0095\3\2\2\2\u066e\u0675\5\u0098M\2\u066f\u0671\7\u01b3")
        buf.write("\2\2\u0670\u066f\3\2\2\2\u0670\u0671\3\2\2\2\u0671\u0672")
        buf.write("\3\2\2\2\u0672\u0674\5\u0098M\2\u0673\u0670\3\2\2\2\u0674")
        buf.write("\u0677\3\2\2\2\u0675\u0673\3\2\2\2\u0675\u0676\3\2\2\2")
        buf.write("\u0676\u0097\3\2\2\2\u0677\u0675\3\2\2\2\u0678\u067b\5")
        buf.write("\u009aN\2\u0679\u067b\5\u009eP\2\u067a\u0678\3\2\2\2\u067a")
        buf.write("\u0679\3\2\2\2\u067b\u0099\3\2\2\2\u067c\u0680\5\u014e")
        buf.write("\u00a8\2\u067d\u0681\5\u0146\u00a4\2\u067e\u067f\7\t\2")
        buf.write("\2\u067f\u0681\5\u00aeX\2\u0680\u067d\3\2\2\2\u0680\u067e")
        buf.write("\3\2\2\2\u0681\u0684\3\2\2\2\u0682\u0683\7\34\2\2\u0683")
        buf.write("\u0685\5\u014e\u00a8\2\u0684\u0682\3\2\2\2\u0684\u0685")
        buf.write("\3\2\2\2\u0685\u0687\3\2\2\2\u0686\u0688\5\u0142\u00a2")
        buf.write("\2\u0687\u0686\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u06a0")
        buf.write("\3\2\2\2\u0689\u068a\7 \2\2\u068a\u068c\5\u014e\u00a8")
        buf.write("\2\u068b\u0689\3\2\2\2\u068b\u068c\3\2\2\2\u068c\u068d")
        buf.write("\3\2\2\2\u068d\u068e\7\62\2\2\u068e\u0691\5\u00b0Y\2\u068f")
        buf.write("\u0690\7\u00c3\2\2\u0690\u0692\7\u00bb\2\2\u0691\u068f")
        buf.write("\3\2\2\2\u0691\u0692\3\2\2\2\u0692\u06a1\3\2\2\2\u0693")
        buf.write("\u0699\7U\2\2\u0694\u0695\7\u01b1\2\2\u0695\u0696\7\u019a")
        buf.write("\2\2\u0696\u0697\7\u01b3\2\2\u0697\u0698\7\u019a\2\2\u0698")
        buf.write("\u069a\7\u01b2\2\2\u0699\u0694\3\2\2\2\u0699\u069a\3\2")
        buf.write("\2\2\u069a\u069e\3\2\2\2\u069b\u069c\7o\2\2\u069c\u069d")
        buf.write("\7I\2\2\u069d\u069f\7\u008f\2\2\u069e\u069b\3\2\2\2\u069e")
        buf.write("\u069f\3\2\2\2\u069f\u06a1\3\2\2\2\u06a0\u068b\3\2\2\2")
        buf.write("\u06a0\u0693\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1\u06a3\3")
        buf.write("\2\2\2\u06a2\u06a4\7\u0098\2\2\u06a3\u06a2\3\2\2\2\u06a3")
        buf.write("\u06a4\3\2\2\2\u06a4\u06a8\3\2\2\2\u06a5\u06a7\5\u009c")
        buf.write("O\2\u06a6\u06a5\3\2\2\2\u06a7\u06aa\3\2\2\2\u06a8\u06a6")
        buf.write("\3\2\2\2\u06a8\u06a9\3\2\2\2\u06a9\u009b\3\2\2\2\u06aa")
        buf.write("\u06a8\3\2\2\2\u06ab\u06ac\7 \2\2\u06ac\u06ae\5\u014e")
        buf.write("\u00a8\2\u06ad\u06ab\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae")
        buf.write("\u06b0\3\2\2\2\u06af\u06b1\5\u0142\u00a2\2\u06b0\u06af")
        buf.write("\3\2\2\2\u06b0\u06b1\3\2\2\2\u06b1\u06c7\3\2\2\2\u06b2")
        buf.write("\u06b3\7\u0085\2\2\u06b3\u06b6\7b\2\2\u06b4\u06b6\7\u00b5")
        buf.write("\2\2\u06b5\u06b2\3\2\2\2\u06b5\u06b4\3\2\2\2\u06b6\u06b8")
        buf.write("\3\2\2\2\u06b7\u06b9\5\u0140\u00a1\2\u06b8\u06b7\3\2\2")
        buf.write("\2\u06b8\u06b9\3\2\2\2\u06b9\u06bb\3\2\2\2\u06ba\u06bc")
        buf.write("\5\u00a0Q\2\u06bb\u06ba\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc")
        buf.write("\u06c8\3\2\2\2\u06bd\u06c1\7\27\2\2\u06be\u06bf\7o\2\2")
        buf.write("\u06bf\u06c0\7I\2\2\u06c0\u06c2\7\u008f\2\2\u06c1\u06be")
        buf.write("\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3")
        buf.write("\u06c4\7\u01b1\2\2\u06c4\u06c5\5\u00bc_\2\u06c5\u06c6")
        buf.write("\7\u01b2\2\2\u06c6\u06c8\3\2\2\2\u06c7\u06b5\3\2\2\2\u06c7")
        buf.write("\u06bd\3\2\2\2\u06c8\u009d\3\2\2\2\u06c9\u06ca\7 \2\2")
        buf.write("\u06ca\u06cc\5\u014e\u00a8\2\u06cb\u06c9\3\2\2\2\u06cb")
        buf.write("\u06cc\3\2\2\2\u06cc\u06ec\3\2\2\2\u06cd\u06ce\7\u0085")
        buf.write("\2\2\u06ce\u06d1\7b\2\2\u06cf\u06d1\7\u00b5\2\2\u06d0")
        buf.write("\u06cd\3\2\2\2\u06d0\u06cf\3\2\2\2\u06d1\u06d3\3\2\2\2")
        buf.write("\u06d2\u06d4\5\u0140\u00a1\2\u06d3\u06d2\3\2\2\2\u06d3")
        buf.write("\u06d4\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u06d6\7\u01b1")
        buf.write("\2\2\u06d6\u06d8\5\u013a\u009e\2\u06d7\u06d9\t\7\2\2\u06d8")
        buf.write("\u06d7\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06da\3\2\2\2")
        buf.write("\u06da\u06dc\7\u01b2\2\2\u06db\u06dd\5\u00a0Q\2\u06dc")
        buf.write("\u06db\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06e0\3\2\2\2")
        buf.write("\u06de\u06df\7u\2\2\u06df\u06e1\5\u014e\u00a8\2\u06e0")
        buf.write("\u06de\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1\u06ed\3\2\2\2")
        buf.write("\u06e2\u06e6\7\27\2\2\u06e3\u06e4\7o\2\2\u06e4\u06e5\7")
        buf.write("I\2\2\u06e5\u06e7\7\u008f\2\2\u06e6\u06e3\3\2\2\2\u06e6")
        buf.write("\u06e7\3\2\2\2\u06e7\u06e8\3\2\2\2\u06e8\u06e9\7\u01b1")
        buf.write("\2\2\u06e9\u06ea\5\u00bc_\2\u06ea\u06eb\7\u01b2\2\2\u06eb")
        buf.write("\u06ed\3\2\2\2\u06ec\u06d0\3\2\2\2\u06ec\u06e2\3\2\2\2")
        buf.write("\u06ed\u009f\3\2\2\2\u06ee\u06ef\7\u00c3\2\2\u06ef\u06f0")
        buf.write("\7\u01b1\2\2\u06f0\u06f5\5\u00a2R\2\u06f1\u06f2\7\u01b3")
        buf.write("\2\2\u06f2\u06f4\5\u00a2R\2\u06f3\u06f1\3\2\2\2\u06f4")
        buf.write("\u06f7\3\2\2\2\u06f5\u06f3\3\2\2\2\u06f5\u06f6\3\2\2\2")
        buf.write("\u06f6\u06f8\3\2\2\2\u06f7\u06f5\3\2\2\2\u06f8\u06f9\7")
        buf.write("\u01b2\2\2\u06f9\u00a1\3\2\2\2\u06fa\u06fb\5\u0150\u00a9")
        buf.write("\2\u06fb\u06ff\7\u01a0\2\2\u06fc\u0700\5\u0150\u00a9\2")
        buf.write("\u06fd\u0700\5\u013e\u00a0\2\u06fe\u0700\7\u019a\2\2\u06ff")
        buf.write("\u06fc\3\2\2\2\u06ff\u06fd\3\2\2\2\u06ff\u06fe\3\2\2\2")
        buf.write("\u0700\u00a3\3\2\2\2\u0701\u0702\7\61\2\2\u0702\u0722")
        buf.write("\5\u013c\u009f\2\u0703\u070d\7-\2\2\u0704\u070b\5\u00a6")
        buf.write("T\2\u0705\u0706\7I\2\2\u0706\u0709\7\u00b7\2\2\u0707\u0708")
        buf.write("\7r\2\2\u0708\u070a\5\u013a\u009e\2\u0709\u0707\3\2\2")
        buf.write("\2\u0709\u070a\3\2\2\2\u070a\u070c\3\2\2\2\u070b\u0705")
        buf.write("\3\2\2\2\u070b\u070c\3\2\2\2\u070c\u070e\3\2\2\2\u070d")
        buf.write("\u0704\3\2\2\2\u070d\u070e\3\2\2\2\u070e\u0723\3\2\2\2")
        buf.write("\u070f\u0711\7\u011c\2\2\u0710\u070f\3\2\2\2\u0710\u0711")
        buf.write("\3\2\2\2\u0711\u0713\3\2\2\2\u0712\u0714\7\u0169\2\2\u0713")
        buf.write("\u0712\3\2\2\2\u0713\u0714\3\2\2\2\u0714\u0715\3\2\2\2")
        buf.write("\u0715\u0716\7-\2\2\u0716\u0717\7I\2\2\u0717\u0720\5\32")
        buf.write("\16\2\u0718\u071e\7I\2\2\u0719\u071a\7\u008b\2\2\u071a")
        buf.write("\u071f\7\u0146\2\2\u071b\u071f\7\u00b7\2\2\u071c\u071d")
        buf.write("\7r\2\2\u071d\u071f\5\u013a\u009e\2\u071e\u0719\3\2\2")
        buf.write("\2\u071e\u071b\3\2\2\2\u071e\u071c\3\2\2\2\u071f\u0721")
        buf.write("\3\2\2\2\u0720\u0718\3\2\2\2\u0720\u0721\3\2\2\2\u0721")
        buf.write("\u0723\3\2\2\2\u0722\u0703\3\2\2\2\u0722\u0710\3\2\2\2")
        buf.write("\u0723\u0725\3\2\2\2\u0724\u0726\7\u01b4\2\2\u0725\u0724")
        buf.write("\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u00a5\3\2\2\2\u0727")
        buf.write("\u0729\t\17\2\2\u0728\u0727\3\2\2\2\u0728\u0729\3\2\2")
        buf.write("\2\u0729\u072b\3\2\2\2\u072a\u072c\t\35\2\2\u072b\u072a")
        buf.write("\3\2\2\2\u072b\u072c\3\2\2\2\u072c\u072e\3\2\2\2\u072d")
        buf.write("\u072f\t\36\2\2\u072e\u072d\3\2\2\2\u072e\u072f\3\2\2")
        buf.write("\2\u072f\u0731\3\2\2\2\u0730\u0732\t\37\2\2\u0731\u0730")
        buf.write("\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u0734\3\2\2\2\u0733")
        buf.write("\u0735\7\u0186\2\2\u0734\u0733\3\2\2\2\u0734\u0735\3\2")
        buf.write("\2\2\u0735\u0736\3\2\2\2\u0736\u0737\7I\2\2\u0737\u0738")
        buf.write("\5\32\16\2\u0738\u00a7\3\2\2\2\u0739\u0743\7E\2\2\u073a")
        buf.write("\u0741\7k\2\2\u073b\u0741\7\u0151\2\2\u073c\u0741\7\u0108")
        buf.write("\2\2\u073d\u0741\7\u0124\2\2\u073e\u073f\t \2\2\u073f")
        buf.write("\u0741\5\u00aeX\2\u0740\u073a\3\2\2\2\u0740\u073b\3\2")
        buf.write("\2\2\u0740\u073c\3\2\2\2\u0740\u073d\3\2\2\2\u0740\u073e")
        buf.write("\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u0742\3\2\2\2\u0742")
        buf.write("\u0744\7N\2\2\u0743\u0740\3\2\2\2\u0743\u0744\3\2\2\2")
        buf.write("\u0744\u0746\3\2\2\2\u0745\u0747\7\u0110\2\2\u0746\u0745")
        buf.write("\3\2\2\2\u0746\u0747\3\2\2\2\u0747\u0748\3\2\2\2\u0748")
        buf.write("\u0752\5\u013c\u009f\2\u0749\u074a\7_\2\2\u074a\u074f")
        buf.write("\7\u0199\2\2\u074b\u074c\7\u01b3\2\2\u074c\u074e\7\u0199")
        buf.write("\2\2\u074d\u074b\3\2\2\2\u074e\u0751\3\2\2\2\u074f\u074d")
        buf.write("\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0753\3\2\2\2\u0751")
        buf.write("\u074f\3\2\2\2\u0752\u0749\3\2\2\2\u0752\u0753\3\2\2\2")
        buf.write("\u0753\u0755\3\2\2\2\u0754\u0756\7\u01b4\2\2\u0755\u0754")
        buf.write("\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u00a9\3\2\2\2\u0757")
        buf.write("\u0758\7\u00a2\2\2\u0758\u075c\5\u014e\u00a8\2\u0759\u075d")
        buf.write("\5\u014e\u00a8\2\u075a\u075d\5\u00acW\2\u075b\u075d\5")
        buf.write("\u013e\u00a0\2\u075c\u0759\3\2\2\2\u075c\u075a\3\2\2\2")
        buf.write("\u075c\u075b\3\2\2\2\u075d\u075f\3\2\2\2\u075e\u0760\7")
        buf.write("\u01b4\2\2\u075f\u075e\3\2\2\2\u075f\u0760\3\2\2\2\u0760")
        buf.write("\u0783\3\2\2\2\u0761\u0762\7\u00a2\2\2\u0762\u0763\7\u00af")
        buf.write("\2\2\u0763\u0764\7\u011e\2\2\u0764\u076d\7\u0126\2\2\u0765")
        buf.write("\u0766\7\u008b\2\2\u0766\u076e\7\u0188\2\2\u0767\u0768")
        buf.write("\7\u008b\2\2\u0768\u076e\7\u00e2\2\2\u0769\u076a\7\u015f")
        buf.write("\2\2\u076a\u076e\7\u008b\2\2\u076b\u076e\7\u0172\2\2\u076c")
        buf.write("\u076e\7\u016d\2\2\u076d\u0765\3\2\2\2\u076d\u0767\3\2")
        buf.write("\2\2\u076d\u0769\3\2\2\2\u076d\u076b\3\2\2\2\u076d\u076c")
        buf.write("\3\2\2\2\u076e\u0770\3\2\2\2\u076f\u0771\7\u01b4\2\2\u0770")
        buf.write("\u076f\3\2\2\2\u0770\u0771\3\2\2\2\u0771\u0783\3\2\2\2")
        buf.write("\u0772\u0773\7\u00a2\2\2\u0773\u0774\7W\2\2\u0774\u0775")
        buf.write("\5\u0130\u0099\2\u0775\u0777\5\u013e\u00a0\2\u0776\u0778")
        buf.write("\7\u01b4\2\2\u0777\u0776\3\2\2\2\u0777\u0778\3\2\2\2\u0778")
        buf.write("\u0783\3\2\2\2\u0779\u077a\7\u00a2\2\2\u077a\u077b\7\u00ca")
        buf.write("\2\2\u077b\u0783\5\u013e\u00a0\2\u077c\u077d\7\u00a2\2")
        buf.write("\2\u077d\u077e\7\u0153\2\2\u077e\u0783\5\u013e\u00a0\2")
        buf.write("\u077f\u0780\7\u00a2\2\2\u0780\u0781\7\u00cc\2\2\u0781")
        buf.write("\u0783\5\u013e\u00a0\2\u0782\u0757\3\2\2\2\u0782\u0761")
        buf.write("\3\2\2\2\u0782\u0772\3\2\2\2\u0782\u0779\3\2\2\2\u0782")
        buf.write("\u077c\3\2\2\2\u0782\u077f\3\2\2\2\u0783\u00ab\3\2\2\2")
        buf.write("\u0784\u0787\5\u014a\u00a6\2\u0785\u0787\7\u0199\2\2\u0786")
        buf.write("\u0784\3\2\2\2\u0786\u0785\3\2\2\2\u0787\u00ad\3\2\2\2")
        buf.write("\u0788\u0789\bX\1\2\u0789\u07b6\7\62\2\2\u078a\u07b6\7")
        buf.write("p\2\2\u078b\u07b6\7\u0199\2\2\u078c\u07b6\5\u014a\u00a6")
        buf.write("\2\u078d\u07b6\5\u00f4{\2\u078e\u078f\7\24\2\2\u078f\u0791")
        buf.write("\5\u00aeX\2\u0790\u0792\5\u00f6|\2\u0791\u0790\3\2\2\2")
        buf.write("\u0792\u0793\3\2\2\2\u0793\u0791\3\2\2\2\u0793\u0794\3")
        buf.write("\2\2\2\u0794\u0797\3\2\2\2\u0795\u0796\7<\2\2\u0796\u0798")
        buf.write("\5\u00aeX\2\u0797\u0795\3\2\2\2\u0797\u0798\3\2\2\2\u0798")
        buf.write("\u0799\3\2\2\2\u0799\u079a\7=\2\2\u079a\u07b6\3\2\2\2")
        buf.write("\u079b\u079d\7\24\2\2\u079c\u079e\5\u00f8}\2\u079d\u079c")
        buf.write("\3\2\2\2\u079e\u079f\3\2\2\2\u079f\u079d\3\2\2\2\u079f")
        buf.write("\u07a0\3\2\2\2\u07a0\u07a3\3\2\2\2\u07a1\u07a2\7<\2\2")
        buf.write("\u07a2\u07a4\5\u00aeX\2\u07a3\u07a1\3\2\2\2\u07a3\u07a4")
        buf.write("\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a6\7=\2\2\u07a6")
        buf.write("\u07b6\3\2\2\2\u07a7\u07b6\5\u0138\u009d\2\u07a8\u07a9")
        buf.write("\7\u01b1\2\2\u07a9\u07aa\5\u00aeX\2\u07aa\u07ab\7\u01b2")
        buf.write("\2\2\u07ab\u07b6\3\2\2\2\u07ac\u07ad\7\u01b1\2\2\u07ad")
        buf.write("\u07ae\5\u00b2Z\2\u07ae\u07af\7\u01b2\2\2\u07af\u07b6")
        buf.write("\3\2\2\2\u07b0\u07b1\7\u01bb\2\2\u07b1\u07b6\5\u00aeX")
        buf.write("\b\u07b2\u07b3\t!\2\2\u07b3\u07b6\5\u00aeX\6\u07b4\u07b6")
        buf.write("\5\u0118\u008d\2\u07b5\u0788\3\2\2\2\u07b5\u078a\3\2\2")
        buf.write("\2\u07b5\u078b\3\2\2\2\u07b5\u078c\3\2\2\2\u07b5\u078d")
        buf.write("\3\2\2\2\u07b5\u078e\3\2\2\2\u07b5\u079b\3\2\2\2\u07b5")
        buf.write("\u07a7\3\2\2\2\u07b5\u07a8\3\2\2\2\u07b5\u07ac\3\2\2\2")
        buf.write("\u07b5\u07b0\3\2\2\2\u07b5\u07b2\3\2\2\2\u07b5\u07b4\3")
        buf.write("\2\2\2\u07b6\u07c6\3\2\2\2\u07b7\u07b8\f\7\2\2\u07b8\u07b9")
        buf.write("\t\"\2\2\u07b9\u07c5\5\u00aeX\b\u07ba\u07bb\f\5\2\2\u07bb")
        buf.write("\u07bc\t#\2\2\u07bc\u07c5\5\u00aeX\6\u07bd\u07be\f\4\2")
        buf.write("\2\u07be\u07bf\5\u0152\u00aa\2\u07bf\u07c0\5\u00aeX\5")
        buf.write("\u07c0\u07c5\3\2\2\2\u07c1\u07c2\f\16\2\2\u07c2\u07c3")
        buf.write("\7\34\2\2\u07c3\u07c5\5\u014e\u00a8\2\u07c4\u07b7\3\2")
        buf.write("\2\2\u07c4\u07ba\3\2\2\2\u07c4\u07bd\3\2\2\2\u07c4\u07c1")
        buf.write("\3\2\2\2\u07c5\u07c8\3\2\2\2\u07c6\u07c4\3\2\2\2\u07c6")
        buf.write("\u07c7\3\2\2\2\u07c7\u00af\3\2\2\2\u07c8\u07c6\3\2\2\2")
        buf.write("\u07c9\u07d2\7p\2\2\u07ca\u07d2\5\u014a\u00a6\2\u07cb")
        buf.write("\u07d2\5\u00f4{\2\u07cc\u07d2\7\u0199\2\2\u07cd\u07ce")
        buf.write("\7\u01b1\2\2\u07ce\u07cf\5\u00b0Y\2\u07cf\u07d0\7\u01b2")
        buf.write("\2\2\u07d0\u07d2\3\2\2\2\u07d1\u07c9\3\2\2\2\u07d1\u07ca")
        buf.write("\3\2\2\2\u07d1\u07cb\3\2\2\2\u07d1\u07cc\3\2\2\2\u07d1")
        buf.write("\u07cd\3\2\2\2\u07d2\u00b1\3\2\2\2\u07d3\u07d4\5\32\16")
        buf.write("\2\u07d4\u00b3\3\2\2\2\u07d5\u07d8\7\u00c3\2\2\u07d6\u07d7")
        buf.write("\7\u0192\2\2\u07d7\u07d9\7\u01b3\2\2\u07d8\u07d6\3\2\2")
        buf.write("\2\u07d8\u07d9\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07df")
        buf.write("\5\u00b6\\\2\u07db\u07dc\7\u01b3\2\2\u07dc\u07de\5\u00b6")
        buf.write("\\\2\u07dd\u07db\3\2\2\2\u07de\u07e1\3\2\2\2\u07df\u07dd")
        buf.write("\3\2\2\2\u07df\u07e0\3\2\2\2\u07e0\u00b5\3\2\2\2\u07e1")
        buf.write("\u07df\3\2\2\2\u07e2\u07e7\5\u014e\u00a8\2\u07e3\u07e4")
        buf.write("\7\u01b1\2\2\u07e4\u07e5\5\u013a\u009e\2\u07e5\u07e6\7")
        buf.write("\u01b2\2\2\u07e6\u07e8\3\2\2\2\u07e7\u07e3\3\2\2\2\u07e7")
        buf.write("\u07e8\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9\u07ea\7\t\2\2")
        buf.write("\u07ea\u07eb\7\u01b1\2\2\u07eb\u07ec\5\32\16\2\u07ec\u07ed")
        buf.write("\7\u01b2\2\2\u07ed\u00b7\3\2\2\2\u07ee\u07f1\5\u0138\u009d")
        buf.write("\2\u07ef\u07f1\7\u0199\2\2\u07f0\u07ee\3\2\2\2\u07f0\u07ef")
        buf.write("\3\2\2\2\u07f1\u07f4\3\2\2\2\u07f2\u07f5\7\u01a0\2\2\u07f3")
        buf.write("\u07f5\5\u0154\u00ab\2\u07f4\u07f2\3\2\2\2\u07f4\u07f3")
        buf.write("\3\2\2\2\u07f5\u07f6\3\2\2\2\u07f6\u07ff\5\u00aeX\2\u07f7")
        buf.write("\u07f8\5\u014e\u00a8\2\u07f8\u07f9\7\u01ac\2\2\u07f9\u07fa")
        buf.write("\5\u014e\u00a8\2\u07fa\u07fb\7\u01b1\2\2\u07fb\u07fc\5")
        buf.write("\u010a\u0086\2\u07fc\u07fd\7\u01b2\2\2\u07fd\u07ff\3\2")
        buf.write("\2\2\u07fe\u07f0\3\2\2\2\u07fe\u07f7\3\2\2\2\u07ff\u00b9")
        buf.write("\3\2\2\2\u0800\u0805\5\u00bc_\2\u0801\u0802\7\u01b3\2")
        buf.write("\2\u0802\u0804\5\u00bc_\2\u0803\u0801\3\2\2\2\u0804\u0807")
        buf.write("\3\2\2\2\u0805\u0803\3\2\2\2\u0805\u0806\3\2\2\2\u0806")
        buf.write("\u00bb\3\2\2\2\u0807\u0805\3\2\2\2\u0808\u0809\b_\1\2")
        buf.write("\u0809\u080a\5\u00be`\2\u080a\u0813\3\2\2\2\u080b\u080c")
        buf.write("\f\5\2\2\u080c\u080d\7\7\2\2\u080d\u0812\5\u00bc_\6\u080e")
        buf.write("\u080f\f\4\2\2\u080f\u0810\7|\2\2\u0810\u0812\5\u00bc")
        buf.write("_\5\u0811\u080b\3\2\2\2\u0811\u080e\3\2\2\2\u0812\u0815")
        buf.write("\3\2\2\2\u0813\u0811\3\2\2\2\u0813\u0814\3\2\2\2\u0814")
        buf.write("\u00bd\3\2\2\2\u0815\u0813\3\2\2\2\u0816\u0817\7o\2\2")
        buf.write("\u0817\u0851\5\u00be`\2\u0818\u0819\7B\2\2\u0819\u081a")
        buf.write("\7\u01b1\2\2\u081a\u081b\5\u00b2Z\2\u081b\u081c\7\u01b2")
        buf.write("\2\2\u081c\u0851\3\2\2\2\u081d\u081e\5\u00aeX\2\u081e")
        buf.write("\u081f\5\u0152\u00aa\2\u081f\u0820\5\u00aeX\2\u0820\u0851")
        buf.write("\3\2\2\2\u0821\u0822\5\u00aeX\2\u0822\u0823\5\u0152\u00aa")
        buf.write("\2\u0823\u0824\t$\2\2\u0824\u0825\7\u01b1\2\2\u0825\u0826")
        buf.write("\5\u00b2Z\2\u0826\u0827\7\u01b2\2\2\u0827\u0851\3\2\2")
        buf.write("\2\u0828\u082a\5\u00aeX\2\u0829\u082b\7o\2\2\u082a\u0829")
        buf.write("\3\2\2\2\u082a\u082b\3\2\2\2\u082b\u082c\3\2\2\2\u082c")
        buf.write("\u082d\7\16\2\2\u082d\u082e\5\u00aeX\2\u082e\u082f\7\7")
        buf.write("\2\2\u082f\u0830\5\u00aeX\2\u0830\u0851\3\2\2\2\u0831")
        buf.write("\u0833\5\u00aeX\2\u0832\u0834\7o\2\2\u0833\u0832\3\2\2")
        buf.write("\2\u0833\u0834\3\2\2\2\u0834\u0835\3\2\2\2\u0835\u0836")
        buf.write("\7Z\2\2\u0836\u0839\7\u01b1\2\2\u0837\u083a\5\u00b2Z\2")
        buf.write("\u0838\u083a\5\u010a\u0086\2\u0839\u0837\3\2\2\2\u0839")
        buf.write("\u0838\3\2\2\2\u083a\u083b\3\2\2\2\u083b\u083c\7\u01b2")
        buf.write("\2\2\u083c\u0851\3\2\2\2\u083d\u083f\5\u00aeX\2\u083e")
        buf.write("\u0840\7o\2\2\u083f\u083e\3\2\2\2\u083f\u0840\3\2\2\2")
        buf.write("\u0840\u0841\3\2\2\2\u0841\u0842\7e\2\2\u0842\u0845\5")
        buf.write("\u00aeX\2\u0843\u0844\7?\2\2\u0844\u0846\5\u00aeX\2\u0845")
        buf.write("\u0843\3\2\2\2\u0845\u0846\3\2\2\2\u0846\u0851\3\2\2\2")
        buf.write("\u0847\u0848\5\u00aeX\2\u0848\u0849\7`\2\2\u0849\u084a")
        buf.write("\5\u0142\u00a2\2\u084a\u0851\3\2\2\2\u084b\u084c\7\u01b1")
        buf.write("\2\2\u084c\u084d\5\u00bc_\2\u084d\u084e\7\u01b2\2\2\u084e")
        buf.write("\u0851\3\2\2\2\u084f\u0851\7\u019a\2\2\u0850\u0816\3\2")
        buf.write("\2\2\u0850\u0818\3\2\2\2\u0850\u081d\3\2\2\2\u0850\u0821")
        buf.write("\3\2\2\2\u0850\u0828\3\2\2\2\u0850\u0831\3\2\2\2\u0850")
        buf.write("\u083d\3\2\2\2\u0850\u0847\3\2\2\2\u0850\u084b\3\2\2\2")
        buf.write("\u0850\u084f\3\2\2\2\u0851\u00bf\3\2\2\2\u0852\u0853\b")
        buf.write("a\1\2\u0853\u0854\7\u01b1\2\2\u0854\u0855\5\u00c0a\2\u0855")
        buf.write("\u0856\7\u01b2\2\2\u0856\u0859\3\2\2\2\u0857\u0859\5\u00c4")
        buf.write("c\2\u0858\u0852\3\2\2\2\u0858\u0857\3\2\2\2\u0859\u0860")
        buf.write("\3\2\2\2\u085a\u085b\f\4\2\2\u085b\u085c\5\u00c2b\2\u085c")
        buf.write("\u085d\5\u00c0a\5\u085d\u085f\3\2\2\2\u085e\u085a\3\2")
        buf.write("\2\2\u085f\u0862\3\2\2\2\u0860\u085e\3\2\2\2\u0860\u0861")
        buf.write("\3\2\2\2\u0861\u00c1\3\2\2\2\u0862\u0860\3\2\2\2\u0863")
        buf.write("\u0865\7\u00b4\2\2\u0864\u0866\7\5\2\2\u0865\u0864\3\2")
        buf.write("\2\2\u0865\u0866\3\2\2\2\u0866\u086a\3\2\2\2\u0867\u086a")
        buf.write("\7@\2\2\u0868\u086a\7^\2\2\u0869\u0863\3\2\2\2\u0869\u0867")
        buf.write("\3\2\2\2\u0869\u0868\3\2\2\2\u086a\u00c3\3\2\2\2\u086b")
        buf.write("\u086d\7\u009d\2\2\u086c\u086e\t%\2\2\u086d\u086c\3\2")
        buf.write("\2\2\u086d\u086e\3\2\2\2\u086e\u0870\3\2\2\2\u086f\u0871")
        buf.write("\5\u00c6d\2\u0870\u086f\3\2\2\2\u0870\u0871\3\2\2\2\u0871")
        buf.write("\u0872\3\2\2\2\u0872\u0875\5\u00dco\2\u0873\u0874\7_\2")
        buf.write("\2\u0874\u0876\5\u0130\u0099\2\u0875\u0873\3\2\2\2\u0875")
        buf.write("\u0876\3\2\2\2\u0876\u0879\3\2\2\2\u0877\u0878\7N\2\2")
        buf.write("\u0878\u087a\5\u00e0q\2\u0879\u0877\3\2\2\2\u0879\u087a")
        buf.write("\3\2\2\2\u087a\u087d\3\2\2\2\u087b\u087c\7\u00c1\2\2\u087c")
        buf.write("\u087e\5\u00bc_\2\u087d\u087b\3\2\2\2\u087d\u087e\3\2")
        buf.write("\2\2\u087e\u0889\3\2\2\2\u087f\u0880\7S\2\2\u0880\u0881")
        buf.write("\7\22\2\2\u0881\u0886\5\u00d4k\2\u0882\u0883\7\u01b3\2")
        buf.write("\2\u0883\u0885\5\u00d4k\2\u0884\u0882\3\2\2\2\u0885\u0888")
        buf.write("\3\2\2\2\u0886\u0884\3\2\2\2\u0886\u0887\3\2\2\2\u0887")
        buf.write("\u088a\3\2\2\2\u0888\u0886\3\2\2\2\u0889\u087f\3\2\2\2")
        buf.write("\u0889\u088a\3\2\2\2\u088a\u088d\3\2\2\2\u088b\u088c\7")
        buf.write("T\2\2\u088c\u088e\5\u00bc_\2\u088d\u088b\3\2\2\2\u088d")
        buf.write("\u088e\3\2\2\2\u088e\u00c5\3\2\2\2\u088f\u0890\7\u00ad")
        buf.write("\2\2\u0890\u0892\5\u00aeX\2\u0891\u0893\7\u0081\2\2\u0892")
        buf.write("\u0891\3\2\2\2\u0892\u0893\3\2\2\2\u0893\u0896\3\2\2\2")
        buf.write("\u0894\u0895\7\u00c3\2\2\u0895\u0897\7\u017e\2\2\u0896")
        buf.write("\u0894\3\2\2\2\u0896\u0897\3\2\2\2\u0897\u00c7\3\2\2\2")
        buf.write("\u0898\u0899\7\u00ad\2\2\u0899\u089a\7\u01b1\2\2\u089a")
        buf.write("\u089b\5\u00aeX\2\u089b\u089d\7\u01b2\2\2\u089c\u089e")
        buf.write("\7\u0081\2\2\u089d\u089c\3\2\2\2\u089d\u089e\3\2\2\2\u089e")
        buf.write("\u00c9\3\2\2\2\u089f\u08a0\7}\2\2\u08a0\u08a1\7\22\2\2")
        buf.write("\u08a1\u08a6\5\u00d2j\2\u08a2\u08a3\7\u01b3\2\2\u08a3")
        buf.write("\u08a5\5\u00d2j\2\u08a4\u08a2\3\2\2\2\u08a5\u08a8\3\2")
        buf.write("\2\2\u08a6\u08a4\3\2\2\2\u08a6\u08a7\3\2\2\2\u08a7\u08af")
        buf.write("\3\2\2\2\u08a8\u08a6\3\2\2\2\u08a9\u08aa\7\u0144\2\2\u08aa")
        buf.write("\u08ab\5\u00aeX\2\u08ab\u08ad\t&\2\2\u08ac\u08ae\5\u00cc")
        buf.write("g\2\u08ad\u08ac\3\2\2\2\u08ad\u08ae\3\2\2\2\u08ae\u08b0")
        buf.write("\3\2\2\2\u08af\u08a9\3\2\2\2\u08af\u08b0\3\2\2\2\u08b0")
        buf.write("\u00cb\3\2\2\2\u08b1\u08b2\7E\2\2\u08b2\u08b3\t\'\2\2")
        buf.write("\u08b3\u08b4\5\u00aeX\2\u08b4\u08b5\t&\2\2\u08b5\u08b6")
        buf.write("\7\u0146\2\2\u08b6\u00cd\3\2\2\2\u08b7\u08b8\7I\2\2\u08b8")
        buf.write("\u08cb\7\20\2\2\u08b9\u08ba\7I\2\2\u08ba\u08bb\7\u0191")
        buf.write("\2\2\u08bb\u08bd\7\u00d0\2\2\u08bc\u08be\5\u00d0i\2\u08bd")
        buf.write("\u08bc\3\2\2\2\u08bd\u08be\3\2\2\2\u08be\u08cb\3\2\2\2")
        buf.write("\u08bf\u08c0\7I\2\2\u08c0\u08c1\7\u0191\2\2\u08c1\u08c5")
        buf.write("\7\u014f\2\2\u08c2\u08c3\7\u01b1\2\2\u08c3\u08c4\7\u019c")
        buf.write("\2\2\u08c4\u08c6\7\u01b2\2\2\u08c5\u08c2\3\2\2\2\u08c5")
        buf.write("\u08c6\3\2\2\2\u08c6\u08c8\3\2\2\2\u08c7\u08c9\5\u00d0")
        buf.write("i\2\u08c8\u08c7\3\2\2\2\u08c8\u08c9\3\2\2\2\u08c9\u08cb")
        buf.write("\3\2\2\2\u08ca\u08b7\3\2\2\2\u08ca\u08b9\3\2\2\2\u08ca")
        buf.write("\u08bf\3\2\2\2\u08cb\u00cf\3\2\2\2\u08cc\u08d1\7\u01b3")
        buf.write("\2\2\u08cd\u08ce\7\u019d\2\2\u08ce\u08d2\7\u00d8\2\2\u08cf")
        buf.write("\u08d2\7\u0185\2\2\u08d0\u08d2\7\u0162\2\2\u08d1\u08cd")
        buf.write("\3\2\2\2\u08d1\u08cf\3\2\2\2\u08d1\u08d0\3\2\2\2\u08d2")
        buf.write("\u00d1\3\2\2\2\u08d3\u08d5\5\u00aeX\2\u08d4\u08d6\t\7")
        buf.write("\2\2\u08d5\u08d4\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u00d3")
        buf.write("\3\2\2\2\u08d7\u08d8\5\u00aeX\2\u08d8\u00d5\3\2\2\2\u08d9")
        buf.write("\u08da\7{\2\2\u08da\u08db\7\u01b1\2\2\u08db\u08e0\5\u00d8")
        buf.write("m\2\u08dc\u08dd\7\u01b3\2\2\u08dd\u08df\5\u00d8m\2\u08de")
        buf.write("\u08dc\3\2\2\2\u08df\u08e2\3\2\2\2\u08e0\u08de\3\2\2\2")
        buf.write("\u08e0\u08e1\3\2\2\2\u08e1\u08e3\3\2\2\2\u08e2\u08e0\3")
        buf.write("\2\2\2\u08e3\u08e4\7\u01b2\2\2\u08e4\u00d7\3\2\2\2\u08e5")
        buf.write("\u08e6\7\u0103\2\2\u08e6\u0913\7\u019a\2\2\u08e7\u08e8")
        buf.write("\t(\2\2\u08e8\u0913\7S\2\2\u08e9\u08ea\t)\2\2\u08ea\u0913")
        buf.write("\7\u00b4\2\2\u08eb\u08ec\t*\2\2\u08ec\u0913\7a\2\2\u08ed")
        buf.write("\u08ee\7\u0102\2\2\u08ee\u0913\7\u018e\2\2\u08ef\u08f0")
        buf.write("\7\u010b\2\2\u08f0\u0913\7}\2\2\u08f1\u0913\7\u0118\2")
        buf.write("\2\u08f2\u08f3\7\u0120\2\2\u08f3\u0913\7\u0083\2\2\u08f4")
        buf.write("\u08f5\7\u0121\2\2\u08f5\u0913\7\u0083\2\2\u08f6\u08f7")
        buf.write("\7\u012d\2\2\u08f7\u0913\7\u019a\2\2\u08f8\u08f9\7\u012e")
        buf.write("\2\2\u08f9\u0913\7\u019a\2\2\u08fa\u08fb\7\u0148\2\2\u08fb")
        buf.write("\u08fc\7I\2\2\u08fc\u08fd\7\u01b1\2\2\u08fd\u0902\5\u00da")
        buf.write("n\2\u08fe\u08ff\7\u01b3\2\2\u08ff\u0901\5\u00dan\2\u0900")
        buf.write("\u08fe\3\2\2\2\u0901\u0904\3\2\2\2\u0902\u0900\3\2\2\2")
        buf.write("\u0902\u0903\3\2\2\2\u0903\u0905\3\2\2\2\u0904\u0902\3")
        buf.write("\2\2\2\u0905\u0906\7\u01b2\2\2\u0906\u0913\3\2\2\2\u0907")
        buf.write("\u0908\7\u0148\2\2\u0908\u0909\7I\2\2\u0909\u0913\7\u0189")
        buf.write("\2\2\u090a\u090b\7\u014d\2\2\u090b\u0913\t\24\2\2\u090c")
        buf.write("\u0913\7\u015a\2\2\u090d\u090e\7\u0161\2\2\u090e\u0913")
        buf.write("\7\u0083\2\2\u090f\u0910\7\u00b9\2\2\u0910\u0911\7\u0083")
        buf.write("\2\2\u0911\u0913\7\u019c\2\2\u0912\u08e5\3\2\2\2\u0912")
        buf.write("\u08e7\3\2\2\2\u0912\u08e9\3\2\2\2\u0912\u08eb\3\2\2\2")
        buf.write("\u0912\u08ed\3\2\2\2\u0912\u08ef\3\2\2\2\u0912\u08f1\3")
        buf.write("\2\2\2\u0912\u08f2\3\2\2\2\u0912\u08f4\3\2\2\2\u0912\u08f6")
        buf.write("\3\2\2\2\u0912\u08f8\3\2\2\2\u0912\u08fa\3\2\2\2\u0912")
        buf.write("\u0907\3\2\2\2\u0912\u090a\3\2\2\2\u0912\u090c\3\2\2\2")
        buf.write("\u0912\u090d\3\2\2\2\u0912\u090f\3\2\2\2\u0913\u00d9\3")
        buf.write("\2\2\2\u0914\u0918\7\u0199\2\2\u0915\u0919\7\u0189\2\2")
        buf.write("\u0916\u0917\7\u01a0\2\2\u0917\u0919\5\u014a\u00a6\2\u0918")
        buf.write("\u0915\3\2\2\2\u0918\u0916\3\2\2\2\u0919\u00db\3\2\2\2")
        buf.write("\u091a\u091f\5\u00dep\2\u091b\u091c\7\u01b3\2\2\u091c")
        buf.write("\u091e\5\u00dep\2\u091d\u091b\3\2\2\2\u091e\u0921\3\2")
        buf.write("\2\2\u091f\u091d\3\2\2\2\u091f\u0920\3\2\2\2\u0920\u00dd")
        buf.write("\3\2\2\2\u0921\u091f\3\2\2\2\u0922\u0923\5\u0130\u0099")
        buf.write("\2\u0923\u0924\7\u01ac\2\2\u0924\u0926\3\2\2\2\u0925\u0922")
        buf.write("\3\2\2\2\u0925\u0926\3\2\2\2\u0926\u092a\3\2\2\2\u0927")
        buf.write("\u092b\5\u0106\u0084\2\u0928\u0929\7\u01b0\2\2\u0929\u092b")
        buf.write("\t+\2\2\u092a\u0927\3\2\2\2\u092a\u0928\3\2\2\2\u092b")
        buf.write("\u0938\3\2\2\2\u092c\u092d\5\u0104\u0083\2\u092d\u092e")
        buf.write("\7\u01a0\2\2\u092e\u092f\5\u00aeX\2\u092f\u0938\3\2\2")
        buf.write("\2\u0930\u0935\5\u00aeX\2\u0931\u0933\7\t\2\2\u0932\u0931")
        buf.write("\3\2\2\2\u0932\u0933\3\2\2\2\u0933\u0934\3\2\2\2\u0934")
        buf.write("\u0936\5\u0104\u0083\2\u0935\u0932\3\2\2\2\u0935\u0936")
        buf.write("\3\2\2\2\u0936\u0938\3\2\2\2\u0937\u0925\3\2\2\2\u0937")
        buf.write("\u092c\3\2\2\2\u0937\u0930\3\2\2\2\u0938\u00df\3\2\2\2")
        buf.write("\u0939\u093e\5\u00e2r\2\u093a\u093b\7\u01b3\2\2\u093b")
        buf.write("\u093d\5\u00e2r\2\u093c\u093a\3\2\2\2\u093d\u0940\3\2")
        buf.write("\2\2\u093e\u093c\3\2\2\2\u093e\u093f\3\2\2\2\u093f\u00e1")
        buf.write("\3\2\2\2\u0940\u093e\3\2\2\2\u0941\u0942\br\1\2\u0942")
        buf.write("\u0943\7\u01b1\2\2\u0943\u0944\5\u00e2r\2\u0944\u0945")
        buf.write("\7\u01b2\2\2\u0945\u0948\3\2\2\2\u0946\u0948\5\u00e4s")
        buf.write("\2\u0947\u0941\3\2\2\2\u0947\u0946\3\2\2\2\u0948\u095a")
        buf.write("\3\2\2\2\u0949\u094a\f\5\2\2\u094a\u094b\7\'\2\2\u094b")
        buf.write("\u094c\7a\2\2\u094c\u0959\5\u00e2r\6\u094d\u094e\f\4\2")
        buf.write("\2\u094e\u094f\t,\2\2\u094f\u0950\7\u00ce\2\2\u0950\u0959")
        buf.write("\5\u00e2r\5\u0951\u0952\f\6\2\2\u0952\u0953\5\u00eav\2")
        buf.write("\u0953\u0954\7a\2\2\u0954\u0955\5\u00e2r\2\u0955\u0956")
        buf.write("\7u\2\2\u0956\u0957\5\u00bc_\2\u0957\u0959\3\2\2\2\u0958")
        buf.write("\u0949\3\2\2\2\u0958\u094d\3\2\2\2\u0958\u0951\3\2\2\2")
        buf.write("\u0959\u095c\3\2\2\2\u095a\u0958\3\2\2\2\u095a\u095b\3")
        buf.write("\2\2\2\u095b\u00e3\3\2\2\2\u095c\u095a\3\2\2\2\u095d\u095f")
        buf.write("\5\u0130\u0099\2\u095e\u0960\5\u00e6t\2\u095f\u095e\3")
        buf.write("\2\2\2\u095f\u0960\3\2\2\2\u0960\u0962\3\2\2\2\u0961\u0963")
        buf.write("\5\u00fa~\2\u0962\u0961\3\2\2\2\u0962\u0963\3\2\2\2\u0963")
        buf.write("\u0985\3\2\2\2\u0964\u0966\5\u00eex\2\u0965\u0967\5\u00e6")
        buf.write("t\2\u0966\u0965\3\2\2\2\u0966\u0967\3\2\2\2\u0967\u0985")
        buf.write("\3\2\2\2\u0968\u096d\5\u00f2z\2\u0969\u096b\5\u00e6t\2")
        buf.write("\u096a\u096c\5\u0102\u0082\2\u096b\u096a\3\2\2\2\u096b")
        buf.write("\u096c\3\2\2\2\u096c\u096e\3\2\2\2\u096d\u0969\3\2\2\2")
        buf.write("\u096d\u096e\3\2\2\2\u096e\u0985\3\2\2\2\u096f\u0971\5")
        buf.write("\u00e8u\2\u0970\u0972\5\u00e6t\2\u0971\u0970\3\2\2\2\u0971")
        buf.write("\u0972\3\2\2\2\u0972\u0985\3\2\2\2\u0973\u0975\5\u00f4")
        buf.write("{\2\u0974\u0976\5\u00e6t\2\u0975\u0974\3\2\2\2\u0975\u0976")
        buf.write("\3\2\2\2\u0976\u0985\3\2\2\2\u0977\u0979\7\u0199\2\2\u0978")
        buf.write("\u097a\5\u00e6t\2\u0979\u0978\3\2\2\2\u0979\u097a\3\2")
        buf.write("\2\2\u097a\u0985\3\2\2\2\u097b\u097c\7\u0199\2\2\u097c")
        buf.write("\u097d\7\u01ac\2\2\u097d\u0982\5\u00f4{\2\u097e\u0980")
        buf.write("\5\u00e6t\2\u097f\u0981\5\u0102\u0082\2\u0980\u097f\3")
        buf.write("\2\2\2\u0980\u0981\3\2\2\2\u0981\u0983\3\2\2\2\u0982\u097e")
        buf.write("\3\2\2\2\u0982\u0983\3\2\2\2\u0983\u0985\3\2\2\2\u0984")
        buf.write("\u095d\3\2\2\2\u0984\u0964\3\2\2\2\u0984\u0968\3\2\2\2")
        buf.write("\u0984\u096f\3\2\2\2\u0984\u0973\3\2\2\2\u0984\u0977\3")
        buf.write("\2\2\2\u0984\u097b\3\2\2\2\u0985\u00e5\3\2\2\2\u0986\u0988")
        buf.write("\7\t\2\2\u0987\u0986\3\2\2\2\u0987\u0988\3\2\2\2\u0988")
        buf.write("\u0989\3\2\2\2\u0989\u098a\5\u014e\u00a8\2\u098a\u00e7")
        buf.write("\3\2\2\2\u098b\u098c\7\25\2\2\u098c\u098d\7\u01b1\2\2")
        buf.write("\u098d\u098e\7\26\2\2\u098e\u098f\5\u0130\u0099\2\u098f")
        buf.write("\u0990\7\u01b3\2\2\u0990\u0991\t-\2\2\u0991\u0992\7\u01b2")
        buf.write("\2\2\u0992\u00e9\3\2\2\2\u0993\u0995\7\\\2\2\u0994\u0993")
        buf.write("\3\2\2\2\u0994\u0995\3\2\2\2\u0995\u099b\3\2\2\2\u0996")
        buf.write("\u0998\t.\2\2\u0997\u0999\7~\2\2\u0998\u0997\3\2\2\2\u0998")
        buf.write("\u0999\3\2\2\2\u0999\u099b\3\2\2\2\u099a\u0994\3\2\2\2")
        buf.write("\u099a\u0996\3\2\2\2\u099b\u099d\3\2\2\2\u099c\u099e\t")
        buf.write("/\2\2\u099d\u099c\3\2\2\2\u099d\u099e\3\2\2\2\u099e\u00eb")
        buf.write("\3\2\2\2\u099f\u09a1\5\u0130\u0099\2\u09a0\u09a2\5\u00fa")
        buf.write("~\2\u09a1\u09a0\3\2\2\2\u09a1\u09a2\3\2\2\2\u09a2\u00ed")
        buf.write("\3\2\2\2\u09a3\u09a4\7y\2\2\u09a4\u09a5\7\u01b1\2\2\u09a5")
        buf.write("\u09a6\7\u019c\2\2\u09a6\u09a7\7\u01b3\2\2\u09a7\u09a8")
        buf.write("\7\u019c\2\2\u09a8\u09a9\7\u01b3\2\2\u09a9\u09aa\7\u019c")
        buf.write("\2\2\u09aa\u09be\7\u01b2\2\2\u09ab\u09ac\7y\2\2\u09ac")
        buf.write("\u09ad\7\u01b1\2\2\u09ad\u09ae\7\21\2\2\u09ae\u09af\7")
        buf.write("\u019c\2\2\u09af\u09b9\7\u01b3\2\2\u09b0\u09b5\5\u00f0")
        buf.write("y\2\u09b1\u09b2\7\u01b3\2\2\u09b2\u09b4\5\u00f0y\2\u09b3")
        buf.write("\u09b1\3\2\2\2\u09b4\u09b7\3\2\2\2\u09b5\u09b3\3\2\2\2")
        buf.write("\u09b5\u09b6\3\2\2\2\u09b6\u09ba\3\2\2\2\u09b7\u09b5\3")
        buf.write("\2\2\2\u09b8\u09ba\5\u014e\u00a8\2\u09b9\u09b0\3\2\2\2")
        buf.write("\u09b9\u09b8\3\2\2\2\u09ba\u09bb\3\2\2\2\u09bb\u09bc\7")
        buf.write("\u01b2\2\2\u09bc\u09be\3\2\2\2\u09bd\u09a3\3\2\2\2\u09bd")
        buf.write("\u09ab\3\2\2\2\u09be\u00ef\3\2\2\2\u09bf\u09c0\5\u014e")
        buf.write("\u00a8\2\u09c0\u09c1\7\u01a0\2\2\u09c1\u09c2\t\60\2\2")
        buf.write("\u09c2\u00f1\3\2\2\2\u09c3\u09c9\5\u00b2Z\2\u09c4\u09c5")
        buf.write("\7\u01b1\2\2\u09c5\u09c6\5\u00b2Z\2\u09c6\u09c7\7\u01b2")
        buf.write("\2\2\u09c7\u09c9\3\2\2\2\u09c8\u09c3\3\2\2\2\u09c8\u09c4")
        buf.write("\3\2\2\2\u09c9\u00f3\3\2\2\2\u09ca\u0a36\5\u0112\u008a")
        buf.write("\2\u09cb\u0a36\5\u0114\u008b\2\u09cc\u09cd\5\u0144\u00a3")
        buf.write("\2\u09cd\u09cf\7\u01b1\2\2\u09ce\u09d0\5\u010a\u0086\2")
        buf.write("\u09cf\u09ce\3\2\2\2\u09cf\u09d0\3\2\2\2\u09d0\u09d1\3")
        buf.write("\2\2\2\u09d1\u09d2\7\u01b2\2\2\u09d2\u0a36\3\2\2\2\u09d3")
        buf.write("\u0a36\5\u0110\u0089\2\u09d4\u09d5\7\u00d9\2\2\u09d5\u09d6")
        buf.write("\7\u01b1\2\2\u09d6\u09d7\7\u01b6\2\2\u09d7\u0a36\7\u01b2")
        buf.write("\2\2\u09d8\u09d9\7\u00dc\2\2\u09d9\u09da\7\u01b1\2\2\u09da")
        buf.write("\u09db\5\u00aeX\2\u09db\u09dc\7\t\2\2\u09dc\u09dd\5\u0146")
        buf.write("\u00a4\2\u09dd\u09de\7\u01b2\2\2\u09de\u0a36\3\2\2\2\u09df")
        buf.write("\u09e0\7%\2\2\u09e0\u09e1\7\u01b1\2\2\u09e1\u09e2\5\u0146")
        buf.write("\u00a4\2\u09e2\u09e3\7\u01b3\2\2\u09e3\u09e6\5\u00aeX")
        buf.write("\2\u09e4\u09e5\7\u01b3\2\2\u09e5\u09e7\5\u00aeX\2\u09e6")
        buf.write("\u09e4\3\2\2\2\u09e6\u09e7\3\2\2\2\u09e7\u09e8\3\2\2\2")
        buf.write("\u09e8\u09e9\7\u01b2\2\2\u09e9\u0a36\3\2\2\2\u09ea\u09eb")
        buf.write("\7\u00e0\2\2\u09eb\u09ec\7\u01b1\2\2\u09ec\u09ed\7\u01b6")
        buf.write("\2\2\u09ed\u0a36\7\u01b2\2\2\u09ee\u09ef\7\33\2\2\u09ef")
        buf.write("\u09f0\7\u01b1\2\2\u09f0\u09f1\5\u010a\u0086\2\u09f1\u09f2")
        buf.write("\7\u01b2\2\2\u09f2\u0a36\3\2\2\2\u09f3\u0a36\7+\2\2\u09f4")
        buf.write("\u0a36\7,\2\2\u09f5\u09f6\7\u00ec\2\2\u09f6\u09f7\7\u01b1")
        buf.write("\2\2\u09f7\u09f8\7\u019b\2\2\u09f8\u09f9\7\u01b3\2\2\u09f9")
        buf.write("\u09fa\5\u00aeX\2\u09fa\u09fb\7\u01b3\2\2\u09fb\u09fc")
        buf.write("\5\u00aeX\2\u09fc\u09fd\7\u01b2\2\2\u09fd\u0a36\3\2\2")
        buf.write("\2\u09fe\u09ff\7\u00ed\2\2\u09ff\u0a00\7\u01b1\2\2\u0a00")
        buf.write("\u0a01\7\u019b\2\2\u0a01\u0a02\7\u01b3\2\2\u0a02\u0a03")
        buf.write("\5\u00aeX\2\u0a03\u0a04\7\u01b3\2\2\u0a04\u0a05\5\u00ae")
        buf.write("X\2\u0a05\u0a06\7\u01b2\2\2\u0a06\u0a36\3\2\2\2\u0a07")
        buf.write("\u0a08\7\u00ee\2\2\u0a08\u0a09\7\u01b1\2\2\u0a09\u0a0a")
        buf.write("\7\u019b\2\2\u0a0a\u0a0b\7\u01b3\2\2\u0a0b\u0a0c\5\u00ae")
        buf.write("X\2\u0a0c\u0a0d\7\u01b2\2\2\u0a0d\u0a36\3\2\2\2\u0a0e")
        buf.write("\u0a0f\7\u00ef\2\2\u0a0f\u0a10\7\u01b1\2\2\u0a10\u0a11")
        buf.write("\7\u019b\2\2\u0a11\u0a12\7\u01b3\2\2\u0a12\u0a13\5\u00ae")
        buf.write("X\2\u0a13\u0a14\7\u01b2\2\2\u0a14\u0a36\3\2\2\2\u0a15")
        buf.write("\u0a16\7U\2\2\u0a16\u0a17\7\u01b1\2\2\u0a17\u0a1a\5\u0146")
        buf.write("\u00a4\2\u0a18\u0a19\7\u01b3\2\2\u0a19\u0a1b\7\u019a\2")
        buf.write("\2\u0a1a\u0a18\3\2\2\2\u0a1a\u0a1b\3\2\2\2\u0a1b\u0a1e")
        buf.write("\3\2\2\2\u0a1c\u0a1d\7\u01b3\2\2\u0a1d\u0a1f\7\u019a\2")
        buf.write("\2\u0a1e\u0a1c\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u0a20")
        buf.write("\3\2\2\2\u0a20\u0a21\7\u01b2\2\2\u0a21\u0a36\3\2\2\2\u0a22")
        buf.write("\u0a23\7X\2\2\u0a23\u0a24\7\u01b1\2\2\u0a24\u0a25\5\u00bc")
        buf.write("_\2\u0a25\u0a26\7\u01b3\2\2\u0a26\u0a27\5\u00aeX\2\u0a27")
        buf.write("\u0a28\7\u01b3\2\2\u0a28\u0a29\5\u00aeX\2\u0a29\u0a2a")
        buf.write("\7\u01b2\2\2\u0a2a\u0a36\3\2\2\2\u0a2b\u0a36\7\u0134\2")
        buf.write("\2\u0a2c\u0a2d\7q\2\2\u0a2d\u0a2e\7\u01b1\2\2\u0a2e\u0a2f")
        buf.write("\5\u00aeX\2\u0a2f\u0a30\7\u01b3\2\2\u0a30\u0a31\5\u00ae")
        buf.write("X\2\u0a31\u0a32\7\u01b2\2\2\u0a32\u0a36\3\2\2\2\u0a33")
        buf.write("\u0a36\7\u00a1\2\2\u0a34\u0a36\7\u00a7\2\2\u0a35\u09ca")
        buf.write("\3\2\2\2\u0a35\u09cb\3\2\2\2\u0a35\u09cc\3\2\2\2\u0a35")
        buf.write("\u09d3\3\2\2\2\u0a35\u09d4\3\2\2\2\u0a35\u09d8\3\2\2\2")
        buf.write("\u0a35\u09df\3\2\2\2\u0a35\u09ea\3\2\2\2\u0a35\u09ee\3")
        buf.write("\2\2\2\u0a35\u09f3\3\2\2\2\u0a35\u09f4\3\2\2\2\u0a35\u09f5")
        buf.write("\3\2\2\2\u0a35\u09fe\3\2\2\2\u0a35\u0a07\3\2\2\2\u0a35")
        buf.write("\u0a0e\3\2\2\2\u0a35\u0a15\3\2\2\2\u0a35\u0a22\3\2\2\2")
        buf.write("\u0a35\u0a2b\3\2\2\2\u0a35\u0a2c\3\2\2\2\u0a35\u0a33\3")
        buf.write("\2\2\2\u0a35\u0a34\3\2\2\2\u0a36\u00f5\3\2\2\2\u0a37\u0a38")
        buf.write("\7\u00c0\2\2\u0a38\u0a39\5\u00aeX\2\u0a39\u0a3a\7\u00ab")
        buf.write("\2\2\u0a3a\u0a3b\5\u00aeX\2\u0a3b\u00f7\3\2\2\2\u0a3c")
        buf.write("\u0a3d\7\u00c0\2\2\u0a3d\u0a3e\5\u00bc_\2\u0a3e\u0a3f")
        buf.write("\7\u00ab\2\2\u0a3f\u0a40\5\u00aeX\2\u0a40\u00f9\3\2\2")
        buf.write("\2\u0a41\u0a43\7\u00c3\2\2\u0a42\u0a41\3\2\2\2\u0a42\u0a43")
        buf.write("\3\2\2\2\u0a43\u0a44\3\2\2\2\u0a44\u0a45\7\u01b1\2\2\u0a45")
        buf.write("\u0a4a\5\u00fe\u0080\2\u0a46\u0a47\7\u01b3\2\2\u0a47\u0a49")
        buf.write("\5\u00fe\u0080\2\u0a48\u0a46\3\2\2\2\u0a49\u0a4c\3\2\2")
        buf.write("\2\u0a4a\u0a48\3\2\2\2\u0a4a\u0a4b\3\2\2\2\u0a4b\u0a4d")
        buf.write("\3\2\2\2\u0a4c\u0a4a\3\2\2\2\u0a4d\u0a4e\7\u01b2\2\2\u0a4e")
        buf.write("\u00fb\3\2\2\2\u0a4f\u0a50\7\u00c3\2\2\u0a50\u0a51\7\u01b1")
        buf.write("\2\2\u0a51\u0a56\5\u00fe\u0080\2\u0a52\u0a53\7\u01b3\2")
        buf.write("\2\u0a53\u0a55\5\u00fe\u0080\2\u0a54\u0a52\3\2\2\2\u0a55")
        buf.write("\u0a58\3\2\2\2\u0a56\u0a54\3\2\2\2\u0a56\u0a57\3\2\2\2")
        buf.write("\u0a57\u0a59\3\2\2\2\u0a58\u0a56\3\2\2\2\u0a59\u0a5a\7")
        buf.write("\u01b2\2\2\u0a5a\u00fd\3\2\2\2\u0a5b\u0a5d\7\u013c\2\2")
        buf.write("\u0a5c\u0a5b\3\2\2\2\u0a5c\u0a5d\3\2\2\2\u0a5d\u0a84\3")
        buf.write("\2\2\2\u0a5e\u0a5f\7[\2\2\u0a5f\u0a60\7\u01b1\2\2\u0a60")
        buf.write("\u0a65\5\u0100\u0081\2\u0a61\u0a62\7\u01b3\2\2\u0a62\u0a64")
        buf.write("\5\u0100\u0081\2\u0a63\u0a61\3\2\2\2\u0a64\u0a67\3\2\2")
        buf.write("\2\u0a65\u0a63\3\2\2\2\u0a65\u0a66\3\2\2\2\u0a66\u0a68")
        buf.write("\3\2\2\2\u0a67\u0a65\3\2\2\2\u0a68\u0a69\7\u01b2\2\2\u0a69")
        buf.write("\u0a85\3\2\2\2\u0a6a\u0a6b\7[\2\2\u0a6b\u0a6c\7\u01a0")
        buf.write("\2\2\u0a6c\u0a85\5\u0100\u0081\2\u0a6d\u0a7c\7J\2\2\u0a6e")
        buf.write("\u0a6f\7\u01b1\2\2\u0a6f\u0a70\5\u0100\u0081\2\u0a70\u0a71")
        buf.write("\7\u01b1\2\2\u0a71\u0a76\7\u019b\2\2\u0a72\u0a73\7\u01b3")
        buf.write("\2\2\u0a73\u0a75\7\u019b\2\2\u0a74\u0a72\3\2\2\2\u0a75")
        buf.write("\u0a78\3\2\2\2\u0a76\u0a74\3\2\2\2\u0a76\u0a77\3\2\2\2")
        buf.write("\u0a77\u0a79\3\2\2\2\u0a78\u0a76\3\2\2\2\u0a79\u0a7a\7")
        buf.write("\u01b2\2\2\u0a7a\u0a7b\7\u01b2\2\2\u0a7b\u0a7d\3\2\2\2")
        buf.write("\u0a7c\u0a6e\3\2\2\2\u0a7c\u0a7d\3\2\2\2\u0a7d\u0a85\3")
        buf.write("\2\2\2\u0a7e\u0a85\7\u016d\2\2\u0a7f\u0a85\7\u0172\2\2")
        buf.write("\u0a80\u0a81\7\u0173\2\2\u0a81\u0a82\7\u01a0\2\2\u0a82")
        buf.write("\u0a85\7\u019a\2\2\u0a83\u0a85\7\u019b\2\2\u0a84\u0a5e")
        buf.write("\3\2\2\2\u0a84\u0a6a\3\2\2\2\u0a84\u0a6d\3\2\2\2\u0a84")
        buf.write("\u0a7e\3\2\2\2\u0a84\u0a7f\3\2\2\2\u0a84\u0a80\3\2\2\2")
        buf.write("\u0a84\u0a83\3\2\2\2\u0a84\u0a85\3\2\2\2\u0a85\u00ff\3")
        buf.write("\2\2\2\u0a86\u0a89\5\u014e\u00a8\2\u0a87\u0a89\7\u019a")
        buf.write("\2\2\u0a88\u0a86\3\2\2\2\u0a88\u0a87\3\2\2\2\u0a89\u0101")
        buf.write("\3\2\2\2\u0a8a\u0a8b\7\u01b1\2\2\u0a8b\u0a90\5\u0104\u0083")
        buf.write("\2\u0a8c\u0a8d\7\u01b3\2\2\u0a8d\u0a8f\5\u0104\u0083\2")
        buf.write("\u0a8e\u0a8c\3\2\2\2\u0a8f\u0a92\3\2\2\2\u0a90\u0a8e\3")
        buf.write("\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a93\3\2\2\2\u0a92\u0a90")
        buf.write("\3\2\2\2\u0a93\u0a94\7\u01b2\2\2\u0a94\u0103\3\2\2\2\u0a95")
        buf.write("\u0a98\5\u014e\u00a8\2\u0a96\u0a98\7\u019c\2\2\u0a97\u0a95")
        buf.write("\3\2\2\2\u0a97\u0a96\3\2\2\2\u0a98\u0105\3\2\2\2\u0a99")
        buf.write("\u0a9a\7\u01b6\2\2\u0a9a\u0107\3\2\2\2\u0a9b\u0a9c\7\u00bb")
        buf.write("\2\2\u0a9c\u0aa1\5\u010c\u0087\2\u0a9d\u0a9e\7\u01b3\2")
        buf.write("\2\u0a9e\u0aa0\5\u010c\u0087\2\u0a9f\u0a9d\3\2\2\2\u0aa0")
        buf.write("\u0aa3\3\2\2\2\u0aa1\u0a9f\3\2\2\2\u0aa1\u0aa2\3\2\2\2")
        buf.write("\u0aa2\u0109\3\2\2\2\u0aa3\u0aa1\3\2\2\2\u0aa4\u0aa9\5")
        buf.write("\u00aeX\2\u0aa5\u0aa6\7\u01b3\2\2\u0aa6\u0aa8\5\u00ae")
        buf.write("X\2\u0aa7\u0aa5\3\2\2\2\u0aa8\u0aab\3\2\2\2\u0aa9\u0aa7")
        buf.write("\3\2\2\2\u0aa9\u0aaa\3\2\2\2\u0aaa\u010b\3\2\2\2\u0aab")
        buf.write("\u0aa9\3\2\2\2\u0aac\u0aad\7\u01b1\2\2\u0aad\u0aae\5\u010a")
        buf.write("\u0086\2\u0aae\u0aaf\7\u01b2\2\2\u0aaf\u010d\3\2\2\2\u0ab0")
        buf.write("\u0ab1\7k\2\2\u0ab1\u0ab2\7\u00bc\2\2\u0ab2\u0ab3\7I\2")
        buf.write("\2\u0ab3\u010f\3\2\2\2\u0ab4\u0ab5\5\u010e\u0088\2\u0ab5")
        buf.write("\u0ab6\5\u0134\u009b\2\u0ab6\u0ab7\5\u0118\u008d\2\u0ab7")
        buf.write("\u0111\3\2\2\2\u0ab8\u0ab9\t\61\2\2\u0ab9\u0aba\7\u01b1")
        buf.write("\2\2\u0aba\u0abb\7\u01b2\2\2\u0abb\u0ac3\5\u0118\u008d")
        buf.write("\2\u0abc\u0abd\t\62\2\2\u0abd\u0abe\7\u01b1\2\2\u0abe")
        buf.write("\u0abf\5\u00aeX\2\u0abf\u0ac0\7\u01b2\2\2\u0ac0\u0ac1")
        buf.write("\5\u0118\u008d\2\u0ac1\u0ac3\3\2\2\2\u0ac2\u0ab8\3\2\2")
        buf.write("\2\u0ac2\u0abc\3\2\2\2\u0ac3\u0113\3\2\2\2\u0ac4\u0ac5")
        buf.write("\t\63\2\2\u0ac5\u0ac7\7\u01b1\2\2\u0ac6\u0ac8\5\u0116")
        buf.write("\u008c\2\u0ac7\u0ac6\3\2\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8")
        buf.write("\u0ac9\3\2\2\2\u0ac9\u0aca\5\u00aeX\2\u0aca\u0acc\7\u01b2")
        buf.write("\2\2\u0acb\u0acd\5\u0118\u008d\2\u0acc\u0acb\3\2\2\2\u0acc")
        buf.write("\u0acd\3\2\2\2\u0acd\u0aee\3\2\2\2\u0ace\u0acf\t\64\2")
        buf.write("\2\u0acf\u0ad5\7\u01b1\2\2\u0ad0\u0ad6\7\u01b6\2\2\u0ad1")
        buf.write("\u0ad3\5\u0116\u008c\2\u0ad2\u0ad1\3\2\2\2\u0ad2\u0ad3")
        buf.write("\3\2\2\2\u0ad3\u0ad4\3\2\2\2\u0ad4\u0ad6\5\u00aeX\2\u0ad5")
        buf.write("\u0ad0\3\2\2\2\u0ad5\u0ad2\3\2\2\2\u0ad6\u0ad7\3\2\2\2")
        buf.write("\u0ad7\u0ad9\7\u01b2\2\2\u0ad8\u0ada\5\u0118\u008d\2\u0ad9")
        buf.write("\u0ad8\3\2\2\2\u0ad9\u0ada\3\2\2\2\u0ada\u0aee\3\2\2\2")
        buf.write("\u0adb\u0adc\7\u00e1\2\2\u0adc\u0ade\7\u01b1\2\2\u0add")
        buf.write("\u0adf\5\u0116\u008c\2\u0ade\u0add\3\2\2\2\u0ade\u0adf")
        buf.write("\3\2\2\2\u0adf\u0ae0\3\2\2\2\u0ae0\u0ae1\5\u00aeX\2\u0ae1")
        buf.write("\u0ae2\7\u01b2\2\2\u0ae2\u0aee\3\2\2\2\u0ae3\u0ae4\7\u0112")
        buf.write("\2\2\u0ae4\u0ae5\7\u01b1\2\2\u0ae5\u0ae6\5\u00aeX\2\u0ae6")
        buf.write("\u0ae7\7\u01b2\2\2\u0ae7\u0aee\3\2\2\2\u0ae8\u0ae9\7\u0113")
        buf.write("\2\2\u0ae9\u0aea\7\u01b1\2\2\u0aea\u0aeb\5\u010a\u0086")
        buf.write("\2\u0aeb\u0aec\7\u01b2\2\2\u0aec\u0aee\3\2\2\2\u0aed\u0ac4")
        buf.write("\3\2\2\2\u0aed\u0ace\3\2\2\2\u0aed\u0adb\3\2\2\2\u0aed")
        buf.write("\u0ae3\3\2\2\2\u0aed\u0ae8\3\2\2\2\u0aee\u0115\3\2\2\2")
        buf.write("\u0aef\u0af0\t%\2\2\u0af0\u0117\3\2\2\2\u0af1\u0af2\7")
        buf.write("\177\2\2\u0af2\u0af6\7\u01b1\2\2\u0af3\u0af4\7\u014e\2")
        buf.write("\2\u0af4\u0af5\7\22\2\2\u0af5\u0af7\5\u010a\u0086\2\u0af6")
        buf.write("\u0af3\3\2\2\2\u0af6\u0af7\3\2\2\2\u0af7\u0af9\3\2\2\2")
        buf.write("\u0af8\u0afa\5\u00caf\2\u0af9\u0af8\3\2\2\2\u0af9\u0afa")
        buf.write("\3\2\2\2\u0afa\u0afc\3\2\2\2\u0afb\u0afd\5\u011a\u008e")
        buf.write("\2\u0afc\u0afb\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd\u0afe")
        buf.write("\3\2\2\2\u0afe\u0aff\7\u01b2\2\2\u0aff\u0119\3\2\2\2\u0b00")
        buf.write("\u0b01\t\65\2\2\u0b01\u0b02\5\u011c\u008f\2\u0b02\u011b")
        buf.write("\3\2\2\2\u0b03\u0b0a\5\u0120\u0091\2\u0b04\u0b05\7\16")
        buf.write("\2\2\u0b05\u0b06\5\u011e\u0090\2\u0b06\u0b07\7\7\2\2\u0b07")
        buf.write("\u0b08\5\u011e\u0090\2\u0b08\u0b0a\3\2\2\2\u0b09\u0b03")
        buf.write("\3\2\2\2\u0b09\u0b04\3\2\2\2\u0b0a\u011d\3\2\2\2\u0b0b")
        buf.write("\u0b0e\5\u0120\u0091\2\u0b0c\u0b0e\5\u0122\u0092\2\u0b0d")
        buf.write("\u0b0b\3\2\2\2\u0b0d\u0b0c\3\2\2\2\u0b0e\u011f\3\2\2\2")
        buf.write("\u0b0f\u0b10\7\u0187\2\2\u0b10\u0b16\7\u0150\2\2\u0b11")
        buf.write("\u0b12\7\u019a\2\2\u0b12\u0b16\7\u0150\2\2\u0b13\u0b14")
        buf.write("\7(\2\2\u0b14\u0b16\7\u0163\2\2\u0b15\u0b0f\3\2\2\2\u0b15")
        buf.write("\u0b11\3\2\2\2\u0b15\u0b13\3\2\2\2\u0b16\u0121\3\2\2\2")
        buf.write("\u0b17\u0b18\7\u0187\2\2\u0b18\u0b1c\7\u010a\2\2\u0b19")
        buf.write("\u0b1a\7\u019a\2\2\u0b1a\u0b1c\7\u010a\2\2\u0b1b\u0b17")
        buf.write("\3\2\2\2\u0b1b\u0b19\3\2\2\2\u0b1c\u0123\3\2\2\2\u0b1d")
        buf.write("\u0b1e\7\u0107\2\2\u0b1e\u0b23\5\u0126\u0094\2\u0b1f\u0b20")
        buf.write("\7\u01b3\2\2\u0b20\u0b22\5\u0126\u0094\2\u0b21\u0b1f\3")
        buf.write("\2\2\2\u0b22\u0b25\3\2\2\2\u0b23\u0b21\3\2\2\2\u0b23\u0b24")
        buf.write("\3\2\2\2\u0b24\u0b40\3\2\2\2\u0b25\u0b23\3\2\2\2\u0b26")
        buf.write("\u0b27\7\u00f4\2\2\u0b27\u0b2a\7\u01a0\2\2\u0b28\u0b2b")
        buf.write("\5\u014e\u00a8\2\u0b29\u0b2b\7\u019c\2\2\u0b2a\u0b28\3")
        buf.write("\2\2\2\u0b2a\u0b29\3\2\2\2\u0b2b\u0b40\3\2\2\2\u0b2c\u0b2d")
        buf.write("\7\u00f3\2\2\u0b2d\u0b30\7\u01a0\2\2\u0b2e\u0b31\5\u014e")
        buf.write("\u00a8\2\u0b2f\u0b31\7\u019c\2\2\u0b30\u0b2e\3\2\2\2\u0b30")
        buf.write("\u0b2f\3\2\2\2\u0b31\u0b40\3\2\2\2\u0b32\u0b33\7\u0139")
        buf.write("\2\2\u0b33\u0b34\7\u01a0\2\2\u0b34\u0b40\t\r\2\2\u0b35")
        buf.write("\u0b36\7\u0181\2\2\u0b36\u0b37\7\u01a0\2\2\u0b37\u0b40")
        buf.write("\t\r\2\2\u0b38\u0b39\7\u0184\2\2\u0b39\u0b3a\7\u01a0\2")
        buf.write("\2\u0b3a\u0b40\7\u019a\2\2\u0b3b\u0b3c\7\u00f2\2\2\u0b3c")
        buf.write("\u0b40\t\r\2\2\u0b3d\u0b3e\7\u0182\2\2\u0b3e\u0b40\t\r")
        buf.write("\2\2\u0b3f\u0b1d\3\2\2\2\u0b3f\u0b26\3\2\2\2\u0b3f\u0b2c")
        buf.write("\3\2\2\2\u0b3f\u0b32\3\2\2\2\u0b3f\u0b35\3\2\2\2\u0b3f")
        buf.write("\u0b38\3\2\2\2\u0b3f\u0b3b\3\2\2\2\u0b3f\u0b3d\3\2\2\2")
        buf.write("\u0b40\u0125\3\2\2\2\u0b41\u0b48\7\u01b1\2\2\u0b42\u0b43")
        buf.write("\7\u013d\2\2\u0b43\u0b44\7\u01a0\2\2\u0b44\u0b49\t\66")
        buf.write("\2\2\u0b45\u0b46\7\u00f9\2\2\u0b46\u0b47\7\u01a0\2\2\u0b47")
        buf.write("\u0b49\7\u019c\2\2\u0b48\u0b42\3\2\2\2\u0b48\u0b45\3\2")
        buf.write("\2\2\u0b49\u0b4a\3\2\2\2\u0b4a\u0b4b\7\u01b2\2\2\u0b4b")
        buf.write("\u0127\3\2\2\2\u0b4c\u0b4f\5\u012a\u0096\2\u0b4d\u0b4f")
        buf.write("\5\u012c\u0097\2\u0b4e\u0b4c\3\2\2\2\u0b4e\u0b4d\3\2\2")
        buf.write("\2\u0b4f\u0129\3\2\2\2\u0b50\u0b51\7\u0105\2\2\u0b51\u0b54")
        buf.write("\5\u014e\u00a8\2\u0b52\u0b53\7\"\2\2\u0b53\u0b55\7\u0107")
        buf.write("\2\2\u0b54\u0b52\3\2\2\2\u0b54\u0b55\3\2\2\2\u0b55\u0b57")
        buf.write("\3\2\2\2\u0b56\u0b58\7\62\2\2\u0b57\u0b56\3\2\2\2\u0b57")
        buf.write("\u0b58\3\2\2\2\u0b58\u0b5b\3\2\2\2\u0b59\u0b5a\7\"\2\2")
        buf.write("\u0b5a\u0b5c\7\u0131\2\2\u0b5b\u0b59\3\2\2\2\u0b5b\u0b5c")
        buf.write("\3\2\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u0b62\5\u012c\u0097")
        buf.write("\2\u0b5e\u0b5f\7\u01b3\2\2\u0b5f\u0b61\5\u012c\u0097\2")
        buf.write("\u0b60\u0b5e\3\2\2\2\u0b61\u0b64\3\2\2\2\u0b62\u0b60\3")
        buf.write("\2\2\2\u0b62\u0b63\3\2\2\2\u0b63\u012b\3\2\2\2\u0b64\u0b62")
        buf.write("\3\2\2\2\u0b65\u0b66\7\u01b1\2\2\u0b66\u0b67\7\u0138\2")
        buf.write("\2\u0b67\u0b6a\7\u01a0\2\2\u0b68\u0b6b\5\u014e\u00a8\2")
        buf.write("\u0b69\u0b6b\7\u019c\2\2\u0b6a\u0b68\3\2\2\2\u0b6a\u0b69")
        buf.write("\3\2\2\2\u0b6b\u0b6d\3\2\2\2\u0b6c\u0b6e\7\u01b3\2\2\u0b6d")
        buf.write("\u0b6c\3\2\2\2\u0b6d\u0b6e\3\2\2\2\u0b6e\u0b6f\3\2\2\2")
        buf.write("\u0b6f\u0b70\7G\2\2\u0b70\u0b71\7\u01a0\2\2\u0b71\u0b73")
        buf.write("\7\u019c\2\2\u0b72\u0b74\7\u01b3\2\2\u0b73\u0b72\3\2\2")
        buf.write("\2\u0b73\u0b74\3\2\2\2\u0b74\u0b7b\3\2\2\2\u0b75\u0b76")
        buf.write("\7\u0171\2\2\u0b76\u0b77\7\u01a0\2\2\u0b77\u0b79\5\u0156")
        buf.write("\u00ac\2\u0b78\u0b7a\7\u01b3\2\2\u0b79\u0b78\3\2\2\2\u0b79")
        buf.write("\u0b7a\3\2\2\2\u0b7a\u0b7c\3\2\2\2\u0b7b\u0b75\3\2\2\2")
        buf.write("\u0b7b\u0b7c\3\2\2\2\u0b7c\u0b86\3\2\2\2\u0b7d\u0b7e\7")
        buf.write("\u012f\2\2\u0b7e\u0b81\7\u01a0\2\2\u0b7f\u0b82\5\u0156")
        buf.write("\u00ac\2\u0b80\u0b82\7\u018a\2\2\u0b81\u0b7f\3\2\2\2\u0b81")
        buf.write("\u0b80\3\2\2\2\u0b82\u0b84\3\2\2\2\u0b83\u0b85\7\u01b3")
        buf.write("\2\2\u0b84\u0b83\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85\u0b87")
        buf.write("\3\2\2\2\u0b86\u0b7d\3\2\2\2\u0b86\u0b87\3\2\2\2\u0b87")
        buf.write("\u0b8e\3\2\2\2\u0b88\u0b89\7\u0106\2\2\u0b89\u0b8a\7\u01a0")
        buf.write("\2\2\u0b8a\u0b8c\5\u0156\u00ac\2\u0b8b\u0b8d\7\u01b3\2")
        buf.write("\2\u0b8c\u0b8b\3\2\2\2\u0b8c\u0b8d\3\2\2\2\u0b8d\u0b8f")
        buf.write("\3\2\2\2\u0b8e\u0b88\3\2\2\2\u0b8e\u0b8f\3\2\2\2\u0b8f")
        buf.write("\u0b90\3\2\2\2\u0b90\u0b91\7\u01b2\2\2\u0b91\u012d\3\2")
        buf.write("\2\2\u0b92\u0b93\5\u014e\u00a8\2\u0b93\u0b94\7\u01ac\2")
        buf.write("\2\u0b94\u0b95\5\u014e\u00a8\2\u0b95\u0b96\7\u01ac\2\2")
        buf.write("\u0b96\u0b97\5\u014e\u00a8\2\u0b97\u0b98\7\u01ac\2\2\u0b98")
        buf.write("\u0ba4\3\2\2\2\u0b99\u0b9a\5\u014e\u00a8\2\u0b9a\u0b9c")
        buf.write("\7\u01ac\2\2\u0b9b\u0b9d\5\u014e\u00a8\2\u0b9c\u0b9b\3")
        buf.write("\2\2\2\u0b9c\u0b9d\3\2\2\2\u0b9d\u0b9e\3\2\2\2\u0b9e\u0b9f")
        buf.write("\7\u01ac\2\2\u0b9f\u0ba4\3\2\2\2\u0ba0\u0ba1\5\u014e\u00a8")
        buf.write("\2\u0ba1\u0ba2\7\u01ac\2\2\u0ba2\u0ba4\3\2\2\2\u0ba3\u0b92")
        buf.write("\3\2\2\2\u0ba3\u0b99\3\2\2\2\u0ba3\u0ba0\3\2\2\2\u0ba3")
        buf.write("\u0ba4\3\2\2\2\u0ba4\u0ba5\3\2\2\2\u0ba5\u0ba6\5\u014e")
        buf.write("\u00a8\2\u0ba6\u012f\3\2\2\2\u0ba7\u0ba8\5\u014e\u00a8")
        buf.write("\2\u0ba8\u0baa\7\u01ac\2\2\u0ba9\u0bab\5\u014e\u00a8\2")
        buf.write("\u0baa\u0ba9\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0bac\3")
        buf.write("\2\2\2\u0bac\u0bad\7\u01ac\2\2\u0bad\u0bb2\3\2\2\2\u0bae")
        buf.write("\u0baf\5\u014e\u00a8\2\u0baf\u0bb0\7\u01ac\2\2\u0bb0\u0bb2")
        buf.write("\3\2\2\2\u0bb1\u0ba7\3\2\2\2\u0bb1\u0bae\3\2\2\2\u0bb1")
        buf.write("\u0bb2\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bb4\5\u014e")
        buf.write("\u00a8\2\u0bb4\u0131\3\2\2\2\u0bb5\u0bb6\5\u014e\u00a8")
        buf.write("\2\u0bb6\u0bb7\7\u01ac\2\2\u0bb7\u0bb9\3\2\2\2\u0bb8\u0bb5")
        buf.write("\3\2\2\2\u0bb8\u0bb9\3\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba")
        buf.write("\u0bbb\5\u014e\u00a8\2\u0bbb\u0133\3\2\2\2\u0bbc\u0bbd")
        buf.write("\5\u014e\u00a8\2\u0bbd\u0bbf\7\u01ac\2\2\u0bbe\u0bc0\5")
        buf.write("\u014e\u00a8\2\u0bbf\u0bbe\3\2\2\2\u0bbf\u0bc0\3\2\2\2")
        buf.write("\u0bc0\u0bc1\3\2\2\2\u0bc1\u0bc2\7\u01ac\2\2\u0bc2\u0bc7")
        buf.write("\3\2\2\2\u0bc3\u0bc4\5\u014e\u00a8\2\u0bc4\u0bc5\7\u01ac")
        buf.write("\2\2\u0bc5\u0bc7\3\2\2\2\u0bc6\u0bbc\3\2\2\2\u0bc6\u0bc3")
        buf.write("\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7\u0bc8\3\2\2\2\u0bc8")
        buf.write("\u0bc9\5\u014e\u00a8\2\u0bc9\u0135\3\2\2\2\u0bca\u0bcd")
        buf.write("\5\u012e\u0098\2\u0bcb\u0bcd\7\u0199\2\2\u0bcc\u0bca\3")
        buf.write("\2\2\2\u0bcc\u0bcb\3\2\2\2\u0bcd\u0137\3\2\2\2\u0bce\u0bcf")
        buf.write("\5\u0130\u0099\2\u0bcf\u0bd0\7\u01ac\2\2\u0bd0\u0bd2\3")
        buf.write("\2\2\2\u0bd1\u0bce\3\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2\u0bd3")
        buf.write("\3\2\2\2\u0bd3\u0bd4\5\u014e\u00a8\2\u0bd4\u0139\3\2\2")
        buf.write("\2\u0bd5\u0bda\5\u014e\u00a8\2\u0bd6\u0bd7\7\u01b3\2\2")
        buf.write("\u0bd7\u0bd9\5\u014e\u00a8\2\u0bd8\u0bd6\3\2\2\2\u0bd9")
        buf.write("\u0bdc\3\2\2\2\u0bda\u0bd8\3\2\2\2\u0bda\u0bdb\3\2\2\2")
        buf.write("\u0bdb\u013b\3\2\2\2\u0bdc\u0bda\3\2\2\2\u0bdd\u0be0\5")
        buf.write("\u014e\u00a8\2\u0bde\u0be0\7\u0199\2\2\u0bdf\u0bdd\3\2")
        buf.write("\2\2\u0bdf\u0bde\3\2\2\2\u0be0\u013d\3\2\2\2\u0be1\u0be2")
        buf.write("\t\r\2\2\u0be2\u013f\3\2\2\2\u0be3\u0be4\t\67\2\2\u0be4")
        buf.write("\u0141\3\2\2\2\u0be5\u0be7\7o\2\2\u0be6\u0be5\3\2\2\2")
        buf.write("\u0be6\u0be7\3\2\2\2\u0be7\u0be8\3\2\2\2\u0be8\u0be9\7")
        buf.write("p\2\2\u0be9\u0143\3\2\2\2\u0bea\u0bf0\5\u0134\u009b\2")
        buf.write("\u0beb\u0bf0\7\u0095\2\2\u0bec\u0bf0\7d\2\2\u0bed\u0bf0")
        buf.write("\7\u00d9\2\2\u0bee\u0bf0\7\u00e0\2\2\u0bef\u0bea\3\2\2")
        buf.write("\2\u0bef\u0beb\3\2\2\2\u0bef\u0bec\3\2\2\2\u0bef\u0bed")
        buf.write("\3\2\2\2\u0bef\u0bee\3\2\2\2\u0bf0\u0145\3\2\2\2\u0bf1")
        buf.write("\u0bf3\5\u014e\u00a8\2\u0bf2\u0bf4\7U\2\2\u0bf3\u0bf2")
        buf.write("\3\2\2\2\u0bf3\u0bf4\3\2\2\2\u0bf4\u0bfc\3\2\2\2\u0bf5")
        buf.write("\u0bf6\7\u01b1\2\2\u0bf6\u0bf9\t8\2\2\u0bf7\u0bf8\7\u01b3")
        buf.write("\2\2\u0bf8\u0bfa\7\u019a\2\2\u0bf9\u0bf7\3\2\2\2\u0bf9")
        buf.write("\u0bfa\3\2\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u0bfd\7\u01b2")
        buf.write("\2\2\u0bfc\u0bf5\3\2\2\2\u0bfc\u0bfd\3\2\2\2\u0bfd\u0147")
        buf.write("\3\2\2\2\u0bfe\u0c01\7p\2\2\u0bff\u0c01\5\u014a\u00a6")
        buf.write("\2\u0c00\u0bfe\3\2\2\2\u0c00\u0bff\3\2\2\2\u0c01\u0149")
        buf.write("\3\2\2\2\u0c02\u0c12\7\u019c\2\2\u0c03\u0c12\7\u019d\2")
        buf.write("\2\u0c04\u0c06\5\u014c\u00a7\2\u0c05\u0c04\3\2\2\2\u0c05")
        buf.write("\u0c06\3\2\2\2\u0c06\u0c07\3\2\2\2\u0c07\u0c12\7\u019a")
        buf.write("\2\2\u0c08\u0c0a\5\u014c\u00a7\2\u0c09\u0c08\3\2\2\2\u0c09")
        buf.write("\u0c0a\3\2\2\2\u0c0a\u0c0b\3\2\2\2\u0c0b\u0c12\t9\2\2")
        buf.write("\u0c0c\u0c0e\5\u014c\u00a7\2\u0c0d\u0c0c\3\2\2\2\u0c0d")
        buf.write("\u0c0e\3\2\2\2\u0c0e\u0c0f\3\2\2\2\u0c0f\u0c10\7\u01b0")
        buf.write("\2\2\u0c10\u0c12\t:\2\2\u0c11\u0c02\3\2\2\2\u0c11\u0c03")
        buf.write("\3\2\2\2\u0c11\u0c05\3\2\2\2\u0c11\u0c09\3\2\2\2\u0c11")
        buf.write("\u0c0d\3\2\2\2\u0c12\u014b\3\2\2\2\u0c13\u0c14\t!\2\2")
        buf.write("\u0c14\u014d\3\2\2\2\u0c15\u0c19\5\u0150\u00a9\2\u0c16")
        buf.write("\u0c19\7\u0197\2\2\u0c17\u0c19\7\u0198\2\2\u0c18\u0c15")
        buf.write("\3\2\2\2\u0c18\u0c16\3\2\2\2\u0c18\u0c17\3\2\2\2\u0c19")
        buf.write("\u014f\3\2\2\2\u0c1a\u0c1b\t;\2\2\u0c1b\u0151\3\2\2\2")
        buf.write("\u0c1c\u0c2c\7\u01a0\2\2\u0c1d\u0c2c\7\u01a1\2\2\u0c1e")
        buf.write("\u0c2c\7\u01a2\2\2\u0c1f\u0c20\7\u01a2\2\2\u0c20\u0c2c")
        buf.write("\7\u01a0\2\2\u0c21\u0c22\7\u01a1\2\2\u0c22\u0c2c\7\u01a0")
        buf.write("\2\2\u0c23\u0c24\7\u01a2\2\2\u0c24\u0c2c\7\u01a1\2\2\u0c25")
        buf.write("\u0c26\7\u01a3\2\2\u0c26\u0c2c\7\u01a0\2\2\u0c27\u0c28")
        buf.write("\7\u01a3\2\2\u0c28\u0c2c\7\u01a1\2\2\u0c29\u0c2a\7\u01a3")
        buf.write("\2\2\u0c2a\u0c2c\7\u01a2\2\2\u0c2b\u0c1c\3\2\2\2\u0c2b")
        buf.write("\u0c1d\3\2\2\2\u0c2b\u0c1e\3\2\2\2\u0c2b\u0c1f\3\2\2\2")
        buf.write("\u0c2b\u0c21\3\2\2\2\u0c2b\u0c23\3\2\2\2\u0c2b\u0c25\3")
        buf.write("\2\2\2\u0c2b\u0c27\3\2\2\2\u0c2b\u0c29\3\2\2\2\u0c2c\u0153")
        buf.write("\3\2\2\2\u0c2d\u0c2e\t<\2\2\u0c2e\u0155\3\2\2\2\u0c2f")
        buf.write("\u0c31\7\u019a\2\2\u0c30\u0c32\t=\2\2\u0c31\u0c30\3\2")
        buf.write("\2\2\u0c31\u0c32\3\2\2\2\u0c32\u0157\3\2\2\2\u01c9\u015b")
        buf.write("\u0162\u0166\u016a\u0170\u0176\u0187\u018b\u018e\u0192")
        buf.write("\u0196\u019a\u019f\u01a4\u01ab\u01ae\u01b2\u01b5\u01bd")
        buf.write("\u01c0\u01c5\u01c8\u01cd\u01d2\u01d5\u01da\u01e0\u01e7")
        buf.write("\u01eb\u01ed\u01f2\u01ff\u0204\u0206\u020f\u0212\u0216")
        buf.write("\u0219\u021d\u0220\u0224\u0227\u022a\u022d\u0230\u0234")
        buf.write("\u0239\u023c\u0240\u0243\u0247\u024a\u0250\u0253\u0257")
        buf.write("\u025a\u025d\u0264\u0267\u026b\u026e\u0271\u0274\u0277")
        buf.write("\u027b\u027f\u0282\u028a\u028e\u0292\u0295\u0298\u029b")
        buf.write("\u029e\u02a5\u02a9\u02ab\u02b3\u02b9\u02bf\u02c1\u02c5")
        buf.write("\u02c8\u02cb\u02d0\u02d5\u02d8\u02e0\u02e4\u02eb\u02ee")
        buf.write("\u02f7\u02fa\u02fe\u0306\u0309\u030d\u0310\u0319\u031d")
        buf.write("\u0321\u0324\u032b\u032e\u0335\u0339\u033b\u0343\u0346")
        buf.write("\u034a\u0353\u0356\u035a\u035e\u0361\u0366\u0376\u037a")
        buf.write("\u0380\u0382\u0385\u038d\u0393\u0398\u039b\u03a4\u03ac")
        buf.write("\u03af\u03b6\u03b9\u03de\u03e1\u03e7\u03f3\u03f5\u03f8")
        buf.write("\u0410\u041b\u0423\u042e\u0433\u0436\u043e\u0448\u0462")
        buf.write("\u0468\u0473\u0481\u0489\u0490\u04a7\u04b4\u04ba\u04bf")
        buf.write("\u04c2\u04c8\u04cc\u04d3\u04dc\u04e0\u04e6\u04ed\u04f1")
        buf.write("\u04fe\u0504\u0515\u0519\u0521\u0525\u052d\u0531\u0533")
        buf.write("\u0537\u053b\u053f\u0543\u0549\u054d\u054f\u0554\u055c")
        buf.write("\u055f\u0562\u056b\u0570\u0575\u0578\u057a\u057e\u0582")
        buf.write("\u0585\u0589\u058f\u0594\u059b\u059d\u05a1\u05a8\u05ac")
        buf.write("\u05af\u05b8\u05bb\u05bd\u05c6\u05d1\u05d5\u05d7\u05d9")
        buf.write("\u05df\u05e4\u05eb\u05f8\u05fa\u05fc\u05ff\u0602\u0609")
        buf.write("\u060c\u0612\u0617\u0619\u061c\u0622\u062a\u062c\u062f")
        buf.write("\u0633\u0636\u063c\u063f\u0643\u0646\u064c\u064f\u0651")
        buf.write("\u0655\u065a\u0662\u0667\u0670\u0675\u067a\u0680\u0684")
        buf.write("\u0687\u068b\u0691\u0699\u069e\u06a0\u06a3\u06a8\u06ad")
        buf.write("\u06b0\u06b5\u06b8\u06bb\u06c1\u06c7\u06cb\u06d0\u06d3")
        buf.write("\u06d8\u06dc\u06e0\u06e6\u06ec\u06f5\u06ff\u0709\u070b")
        buf.write("\u070d\u0710\u0713\u071e\u0720\u0722\u0725\u0728\u072b")
        buf.write("\u072e\u0731\u0734\u0740\u0743\u0746\u074f\u0752\u0755")
        buf.write("\u075c\u075f\u076d\u0770\u0777\u0782\u0786\u0793\u0797")
        buf.write("\u079f\u07a3\u07b5\u07c4\u07c6\u07d1\u07d8\u07df\u07e7")
        buf.write("\u07f0\u07f4\u07fe\u0805\u0811\u0813\u082a\u0833\u0839")
        buf.write("\u083f\u0845\u0850\u0858\u0860\u0865\u0869\u086d\u0870")
        buf.write("\u0875\u0879\u087d\u0886\u0889\u088d\u0892\u0896\u089d")
        buf.write("\u08a6\u08ad\u08af\u08bd\u08c5\u08c8\u08ca\u08d1\u08d5")
        buf.write("\u08e0\u0902\u0912\u0918\u091f\u0925\u092a\u0932\u0935")
        buf.write("\u0937\u093e\u0947\u0958\u095a\u095f\u0962\u0966\u096b")
        buf.write("\u096d\u0971\u0975\u0979\u0980\u0982\u0984\u0987\u0994")
        buf.write("\u0998\u099a\u099d\u09a1\u09b5\u09b9\u09bd\u09c8\u09cf")
        buf.write("\u09e6\u0a1a\u0a1e\u0a35\u0a42\u0a4a\u0a56\u0a5c\u0a65")
        buf.write("\u0a76\u0a7c\u0a84\u0a88\u0a90\u0a97\u0aa1\u0aa9\u0ac2")
        buf.write("\u0ac7\u0acc\u0ad2\u0ad5\u0ad9\u0ade\u0aed\u0af6\u0af9")
        buf.write("\u0afc\u0b09\u0b0d\u0b15\u0b1b\u0b23\u0b2a\u0b30\u0b3f")
        buf.write("\u0b48\u0b4e\u0b54\u0b57\u0b5b\u0b62\u0b6a\u0b6d\u0b73")
        buf.write("\u0b79\u0b7b\u0b81\u0b84\u0b86\u0b8c\u0b8e\u0b9c\u0ba3")
        buf.write("\u0baa\u0bb1\u0bb8\u0bbf\u0bc6\u0bcc\u0bd1\u0bda\u0bdf")
        buf.write("\u0be6\u0bef\u0bf3\u0bf9\u0bfc\u0c00\u0c05\u0c09\u0c0d")
        buf.write("\u0c11\u0c18\u0c2b\u0c31")
        return buf.getvalue()


class tsqlParser ( Parser ):

    grammarFileName = "tsql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'='", "'>'", "'<'", "'!'", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", 
                     "'|='", "'.'", "'_'", "'@'", "'#'", "'$'", "'('", "')'", 
                     "','", "';'", "':'", "'*'", "'/'", "'%'", "'+'", "'-'", 
                     "'~'", "'|'", "'&'", "'^'" ]

    symbolicNames = [ "<INVALID>", "HADR_options", "ADD", "ALL", "ALTER", 
                      "AND", "ANY", "AS", "ASC", "AUTHORIZATION", "BACKUP", 
                      "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", "BY", 
                      "CASCADE", "CASE", "CHANGETABLE", "CHANGES", "CHECK", 
                      "CHECKPOINT", "CLOSE", "CLUSTERED", "COALESCE", "COLLATE", 
                      "COLUMN", "COMMIT", "COMPUTE", "CONSTRAINT", "CONTAINMENT", 
                      "CONTAINS", "CONTAINSTABLE", "CONTINUE", "CONVERT", 
                      "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "DATABASE", 
                      "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", "DELETE", 
                      "DENY", "DESC", "DISK", "DISTINCT", "DISTRIBUTED", 
                      "DOUBLE", "DROP", "DUMP", "ELSE", "END", "ERRLVL", 
                      "ESCAPE", "EXCEPT", "EXECUTE", "EXISTS", "EXIT", "EXTERNAL", 
                      "FETCH", "FILE", "FILENAME", "FILLFACTOR", "FOR", 
                      "FORCESEEK", "FOREIGN", "FREETEXT", "FREETEXTTABLE", 
                      "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", 
                      "HAVING", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", 
                      "IIF", "IF", "IN", "INDEX", "INNER", "INSERT", "INTERSECT", 
                      "INTO", "IS", "JOIN", "KEY", "KILL", "LEFT", "LIKE", 
                      "LINENO", "LOAD", "LOG", "MERGE", "NATIONAL", "NEXT", 
                      "NOCHECK", "NONCLUSTERED", "NONE", "NOT", "NULL", 
                      "NULLIF", "OF", "OFF", "OFFSETS", "ON", "OPEN", "OPENDATASOURCE", 
                      "OPENQUERY", "OPENROWSET", "OPENXML", "OPTION", "OR", 
                      "ORDER", "OUTER", "OVER", "PARTIAL", "PERCENT", "PIVOT", 
                      "PLAN", "PRECISION", "PRIMARY", "PRINT", "PROC", "PROCEDURE", 
                      "PUBLIC", "RAISERROR", "READ", "READTEXT", "RECONFIGURE", 
                      "REFERENCES", "REPLICATION", "RESTORE", "RESTRICT", 
                      "RETURN", "REVERT", "REVOKE", "RIGHT", "ROLLBACK", 
                      "ROWCOUNT", "ROWGUIDCOL", "RULE", "SAVE", "SCHEMA", 
                      "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", 
                      "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", 
                      "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", "SOME", 
                      "STATISTICS", "SYSTEM_USER", "TABLE", "TABLESAMPLE", 
                      "TEXTSIZE", "THEN", "TO", "TOP", "TRAN", "TRANSACTION", 
                      "TRIGGER", "TRUNCATE", "TRY_CONVERT", "TSEQUAL", "UNION", 
                      "UNIQUE", "UNPIVOT", "UPDATE", "UPDATETEXT", "USE", 
                      "USER", "VALUES", "VALUE", "VARYING", "VIEW", "WAITFOR", 
                      "WHEN", "WHERE", "WHILE", "WITH", "WITHIN", "WRITETEXT", 
                      "ABSOLUTE", "AFTER", "ALLOWED", "ALLOW_SNAPSHOT_ISOLATION", 
                      "ANSI_NULLS", "ANSI_NULL_DEFAULT", "ANSI_PADDING", 
                      "ANSI_WARNINGS", "APPLY", "ARITHABORT", "AUTO", "AUTO_CLEANUP", 
                      "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", 
                      "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
                      "AVG", "BASE64", "BINARY_CHECKSUM", "BULK_LOGGED", 
                      "CALLER", "CAST", "CATCH", "CHANGE_RETENTION", "CHANGE_TRACKING", 
                      "CHECKSUM", "CHECKSUM_AGG", "COMMITTED", "COMPATIBILITY_LEVEL", 
                      "CONCAT", "CONCAT_NULL_YIELDS_NULL", "CONTROL", "COOKIE", 
                      "COUNT", "COUNT_BIG", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", 
                      "DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DATE_CORRELATION_OPTIMIZATION", 
                      "DAYS", "DB_CHAINING", "DEFAULT_FULLTEXT_LANGUAGE", 
                      "DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", 
                      "DELETED", "DENSE_RANK", "DIRECTORY_NAME", "DISABLE", 
                      "DISABLED", "DISABLE_BROKER", "DYNAMIC", "EMERGENCY", 
                      "ENABLE_BROKER", "ENCRYPTION", "ERROR_BROKER_CONVERSATIONS", 
                      "EXPAND", "FAST", "FAST_FORWARD", "FILEGROUP", "FILEGROWTH", 
                      "FILESTREAM", "FIRST", "FIRST_VALUE", "FOLLOWING", 
                      "FORCE", "FORCED", "FORWARD_ONLY", "FULLSCAN", "GB", 
                      "GLOBAL", "GO", "GROUPING", "GROUPING_ID", "HADR", 
                      "HASH", "HONOR_BROKER_PRIORITY", "HOURS", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
                      "IMMEDIATE", "IMPERSONATE", "INCREMENTAL", "INSENSITIVE", 
                      "INSERTED", "ISOLATION", "KB", "KEEP", "KEEPFIXED", 
                      "KEYSET", "LAG", "LAST", "LEAD", "LEVEL", "LOCAL", 
                      "LOCK_ESCALATION", "LOGIN", "LOOP", "MARK", "MAX", 
                      "MAXDOP", "MAXRECURSION", "MAXSIZE", "MB", "MEMORY_OPTIMIZED_DATA", 
                      "MIN", "MINUTES", "MIN_ACTIVE_ROWVERSION", "MIXED_PAGE_ALLOCATION", 
                      "MODIFY", "MULTI_USER", "NAME", "NESTED_TRIGGERS", 
                      "NEW_BROKER", "NOCOUNT", "NOEXPAND", "NON_TRANSACTED_ACCESS", 
                      "NORECOMPUTE", "NO_WAIT", "NTILE", "NUMBER", "NUMERIC_ROUNDABORT", 
                      "OFFLINE", "OFFSET", "ONLINE", "ONLY", "OPTIMISTIC", 
                      "OPTIMIZE", "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", 
                      "PARAMETERIZATION", "PARTITION", "PATH", "PRECEDING", 
                      "PRIOR", "PRIVILEGES", "QUOTED_IDENTIFIER", "RANGE", 
                      "RANK", "READONLY", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
                      "READ_WRITE", "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", 
                      "RELATIVE", "REMOTE", "REPEATABLE", "RESTRICTED_USER", 
                      "ROBUST", "ROOT", "ROW", "ROWGUID", "ROWS", "ROW_NUMBER", 
                      "SAMPLE", "SCHEMABINDING", "SCROLL", "SCROLL_LOCKS", 
                      "SECONDS", "SELF", "SERIALIZABLE", "SHOWPLAN", "SIMPLE", 
                      "SINGLE_USER", "SIZE", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
                      "STATIC", "STATS_STREAM", "STDEV", "STDEVP", "SUM", 
                      "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", 
                      "THROW", "TIES", "TIME", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", 
                      "TRUSTWORTHY", "TRY", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", 
                      "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", "UNKNOWN", 
                      "UNLIMITED", "USING", "VAR", "VARP", "VIEWS", "VIEW_METADATA", 
                      "WORK", "XML", "XMLNAMESPACES", "DOLLAR_ACTION", "SPACE", 
                      "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", "SQUARE_BRACKET_ID", 
                      "LOCAL_ID", "DECIMAL", "ID", "STRING", "BINARY", "FLOAT", 
                      "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", 
                      "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", 
                      "DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", 
                      "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", "DIVIDE", 
                      "MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", 
                      "BIT_XOR" ]

    RULE_tsql_file = 0
    RULE_batch = 1
    RULE_sql_clauses = 2
    RULE_sql_clause = 3
    RULE_dml_clause = 4
    RULE_ddl_clause = 5
    RULE_cfl_statement = 6
    RULE_another_statement = 7
    RULE_delete_statement = 8
    RULE_delete_statement_from = 9
    RULE_insert_statement = 10
    RULE_insert_statement_value = 11
    RULE_select_statement = 12
    RULE_update_statement = 13
    RULE_where_clause_dml = 14
    RULE_output_clause = 15
    RULE_output_dml_list_elem = 16
    RULE_output_column_name = 17
    RULE_create_database = 18
    RULE_create_index = 19
    RULE_create_procedure = 20
    RULE_procedure_param = 21
    RULE_procedure_option = 22
    RULE_create_statistics = 23
    RULE_create_table = 24
    RULE_create_view = 25
    RULE_view_attribute = 26
    RULE_alter_table = 27
    RULE_alter_database = 28
    RULE_database_optionspec = 29
    RULE_auto_option = 30
    RULE_change_tracking_option = 31
    RULE_change_tracking_option_list = 32
    RULE_containment_option = 33
    RULE_cursor_option = 34
    RULE_date_correlation_optimization_option = 35
    RULE_db_encryption_option = 36
    RULE_db_state_option = 37
    RULE_db_update_option = 38
    RULE_db_user_access_option = 39
    RULE_delayed_durability_option = 40
    RULE_external_access_option = 41
    RULE_mixed_page_allocation_option = 42
    RULE_parameterization_option = 43
    RULE_recovery_option = 44
    RULE_service_broker_option = 45
    RULE_snapshot_option = 46
    RULE_sql_option = 47
    RULE_target_recovery_time_option = 48
    RULE_termination = 49
    RULE_drop_index = 50
    RULE_drop_procedure = 51
    RULE_drop_statistics = 52
    RULE_drop_table = 53
    RULE_drop_view = 54
    RULE_create_type = 55
    RULE_drop_type = 56
    RULE_rowset_function_limited = 57
    RULE_openquery = 58
    RULE_opendatasource = 59
    RULE_declare_statement = 60
    RULE_cursor_statement = 61
    RULE_execute_statement = 62
    RULE_execute_statement_arg = 63
    RULE_execute_var_string = 64
    RULE_security_statement = 65
    RULE_grant_permission = 66
    RULE_set_statement = 67
    RULE_transaction_statement = 68
    RULE_go_statement = 69
    RULE_use_statement = 70
    RULE_execute_clause = 71
    RULE_declare_local = 72
    RULE_table_type_definition = 73
    RULE_column_def_table_constraints = 74
    RULE_column_def_table_constraint = 75
    RULE_column_definition = 76
    RULE_column_constraint = 77
    RULE_table_constraint = 78
    RULE_index_options = 79
    RULE_index_option = 80
    RULE_declare_cursor = 81
    RULE_declare_set_cursor_common = 82
    RULE_fetch_cursor = 83
    RULE_set_special = 84
    RULE_constant_LOCAL_ID = 85
    RULE_expression = 86
    RULE_constant_expression = 87
    RULE_subquery = 88
    RULE_with_expression = 89
    RULE_common_table_expression = 90
    RULE_update_elem = 91
    RULE_search_condition_list = 92
    RULE_search_condition = 93
    RULE_predicate = 94
    RULE_query_expression = 95
    RULE_union_op = 96
    RULE_query_specification = 97
    RULE_top_clause = 98
    RULE_top_clause_dm = 99
    RULE_order_by_clause = 100
    RULE_fetch_expression = 101
    RULE_for_clause = 102
    RULE_xml_common_directives = 103
    RULE_order_by_expression = 104
    RULE_group_by_item = 105
    RULE_option_clause = 106
    RULE_option = 107
    RULE_optimize_for_arg = 108
    RULE_select_list = 109
    RULE_select_list_elem = 110
    RULE_table_sources = 111
    RULE_table_source = 112
    RULE_table_source_item = 113
    RULE_table_alias = 114
    RULE_change_table = 115
    RULE_join_type = 116
    RULE_table_name_with_hint = 117
    RULE_rowset_function = 118
    RULE_bulk_option = 119
    RULE_derived_table = 120
    RULE_function_call = 121
    RULE_switch_section = 122
    RULE_switch_search_condition_section = 123
    RULE_with_table_hints = 124
    RULE_insert_with_table_hints = 125
    RULE_table_hint = 126
    RULE_index_value = 127
    RULE_column_alias_list = 128
    RULE_column_alias = 129
    RULE_a_star = 130
    RULE_table_value_constructor = 131
    RULE_expression_list = 132
    RULE_value_list = 133
    RULE_next_value_for = 134
    RULE_next_value_for_function = 135
    RULE_ranking_windowed_function = 136
    RULE_aggregate_windowed_function = 137
    RULE_all_distinct = 138
    RULE_over_clause = 139
    RULE_row_or_range_clause = 140
    RULE_window_frame_extent = 141
    RULE_window_frame_bound = 142
    RULE_window_frame_preceding = 143
    RULE_window_frame_following = 144
    RULE_create_database_option = 145
    RULE_database_filestream_option = 146
    RULE_database_file_spec = 147
    RULE_file_group = 148
    RULE_file_spec = 149
    RULE_full_table_name = 150
    RULE_table_name = 151
    RULE_simple_name = 152
    RULE_func_proc_name = 153
    RULE_ddl_object = 154
    RULE_full_column_name = 155
    RULE_column_name_list = 156
    RULE_cursor_name = 157
    RULE_on_off = 158
    RULE_clustered = 159
    RULE_null_notnull = 160
    RULE_scalar_function_name = 161
    RULE_data_type = 162
    RULE_default_value = 163
    RULE_constant = 164
    RULE_sign = 165
    RULE_r_id = 166
    RULE_simple_id = 167
    RULE_comparison_operator = 168
    RULE_assignment_operator = 169
    RULE_file_size = 170

    ruleNames =  [ "tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", 
                   "ddl_clause", "cfl_statement", "another_statement", "delete_statement", 
                   "delete_statement_from", "insert_statement", "insert_statement_value", 
                   "select_statement", "update_statement", "where_clause_dml", 
                   "output_clause", "output_dml_list_elem", "output_column_name", 
                   "create_database", "create_index", "create_procedure", 
                   "procedure_param", "procedure_option", "create_statistics", 
                   "create_table", "create_view", "view_attribute", "alter_table", 
                   "alter_database", "database_optionspec", "auto_option", 
                   "change_tracking_option", "change_tracking_option_list", 
                   "containment_option", "cursor_option", "date_correlation_optimization_option", 
                   "db_encryption_option", "db_state_option", "db_update_option", 
                   "db_user_access_option", "delayed_durability_option", 
                   "external_access_option", "mixed_page_allocation_option", 
                   "parameterization_option", "recovery_option", "service_broker_option", 
                   "snapshot_option", "sql_option", "target_recovery_time_option", 
                   "termination", "drop_index", "drop_procedure", "drop_statistics", 
                   "drop_table", "drop_view", "create_type", "drop_type", 
                   "rowset_function_limited", "openquery", "opendatasource", 
                   "declare_statement", "cursor_statement", "execute_statement", 
                   "execute_statement_arg", "execute_var_string", "security_statement", 
                   "grant_permission", "set_statement", "transaction_statement", 
                   "go_statement", "use_statement", "execute_clause", "declare_local", 
                   "table_type_definition", "column_def_table_constraints", 
                   "column_def_table_constraint", "column_definition", "column_constraint", 
                   "table_constraint", "index_options", "index_option", 
                   "declare_cursor", "declare_set_cursor_common", "fetch_cursor", 
                   "set_special", "constant_LOCAL_ID", "expression", "constant_expression", 
                   "subquery", "with_expression", "common_table_expression", 
                   "update_elem", "search_condition_list", "search_condition", 
                   "predicate", "query_expression", "union_op", "query_specification", 
                   "top_clause", "top_clause_dm", "order_by_clause", "fetch_expression", 
                   "for_clause", "xml_common_directives", "order_by_expression", 
                   "group_by_item", "option_clause", "option", "optimize_for_arg", 
                   "select_list", "select_list_elem", "table_sources", "table_source", 
                   "table_source_item", "table_alias", "change_table", "join_type", 
                   "table_name_with_hint", "rowset_function", "bulk_option", 
                   "derived_table", "function_call", "switch_section", "switch_search_condition_section", 
                   "with_table_hints", "insert_with_table_hints", "table_hint", 
                   "index_value", "column_alias_list", "column_alias", "a_star", 
                   "table_value_constructor", "expression_list", "value_list", 
                   "next_value_for", "next_value_for_function", "ranking_windowed_function", 
                   "aggregate_windowed_function", "all_distinct", "over_clause", 
                   "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
                   "window_frame_preceding", "window_frame_following", "create_database_option", 
                   "database_filestream_option", "database_file_spec", "file_group", 
                   "file_spec", "full_table_name", "table_name", "simple_name", 
                   "func_proc_name", "ddl_object", "full_column_name", "column_name_list", 
                   "cursor_name", "on_off", "clustered", "null_notnull", 
                   "scalar_function_name", "data_type", "default_value", 
                   "constant", "sign", "r_id", "simple_id", "comparison_operator", 
                   "assignment_operator", "file_size" ]

    EOF = Token.EOF
    HADR_options=1
    ADD=2
    ALL=3
    ALTER=4
    AND=5
    ANY=6
    AS=7
    ASC=8
    AUTHORIZATION=9
    BACKUP=10
    BEGIN=11
    BETWEEN=12
    BREAK=13
    BROWSE=14
    BULK=15
    BY=16
    CASCADE=17
    CASE=18
    CHANGETABLE=19
    CHANGES=20
    CHECK=21
    CHECKPOINT=22
    CLOSE=23
    CLUSTERED=24
    COALESCE=25
    COLLATE=26
    COLUMN=27
    COMMIT=28
    COMPUTE=29
    CONSTRAINT=30
    CONTAINMENT=31
    CONTAINS=32
    CONTAINSTABLE=33
    CONTINUE=34
    CONVERT=35
    CREATE=36
    CROSS=37
    CURRENT=38
    CURRENT_DATE=39
    CURRENT_TIME=40
    CURRENT_TIMESTAMP=41
    CURRENT_USER=42
    CURSOR=43
    DATABASE=44
    DBCC=45
    DEALLOCATE=46
    DECLARE=47
    DEFAULT=48
    DELETE=49
    DENY=50
    DESC=51
    DISK=52
    DISTINCT=53
    DISTRIBUTED=54
    DOUBLE=55
    DROP=56
    DUMP=57
    ELSE=58
    END=59
    ERRLVL=60
    ESCAPE=61
    EXCEPT=62
    EXECUTE=63
    EXISTS=64
    EXIT=65
    EXTERNAL=66
    FETCH=67
    FILE=68
    FILENAME=69
    FILLFACTOR=70
    FOR=71
    FORCESEEK=72
    FOREIGN=73
    FREETEXT=74
    FREETEXTTABLE=75
    FROM=76
    FULL=77
    FUNCTION=78
    GOTO=79
    GRANT=80
    GROUP=81
    HAVING=82
    IDENTITY=83
    IDENTITYCOL=84
    IDENTITY_INSERT=85
    IIF=86
    IF=87
    IN=88
    INDEX=89
    INNER=90
    INSERT=91
    INTERSECT=92
    INTO=93
    IS=94
    JOIN=95
    KEY=96
    KILL=97
    LEFT=98
    LIKE=99
    LINENO=100
    LOAD=101
    LOG=102
    MERGE=103
    NATIONAL=104
    NEXT=105
    NOCHECK=106
    NONCLUSTERED=107
    NONE=108
    NOT=109
    NULL=110
    NULLIF=111
    OF=112
    OFF=113
    OFFSETS=114
    ON=115
    OPEN=116
    OPENDATASOURCE=117
    OPENQUERY=118
    OPENROWSET=119
    OPENXML=120
    OPTION=121
    OR=122
    ORDER=123
    OUTER=124
    OVER=125
    PARTIAL=126
    PERCENT=127
    PIVOT=128
    PLAN=129
    PRECISION=130
    PRIMARY=131
    PRINT=132
    PROC=133
    PROCEDURE=134
    PUBLIC=135
    RAISERROR=136
    READ=137
    READTEXT=138
    RECONFIGURE=139
    REFERENCES=140
    REPLICATION=141
    RESTORE=142
    RESTRICT=143
    RETURN=144
    REVERT=145
    REVOKE=146
    RIGHT=147
    ROLLBACK=148
    ROWCOUNT=149
    ROWGUIDCOL=150
    RULE=151
    SAVE=152
    SCHEMA=153
    SECURITYAUDIT=154
    SELECT=155
    SEMANTICKEYPHRASETABLE=156
    SEMANTICSIMILARITYDETAILSTABLE=157
    SEMANTICSIMILARITYTABLE=158
    SESSION_USER=159
    SET=160
    SETUSER=161
    SHUTDOWN=162
    SOME=163
    STATISTICS=164
    SYSTEM_USER=165
    TABLE=166
    TABLESAMPLE=167
    TEXTSIZE=168
    THEN=169
    TO=170
    TOP=171
    TRAN=172
    TRANSACTION=173
    TRIGGER=174
    TRUNCATE=175
    TRY_CONVERT=176
    TSEQUAL=177
    UNION=178
    UNIQUE=179
    UNPIVOT=180
    UPDATE=181
    UPDATETEXT=182
    USE=183
    USER=184
    VALUES=185
    VALUE=186
    VARYING=187
    VIEW=188
    WAITFOR=189
    WHEN=190
    WHERE=191
    WHILE=192
    WITH=193
    WITHIN=194
    WRITETEXT=195
    ABSOLUTE=196
    AFTER=197
    ALLOWED=198
    ALLOW_SNAPSHOT_ISOLATION=199
    ANSI_NULLS=200
    ANSI_NULL_DEFAULT=201
    ANSI_PADDING=202
    ANSI_WARNINGS=203
    APPLY=204
    ARITHABORT=205
    AUTO=206
    AUTO_CLEANUP=207
    AUTO_CLOSE=208
    AUTO_CREATE_STATISTICS=209
    AUTO_SHRINK=210
    AUTO_UPDATE_STATISTICS=211
    AUTO_UPDATE_STATISTICS_ASYNC=212
    AVG=213
    BASE64=214
    BINARY_CHECKSUM=215
    BULK_LOGGED=216
    CALLER=217
    CAST=218
    CATCH=219
    CHANGE_RETENTION=220
    CHANGE_TRACKING=221
    CHECKSUM=222
    CHECKSUM_AGG=223
    COMMITTED=224
    COMPATIBILITY_LEVEL=225
    CONCAT=226
    CONCAT_NULL_YIELDS_NULL=227
    CONTROL=228
    COOKIE=229
    COUNT=230
    COUNT_BIG=231
    CURSOR_CLOSE_ON_COMMIT=232
    CURSOR_DEFAULT=233
    DATEADD=234
    DATEDIFF=235
    DATENAME=236
    DATEPART=237
    DATE_CORRELATION_OPTIMIZATION=238
    DAYS=239
    DB_CHAINING=240
    DEFAULT_FULLTEXT_LANGUAGE=241
    DEFAULT_LANGUAGE=242
    DELAY=243
    DELAYED_DURABILITY=244
    DELETED=245
    DENSE_RANK=246
    DIRECTORY_NAME=247
    DISABLE=248
    DISABLED=249
    DISABLE_BROKER=250
    DYNAMIC=251
    EMERGENCY=252
    ENABLE_BROKER=253
    ENCRYPTION=254
    ERROR_BROKER_CONVERSATIONS=255
    EXPAND=256
    FAST=257
    FAST_FORWARD=258
    FILEGROUP=259
    FILEGROWTH=260
    FILESTREAM=261
    FIRST=262
    FIRST_VALUE=263
    FOLLOWING=264
    FORCE=265
    FORCED=266
    FORWARD_ONLY=267
    FULLSCAN=268
    GB=269
    GLOBAL=270
    GO=271
    GROUPING=272
    GROUPING_ID=273
    HADR=274
    HASH=275
    HONOR_BROKER_PRIORITY=276
    HOURS=277
    IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=278
    IMMEDIATE=279
    IMPERSONATE=280
    INCREMENTAL=281
    INSENSITIVE=282
    INSERTED=283
    ISOLATION=284
    KB=285
    KEEP=286
    KEEPFIXED=287
    KEYSET=288
    LAG=289
    LAST=290
    LEAD=291
    LEVEL=292
    LOCAL=293
    LOCK_ESCALATION=294
    LOGIN=295
    LOOP=296
    MARK=297
    MAX=298
    MAXDOP=299
    MAXRECURSION=300
    MAXSIZE=301
    MB=302
    MEMORY_OPTIMIZED_DATA=303
    MIN=304
    MINUTES=305
    MIN_ACTIVE_ROWVERSION=306
    MIXED_PAGE_ALLOCATION=307
    MODIFY=308
    MULTI_USER=309
    NAME=310
    NESTED_TRIGGERS=311
    NEW_BROKER=312
    NOCOUNT=313
    NOEXPAND=314
    NON_TRANSACTED_ACCESS=315
    NORECOMPUTE=316
    NO_WAIT=317
    NTILE=318
    NUMBER=319
    NUMERIC_ROUNDABORT=320
    OFFLINE=321
    OFFSET=322
    ONLINE=323
    ONLY=324
    OPTIMISTIC=325
    OPTIMIZE=326
    OUT=327
    OUTPUT=328
    OWNER=329
    PAGE_VERIFY=330
    PARAMETERIZATION=331
    PARTITION=332
    PATH=333
    PRECEDING=334
    PRIOR=335
    PRIVILEGES=336
    QUOTED_IDENTIFIER=337
    RANGE=338
    RANK=339
    READONLY=340
    READ_COMMITTED_SNAPSHOT=341
    READ_ONLY=342
    READ_WRITE=343
    RECOMPILE=344
    RECOVERY=345
    RECURSIVE_TRIGGERS=346
    RELATIVE=347
    REMOTE=348
    REPEATABLE=349
    RESTRICTED_USER=350
    ROBUST=351
    ROOT=352
    ROW=353
    ROWGUID=354
    ROWS=355
    ROW_NUMBER=356
    SAMPLE=357
    SCHEMABINDING=358
    SCROLL=359
    SCROLL_LOCKS=360
    SECONDS=361
    SELF=362
    SERIALIZABLE=363
    SHOWPLAN=364
    SIMPLE=365
    SINGLE_USER=366
    SIZE=367
    SNAPSHOT=368
    SPATIAL_WINDOW_MAX_CELLS=369
    STATIC=370
    STATS_STREAM=371
    STDEV=372
    STDEVP=373
    SUM=374
    TAKE=375
    TARGET_RECOVERY_TIME=376
    TB=377
    TEXTIMAGE_ON=378
    THROW=379
    TIES=380
    TIME=381
    TORN_PAGE_DETECTION=382
    TRANSFORM_NOISE_WORDS=383
    TRUSTWORTHY=384
    TRY=385
    TWO_DIGIT_YEAR_CUTOFF=386
    TYPE=387
    TYPE_WARNING=388
    UNBOUNDED=389
    UNCOMMITTED=390
    UNKNOWN=391
    UNLIMITED=392
    USING=393
    VAR=394
    VARP=395
    VIEWS=396
    VIEW_METADATA=397
    WORK=398
    XML=399
    XMLNAMESPACES=400
    DOLLAR_ACTION=401
    SPACE=402
    COMMENT=403
    LINE_COMMENT=404
    DOUBLE_QUOTE_ID=405
    SQUARE_BRACKET_ID=406
    LOCAL_ID=407
    DECIMAL=408
    ID=409
    STRING=410
    BINARY=411
    FLOAT=412
    REAL=413
    EQUAL=414
    GREATER=415
    LESS=416
    EXCLAMATION=417
    PLUS_ASSIGN=418
    MINUS_ASSIGN=419
    MULT_ASSIGN=420
    DIV_ASSIGN=421
    MOD_ASSIGN=422
    AND_ASSIGN=423
    XOR_ASSIGN=424
    OR_ASSIGN=425
    DOT=426
    UNDERLINE=427
    AT=428
    SHARP=429
    DOLLAR=430
    LR_BRACKET=431
    RR_BRACKET=432
    COMMA=433
    SEMI=434
    COLON=435
    STAR=436
    DIVIDE=437
    MODULE=438
    PLUS=439
    MINUS=440
    BIT_NOT=441
    BIT_OR=442
    BIT_AND=443
    BIT_XOR=444

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Tsql_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(tsqlParser.EOF, 0)

        def batch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.BatchContext)
            else:
                return self.getTypedRuleContext(tsqlParser.BatchContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_tsql_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsql_file" ):
                listener.enterTsql_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsql_file" ):
                listener.exitTsql_file(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsql_file" ):
                return visitor.visitTsql_file(self)
            else:
                return visitor.visitChildren(self)




    def tsql_file(self):

        localctx = tsqlParser.Tsql_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_tsql_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (tsqlParser.FETCH - 67)) | (1 << (tsqlParser.FORCESEEK - 67)) | (1 << (tsqlParser.GOTO - 67)) | (1 << (tsqlParser.GRANT - 67)) | (1 << (tsqlParser.IF - 67)) | (1 << (tsqlParser.INSERT - 67)) | (1 << (tsqlParser.NEXT - 67)) | (1 << (tsqlParser.OPEN - 67)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (tsqlParser.PRINT - 132)) | (1 << (tsqlParser.RAISERROR - 132)) | (1 << (tsqlParser.RETURN - 132)) | (1 << (tsqlParser.REVERT - 132)) | (1 << (tsqlParser.ROLLBACK - 132)) | (1 << (tsqlParser.SAVE - 132)) | (1 << (tsqlParser.SELECT - 132)) | (1 << (tsqlParser.SET - 132)) | (1 << (tsqlParser.UPDATE - 132)) | (1 << (tsqlParser.USE - 132)) | (1 << (tsqlParser.WAITFOR - 132)) | (1 << (tsqlParser.WHILE - 132)) | (1 << (tsqlParser.WITH - 132)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DELAY - 196)) | (1 << (tsqlParser.DELETED - 196)) | (1 << (tsqlParser.DENSE_RANK - 196)) | (1 << (tsqlParser.DISABLE - 196)) | (1 << (tsqlParser.DYNAMIC - 196)) | (1 << (tsqlParser.ENCRYPTION - 196)) | (1 << (tsqlParser.EXPAND - 196)) | (1 << (tsqlParser.FAST - 196)) | (1 << (tsqlParser.FAST_FORWARD - 196)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (tsqlParser.FIRST - 262)) | (1 << (tsqlParser.FIRST_VALUE - 262)) | (1 << (tsqlParser.FOLLOWING - 262)) | (1 << (tsqlParser.FORCE - 262)) | (1 << (tsqlParser.FORCED - 262)) | (1 << (tsqlParser.FORWARD_ONLY - 262)) | (1 << (tsqlParser.FULLSCAN - 262)) | (1 << (tsqlParser.GLOBAL - 262)) | (1 << (tsqlParser.GO - 262)) | (1 << (tsqlParser.GROUPING - 262)) | (1 << (tsqlParser.GROUPING_ID - 262)) | (1 << (tsqlParser.HASH - 262)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 262)) | (1 << (tsqlParser.IMPERSONATE - 262)) | (1 << (tsqlParser.INSENSITIVE - 262)) | (1 << (tsqlParser.INSERTED - 262)) | (1 << (tsqlParser.ISOLATION - 262)) | (1 << (tsqlParser.KEEP - 262)) | (1 << (tsqlParser.KEEPFIXED - 262)) | (1 << (tsqlParser.KEYSET - 262)) | (1 << (tsqlParser.LAG - 262)) | (1 << (tsqlParser.LAST - 262)) | (1 << (tsqlParser.LEAD - 262)) | (1 << (tsqlParser.LEVEL - 262)) | (1 << (tsqlParser.LOCAL - 262)) | (1 << (tsqlParser.LOCK_ESCALATION - 262)) | (1 << (tsqlParser.LOGIN - 262)) | (1 << (tsqlParser.LOOP - 262)) | (1 << (tsqlParser.MARK - 262)) | (1 << (tsqlParser.MAX - 262)) | (1 << (tsqlParser.MAXDOP - 262)) | (1 << (tsqlParser.MAXRECURSION - 262)) | (1 << (tsqlParser.MIN - 262)) | (1 << (tsqlParser.MODIFY - 262)) | (1 << (tsqlParser.NAME - 262)) | (1 << (tsqlParser.NOCOUNT - 262)) | (1 << (tsqlParser.NOEXPAND - 262)) | (1 << (tsqlParser.NORECOMPUTE - 262)) | (1 << (tsqlParser.NTILE - 262)) | (1 << (tsqlParser.NUMBER - 262)) | (1 << (tsqlParser.OFFSET - 262)) | (1 << (tsqlParser.ONLINE - 262)) | (1 << (tsqlParser.ONLY - 262)) | (1 << (tsqlParser.OPTIMISTIC - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (tsqlParser.OPTIMIZE - 326)) | (1 << (tsqlParser.OUT - 326)) | (1 << (tsqlParser.OUTPUT - 326)) | (1 << (tsqlParser.OWNER - 326)) | (1 << (tsqlParser.PARAMETERIZATION - 326)) | (1 << (tsqlParser.PARTITION - 326)) | (1 << (tsqlParser.PATH - 326)) | (1 << (tsqlParser.PRECEDING - 326)) | (1 << (tsqlParser.PRIOR - 326)) | (1 << (tsqlParser.PRIVILEGES - 326)) | (1 << (tsqlParser.RANGE - 326)) | (1 << (tsqlParser.RANK - 326)) | (1 << (tsqlParser.READONLY - 326)) | (1 << (tsqlParser.READ_ONLY - 326)) | (1 << (tsqlParser.RECOMPILE - 326)) | (1 << (tsqlParser.RELATIVE - 326)) | (1 << (tsqlParser.REMOTE - 326)) | (1 << (tsqlParser.REPEATABLE - 326)) | (1 << (tsqlParser.ROBUST - 326)) | (1 << (tsqlParser.ROOT - 326)) | (1 << (tsqlParser.ROW - 326)) | (1 << (tsqlParser.ROWGUID - 326)) | (1 << (tsqlParser.ROWS - 326)) | (1 << (tsqlParser.ROW_NUMBER - 326)) | (1 << (tsqlParser.SAMPLE - 326)) | (1 << (tsqlParser.SCHEMABINDING - 326)) | (1 << (tsqlParser.SCROLL - 326)) | (1 << (tsqlParser.SCROLL_LOCKS - 326)) | (1 << (tsqlParser.SELF - 326)) | (1 << (tsqlParser.SERIALIZABLE - 326)) | (1 << (tsqlParser.SIMPLE - 326)) | (1 << (tsqlParser.SIZE - 326)) | (1 << (tsqlParser.SNAPSHOT - 326)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 326)) | (1 << (tsqlParser.STATIC - 326)) | (1 << (tsqlParser.STATS_STREAM - 326)) | (1 << (tsqlParser.STDEV - 326)) | (1 << (tsqlParser.STDEVP - 326)) | (1 << (tsqlParser.SUM - 326)) | (1 << (tsqlParser.TEXTIMAGE_ON - 326)) | (1 << (tsqlParser.THROW - 326)) | (1 << (tsqlParser.TIES - 326)) | (1 << (tsqlParser.TIME - 326)) | (1 << (tsqlParser.TRY - 326)) | (1 << (tsqlParser.TYPE - 326)) | (1 << (tsqlParser.TYPE_WARNING - 326)) | (1 << (tsqlParser.UNBOUNDED - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.UNCOMMITTED - 390)) | (1 << (tsqlParser.UNKNOWN - 390)) | (1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)) | (1 << (tsqlParser.LR_BRACKET - 390)))) != 0):
                self.state = 342
                self.batch()
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 348
            self.match(tsqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def go_statement(self):
            return self.getTypedRuleContext(tsqlParser.Go_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_batch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBatch" ):
                listener.enterBatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBatch" ):
                listener.exitBatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBatch" ):
                return visitor.visitBatch(self)
            else:
                return visitor.visitChildren(self)




    def batch(self):

        localctx = tsqlParser.BatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_batch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.sql_clauses()
            self.state = 352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 351
                self.go_statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.SEMI)
            else:
                return self.getToken(tsqlParser.SEMI, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_sql_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clauses" ):
                listener.enterSql_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clauses" ):
                listener.exitSql_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_clauses" ):
                return visitor.visitSql_clauses(self)
            else:
                return visitor.visitChildren(self)




    def sql_clauses(self):

        localctx = tsqlParser.Sql_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 354
                    self.sql_clause()
                    self.state = 356
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 355
                        self.match(tsqlParser.SEMI)



                else:
                    raise NoViableAltException(self)
                self.state = 360 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_clause(self):
            return self.getTypedRuleContext(tsqlParser.Dml_clauseContext,0)


        def ddl_clause(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_clauseContext,0)


        def cfl_statement(self):
            return self.getTypedRuleContext(tsqlParser.Cfl_statementContext,0)


        def another_statement(self):
            return self.getTypedRuleContext(tsqlParser.Another_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_sql_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clause" ):
                listener.enterSql_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clause" ):
                listener.exitSql_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_clause" ):
                return visitor.visitSql_clause(self)
            else:
                return visitor.visitChildren(self)




    def sql_clause(self):

        localctx = tsqlParser.Sql_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_clause)
        try:
            self.state = 366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 362
                self.dml_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 363
                self.ddl_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 364
                self.cfl_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 365
                self.another_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delete_statement(self):
            return self.getTypedRuleContext(tsqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(tsqlParser.Insert_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(tsqlParser.Update_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_dml_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_clause" ):
                listener.enterDml_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_clause" ):
                listener.exitDml_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_clause" ):
                return visitor.visitDml_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_clause(self):

        localctx = tsqlParser.Dml_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_dml_clause)
        try:
            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 368
                self.delete_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 369
                self.insert_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 370
                self.select_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 371
                self.update_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ddl_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_database(self):
            return self.getTypedRuleContext(tsqlParser.Create_databaseContext,0)


        def create_index(self):
            return self.getTypedRuleContext(tsqlParser.Create_indexContext,0)


        def create_procedure(self):
            return self.getTypedRuleContext(tsqlParser.Create_procedureContext,0)


        def create_statistics(self):
            return self.getTypedRuleContext(tsqlParser.Create_statisticsContext,0)


        def create_table(self):
            return self.getTypedRuleContext(tsqlParser.Create_tableContext,0)


        def create_type(self):
            return self.getTypedRuleContext(tsqlParser.Create_typeContext,0)


        def create_view(self):
            return self.getTypedRuleContext(tsqlParser.Create_viewContext,0)


        def alter_table(self):
            return self.getTypedRuleContext(tsqlParser.Alter_tableContext,0)


        def alter_database(self):
            return self.getTypedRuleContext(tsqlParser.Alter_databaseContext,0)


        def drop_index(self):
            return self.getTypedRuleContext(tsqlParser.Drop_indexContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(tsqlParser.Drop_procedureContext,0)


        def drop_statistics(self):
            return self.getTypedRuleContext(tsqlParser.Drop_statisticsContext,0)


        def drop_table(self):
            return self.getTypedRuleContext(tsqlParser.Drop_tableContext,0)


        def drop_type(self):
            return self.getTypedRuleContext(tsqlParser.Drop_typeContext,0)


        def drop_view(self):
            return self.getTypedRuleContext(tsqlParser.Drop_viewContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_clause" ):
                listener.enterDdl_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_clause" ):
                listener.exitDdl_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdl_clause" ):
                return visitor.visitDdl_clause(self)
            else:
                return visitor.visitChildren(self)




    def ddl_clause(self):

        localctx = tsqlParser.Ddl_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_ddl_clause)
        try:
            self.state = 389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.create_database()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 375
                self.create_index()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 376
                self.create_procedure()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 377
                self.create_statistics()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 378
                self.create_table()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 379
                self.create_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 380
                self.create_view()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 381
                self.alter_table()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 382
                self.alter_database()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 383
                self.drop_index()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 384
                self.drop_procedure()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 385
                self.drop_statistics()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 386
                self.drop_table()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 387
                self.drop_type()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 388
                self.drop_view()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cfl_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_cfl_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Waitfor_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WAITFOR(self):
            return self.getToken(tsqlParser.WAITFOR, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def DELAY(self):
            return self.getToken(tsqlParser.DELAY, 0)
        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitfor_statement" ):
                listener.enterWaitfor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitfor_statement" ):
                listener.exitWaitfor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaitfor_statement" ):
                return visitor.visitWaitfor_statement(self)
            else:
                return visitor.visitChildren(self)


    class Print_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PRINT(self):
            return self.getToken(tsqlParser.PRINT, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_statement" ):
                listener.enterPrint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_statement" ):
                listener.exitPrint_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_statement" ):
                return visitor.visitPrint_statement(self)
            else:
                return visitor.visitChildren(self)


    class Continue_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(tsqlParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_statement" ):
                return visitor.visitContinue_statement(self)
            else:
                return visitor.visitChildren(self)


    class If_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.if_expr = None # Sql_clauseContext
            self.else_expr = None # Sql_clauseContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(tsqlParser.IF, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)

        def ELSE(self):
            return self.getToken(tsqlParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)


    class Raiseerror_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.msg = None # Token
            self.severity = None # Constant_LOCAL_IDContext
            self.state = None # Constant_LOCAL_IDContext
            self.copyFrom(ctx)

        def RAISERROR(self):
            return self.getToken(tsqlParser.RAISERROR, 0)
        def constant_LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Constant_LOCAL_IDContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,i)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)
        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)
        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseerror_statement" ):
                listener.enterRaiseerror_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseerror_statement" ):
                listener.exitRaiseerror_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaiseerror_statement" ):
                return visitor.visitRaiseerror_statement(self)
            else:
                return visitor.visitChildren(self)


    class Throw_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.error_number = None # Token
            self.message = None # Token
            self.state = None # Token
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(tsqlParser.THROW, 0)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)
        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LOCAL_ID)
            else:
                return self.getToken(tsqlParser.LOCAL_ID, i)
        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_statement" ):
                listener.enterThrow_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_statement" ):
                listener.exitThrow_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrow_statement" ):
                return visitor.visitThrow_statement(self)
            else:
                return visitor.visitChildren(self)


    class Try_catch_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.try_clauses = None # Sql_clausesContext
            self.catch_clauses = None # Sql_clausesContext
            self.copyFrom(ctx)

        def BEGIN(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.BEGIN)
            else:
                return self.getToken(tsqlParser.BEGIN, i)
        def TRY(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.TRY)
            else:
                return self.getToken(tsqlParser.TRY, i)
        def END(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.END)
            else:
                return self.getToken(tsqlParser.END, i)
        def CATCH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.CATCH)
            else:
                return self.getToken(tsqlParser.CATCH, i)
        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_catch_statement" ):
                listener.enterTry_catch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_catch_statement" ):
                listener.exitTry_catch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_catch_statement" ):
                return visitor.visitTry_catch_statement(self)
            else:
                return visitor.visitChildren(self)


    class While_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(tsqlParser.WHILE, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def sql_clause(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,0)

        def BREAK(self):
            return self.getToken(tsqlParser.BREAK, 0)
        def CONTINUE(self):
            return self.getToken(tsqlParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_statement" ):
                return visitor.visitWhile_statement(self)
            else:
                return visitor.visitChildren(self)


    class Block_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)
        def END(self):
            return self.getToken(tsqlParser.END, 0)
        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_statement" ):
                listener.enterBlock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_statement" ):
                listener.exitBlock_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock_statement" ):
                return visitor.visitBlock_statement(self)
            else:
                return visitor.visitChildren(self)


    class Break_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(tsqlParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_statement" ):
                return visitor.visitBreak_statement(self)
            else:
                return visitor.visitChildren(self)


    class Goto_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GOTO(self):
            return self.getToken(tsqlParser.GOTO, 0)
        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoto_statement" ):
                return visitor.visitGoto_statement(self)
            else:
                return visitor.visitChildren(self)


    class Return_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_statement" ):
                return visitor.visitReturn_statement(self)
            else:
                return visitor.visitChildren(self)



    def cfl_statement(self):

        localctx = tsqlParser.Cfl_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_cfl_statement)
        self._la = 0 # Token type
        try:
            self.state = 516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Block_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 391
                self.match(tsqlParser.BEGIN)
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 392
                    self.match(tsqlParser.SEMI)


                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (tsqlParser.FETCH - 67)) | (1 << (tsqlParser.FORCESEEK - 67)) | (1 << (tsqlParser.GOTO - 67)) | (1 << (tsqlParser.GRANT - 67)) | (1 << (tsqlParser.IF - 67)) | (1 << (tsqlParser.INSERT - 67)) | (1 << (tsqlParser.NEXT - 67)) | (1 << (tsqlParser.OPEN - 67)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (tsqlParser.PRINT - 132)) | (1 << (tsqlParser.RAISERROR - 132)) | (1 << (tsqlParser.RETURN - 132)) | (1 << (tsqlParser.REVERT - 132)) | (1 << (tsqlParser.ROLLBACK - 132)) | (1 << (tsqlParser.SAVE - 132)) | (1 << (tsqlParser.SELECT - 132)) | (1 << (tsqlParser.SET - 132)) | (1 << (tsqlParser.UPDATE - 132)) | (1 << (tsqlParser.USE - 132)) | (1 << (tsqlParser.WAITFOR - 132)) | (1 << (tsqlParser.WHILE - 132)) | (1 << (tsqlParser.WITH - 132)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DELAY - 196)) | (1 << (tsqlParser.DELETED - 196)) | (1 << (tsqlParser.DENSE_RANK - 196)) | (1 << (tsqlParser.DISABLE - 196)) | (1 << (tsqlParser.DYNAMIC - 196)) | (1 << (tsqlParser.ENCRYPTION - 196)) | (1 << (tsqlParser.EXPAND - 196)) | (1 << (tsqlParser.FAST - 196)) | (1 << (tsqlParser.FAST_FORWARD - 196)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (tsqlParser.FIRST - 262)) | (1 << (tsqlParser.FIRST_VALUE - 262)) | (1 << (tsqlParser.FOLLOWING - 262)) | (1 << (tsqlParser.FORCE - 262)) | (1 << (tsqlParser.FORCED - 262)) | (1 << (tsqlParser.FORWARD_ONLY - 262)) | (1 << (tsqlParser.FULLSCAN - 262)) | (1 << (tsqlParser.GLOBAL - 262)) | (1 << (tsqlParser.GO - 262)) | (1 << (tsqlParser.GROUPING - 262)) | (1 << (tsqlParser.GROUPING_ID - 262)) | (1 << (tsqlParser.HASH - 262)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 262)) | (1 << (tsqlParser.IMPERSONATE - 262)) | (1 << (tsqlParser.INSENSITIVE - 262)) | (1 << (tsqlParser.INSERTED - 262)) | (1 << (tsqlParser.ISOLATION - 262)) | (1 << (tsqlParser.KEEP - 262)) | (1 << (tsqlParser.KEEPFIXED - 262)) | (1 << (tsqlParser.KEYSET - 262)) | (1 << (tsqlParser.LAG - 262)) | (1 << (tsqlParser.LAST - 262)) | (1 << (tsqlParser.LEAD - 262)) | (1 << (tsqlParser.LEVEL - 262)) | (1 << (tsqlParser.LOCAL - 262)) | (1 << (tsqlParser.LOCK_ESCALATION - 262)) | (1 << (tsqlParser.LOGIN - 262)) | (1 << (tsqlParser.LOOP - 262)) | (1 << (tsqlParser.MARK - 262)) | (1 << (tsqlParser.MAX - 262)) | (1 << (tsqlParser.MAXDOP - 262)) | (1 << (tsqlParser.MAXRECURSION - 262)) | (1 << (tsqlParser.MIN - 262)) | (1 << (tsqlParser.MODIFY - 262)) | (1 << (tsqlParser.NAME - 262)) | (1 << (tsqlParser.NOCOUNT - 262)) | (1 << (tsqlParser.NOEXPAND - 262)) | (1 << (tsqlParser.NORECOMPUTE - 262)) | (1 << (tsqlParser.NTILE - 262)) | (1 << (tsqlParser.NUMBER - 262)) | (1 << (tsqlParser.OFFSET - 262)) | (1 << (tsqlParser.ONLINE - 262)) | (1 << (tsqlParser.ONLY - 262)) | (1 << (tsqlParser.OPTIMISTIC - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (tsqlParser.OPTIMIZE - 326)) | (1 << (tsqlParser.OUT - 326)) | (1 << (tsqlParser.OUTPUT - 326)) | (1 << (tsqlParser.OWNER - 326)) | (1 << (tsqlParser.PARAMETERIZATION - 326)) | (1 << (tsqlParser.PARTITION - 326)) | (1 << (tsqlParser.PATH - 326)) | (1 << (tsqlParser.PRECEDING - 326)) | (1 << (tsqlParser.PRIOR - 326)) | (1 << (tsqlParser.PRIVILEGES - 326)) | (1 << (tsqlParser.RANGE - 326)) | (1 << (tsqlParser.RANK - 326)) | (1 << (tsqlParser.READONLY - 326)) | (1 << (tsqlParser.READ_ONLY - 326)) | (1 << (tsqlParser.RECOMPILE - 326)) | (1 << (tsqlParser.RELATIVE - 326)) | (1 << (tsqlParser.REMOTE - 326)) | (1 << (tsqlParser.REPEATABLE - 326)) | (1 << (tsqlParser.ROBUST - 326)) | (1 << (tsqlParser.ROOT - 326)) | (1 << (tsqlParser.ROW - 326)) | (1 << (tsqlParser.ROWGUID - 326)) | (1 << (tsqlParser.ROWS - 326)) | (1 << (tsqlParser.ROW_NUMBER - 326)) | (1 << (tsqlParser.SAMPLE - 326)) | (1 << (tsqlParser.SCHEMABINDING - 326)) | (1 << (tsqlParser.SCROLL - 326)) | (1 << (tsqlParser.SCROLL_LOCKS - 326)) | (1 << (tsqlParser.SELF - 326)) | (1 << (tsqlParser.SERIALIZABLE - 326)) | (1 << (tsqlParser.SIMPLE - 326)) | (1 << (tsqlParser.SIZE - 326)) | (1 << (tsqlParser.SNAPSHOT - 326)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 326)) | (1 << (tsqlParser.STATIC - 326)) | (1 << (tsqlParser.STATS_STREAM - 326)) | (1 << (tsqlParser.STDEV - 326)) | (1 << (tsqlParser.STDEVP - 326)) | (1 << (tsqlParser.SUM - 326)) | (1 << (tsqlParser.TEXTIMAGE_ON - 326)) | (1 << (tsqlParser.THROW - 326)) | (1 << (tsqlParser.TIES - 326)) | (1 << (tsqlParser.TIME - 326)) | (1 << (tsqlParser.TRY - 326)) | (1 << (tsqlParser.TYPE - 326)) | (1 << (tsqlParser.TYPE_WARNING - 326)) | (1 << (tsqlParser.UNBOUNDED - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.UNCOMMITTED - 390)) | (1 << (tsqlParser.UNKNOWN - 390)) | (1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)) | (1 << (tsqlParser.LR_BRACKET - 390)))) != 0):
                    self.state = 395
                    self.sql_clauses()


                self.state = 398
                self.match(tsqlParser.END)
                self.state = 400
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 399
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                localctx = tsqlParser.Break_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 402
                self.match(tsqlParser.BREAK)
                self.state = 404
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 403
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                localctx = tsqlParser.Continue_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 406
                self.match(tsqlParser.CONTINUE)
                self.state = 408
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 407
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                localctx = tsqlParser.Goto_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 410
                self.match(tsqlParser.GOTO)
                self.state = 411
                self.r_id()
                self.state = 413
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 412
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 5:
                localctx = tsqlParser.Goto_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 415
                self.r_id()
                self.state = 416
                self.match(tsqlParser.COLON)
                self.state = 418
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 417
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 6:
                localctx = tsqlParser.If_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 420
                self.match(tsqlParser.IF)
                self.state = 421
                self.search_condition(0)
                self.state = 422
                localctx.if_expr = self.sql_clause()
                self.state = 425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 423
                    self.match(tsqlParser.ELSE)
                    self.state = 424
                    localctx.else_expr = self.sql_clause()


                self.state = 428
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 427
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 7:
                localctx = tsqlParser.Return_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 430
                self.match(tsqlParser.RETURN)
                self.state = 432
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 431
                    self.expression(0)


                self.state = 435
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 434
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 8:
                localctx = tsqlParser.Throw_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 437
                self.match(tsqlParser.THROW)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL:
                    self.state = 438
                    localctx.error_number = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                        localctx.error_number = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 439
                    self.match(tsqlParser.COMMA)
                    self.state = 440
                    localctx.message = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.STRING):
                        localctx.message = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 441
                    self.match(tsqlParser.COMMA)
                    self.state = 442
                    localctx.state = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                        localctx.state = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 445
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 9:
                localctx = tsqlParser.Try_catch_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 448
                self.match(tsqlParser.BEGIN)
                self.state = 449
                self.match(tsqlParser.TRY)
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 450
                    self.match(tsqlParser.SEMI)


                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (tsqlParser.FETCH - 67)) | (1 << (tsqlParser.FORCESEEK - 67)) | (1 << (tsqlParser.GOTO - 67)) | (1 << (tsqlParser.GRANT - 67)) | (1 << (tsqlParser.IF - 67)) | (1 << (tsqlParser.INSERT - 67)) | (1 << (tsqlParser.NEXT - 67)) | (1 << (tsqlParser.OPEN - 67)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (tsqlParser.PRINT - 132)) | (1 << (tsqlParser.RAISERROR - 132)) | (1 << (tsqlParser.RETURN - 132)) | (1 << (tsqlParser.REVERT - 132)) | (1 << (tsqlParser.ROLLBACK - 132)) | (1 << (tsqlParser.SAVE - 132)) | (1 << (tsqlParser.SELECT - 132)) | (1 << (tsqlParser.SET - 132)) | (1 << (tsqlParser.UPDATE - 132)) | (1 << (tsqlParser.USE - 132)) | (1 << (tsqlParser.WAITFOR - 132)) | (1 << (tsqlParser.WHILE - 132)) | (1 << (tsqlParser.WITH - 132)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DELAY - 196)) | (1 << (tsqlParser.DELETED - 196)) | (1 << (tsqlParser.DENSE_RANK - 196)) | (1 << (tsqlParser.DISABLE - 196)) | (1 << (tsqlParser.DYNAMIC - 196)) | (1 << (tsqlParser.ENCRYPTION - 196)) | (1 << (tsqlParser.EXPAND - 196)) | (1 << (tsqlParser.FAST - 196)) | (1 << (tsqlParser.FAST_FORWARD - 196)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (tsqlParser.FIRST - 262)) | (1 << (tsqlParser.FIRST_VALUE - 262)) | (1 << (tsqlParser.FOLLOWING - 262)) | (1 << (tsqlParser.FORCE - 262)) | (1 << (tsqlParser.FORCED - 262)) | (1 << (tsqlParser.FORWARD_ONLY - 262)) | (1 << (tsqlParser.FULLSCAN - 262)) | (1 << (tsqlParser.GLOBAL - 262)) | (1 << (tsqlParser.GO - 262)) | (1 << (tsqlParser.GROUPING - 262)) | (1 << (tsqlParser.GROUPING_ID - 262)) | (1 << (tsqlParser.HASH - 262)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 262)) | (1 << (tsqlParser.IMPERSONATE - 262)) | (1 << (tsqlParser.INSENSITIVE - 262)) | (1 << (tsqlParser.INSERTED - 262)) | (1 << (tsqlParser.ISOLATION - 262)) | (1 << (tsqlParser.KEEP - 262)) | (1 << (tsqlParser.KEEPFIXED - 262)) | (1 << (tsqlParser.KEYSET - 262)) | (1 << (tsqlParser.LAG - 262)) | (1 << (tsqlParser.LAST - 262)) | (1 << (tsqlParser.LEAD - 262)) | (1 << (tsqlParser.LEVEL - 262)) | (1 << (tsqlParser.LOCAL - 262)) | (1 << (tsqlParser.LOCK_ESCALATION - 262)) | (1 << (tsqlParser.LOGIN - 262)) | (1 << (tsqlParser.LOOP - 262)) | (1 << (tsqlParser.MARK - 262)) | (1 << (tsqlParser.MAX - 262)) | (1 << (tsqlParser.MAXDOP - 262)) | (1 << (tsqlParser.MAXRECURSION - 262)) | (1 << (tsqlParser.MIN - 262)) | (1 << (tsqlParser.MODIFY - 262)) | (1 << (tsqlParser.NAME - 262)) | (1 << (tsqlParser.NOCOUNT - 262)) | (1 << (tsqlParser.NOEXPAND - 262)) | (1 << (tsqlParser.NORECOMPUTE - 262)) | (1 << (tsqlParser.NTILE - 262)) | (1 << (tsqlParser.NUMBER - 262)) | (1 << (tsqlParser.OFFSET - 262)) | (1 << (tsqlParser.ONLINE - 262)) | (1 << (tsqlParser.ONLY - 262)) | (1 << (tsqlParser.OPTIMISTIC - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (tsqlParser.OPTIMIZE - 326)) | (1 << (tsqlParser.OUT - 326)) | (1 << (tsqlParser.OUTPUT - 326)) | (1 << (tsqlParser.OWNER - 326)) | (1 << (tsqlParser.PARAMETERIZATION - 326)) | (1 << (tsqlParser.PARTITION - 326)) | (1 << (tsqlParser.PATH - 326)) | (1 << (tsqlParser.PRECEDING - 326)) | (1 << (tsqlParser.PRIOR - 326)) | (1 << (tsqlParser.PRIVILEGES - 326)) | (1 << (tsqlParser.RANGE - 326)) | (1 << (tsqlParser.RANK - 326)) | (1 << (tsqlParser.READONLY - 326)) | (1 << (tsqlParser.READ_ONLY - 326)) | (1 << (tsqlParser.RECOMPILE - 326)) | (1 << (tsqlParser.RELATIVE - 326)) | (1 << (tsqlParser.REMOTE - 326)) | (1 << (tsqlParser.REPEATABLE - 326)) | (1 << (tsqlParser.ROBUST - 326)) | (1 << (tsqlParser.ROOT - 326)) | (1 << (tsqlParser.ROW - 326)) | (1 << (tsqlParser.ROWGUID - 326)) | (1 << (tsqlParser.ROWS - 326)) | (1 << (tsqlParser.ROW_NUMBER - 326)) | (1 << (tsqlParser.SAMPLE - 326)) | (1 << (tsqlParser.SCHEMABINDING - 326)) | (1 << (tsqlParser.SCROLL - 326)) | (1 << (tsqlParser.SCROLL_LOCKS - 326)) | (1 << (tsqlParser.SELF - 326)) | (1 << (tsqlParser.SERIALIZABLE - 326)) | (1 << (tsqlParser.SIMPLE - 326)) | (1 << (tsqlParser.SIZE - 326)) | (1 << (tsqlParser.SNAPSHOT - 326)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 326)) | (1 << (tsqlParser.STATIC - 326)) | (1 << (tsqlParser.STATS_STREAM - 326)) | (1 << (tsqlParser.STDEV - 326)) | (1 << (tsqlParser.STDEVP - 326)) | (1 << (tsqlParser.SUM - 326)) | (1 << (tsqlParser.TEXTIMAGE_ON - 326)) | (1 << (tsqlParser.THROW - 326)) | (1 << (tsqlParser.TIES - 326)) | (1 << (tsqlParser.TIME - 326)) | (1 << (tsqlParser.TRY - 326)) | (1 << (tsqlParser.TYPE - 326)) | (1 << (tsqlParser.TYPE_WARNING - 326)) | (1 << (tsqlParser.UNBOUNDED - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.UNCOMMITTED - 390)) | (1 << (tsqlParser.UNKNOWN - 390)) | (1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)) | (1 << (tsqlParser.LR_BRACKET - 390)))) != 0):
                    self.state = 453
                    localctx.try_clauses = self.sql_clauses()


                self.state = 456
                self.match(tsqlParser.END)
                self.state = 457
                self.match(tsqlParser.TRY)
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 458
                    self.match(tsqlParser.SEMI)


                self.state = 461
                self.match(tsqlParser.BEGIN)
                self.state = 462
                self.match(tsqlParser.CATCH)
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 463
                    self.match(tsqlParser.SEMI)


                self.state = 467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (tsqlParser.FETCH - 67)) | (1 << (tsqlParser.FORCESEEK - 67)) | (1 << (tsqlParser.GOTO - 67)) | (1 << (tsqlParser.GRANT - 67)) | (1 << (tsqlParser.IF - 67)) | (1 << (tsqlParser.INSERT - 67)) | (1 << (tsqlParser.NEXT - 67)) | (1 << (tsqlParser.OPEN - 67)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (tsqlParser.PRINT - 132)) | (1 << (tsqlParser.RAISERROR - 132)) | (1 << (tsqlParser.RETURN - 132)) | (1 << (tsqlParser.REVERT - 132)) | (1 << (tsqlParser.ROLLBACK - 132)) | (1 << (tsqlParser.SAVE - 132)) | (1 << (tsqlParser.SELECT - 132)) | (1 << (tsqlParser.SET - 132)) | (1 << (tsqlParser.UPDATE - 132)) | (1 << (tsqlParser.USE - 132)) | (1 << (tsqlParser.WAITFOR - 132)) | (1 << (tsqlParser.WHILE - 132)) | (1 << (tsqlParser.WITH - 132)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DELAY - 196)) | (1 << (tsqlParser.DELETED - 196)) | (1 << (tsqlParser.DENSE_RANK - 196)) | (1 << (tsqlParser.DISABLE - 196)) | (1 << (tsqlParser.DYNAMIC - 196)) | (1 << (tsqlParser.ENCRYPTION - 196)) | (1 << (tsqlParser.EXPAND - 196)) | (1 << (tsqlParser.FAST - 196)) | (1 << (tsqlParser.FAST_FORWARD - 196)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (tsqlParser.FIRST - 262)) | (1 << (tsqlParser.FIRST_VALUE - 262)) | (1 << (tsqlParser.FOLLOWING - 262)) | (1 << (tsqlParser.FORCE - 262)) | (1 << (tsqlParser.FORCED - 262)) | (1 << (tsqlParser.FORWARD_ONLY - 262)) | (1 << (tsqlParser.FULLSCAN - 262)) | (1 << (tsqlParser.GLOBAL - 262)) | (1 << (tsqlParser.GO - 262)) | (1 << (tsqlParser.GROUPING - 262)) | (1 << (tsqlParser.GROUPING_ID - 262)) | (1 << (tsqlParser.HASH - 262)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 262)) | (1 << (tsqlParser.IMPERSONATE - 262)) | (1 << (tsqlParser.INSENSITIVE - 262)) | (1 << (tsqlParser.INSERTED - 262)) | (1 << (tsqlParser.ISOLATION - 262)) | (1 << (tsqlParser.KEEP - 262)) | (1 << (tsqlParser.KEEPFIXED - 262)) | (1 << (tsqlParser.KEYSET - 262)) | (1 << (tsqlParser.LAG - 262)) | (1 << (tsqlParser.LAST - 262)) | (1 << (tsqlParser.LEAD - 262)) | (1 << (tsqlParser.LEVEL - 262)) | (1 << (tsqlParser.LOCAL - 262)) | (1 << (tsqlParser.LOCK_ESCALATION - 262)) | (1 << (tsqlParser.LOGIN - 262)) | (1 << (tsqlParser.LOOP - 262)) | (1 << (tsqlParser.MARK - 262)) | (1 << (tsqlParser.MAX - 262)) | (1 << (tsqlParser.MAXDOP - 262)) | (1 << (tsqlParser.MAXRECURSION - 262)) | (1 << (tsqlParser.MIN - 262)) | (1 << (tsqlParser.MODIFY - 262)) | (1 << (tsqlParser.NAME - 262)) | (1 << (tsqlParser.NOCOUNT - 262)) | (1 << (tsqlParser.NOEXPAND - 262)) | (1 << (tsqlParser.NORECOMPUTE - 262)) | (1 << (tsqlParser.NTILE - 262)) | (1 << (tsqlParser.NUMBER - 262)) | (1 << (tsqlParser.OFFSET - 262)) | (1 << (tsqlParser.ONLINE - 262)) | (1 << (tsqlParser.ONLY - 262)) | (1 << (tsqlParser.OPTIMISTIC - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (tsqlParser.OPTIMIZE - 326)) | (1 << (tsqlParser.OUT - 326)) | (1 << (tsqlParser.OUTPUT - 326)) | (1 << (tsqlParser.OWNER - 326)) | (1 << (tsqlParser.PARAMETERIZATION - 326)) | (1 << (tsqlParser.PARTITION - 326)) | (1 << (tsqlParser.PATH - 326)) | (1 << (tsqlParser.PRECEDING - 326)) | (1 << (tsqlParser.PRIOR - 326)) | (1 << (tsqlParser.PRIVILEGES - 326)) | (1 << (tsqlParser.RANGE - 326)) | (1 << (tsqlParser.RANK - 326)) | (1 << (tsqlParser.READONLY - 326)) | (1 << (tsqlParser.READ_ONLY - 326)) | (1 << (tsqlParser.RECOMPILE - 326)) | (1 << (tsqlParser.RELATIVE - 326)) | (1 << (tsqlParser.REMOTE - 326)) | (1 << (tsqlParser.REPEATABLE - 326)) | (1 << (tsqlParser.ROBUST - 326)) | (1 << (tsqlParser.ROOT - 326)) | (1 << (tsqlParser.ROW - 326)) | (1 << (tsqlParser.ROWGUID - 326)) | (1 << (tsqlParser.ROWS - 326)) | (1 << (tsqlParser.ROW_NUMBER - 326)) | (1 << (tsqlParser.SAMPLE - 326)) | (1 << (tsqlParser.SCHEMABINDING - 326)) | (1 << (tsqlParser.SCROLL - 326)) | (1 << (tsqlParser.SCROLL_LOCKS - 326)) | (1 << (tsqlParser.SELF - 326)) | (1 << (tsqlParser.SERIALIZABLE - 326)) | (1 << (tsqlParser.SIMPLE - 326)) | (1 << (tsqlParser.SIZE - 326)) | (1 << (tsqlParser.SNAPSHOT - 326)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 326)) | (1 << (tsqlParser.STATIC - 326)) | (1 << (tsqlParser.STATS_STREAM - 326)) | (1 << (tsqlParser.STDEV - 326)) | (1 << (tsqlParser.STDEVP - 326)) | (1 << (tsqlParser.SUM - 326)) | (1 << (tsqlParser.TEXTIMAGE_ON - 326)) | (1 << (tsqlParser.THROW - 326)) | (1 << (tsqlParser.TIES - 326)) | (1 << (tsqlParser.TIME - 326)) | (1 << (tsqlParser.TRY - 326)) | (1 << (tsqlParser.TYPE - 326)) | (1 << (tsqlParser.TYPE_WARNING - 326)) | (1 << (tsqlParser.UNBOUNDED - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.UNCOMMITTED - 390)) | (1 << (tsqlParser.UNKNOWN - 390)) | (1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)) | (1 << (tsqlParser.LR_BRACKET - 390)))) != 0):
                    self.state = 466
                    localctx.catch_clauses = self.sql_clauses()


                self.state = 469
                self.match(tsqlParser.END)
                self.state = 470
                self.match(tsqlParser.CATCH)
                self.state = 472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 471
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 10:
                localctx = tsqlParser.Waitfor_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 474
                self.match(tsqlParser.WAITFOR)
                self.state = 475
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DELAY or _la==tsqlParser.TIME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 476
                self.expression(0)
                self.state = 478
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 477
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 11:
                localctx = tsqlParser.While_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 480
                self.match(tsqlParser.WHILE)
                self.state = 481
                self.search_condition(0)
                self.state = 491
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 482
                    self.sql_clause()
                    pass

                elif la_ == 2:
                    self.state = 483
                    self.match(tsqlParser.BREAK)
                    self.state = 485
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                    if la_ == 1:
                        self.state = 484
                        self.match(tsqlParser.SEMI)


                    pass

                elif la_ == 3:
                    self.state = 487
                    self.match(tsqlParser.CONTINUE)
                    self.state = 489
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        self.state = 488
                        self.match(tsqlParser.SEMI)


                    pass


                pass

            elif la_ == 12:
                localctx = tsqlParser.Print_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 493
                self.match(tsqlParser.PRINT)
                self.state = 494
                self.expression(0)
                self.state = 496
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 495
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 13:
                localctx = tsqlParser.Raiseerror_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 498
                self.match(tsqlParser.RAISERROR)
                self.state = 499
                self.match(tsqlParser.LR_BRACKET)
                self.state = 500
                localctx.msg = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & ((1 << (tsqlParser.LOCAL_ID - 407)) | (1 << (tsqlParser.DECIMAL - 407)) | (1 << (tsqlParser.STRING - 407)))) != 0)):
                    localctx.msg = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 501
                self.match(tsqlParser.COMMA)
                self.state = 502
                localctx.severity = self.constant_LOCAL_ID()
                self.state = 503
                self.match(tsqlParser.COMMA)
                self.state = 504
                localctx.state = self.constant_LOCAL_ID()
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 505
                    self.match(tsqlParser.COMMA)
                    self.state = 506
                    self.constant_LOCAL_ID()
                    self.state = 511
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 512
                self.match(tsqlParser.RR_BRACKET)
                self.state = 514
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 513
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Another_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declare_statement(self):
            return self.getTypedRuleContext(tsqlParser.Declare_statementContext,0)


        def cursor_statement(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_statementContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(tsqlParser.Execute_statementContext,0)


        def security_statement(self):
            return self.getTypedRuleContext(tsqlParser.Security_statementContext,0)


        def set_statement(self):
            return self.getTypedRuleContext(tsqlParser.Set_statementContext,0)


        def transaction_statement(self):
            return self.getTypedRuleContext(tsqlParser.Transaction_statementContext,0)


        def use_statement(self):
            return self.getTypedRuleContext(tsqlParser.Use_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_another_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnother_statement" ):
                listener.enterAnother_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnother_statement" ):
                listener.exitAnother_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnother_statement" ):
                return visitor.visitAnother_statement(self)
            else:
                return visitor.visitChildren(self)




    def another_statement(self):

        localctx = tsqlParser.Another_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_another_statement)
        try:
            self.state = 525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 518
                self.declare_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 519
                self.cursor_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 520
                self.execute_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 521
                self.security_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 522
                self.set_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 523
                self.transaction_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 524
                self.use_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(tsqlParser.DELETE, 0)

        def delete_statement_from(self):
            return self.getTypedRuleContext(tsqlParser.Delete_statement_fromContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def top_clause_dm(self):
            return self.getTypedRuleContext(tsqlParser.Top_clause_dmContext,0)


        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FROM)
            else:
                return self.getToken(tsqlParser.FROM, i)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def where_clause_dml(self):
            return self.getTypedRuleContext(tsqlParser.Where_clause_dmlContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement" ):
                return visitor.visitDelete_statement(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement(self):

        localctx = tsqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 527
                self.with_expression()


            self.state = 530
            self.match(tsqlParser.DELETE)
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 531
                self.top_clause_dm()


            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 534
                self.match(tsqlParser.FROM)


            self.state = 537
            self.delete_statement_from()
            self.state = 539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 538
                self.insert_with_table_hints()


            self.state = 542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 541
                self.output_clause()


            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 544
                self.match(tsqlParser.FROM)
                self.state = 545
                self.table_sources()


            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WHERE:
                self.state = 548
                self.where_clause_dml()


            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 551
                self.for_clause()


            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 554
                self.option_clause()


            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 557
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statement_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_var = None # Token

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delete_statement_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement_from" ):
                listener.enterDelete_statement_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement_from" ):
                listener.exitDelete_statement_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement_from" ):
                return visitor.visitDelete_statement_from(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement_from(self):

        localctx = tsqlParser.Delete_statement_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_delete_statement_from)
        try:
            self.state = 567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.r_id()
                self.state = 562
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 561
                    self.with_table_hints()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 564
                self.ddl_object()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 565
                self.rowset_function_limited()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 566
                localctx.table_var = self.match(tsqlParser.LOCAL_ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def insert_statement_value(self):
            return self.getTypedRuleContext(tsqlParser.Insert_statement_valueContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def top_clause_dm(self):
            return self.getTypedRuleContext(tsqlParser.Top_clause_dmContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement" ):
                return visitor.visitInsert_statement(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement(self):

        localctx = tsqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_insert_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 569
                self.with_expression()


            self.state = 572
            self.match(tsqlParser.INSERT)
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 573
                self.top_clause_dm()


            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 576
                self.match(tsqlParser.INTO)


            self.state = 581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.ID]:
                self.state = 579
                self.ddl_object()
                pass
            elif token in [tsqlParser.OPENDATASOURCE, tsqlParser.OPENQUERY]:
                self.state = 580
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 583
                self.insert_with_table_hints()


            self.state = 590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 586
                self.match(tsqlParser.LR_BRACKET)
                self.state = 587
                self.column_name_list()
                self.state = 588
                self.match(tsqlParser.RR_BRACKET)


            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OUTPUT:
                self.state = 592
                self.output_clause()


            self.state = 595
            self.insert_statement_value()
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 596
                self.for_clause()


            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 599
                self.option_clause()


            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 602
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statement_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_value_constructor(self):
            return self.getTypedRuleContext(tsqlParser.Table_value_constructorContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(tsqlParser.Execute_statementContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_insert_statement_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement_value" ):
                listener.enterInsert_statement_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement_value" ):
                listener.exitInsert_statement_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement_value" ):
                return visitor.visitInsert_statement_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement_value(self):

        localctx = tsqlParser.Insert_statement_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_insert_statement_value)
        try:
            self.state = 610
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.VALUES]:
                self.enterOuterAlt(localctx, 1)
                self.state = 605
                self.table_value_constructor()
                pass
            elif token in [tsqlParser.SELECT, tsqlParser.WITH, tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 606
                self.derived_table()
                pass
            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 607
                self.execute_statement()
                pass
            elif token in [tsqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 608
                self.match(tsqlParser.DEFAULT)
                self.state = 609
                self.match(tsqlParser.VALUES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_statement" ):
                return visitor.visitSelect_statement(self)
            else:
                return visitor.visitChildren(self)




    def select_statement(self):

        localctx = tsqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 612
                self.with_expression()


            self.state = 615
            self.query_expression(0)
            self.state = 617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 616
                self.order_by_clause()


            self.state = 620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 619
                self.for_clause()


            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 622
                self.option_clause()


            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 625
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def update_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Update_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Update_elemContext,i)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def top_clause_dm(self):
            return self.getTypedRuleContext(tsqlParser.Top_clause_dmContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def where_clause_dml(self):
            return self.getTypedRuleContext(tsqlParser.Where_clause_dmlContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_statement" ):
                return visitor.visitUpdate_statement(self)
            else:
                return visitor.visitChildren(self)




    def update_statement(self):

        localctx = tsqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 628
                self.with_expression()


            self.state = 631
            self.match(tsqlParser.UPDATE)
            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 632
                self.top_clause_dm()


            self.state = 637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.ID]:
                self.state = 635
                self.ddl_object()
                pass
            elif token in [tsqlParser.OPENDATASOURCE, tsqlParser.OPENQUERY]:
                self.state = 636
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH or _la==tsqlParser.LR_BRACKET:
                self.state = 639
                self.with_table_hints()


            self.state = 642
            self.match(tsqlParser.SET)
            self.state = 643
            self.update_elem()
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 644
                self.match(tsqlParser.COMMA)
                self.state = 645
                self.update_elem()
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 651
                self.output_clause()


            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 654
                self.match(tsqlParser.FROM)
                self.state = 655
                self.table_sources()


            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WHERE:
                self.state = 658
                self.where_clause_dml()


            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 661
                self.for_clause()


            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 664
                self.option_clause()


            self.state = 668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 667
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clause_dmlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def search_condition_list(self):
            return self.getTypedRuleContext(tsqlParser.Search_condition_listContext,0)


        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_where_clause_dml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause_dml" ):
                listener.enterWhere_clause_dml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause_dml" ):
                listener.exitWhere_clause_dml(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhere_clause_dml" ):
                return visitor.visitWhere_clause_dml(self)
            else:
                return visitor.visitChildren(self)




    def where_clause_dml(self):

        localctx = tsqlParser.Where_clause_dmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_where_clause_dml)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(tsqlParser.WHERE)
            self.state = 681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DEFAULT, tsqlParser.EXISTS, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.IIF, tsqlParser.LEFT, tsqlParser.NEXT, tsqlParser.NOT, tsqlParser.NULL, tsqlParser.NULLIF, tsqlParser.OVER, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SYSTEM_USER, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                self.state = 671
                self.search_condition_list()
                pass
            elif token in [tsqlParser.CURRENT]:
                self.state = 672
                self.match(tsqlParser.CURRENT)
                self.state = 673
                self.match(tsqlParser.OF)
                self.state = 679
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 675
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                    if la_ == 1:
                        self.state = 674
                        self.match(tsqlParser.GLOBAL)


                    self.state = 677
                    self.cursor_name()
                    pass

                elif la_ == 2:
                    self.state = 678
                    localctx.cursor_var = self.match(tsqlParser.LOCAL_ID)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def output_dml_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Output_dml_list_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Output_dml_list_elemContext,i)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_output_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_clause" ):
                listener.enterOutput_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_clause" ):
                listener.exitOutput_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_clause" ):
                return visitor.visitOutput_clause(self)
            else:
                return visitor.visitChildren(self)




    def output_clause(self):

        localctx = tsqlParser.Output_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_output_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(tsqlParser.OUTPUT)
            self.state = 684
            self.output_dml_list_elem()
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 685
                self.match(tsqlParser.COMMA)
                self.state = 686
                self.output_dml_list_elem()
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 692
                self.match(tsqlParser.INTO)
                self.state = 695
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.LOCAL_ID]:
                    self.state = 693
                    self.match(tsqlParser.LOCAL_ID)
                    pass
                elif token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 694
                    self.table_name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 701
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 697
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 698
                    self.column_name_list()
                    self.state = 699
                    self.match(tsqlParser.RR_BRACKET)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_dml_list_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def output_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Output_column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(tsqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_dml_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_dml_list_elem" ):
                listener.enterOutput_dml_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_dml_list_elem" ):
                listener.exitOutput_dml_list_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_dml_list_elem" ):
                return visitor.visitOutput_dml_list_elem(self)
            else:
                return visitor.visitChildren(self)




    def output_dml_list_elem(self):

        localctx = tsqlParser.Output_dml_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_output_dml_list_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 705
                self.output_column_name()
                pass

            elif la_ == 2:
                self.state = 706
                self.expression(0)
                pass


            self.state = 713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 709
                    self.match(tsqlParser.AS)


                self.state = 712
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETED(self):
            return self.getToken(tsqlParser.DELETED, 0)

        def INSERTED(self):
            return self.getToken(tsqlParser.INSERTED, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DOLLAR_ACTION(self):
            return self.getToken(tsqlParser.DOLLAR_ACTION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_column_name" ):
                listener.enterOutput_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_column_name" ):
                listener.exitOutput_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_column_name" ):
                return visitor.visitOutput_column_name(self)
            else:
                return visitor.visitChildren(self)




    def output_column_name(self):

        localctx = tsqlParser.Output_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_output_column_name)
        try:
            self.state = 726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 718
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 715
                    self.match(tsqlParser.DELETED)
                    pass

                elif la_ == 2:
                    self.state = 716
                    self.match(tsqlParser.INSERTED)
                    pass

                elif la_ == 3:
                    self.state = 717
                    self.table_name()
                    pass


                self.state = 720
                self.match(tsqlParser.DOT)
                self.state = 723
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 721
                    self.match(tsqlParser.STAR)
                    pass
                elif token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 722
                    self.r_id()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DOLLAR_ACTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 725
                self.match(tsqlParser.DOLLAR_ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.collation_name = None # R_idContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def CONTAINMENT(self):
            return self.getToken(tsqlParser.CONTAINMENT, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def database_file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Database_file_specContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Database_file_specContext,i)


        def LOG(self):
            return self.getToken(tsqlParser.LOG, 0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def create_database_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Create_database_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Create_database_optionContext,i)


        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(tsqlParser.PARTIAL, 0)

        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database" ):
                listener.enterCreate_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database" ):
                listener.exitCreate_database(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_database" ):
                return visitor.visitCreate_database(self)
            else:
                return visitor.visitChildren(self)




    def create_database(self):

        localctx = tsqlParser.Create_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_create_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(tsqlParser.CREATE)
            self.state = 729
            self.match(tsqlParser.DATABASE)

            self.state = 730
            localctx.database = self.r_id()
            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONTAINMENT:
                self.state = 731
                self.match(tsqlParser.CONTAINMENT)
                self.state = 732
                self.match(tsqlParser.EQUAL)
                self.state = 733
                _la = self._input.LA(1)
                if not(_la==tsqlParser.NONE or _la==tsqlParser.PARTIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 736
                self.match(tsqlParser.ON)
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PRIMARY:
                    self.state = 737
                    self.match(tsqlParser.PRIMARY)


                self.state = 740
                self.database_file_spec()
                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 741
                    self.match(tsqlParser.COMMA)
                    self.state = 742
                    self.database_file_spec()
                    self.state = 747
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LOG:
                self.state = 750
                self.match(tsqlParser.LOG)
                self.state = 751
                self.match(tsqlParser.ON)
                self.state = 752
                self.database_file_spec()
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 753
                    self.match(tsqlParser.COMMA)
                    self.state = 754
                    self.database_file_spec()
                    self.state = 759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COLLATE:
                self.state = 762
                self.match(tsqlParser.COLLATE)
                self.state = 763
                localctx.collation_name = self.r_id()


            self.state = 775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 766
                self.match(tsqlParser.WITH)
                self.state = 767
                self.create_database_option()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 768
                    self.match(tsqlParser.COMMA)
                    self.state = 769
                    self.create_database_option()
                    self.state = 774
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index" ):
                listener.enterCreate_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index" ):
                listener.exitCreate_index(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index" ):
                return visitor.visitCreate_index(self)
            else:
                return visitor.visitChildren(self)




    def create_index(self):

        localctx = tsqlParser.Create_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_create_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(tsqlParser.CREATE)
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.UNIQUE:
                self.state = 778
                self.match(tsqlParser.UNIQUE)


            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                self.state = 781
                self.clustered()


            self.state = 784
            self.match(tsqlParser.INDEX)
            self.state = 785
            self.r_id()
            self.state = 786
            self.match(tsqlParser.ON)
            self.state = 787
            self.table_name_with_hint()
            self.state = 788
            self.match(tsqlParser.LR_BRACKET)
            self.state = 789
            self.column_name_list()
            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                self.state = 790
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 793
            self.match(tsqlParser.RR_BRACKET)
            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 794
                self.index_options()


            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 797
                self.match(tsqlParser.ON)
                self.state = 798
                self.r_id()


            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 801
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.proc = None # Token

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def PROC(self):
            return self.getToken(tsqlParser.PROC, 0)

        def PROCEDURE(self):
            return self.getToken(tsqlParser.PROCEDURE, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_paramContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def procedure_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_optionContext,i)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_procedure" ):
                listener.enterCreate_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_procedure" ):
                listener.exitCreate_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_procedure" ):
                return visitor.visitCreate_procedure(self)
            else:
                return visitor.visitChildren(self)




    def create_procedure(self):

        localctx = tsqlParser.Create_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_create_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(tsqlParser.CREATE)
            self.state = 805
            localctx.proc = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.PROC or _la==tsqlParser.PROCEDURE):
                localctx.proc = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 806
            self.func_proc_name()
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 807
                self.match(tsqlParser.SEMI)
                self.state = 808
                self.match(tsqlParser.DECIMAL)


            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LOCAL_ID or _la==tsqlParser.LR_BRACKET:
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LR_BRACKET:
                    self.state = 811
                    self.match(tsqlParser.LR_BRACKET)


                self.state = 814
                self.procedure_param()
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 815
                    self.match(tsqlParser.COMMA)
                    self.state = 816
                    self.procedure_param()
                    self.state = 821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.RR_BRACKET:
                    self.state = 822
                    self.match(tsqlParser.RR_BRACKET)




            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 827
                self.match(tsqlParser.WITH)
                self.state = 828
                self.procedure_option()
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 829
                    self.match(tsqlParser.COMMA)
                    self.state = 830
                    self.procedure_option()
                    self.state = 835
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 838
                self.match(tsqlParser.FOR)
                self.state = 839
                self.match(tsqlParser.REPLICATION)


            self.state = 842
            self.match(tsqlParser.AS)
            self.state = 843
            self.sql_clauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_paramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.default_val = None # Default_valueContext

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def VARYING(self):
            return self.getToken(tsqlParser.VARYING, 0)

        def default_value(self):
            return self.getTypedRuleContext(tsqlParser.Default_valueContext,0)


        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def READONLY(self):
            return self.getToken(tsqlParser.READONLY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_procedure_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_param" ):
                listener.enterProcedure_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_param" ):
                listener.exitProcedure_param(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_param" ):
                return visitor.visitProcedure_param(self)
            else:
                return visitor.visitChildren(self)




    def procedure_param(self):

        localctx = tsqlParser.Procedure_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_procedure_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(tsqlParser.LOCAL_ID)
            self.state = 849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 846
                self.r_id()
                self.state = 847
                self.match(tsqlParser.DOT)


            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 851
                self.match(tsqlParser.AS)


            self.state = 854
            self.data_type()
            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.VARYING:
                self.state = 855
                self.match(tsqlParser.VARYING)


            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.EQUAL:
                self.state = 858
                self.match(tsqlParser.EQUAL)
                self.state = 859
                localctx.default_val = self.default_value()


            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & ((1 << (tsqlParser.OUT - 327)) | (1 << (tsqlParser.OUTPUT - 327)) | (1 << (tsqlParser.READONLY - 327)))) != 0):
                self.state = 862
                _la = self._input.LA(1)
                if not(((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & ((1 << (tsqlParser.OUT - 327)) | (1 << (tsqlParser.OUTPUT - 327)) | (1 << (tsqlParser.READONLY - 327)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_procedure_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_option" ):
                listener.enterProcedure_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_option" ):
                listener.exitProcedure_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_option" ):
                return visitor.visitProcedure_option(self)
            else:
                return visitor.visitChildren(self)




    def procedure_option(self):

        localctx = tsqlParser.Procedure_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_procedure_option)
        try:
            self.state = 868
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ENCRYPTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 865
                self.match(tsqlParser.ENCRYPTION)
                pass
            elif token in [tsqlParser.RECOMPILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 866
                self.match(tsqlParser.RECOMPILE)
                pass
            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 867
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_statisticsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def FULLSCAN(self):
            return self.getToken(tsqlParser.FULLSCAN, 0)

        def SAMPLE(self):
            return self.getToken(tsqlParser.SAMPLE, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STATS_STREAM(self):
            return self.getToken(tsqlParser.STATS_STREAM, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def NORECOMPUTE(self):
            return self.getToken(tsqlParser.NORECOMPUTE, 0)

        def INCREMENTAL(self):
            return self.getToken(tsqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_statistics" ):
                listener.enterCreate_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_statistics" ):
                listener.exitCreate_statistics(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_statistics" ):
                return visitor.visitCreate_statistics(self)
            else:
                return visitor.visitChildren(self)




    def create_statistics(self):

        localctx = tsqlParser.Create_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_create_statistics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.match(tsqlParser.CREATE)
            self.state = 871
            self.match(tsqlParser.STATISTICS)
            self.state = 872
            self.r_id()
            self.state = 873
            self.match(tsqlParser.ON)
            self.state = 874
            self.table_name_with_hint()
            self.state = 875
            self.match(tsqlParser.LR_BRACKET)
            self.state = 876
            self.column_name_list()
            self.state = 877
            self.match(tsqlParser.RR_BRACKET)
            self.state = 896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 878
                self.match(tsqlParser.WITH)
                self.state = 884
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FULLSCAN]:
                    self.state = 879
                    self.match(tsqlParser.FULLSCAN)
                    pass
                elif token in [tsqlParser.SAMPLE]:
                    self.state = 880
                    self.match(tsqlParser.SAMPLE)
                    self.state = 881
                    self.match(tsqlParser.DECIMAL)
                    self.state = 882
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.PERCENT or _la==tsqlParser.ROWS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [tsqlParser.STATS_STREAM]:
                    self.state = 883
                    self.match(tsqlParser.STATS_STREAM)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 888
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 886
                    self.match(tsqlParser.COMMA)
                    self.state = 887
                    self.match(tsqlParser.NORECOMPUTE)


                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 890
                    self.match(tsqlParser.COMMA)
                    self.state = 891
                    self.match(tsqlParser.INCREMENTAL)
                    self.state = 892
                    self.match(tsqlParser.EQUAL)
                    self.state = 893
                    self.on_off()




            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 898
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DEFAULT)
            else:
                return self.getToken(tsqlParser.DEFAULT, i)

        def TEXTIMAGE_ON(self):
            return self.getToken(tsqlParser.TEXTIMAGE_ON, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table" ):
                listener.enterCreate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table" ):
                listener.exitCreate_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table" ):
                return visitor.visitCreate_table(self)
            else:
                return visitor.visitChildren(self)




    def create_table(self):

        localctx = tsqlParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.match(tsqlParser.CREATE)
            self.state = 902
            self.match(tsqlParser.TABLE)
            self.state = 903
            self.table_name()
            self.state = 904
            self.match(tsqlParser.LR_BRACKET)
            self.state = 905
            self.column_def_table_constraints()
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 906
                self.match(tsqlParser.COMMA)


            self.state = 909
            self.match(tsqlParser.RR_BRACKET)
            self.state = 913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 910
                self.match(tsqlParser.ON)
                self.state = 911
                self.r_id()

            elif la_ == 2:
                self.state = 912
                self.match(tsqlParser.DEFAULT)


            self.state = 918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 915
                self.match(tsqlParser.TEXTIMAGE_ON)
                self.state = 916
                self.r_id()

            elif la_ == 2:
                self.state = 917
                self.match(tsqlParser.DEFAULT)


            self.state = 921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 920
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.WITH)
            else:
                return self.getToken(tsqlParser.WITH, i)

        def view_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.View_attributeContext)
            else:
                return self.getTypedRuleContext(tsqlParser.View_attributeContext,i)


        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view" ):
                listener.enterCreate_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view" ):
                listener.exitCreate_view(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_view" ):
                return visitor.visitCreate_view(self)
            else:
                return visitor.visitChildren(self)




    def create_view(self):

        localctx = tsqlParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_create_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.match(tsqlParser.CREATE)
            self.state = 924
            self.match(tsqlParser.VIEW)
            self.state = 925
            self.simple_name()
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LR_BRACKET:
                self.state = 926
                self.match(tsqlParser.LR_BRACKET)
                self.state = 927
                self.column_name_list()
                self.state = 928
                self.match(tsqlParser.RR_BRACKET)


            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 932
                self.match(tsqlParser.WITH)
                self.state = 933
                self.view_attribute()
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 934
                    self.match(tsqlParser.COMMA)
                    self.state = 935
                    self.view_attribute()
                    self.state = 940
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 943
            self.match(tsqlParser.AS)
            self.state = 944
            self.select_statement()
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 945
                self.match(tsqlParser.WITH)
                self.state = 946
                self.match(tsqlParser.CHECK)
                self.state = 947
                self.match(tsqlParser.OPTION)


            self.state = 951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 950
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class View_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def VIEW_METADATA(self):
            return self.getToken(tsqlParser.VIEW_METADATA, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_view_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_attribute" ):
                listener.enterView_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_attribute" ):
                listener.exitView_attribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitView_attribute" ):
                return visitor.visitView_attribute(self)
            else:
                return visitor.visitChildren(self)




    def view_attribute(self):

        localctx = tsqlParser.View_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_view_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ENCRYPTION or _la==tsqlParser.SCHEMABINDING or _la==tsqlParser.VIEW_METADATA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # R_idContext
            self.fk = None # Column_name_listContext
            self.pk = None # Column_name_listContext

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.TABLE)
            else:
                return self.getToken(tsqlParser.TABLE, i)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_nameContext,i)


        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(tsqlParser.LOCK_ESCALATION, 0)

        def ADD(self):
            return self.getToken(tsqlParser.ADD, 0)

        def column_def_table_constraint(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintContext,0)


        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def FOREIGN(self):
            return self.getToken(tsqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def DISABLE(self):
            return self.getToken(tsqlParser.DISABLE, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_name_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_alter_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table" ):
                listener.enterAlter_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table" ):
                listener.exitAlter_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table" ):
                return visitor.visitAlter_table(self)
            else:
                return visitor.visitChildren(self)




    def alter_table(self):

        localctx = tsqlParser.Alter_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_alter_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(tsqlParser.ALTER)
            self.state = 956
            self.match(tsqlParser.TABLE)
            self.state = 957
            self.table_name()
            self.state = 988
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.SET]:
                self.state = 958
                self.match(tsqlParser.SET)
                self.state = 959
                self.match(tsqlParser.LR_BRACKET)
                self.state = 960
                self.match(tsqlParser.LOCK_ESCALATION)
                self.state = 961
                self.match(tsqlParser.EQUAL)
                self.state = 962
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TABLE or _la==tsqlParser.AUTO or _la==tsqlParser.DISABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 963
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.ADD]:
                self.state = 964
                self.match(tsqlParser.ADD)
                self.state = 965
                self.column_def_table_constraint()
                pass
            elif token in [tsqlParser.DROP]:
                self.state = 966
                self.match(tsqlParser.DROP)
                self.state = 967
                self.match(tsqlParser.CONSTRAINT)
                self.state = 968
                localctx.constraint = self.r_id()
                pass
            elif token in [tsqlParser.WITH]:
                self.state = 969
                self.match(tsqlParser.WITH)
                self.state = 970
                self.match(tsqlParser.CHECK)
                self.state = 971
                self.match(tsqlParser.ADD)
                self.state = 972
                self.match(tsqlParser.CONSTRAINT)
                self.state = 973
                localctx.constraint = self.r_id()
                self.state = 974
                self.match(tsqlParser.FOREIGN)
                self.state = 975
                self.match(tsqlParser.KEY)
                self.state = 976
                self.match(tsqlParser.LR_BRACKET)
                self.state = 977
                localctx.fk = self.column_name_list()
                self.state = 978
                self.match(tsqlParser.RR_BRACKET)
                self.state = 979
                self.match(tsqlParser.REFERENCES)
                self.state = 980
                self.table_name()
                self.state = 981
                self.match(tsqlParser.LR_BRACKET)
                self.state = 982
                localctx.pk = self.column_name_list()
                self.state = 983
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 985
                self.match(tsqlParser.CHECK)
                self.state = 986
                self.match(tsqlParser.CONSTRAINT)
                self.state = 987
                localctx.constraint = self.r_id()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 990
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.new_name = None # R_idContext
            self.collation = None # R_idContext

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def MODIFY(self):
            return self.getToken(tsqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def database_optionspec(self):
            return self.getTypedRuleContext(tsqlParser.Database_optionspecContext,0)


        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def termination(self):
            return self.getTypedRuleContext(tsqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_alter_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_database" ):
                listener.enterAlter_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_database" ):
                listener.exitAlter_database(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_database" ):
                return visitor.visitAlter_database(self)
            else:
                return visitor.visitChildren(self)




    def alter_database(self):

        localctx = tsqlParser.Alter_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_alter_database)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(tsqlParser.ALTER)
            self.state = 994
            self.match(tsqlParser.DATABASE)
            self.state = 997
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 995
                localctx.database = self.r_id()
                pass
            elif token in [tsqlParser.CURRENT]:
                self.state = 996
                self.match(tsqlParser.CURRENT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1011
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.MODIFY]:
                self.state = 999
                self.match(tsqlParser.MODIFY)
                self.state = 1000
                self.match(tsqlParser.NAME)
                self.state = 1001
                self.match(tsqlParser.EQUAL)
                self.state = 1002
                localctx.new_name = self.r_id()
                pass
            elif token in [tsqlParser.COLLATE]:
                self.state = 1003
                self.match(tsqlParser.COLLATE)
                self.state = 1004
                localctx.collation = self.r_id()
                pass
            elif token in [tsqlParser.SET]:
                self.state = 1005
                self.match(tsqlParser.SET)
                self.state = 1006
                self.database_optionspec()
                self.state = 1009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                if la_ == 1:
                    self.state = 1007
                    self.match(tsqlParser.WITH)
                    self.state = 1008
                    self.termination()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1013
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_optionspecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def auto_option(self):
            return self.getTypedRuleContext(tsqlParser.Auto_optionContext,0)


        def change_tracking_option(self):
            return self.getTypedRuleContext(tsqlParser.Change_tracking_optionContext,0)


        def containment_option(self):
            return self.getTypedRuleContext(tsqlParser.Containment_optionContext,0)


        def cursor_option(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_optionContext,0)


        def date_correlation_optimization_option(self):
            return self.getTypedRuleContext(tsqlParser.Date_correlation_optimization_optionContext,0)


        def db_encryption_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_encryption_optionContext,0)


        def db_state_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_state_optionContext,0)


        def db_update_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_update_optionContext,0)


        def db_user_access_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_user_access_optionContext,0)


        def delayed_durability_option(self):
            return self.getTypedRuleContext(tsqlParser.Delayed_durability_optionContext,0)


        def external_access_option(self):
            return self.getTypedRuleContext(tsqlParser.External_access_optionContext,0)


        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def database_filestream_option(self):
            return self.getTypedRuleContext(tsqlParser.Database_filestream_optionContext,0)


        def HADR_options(self):
            return self.getToken(tsqlParser.HADR_options, 0)

        def mixed_page_allocation_option(self):
            return self.getTypedRuleContext(tsqlParser.Mixed_page_allocation_optionContext,0)


        def parameterization_option(self):
            return self.getTypedRuleContext(tsqlParser.Parameterization_optionContext,0)


        def recovery_option(self):
            return self.getTypedRuleContext(tsqlParser.Recovery_optionContext,0)


        def service_broker_option(self):
            return self.getTypedRuleContext(tsqlParser.Service_broker_optionContext,0)


        def snapshot_option(self):
            return self.getTypedRuleContext(tsqlParser.Snapshot_optionContext,0)


        def sql_option(self):
            return self.getTypedRuleContext(tsqlParser.Sql_optionContext,0)


        def target_recovery_time_option(self):
            return self.getTypedRuleContext(tsqlParser.Target_recovery_time_optionContext,0)


        def termination(self):
            return self.getTypedRuleContext(tsqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_database_optionspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_optionspec" ):
                listener.enterDatabase_optionspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_optionspec" ):
                listener.exitDatabase_optionspec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_optionspec" ):
                return visitor.visitDatabase_optionspec(self)
            else:
                return visitor.visitChildren(self)




    def database_optionspec(self):

        localctx = tsqlParser.Database_optionspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_database_optionspec)
        try:
            self.state = 1038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1016
                self.auto_option()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1017
                self.change_tracking_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1018
                self.containment_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1019
                self.cursor_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1020
                self.date_correlation_optimization_option()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1021
                self.db_encryption_option()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1022
                self.db_state_option()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1023
                self.db_update_option()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1024
                self.db_user_access_option()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1025
                self.delayed_durability_option()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1026
                self.external_access_option()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1027
                self.match(tsqlParser.FILESTREAM)
                self.state = 1028
                self.database_filestream_option()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1029
                self.match(tsqlParser.HADR_options)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1030
                self.mixed_page_allocation_option()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1031
                self.parameterization_option()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1032
                self.recovery_option()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1033
                self.service_broker_option()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1034
                self.snapshot_option()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1035
                self.sql_option()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1036
                self.target_recovery_time_option()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1037
                self.termination()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Auto_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLOSE(self):
            return self.getToken(tsqlParser.AUTO_CLOSE, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def AUTO_CREATE_STATISTICS(self):
            return self.getToken(tsqlParser.AUTO_CREATE_STATISTICS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def INCREMENTAL(self):
            return self.getToken(tsqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def AUTO_SHRINK(self):
            return self.getToken(tsqlParser.AUTO_SHRINK, 0)

        def AUTO_UPDATE_STATISTICS(self):
            return self.getToken(tsqlParser.AUTO_UPDATE_STATISTICS, 0)

        def AUTO_UPDATE_STATISTICS_ASYNC(self):
            return self.getToken(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_auto_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuto_option" ):
                listener.enterAuto_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuto_option" ):
                listener.exitAuto_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAuto_option" ):
                return visitor.visitAuto_option(self)
            else:
                return visitor.visitChildren(self)




    def auto_option(self):

        localctx = tsqlParser.Auto_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_auto_option)
        self._la = 0 # Token type
        try:
            self.state = 1057
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AUTO_CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1040
                self.match(tsqlParser.AUTO_CLOSE)
                self.state = 1041
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_CREATE_STATISTICS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1042
                self.match(tsqlParser.AUTO_CREATE_STATISTICS)
                self.state = 1043
                self.match(tsqlParser.OFF)
                pass
            elif token in [tsqlParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1044
                self.match(tsqlParser.ON)
                self.state = 1049
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.INCREMENTAL]:
                    self.state = 1045
                    self.match(tsqlParser.INCREMENTAL)
                    self.state = 1046
                    self.match(tsqlParser.EQUAL)
                    self.state = 1047
                    self.match(tsqlParser.ON)
                    pass
                elif token in [tsqlParser.OFF]:
                    self.state = 1048
                    self.match(tsqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.AUTO_SHRINK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1051
                self.match(tsqlParser.AUTO_SHRINK)
                self.state = 1052
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_UPDATE_STATISTICS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1053
                self.match(tsqlParser.AUTO_UPDATE_STATISTICS)
                self.state = 1054
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1055
                self.match(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC)
                self.state = 1056
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tracking_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_TRACKING(self):
            return self.getToken(tsqlParser.CHANGE_TRACKING, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def change_tracking_option_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Change_tracking_option_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Change_tracking_option_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_change_tracking_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking_option" ):
                listener.enterChange_tracking_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking_option" ):
                listener.exitChange_tracking_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_tracking_option" ):
                return visitor.visitChange_tracking_option(self)
            else:
                return visitor.visitChildren(self)




    def change_tracking_option(self):

        localctx = tsqlParser.Change_tracking_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_change_tracking_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(tsqlParser.CHANGE_TRACKING)
            self.state = 1060
            self.match(tsqlParser.EQUAL)
            self.state = 1076
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.OFF]:
                self.state = 1061
                self.match(tsqlParser.OFF)
                pass
            elif token in [tsqlParser.ON]:
                self.state = 1062
                self.match(tsqlParser.ON)
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.AUTO_CLEANUP or _la==tsqlParser.CHANGE_RETENTION:
                    self.state = 1063
                    self.change_tracking_option_list()
                    self.state = 1068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 1064
                        self.match(tsqlParser.COMMA)
                        self.state = 1065
                        self.change_tracking_option_list()
                        self.state = 1070
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1075
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tracking_option_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLEANUP(self):
            return self.getToken(tsqlParser.AUTO_CLEANUP, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def CHANGE_RETENTION(self):
            return self.getToken(tsqlParser.CHANGE_RETENTION, 0)

        def DAYS(self):
            return self.getToken(tsqlParser.DAYS, 0)

        def HOURS(self):
            return self.getToken(tsqlParser.HOURS, 0)

        def MINUTES(self):
            return self.getToken(tsqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_tracking_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking_option_list" ):
                listener.enterChange_tracking_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking_option_list" ):
                listener.exitChange_tracking_option_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_tracking_option_list" ):
                return visitor.visitChange_tracking_option_list(self)
            else:
                return visitor.visitChildren(self)




    def change_tracking_option_list(self):

        localctx = tsqlParser.Change_tracking_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_change_tracking_option_list)
        self._la = 0 # Token type
        try:
            self.state = 1084
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AUTO_CLEANUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1078
                self.match(tsqlParser.AUTO_CLEANUP)
                self.state = 1079
                self.match(tsqlParser.EQUAL)
                self.state = 1080
                self.on_off()
                pass
            elif token in [tsqlParser.CHANGE_RETENTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1081
                self.match(tsqlParser.CHANGE_RETENTION)
                self.state = 1082
                self.match(tsqlParser.EQUAL)
                self.state = 1083
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DAYS or _la==tsqlParser.HOURS or _la==tsqlParser.MINUTES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Containment_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINMENT(self):
            return self.getToken(tsqlParser.CONTAINMENT, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(tsqlParser.PARTIAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_containment_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainment_option" ):
                listener.enterContainment_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainment_option" ):
                listener.exitContainment_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainment_option" ):
                return visitor.visitContainment_option(self)
            else:
                return visitor.visitChildren(self)




    def containment_option(self):

        localctx = tsqlParser.Containment_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_containment_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.match(tsqlParser.CONTAINMENT)
            self.state = 1087
            self.match(tsqlParser.EQUAL)
            self.state = 1088
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NONE or _la==tsqlParser.PARTIAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR_CLOSE_ON_COMMIT(self):
            return self.getToken(tsqlParser.CURSOR_CLOSE_ON_COMMIT, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def CURSOR_DEFAULT(self):
            return self.getToken(tsqlParser.CURSOR_DEFAULT, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_option" ):
                listener.enterCursor_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_option" ):
                listener.exitCursor_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_option" ):
                return visitor.visitCursor_option(self)
            else:
                return visitor.visitChildren(self)




    def cursor_option(self):

        localctx = tsqlParser.Cursor_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_cursor_option)
        self._la = 0 # Token type
        try:
            self.state = 1094
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CURSOR_CLOSE_ON_COMMIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1090
                self.match(tsqlParser.CURSOR_CLOSE_ON_COMMIT)
                self.state = 1091
                self.on_off()
                pass
            elif token in [tsqlParser.CURSOR_DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1092
                self.match(tsqlParser.CURSOR_DEFAULT)
                self.state = 1093
                _la = self._input.LA(1)
                if not(_la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Date_correlation_optimization_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_CORRELATION_OPTIMIZATION(self):
            return self.getToken(tsqlParser.DATE_CORRELATION_OPTIMIZATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_date_correlation_optimization_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_correlation_optimization_option" ):
                listener.enterDate_correlation_optimization_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_correlation_optimization_option" ):
                listener.exitDate_correlation_optimization_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDate_correlation_optimization_option" ):
                return visitor.visitDate_correlation_optimization_option(self)
            else:
                return visitor.visitChildren(self)




    def date_correlation_optimization_option(self):

        localctx = tsqlParser.Date_correlation_optimization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_date_correlation_optimization_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(tsqlParser.DATE_CORRELATION_OPTIMIZATION)
            self.state = 1097
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_encryption_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_db_encryption_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_encryption_option" ):
                listener.enterDb_encryption_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_encryption_option" ):
                listener.exitDb_encryption_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_encryption_option" ):
                return visitor.visitDb_encryption_option(self)
            else:
                return visitor.visitChildren(self)




    def db_encryption_option(self):

        localctx = tsqlParser.Db_encryption_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_db_encryption_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(tsqlParser.ENCRYPTION)
            self.state = 1100
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_state_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONLINE(self):
            return self.getToken(tsqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(tsqlParser.OFFLINE, 0)

        def EMERGENCY(self):
            return self.getToken(tsqlParser.EMERGENCY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_state_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_state_option" ):
                listener.enterDb_state_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_state_option" ):
                listener.exitDb_state_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_state_option" ):
                return visitor.visitDb_state_option(self)
            else:
                return visitor.visitChildren(self)




    def db_state_option(self):

        localctx = tsqlParser.Db_state_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_db_state_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            _la = self._input.LA(1)
            if not(_la==tsqlParser.EMERGENCY or _la==tsqlParser.OFFLINE or _la==tsqlParser.ONLINE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_update_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def READ_WRITE(self):
            return self.getToken(tsqlParser.READ_WRITE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_update_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_update_option" ):
                listener.enterDb_update_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_update_option" ):
                listener.exitDb_update_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_update_option" ):
                return visitor.visitDb_update_option(self)
            else:
                return visitor.visitChildren(self)




    def db_update_option(self):

        localctx = tsqlParser.Db_update_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_db_update_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            _la = self._input.LA(1)
            if not(_la==tsqlParser.READ_ONLY or _la==tsqlParser.READ_WRITE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_user_access_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_USER(self):
            return self.getToken(tsqlParser.SINGLE_USER, 0)

        def RESTRICTED_USER(self):
            return self.getToken(tsqlParser.RESTRICTED_USER, 0)

        def MULTI_USER(self):
            return self.getToken(tsqlParser.MULTI_USER, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_user_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_user_access_option" ):
                listener.enterDb_user_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_user_access_option" ):
                listener.exitDb_user_access_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_user_access_option" ):
                return visitor.visitDb_user_access_option(self)
            else:
                return visitor.visitChildren(self)




    def db_user_access_option(self):

        localctx = tsqlParser.Db_user_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_db_user_access_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            _la = self._input.LA(1)
            if not(((((_la - 309)) & ~0x3f) == 0 and ((1 << (_la - 309)) & ((1 << (tsqlParser.MULTI_USER - 309)) | (1 << (tsqlParser.RESTRICTED_USER - 309)) | (1 << (tsqlParser.SINGLE_USER - 309)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delayed_durability_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELAYED_DURABILITY(self):
            return self.getToken(tsqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DISABLED(self):
            return self.getToken(tsqlParser.DISABLED, 0)

        def ALLOWED(self):
            return self.getToken(tsqlParser.ALLOWED, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delayed_durability_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelayed_durability_option" ):
                listener.enterDelayed_durability_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelayed_durability_option" ):
                listener.exitDelayed_durability_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelayed_durability_option" ):
                return visitor.visitDelayed_durability_option(self)
            else:
                return visitor.visitChildren(self)




    def delayed_durability_option(self):

        localctx = tsqlParser.Delayed_durability_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_delayed_durability_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(tsqlParser.DELAYED_DURABILITY)
            self.state = 1109
            self.match(tsqlParser.EQUAL)
            self.state = 1110
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ALLOWED or _la==tsqlParser.DISABLED or _la==tsqlParser.FORCED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class External_access_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DB_CHAINING(self):
            return self.getToken(tsqlParser.DB_CHAINING, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def TRUSTWORTHY(self):
            return self.getToken(tsqlParser.TRUSTWORTHY, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(tsqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_external_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_access_option" ):
                listener.enterExternal_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_access_option" ):
                listener.exitExternal_access_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternal_access_option" ):
                return visitor.visitExternal_access_option(self)
            else:
                return visitor.visitChildren(self)




    def external_access_option(self):

        localctx = tsqlParser.External_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_external_access_option)
        self._la = 0 # Token type
        try:
            self.state = 1137
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DB_CHAINING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1112
                self.match(tsqlParser.DB_CHAINING)
                self.state = 1113
                self.on_off()
                pass
            elif token in [tsqlParser.TRUSTWORTHY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1114
                self.match(tsqlParser.TRUSTWORTHY)
                self.state = 1115
                self.on_off()
                pass
            elif token in [tsqlParser.DEFAULT_LANGUAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1116
                self.match(tsqlParser.DEFAULT_LANGUAGE)
                self.state = 1117
                self.match(tsqlParser.EQUAL)
                self.state = 1120
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1118
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 1119
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DEFAULT_FULLTEXT_LANGUAGE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1122
                self.match(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 1123
                self.match(tsqlParser.EQUAL)
                self.state = 1126
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1124
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 1125
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.NESTED_TRIGGERS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1128
                self.match(tsqlParser.NESTED_TRIGGERS)
                self.state = 1129
                self.match(tsqlParser.EQUAL)
                self.state = 1130
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRANSFORM_NOISE_WORDS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1131
                self.match(tsqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 1132
                self.match(tsqlParser.EQUAL)
                self.state = 1133
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TWO_DIGIT_YEAR_CUTOFF]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1134
                self.match(tsqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 1135
                self.match(tsqlParser.EQUAL)
                self.state = 1136
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mixed_page_allocation_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIXED_PAGE_ALLOCATION(self):
            return self.getToken(tsqlParser.MIXED_PAGE_ALLOCATION, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_mixed_page_allocation_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixed_page_allocation_option" ):
                listener.enterMixed_page_allocation_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixed_page_allocation_option" ):
                listener.exitMixed_page_allocation_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMixed_page_allocation_option" ):
                return visitor.visitMixed_page_allocation_option(self)
            else:
                return visitor.visitChildren(self)




    def mixed_page_allocation_option(self):

        localctx = tsqlParser.Mixed_page_allocation_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_mixed_page_allocation_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self.match(tsqlParser.MIXED_PAGE_ALLOCATION)
            self.state = 1140
            _la = self._input.LA(1)
            if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameterization_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_parameterization_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterization_option" ):
                listener.enterParameterization_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterization_option" ):
                listener.exitParameterization_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterization_option" ):
                return visitor.visitParameterization_option(self)
            else:
                return visitor.visitChildren(self)




    def parameterization_option(self):

        localctx = tsqlParser.Parameterization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_parameterization_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.match(tsqlParser.PARAMETERIZATION)
            self.state = 1143
            _la = self._input.LA(1)
            if not(_la==tsqlParser.FORCED or _la==tsqlParser.SIMPLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Recovery_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECOVERY(self):
            return self.getToken(tsqlParser.RECOVERY, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def BULK_LOGGED(self):
            return self.getToken(tsqlParser.BULK_LOGGED, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def TORN_PAGE_DETECTION(self):
            return self.getToken(tsqlParser.TORN_PAGE_DETECTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def PAGE_VERIFY(self):
            return self.getToken(tsqlParser.PAGE_VERIFY, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_recovery_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecovery_option" ):
                listener.enterRecovery_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecovery_option" ):
                listener.exitRecovery_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecovery_option" ):
                return visitor.visitRecovery_option(self)
            else:
                return visitor.visitChildren(self)




    def recovery_option(self):

        localctx = tsqlParser.Recovery_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_recovery_option)
        self._la = 0 # Token type
        try:
            self.state = 1151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.RECOVERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1145
                self.match(tsqlParser.RECOVERY)
                self.state = 1146
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.BULK_LOGGED or _la==tsqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TORN_PAGE_DETECTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1147
                self.match(tsqlParser.TORN_PAGE_DETECTION)
                self.state = 1148
                self.on_off()
                pass
            elif token in [tsqlParser.PAGE_VERIFY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1149
                self.match(tsqlParser.PAGE_VERIFY)
                self.state = 1150
                _la = self._input.LA(1)
                if not(_la==tsqlParser.NONE or _la==tsqlParser.CHECKSUM or _la==tsqlParser.TORN_PAGE_DETECTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Service_broker_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE_BROKER(self):
            return self.getToken(tsqlParser.ENABLE_BROKER, 0)

        def DISABLE_BROKER(self):
            return self.getToken(tsqlParser.DISABLE_BROKER, 0)

        def NEW_BROKER(self):
            return self.getToken(tsqlParser.NEW_BROKER, 0)

        def ERROR_BROKER_CONVERSATIONS(self):
            return self.getToken(tsqlParser.ERROR_BROKER_CONVERSATIONS, 0)

        def HONOR_BROKER_PRIORITY(self):
            return self.getToken(tsqlParser.HONOR_BROKER_PRIORITY, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_service_broker_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterService_broker_option" ):
                listener.enterService_broker_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitService_broker_option" ):
                listener.exitService_broker_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitService_broker_option" ):
                return visitor.visitService_broker_option(self)
            else:
                return visitor.visitChildren(self)




    def service_broker_option(self):

        localctx = tsqlParser.Service_broker_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_service_broker_option)
        try:
            self.state = 1159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ENABLE_BROKER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1153
                self.match(tsqlParser.ENABLE_BROKER)
                pass
            elif token in [tsqlParser.DISABLE_BROKER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1154
                self.match(tsqlParser.DISABLE_BROKER)
                pass
            elif token in [tsqlParser.NEW_BROKER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1155
                self.match(tsqlParser.NEW_BROKER)
                pass
            elif token in [tsqlParser.ERROR_BROKER_CONVERSATIONS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1156
                self.match(tsqlParser.ERROR_BROKER_CONVERSATIONS)
                pass
            elif token in [tsqlParser.HONOR_BROKER_PRIORITY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1157
                self.match(tsqlParser.HONOR_BROKER_PRIORITY)
                self.state = 1158
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Snapshot_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = None # Token

        def ALLOW_SNAPSHOT_ISOLATION(self):
            return self.getToken(tsqlParser.ALLOW_SNAPSHOT_ISOLATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def READ_COMMITTED_SNAPSHOT(self):
            return self.getToken(tsqlParser.READ_COMMITTED_SNAPSHOT, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_snapshot_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSnapshot_option" ):
                listener.enterSnapshot_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSnapshot_option" ):
                listener.exitSnapshot_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSnapshot_option" ):
                return visitor.visitSnapshot_option(self)
            else:
                return visitor.visitChildren(self)




    def snapshot_option(self):

        localctx = tsqlParser.Snapshot_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_snapshot_option)
        self._la = 0 # Token type
        try:
            self.state = 1166
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ALLOW_SNAPSHOT_ISOLATION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1161
                self.match(tsqlParser.ALLOW_SNAPSHOT_ISOLATION)
                self.state = 1162
                self.on_off()
                pass
            elif token in [tsqlParser.READ_COMMITTED_SNAPSHOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1163
                self.match(tsqlParser.READ_COMMITTED_SNAPSHOT)
                self.state = 1164
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.OFF, tsqlParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1165
                localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANSI_NULL_DEFAULT(self):
            return self.getToken(tsqlParser.ANSI_NULL_DEFAULT, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def ANSI_NULLS(self):
            return self.getToken(tsqlParser.ANSI_NULLS, 0)

        def ANSI_PADDING(self):
            return self.getToken(tsqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(tsqlParser.ANSI_WARNINGS, 0)

        def ARITHABORT(self):
            return self.getToken(tsqlParser.ARITHABORT, 0)

        def COMPATIBILITY_LEVEL(self):
            return self.getToken(tsqlParser.COMPATIBILITY_LEVEL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def CONCAT_NULL_YIELDS_NULL(self):
            return self.getToken(tsqlParser.CONCAT_NULL_YIELDS_NULL, 0)

        def NUMERIC_ROUNDABORT(self):
            return self.getToken(tsqlParser.NUMERIC_ROUNDABORT, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(tsqlParser.QUOTED_IDENTIFIER, 0)

        def RECURSIVE_TRIGGERS(self):
            return self.getToken(tsqlParser.RECURSIVE_TRIGGERS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_sql_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_option" ):
                listener.enterSql_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_option" ):
                listener.exitSql_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_option" ):
                return visitor.visitSql_option(self)
            else:
                return visitor.visitChildren(self)




    def sql_option(self):

        localctx = tsqlParser.Sql_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_sql_option)
        try:
            self.state = 1189
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ANSI_NULL_DEFAULT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1168
                self.match(tsqlParser.ANSI_NULL_DEFAULT)
                self.state = 1169
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_NULLS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1170
                self.match(tsqlParser.ANSI_NULLS)
                self.state = 1171
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_PADDING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1172
                self.match(tsqlParser.ANSI_PADDING)
                self.state = 1173
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_WARNINGS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1174
                self.match(tsqlParser.ANSI_WARNINGS)
                self.state = 1175
                self.on_off()
                pass
            elif token in [tsqlParser.ARITHABORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1176
                self.match(tsqlParser.ARITHABORT)
                self.state = 1177
                self.on_off()
                pass
            elif token in [tsqlParser.COMPATIBILITY_LEVEL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1178
                self.match(tsqlParser.COMPATIBILITY_LEVEL)
                self.state = 1179
                self.match(tsqlParser.EQUAL)
                self.state = 1180
                self.match(tsqlParser.DECIMAL)
                pass
            elif token in [tsqlParser.CONCAT_NULL_YIELDS_NULL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1181
                self.match(tsqlParser.CONCAT_NULL_YIELDS_NULL)
                self.state = 1182
                self.on_off()
                pass
            elif token in [tsqlParser.NUMERIC_ROUNDABORT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1183
                self.match(tsqlParser.NUMERIC_ROUNDABORT)
                self.state = 1184
                self.on_off()
                pass
            elif token in [tsqlParser.QUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1185
                self.match(tsqlParser.QUOTED_IDENTIFIER)
                self.state = 1186
                self.on_off()
                pass
            elif token in [tsqlParser.RECURSIVE_TRIGGERS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1187
                self.match(tsqlParser.RECURSIVE_TRIGGERS)
                self.state = 1188
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Target_recovery_time_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET_RECOVERY_TIME(self):
            return self.getToken(tsqlParser.TARGET_RECOVERY_TIME, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def SECONDS(self):
            return self.getToken(tsqlParser.SECONDS, 0)

        def MINUTES(self):
            return self.getToken(tsqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_target_recovery_time_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_recovery_time_option" ):
                listener.enterTarget_recovery_time_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_recovery_time_option" ):
                listener.exitTarget_recovery_time_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTarget_recovery_time_option" ):
                return visitor.visitTarget_recovery_time_option(self)
            else:
                return visitor.visitChildren(self)




    def target_recovery_time_option(self):

        localctx = tsqlParser.Target_recovery_time_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_target_recovery_time_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self.match(tsqlParser.TARGET_RECOVERY_TIME)
            self.state = 1192
            self.match(tsqlParser.EQUAL)
            self.state = 1193
            self.match(tsqlParser.DECIMAL)
            self.state = 1194
            _la = self._input.LA(1)
            if not(_la==tsqlParser.MINUTES or _la==tsqlParser.SECONDS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TerminationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.seconds = None # Token

        def ROLLBACK(self):
            return self.getToken(tsqlParser.ROLLBACK, 0)

        def AFTER(self):
            return self.getToken(tsqlParser.AFTER, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def IMMEDIATE(self):
            return self.getToken(tsqlParser.IMMEDIATE, 0)

        def NO_WAIT(self):
            return self.getToken(tsqlParser.NO_WAIT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_termination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermination" ):
                listener.enterTermination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermination" ):
                listener.exitTermination(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTermination" ):
                return visitor.visitTermination(self)
            else:
                return visitor.visitChildren(self)




    def termination(self):

        localctx = tsqlParser.TerminationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_termination)
        try:
            self.state = 1202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1196
                self.match(tsqlParser.ROLLBACK)
                self.state = 1197
                self.match(tsqlParser.AFTER)
                self.state = 1198
                localctx.seconds = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1199
                self.match(tsqlParser.ROLLBACK)
                self.state = 1200
                self.match(tsqlParser.IMMEDIATE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1201
                self.match(tsqlParser.NO_WAIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # R_idContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_drop_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_index" ):
                listener.enterDrop_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_index" ):
                listener.exitDrop_index(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_index" ):
                return visitor.visitDrop_index(self)
            else:
                return visitor.visitChildren(self)




    def drop_index(self):

        localctx = tsqlParser.Drop_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_drop_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self.match(tsqlParser.DROP)
            self.state = 1205
            self.match(tsqlParser.INDEX)
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1206
                self.match(tsqlParser.IF)
                self.state = 1207
                self.match(tsqlParser.EXISTS)


            self.state = 1210
            localctx.name = self.r_id()
            self.state = 1213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 1211
                self.match(tsqlParser.ON)
                self.state = 1212
                self.table_name()


            self.state = 1216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1215
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(tsqlParser.PROCEDURE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure" ):
                listener.enterDrop_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure" ):
                listener.exitDrop_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_procedure" ):
                return visitor.visitDrop_procedure(self)
            else:
                return visitor.visitChildren(self)




    def drop_procedure(self):

        localctx = tsqlParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_drop_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self.match(tsqlParser.DROP)
            self.state = 1219
            self.match(tsqlParser.PROCEDURE)
            self.state = 1222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1220
                self.match(tsqlParser.IF)
                self.state = 1221
                self.match(tsqlParser.EXISTS)


            self.state = 1224
            self.func_proc_name()
            self.state = 1226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1225
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_statisticsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # R_idContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_drop_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_statistics" ):
                listener.enterDrop_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_statistics" ):
                listener.exitDrop_statistics(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_statistics" ):
                return visitor.visitDrop_statistics(self)
            else:
                return visitor.visitChildren(self)




    def drop_statistics(self):

        localctx = tsqlParser.Drop_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_drop_statistics)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.match(tsqlParser.DROP)
            self.state = 1229
            self.match(tsqlParser.STATISTICS)
            self.state = 1233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1230
                self.table_name()
                self.state = 1231
                self.match(tsqlParser.DOT)


            self.state = 1235
            localctx.name = self.r_id()
            self.state = 1236
            self.match(tsqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table" ):
                listener.enterDrop_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table" ):
                listener.exitDrop_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_table" ):
                return visitor.visitDrop_table(self)
            else:
                return visitor.visitChildren(self)




    def drop_table(self):

        localctx = tsqlParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_drop_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.match(tsqlParser.DROP)
            self.state = 1239
            self.match(tsqlParser.TABLE)
            self.state = 1242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1240
                self.match(tsqlParser.IF)
                self.state = 1241
                self.match(tsqlParser.EXISTS)


            self.state = 1244
            self.table_name()
            self.state = 1246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1245
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_nameContext,i)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_view" ):
                listener.enterDrop_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_view" ):
                listener.exitDrop_view(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_view" ):
                return visitor.visitDrop_view(self)
            else:
                return visitor.visitChildren(self)




    def drop_view(self):

        localctx = tsqlParser.Drop_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_drop_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self.match(tsqlParser.DROP)
            self.state = 1249
            self.match(tsqlParser.VIEW)
            self.state = 1252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1250
                self.match(tsqlParser.IF)
                self.state = 1251
                self.match(tsqlParser.EXISTS)


            self.state = 1254
            self.simple_name()
            self.state = 1259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1255
                self.match(tsqlParser.COMMA)
                self.state = 1256
                self.simple_name()
                self.state = 1261
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 1262
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def default_value(self):
            return self.getTypedRuleContext(tsqlParser.Default_valueContext,0)


        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type" ):
                listener.enterCreate_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type" ):
                listener.exitCreate_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_type" ):
                return visitor.visitCreate_type(self)
            else:
                return visitor.visitChildren(self)




    def create_type(self):

        localctx = tsqlParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_create_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.match(tsqlParser.CREATE)
            self.state = 1266
            self.match(tsqlParser.TYPE)
            self.state = 1267
            localctx.name = self.simple_name()
            self.state = 1268
            self.match(tsqlParser.FROM)
            self.state = 1269
            self.data_type()
            self.state = 1270
            self.default_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type" ):
                listener.enterDrop_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type" ):
                listener.exitDrop_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_type" ):
                return visitor.visitDrop_type(self)
            else:
                return visitor.visitChildren(self)




    def drop_type(self):

        localctx = tsqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_drop_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272
            self.match(tsqlParser.DROP)
            self.state = 1273
            self.match(tsqlParser.TYPE)
            self.state = 1276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1274
                self.match(tsqlParser.IF)
                self.state = 1275
                self.match(tsqlParser.EXISTS)


            self.state = 1278
            localctx.name = self.simple_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rowset_function_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openquery(self):
            return self.getTypedRuleContext(tsqlParser.OpenqueryContext,0)


        def opendatasource(self):
            return self.getTypedRuleContext(tsqlParser.OpendatasourceContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_rowset_function_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function_limited" ):
                listener.enterRowset_function_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function_limited" ):
                listener.exitRowset_function_limited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowset_function_limited" ):
                return visitor.visitRowset_function_limited(self)
            else:
                return visitor.visitChildren(self)




    def rowset_function_limited(self):

        localctx = tsqlParser.Rowset_function_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_rowset_function_limited)
        try:
            self.state = 1282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.OPENQUERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1280
                self.openquery()
                pass
            elif token in [tsqlParser.OPENDATASOURCE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1281
                self.opendatasource()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.linked_server = None # R_idContext
            self.query = None # Token

        def OPENQUERY(self):
            return self.getToken(tsqlParser.OPENQUERY, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_openquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenquery" ):
                listener.enterOpenquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenquery" ):
                listener.exitOpenquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenquery" ):
                return visitor.visitOpenquery(self)
            else:
                return visitor.visitChildren(self)




    def openquery(self):

        localctx = tsqlParser.OpenqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_openquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.match(tsqlParser.OPENQUERY)
            self.state = 1285
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1286
            localctx.linked_server = self.r_id()
            self.state = 1287
            self.match(tsqlParser.COMMA)
            self.state = 1288
            localctx.query = self.match(tsqlParser.STRING)
            self.state = 1289
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpendatasourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider = None # Token
            self.init = None # Token
            self.database = None # R_idContext
            self.scheme = None # R_idContext
            self.table = None # R_idContext

        def OPENDATASOURCE(self):
            return self.getToken(tsqlParser.OPENDATASOURCE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_opendatasource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpendatasource" ):
                listener.enterOpendatasource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpendatasource" ):
                listener.exitOpendatasource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpendatasource" ):
                return visitor.visitOpendatasource(self)
            else:
                return visitor.visitChildren(self)




    def opendatasource(self):

        localctx = tsqlParser.OpendatasourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_opendatasource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.match(tsqlParser.OPENDATASOURCE)
            self.state = 1292
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1293
            localctx.provider = self.match(tsqlParser.STRING)
            self.state = 1294
            self.match(tsqlParser.COMMA)
            self.state = 1295
            localctx.init = self.match(tsqlParser.STRING)
            self.state = 1296
            self.match(tsqlParser.RR_BRACKET)
            self.state = 1297
            self.match(tsqlParser.DOT)
            self.state = 1299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FORCESEEK or _la==tsqlParser.NEXT or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DELAY - 196)) | (1 << (tsqlParser.DELETED - 196)) | (1 << (tsqlParser.DENSE_RANK - 196)) | (1 << (tsqlParser.DISABLE - 196)) | (1 << (tsqlParser.DYNAMIC - 196)) | (1 << (tsqlParser.ENCRYPTION - 196)) | (1 << (tsqlParser.EXPAND - 196)) | (1 << (tsqlParser.FAST - 196)) | (1 << (tsqlParser.FAST_FORWARD - 196)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (tsqlParser.FIRST - 262)) | (1 << (tsqlParser.FIRST_VALUE - 262)) | (1 << (tsqlParser.FOLLOWING - 262)) | (1 << (tsqlParser.FORCE - 262)) | (1 << (tsqlParser.FORCED - 262)) | (1 << (tsqlParser.FORWARD_ONLY - 262)) | (1 << (tsqlParser.FULLSCAN - 262)) | (1 << (tsqlParser.GLOBAL - 262)) | (1 << (tsqlParser.GO - 262)) | (1 << (tsqlParser.GROUPING - 262)) | (1 << (tsqlParser.GROUPING_ID - 262)) | (1 << (tsqlParser.HASH - 262)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 262)) | (1 << (tsqlParser.IMPERSONATE - 262)) | (1 << (tsqlParser.INSENSITIVE - 262)) | (1 << (tsqlParser.INSERTED - 262)) | (1 << (tsqlParser.ISOLATION - 262)) | (1 << (tsqlParser.KEEP - 262)) | (1 << (tsqlParser.KEEPFIXED - 262)) | (1 << (tsqlParser.KEYSET - 262)) | (1 << (tsqlParser.LAG - 262)) | (1 << (tsqlParser.LAST - 262)) | (1 << (tsqlParser.LEAD - 262)) | (1 << (tsqlParser.LEVEL - 262)) | (1 << (tsqlParser.LOCAL - 262)) | (1 << (tsqlParser.LOCK_ESCALATION - 262)) | (1 << (tsqlParser.LOGIN - 262)) | (1 << (tsqlParser.LOOP - 262)) | (1 << (tsqlParser.MARK - 262)) | (1 << (tsqlParser.MAX - 262)) | (1 << (tsqlParser.MAXDOP - 262)) | (1 << (tsqlParser.MAXRECURSION - 262)) | (1 << (tsqlParser.MIN - 262)) | (1 << (tsqlParser.MODIFY - 262)) | (1 << (tsqlParser.NAME - 262)) | (1 << (tsqlParser.NOCOUNT - 262)) | (1 << (tsqlParser.NOEXPAND - 262)) | (1 << (tsqlParser.NORECOMPUTE - 262)) | (1 << (tsqlParser.NTILE - 262)) | (1 << (tsqlParser.NUMBER - 262)) | (1 << (tsqlParser.OFFSET - 262)) | (1 << (tsqlParser.ONLINE - 262)) | (1 << (tsqlParser.ONLY - 262)) | (1 << (tsqlParser.OPTIMISTIC - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (tsqlParser.OPTIMIZE - 326)) | (1 << (tsqlParser.OUT - 326)) | (1 << (tsqlParser.OUTPUT - 326)) | (1 << (tsqlParser.OWNER - 326)) | (1 << (tsqlParser.PARAMETERIZATION - 326)) | (1 << (tsqlParser.PARTITION - 326)) | (1 << (tsqlParser.PATH - 326)) | (1 << (tsqlParser.PRECEDING - 326)) | (1 << (tsqlParser.PRIOR - 326)) | (1 << (tsqlParser.PRIVILEGES - 326)) | (1 << (tsqlParser.RANGE - 326)) | (1 << (tsqlParser.RANK - 326)) | (1 << (tsqlParser.READONLY - 326)) | (1 << (tsqlParser.READ_ONLY - 326)) | (1 << (tsqlParser.RECOMPILE - 326)) | (1 << (tsqlParser.RELATIVE - 326)) | (1 << (tsqlParser.REMOTE - 326)) | (1 << (tsqlParser.REPEATABLE - 326)) | (1 << (tsqlParser.ROBUST - 326)) | (1 << (tsqlParser.ROOT - 326)) | (1 << (tsqlParser.ROW - 326)) | (1 << (tsqlParser.ROWGUID - 326)) | (1 << (tsqlParser.ROWS - 326)) | (1 << (tsqlParser.ROW_NUMBER - 326)) | (1 << (tsqlParser.SAMPLE - 326)) | (1 << (tsqlParser.SCHEMABINDING - 326)) | (1 << (tsqlParser.SCROLL - 326)) | (1 << (tsqlParser.SCROLL_LOCKS - 326)) | (1 << (tsqlParser.SELF - 326)) | (1 << (tsqlParser.SERIALIZABLE - 326)) | (1 << (tsqlParser.SIMPLE - 326)) | (1 << (tsqlParser.SIZE - 326)) | (1 << (tsqlParser.SNAPSHOT - 326)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 326)) | (1 << (tsqlParser.STATIC - 326)) | (1 << (tsqlParser.STATS_STREAM - 326)) | (1 << (tsqlParser.STDEV - 326)) | (1 << (tsqlParser.STDEVP - 326)) | (1 << (tsqlParser.SUM - 326)) | (1 << (tsqlParser.TEXTIMAGE_ON - 326)) | (1 << (tsqlParser.THROW - 326)) | (1 << (tsqlParser.TIES - 326)) | (1 << (tsqlParser.TIME - 326)) | (1 << (tsqlParser.TRY - 326)) | (1 << (tsqlParser.TYPE - 326)) | (1 << (tsqlParser.TYPE_WARNING - 326)) | (1 << (tsqlParser.UNBOUNDED - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.UNCOMMITTED - 390)) | (1 << (tsqlParser.UNKNOWN - 390)) | (1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                self.state = 1298
                localctx.database = self.r_id()


            self.state = 1301
            self.match(tsqlParser.DOT)
            self.state = 1303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FORCESEEK or _la==tsqlParser.NEXT or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DELAY - 196)) | (1 << (tsqlParser.DELETED - 196)) | (1 << (tsqlParser.DENSE_RANK - 196)) | (1 << (tsqlParser.DISABLE - 196)) | (1 << (tsqlParser.DYNAMIC - 196)) | (1 << (tsqlParser.ENCRYPTION - 196)) | (1 << (tsqlParser.EXPAND - 196)) | (1 << (tsqlParser.FAST - 196)) | (1 << (tsqlParser.FAST_FORWARD - 196)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (tsqlParser.FIRST - 262)) | (1 << (tsqlParser.FIRST_VALUE - 262)) | (1 << (tsqlParser.FOLLOWING - 262)) | (1 << (tsqlParser.FORCE - 262)) | (1 << (tsqlParser.FORCED - 262)) | (1 << (tsqlParser.FORWARD_ONLY - 262)) | (1 << (tsqlParser.FULLSCAN - 262)) | (1 << (tsqlParser.GLOBAL - 262)) | (1 << (tsqlParser.GO - 262)) | (1 << (tsqlParser.GROUPING - 262)) | (1 << (tsqlParser.GROUPING_ID - 262)) | (1 << (tsqlParser.HASH - 262)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 262)) | (1 << (tsqlParser.IMPERSONATE - 262)) | (1 << (tsqlParser.INSENSITIVE - 262)) | (1 << (tsqlParser.INSERTED - 262)) | (1 << (tsqlParser.ISOLATION - 262)) | (1 << (tsqlParser.KEEP - 262)) | (1 << (tsqlParser.KEEPFIXED - 262)) | (1 << (tsqlParser.KEYSET - 262)) | (1 << (tsqlParser.LAG - 262)) | (1 << (tsqlParser.LAST - 262)) | (1 << (tsqlParser.LEAD - 262)) | (1 << (tsqlParser.LEVEL - 262)) | (1 << (tsqlParser.LOCAL - 262)) | (1 << (tsqlParser.LOCK_ESCALATION - 262)) | (1 << (tsqlParser.LOGIN - 262)) | (1 << (tsqlParser.LOOP - 262)) | (1 << (tsqlParser.MARK - 262)) | (1 << (tsqlParser.MAX - 262)) | (1 << (tsqlParser.MAXDOP - 262)) | (1 << (tsqlParser.MAXRECURSION - 262)) | (1 << (tsqlParser.MIN - 262)) | (1 << (tsqlParser.MODIFY - 262)) | (1 << (tsqlParser.NAME - 262)) | (1 << (tsqlParser.NOCOUNT - 262)) | (1 << (tsqlParser.NOEXPAND - 262)) | (1 << (tsqlParser.NORECOMPUTE - 262)) | (1 << (tsqlParser.NTILE - 262)) | (1 << (tsqlParser.NUMBER - 262)) | (1 << (tsqlParser.OFFSET - 262)) | (1 << (tsqlParser.ONLINE - 262)) | (1 << (tsqlParser.ONLY - 262)) | (1 << (tsqlParser.OPTIMISTIC - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (tsqlParser.OPTIMIZE - 326)) | (1 << (tsqlParser.OUT - 326)) | (1 << (tsqlParser.OUTPUT - 326)) | (1 << (tsqlParser.OWNER - 326)) | (1 << (tsqlParser.PARAMETERIZATION - 326)) | (1 << (tsqlParser.PARTITION - 326)) | (1 << (tsqlParser.PATH - 326)) | (1 << (tsqlParser.PRECEDING - 326)) | (1 << (tsqlParser.PRIOR - 326)) | (1 << (tsqlParser.PRIVILEGES - 326)) | (1 << (tsqlParser.RANGE - 326)) | (1 << (tsqlParser.RANK - 326)) | (1 << (tsqlParser.READONLY - 326)) | (1 << (tsqlParser.READ_ONLY - 326)) | (1 << (tsqlParser.RECOMPILE - 326)) | (1 << (tsqlParser.RELATIVE - 326)) | (1 << (tsqlParser.REMOTE - 326)) | (1 << (tsqlParser.REPEATABLE - 326)) | (1 << (tsqlParser.ROBUST - 326)) | (1 << (tsqlParser.ROOT - 326)) | (1 << (tsqlParser.ROW - 326)) | (1 << (tsqlParser.ROWGUID - 326)) | (1 << (tsqlParser.ROWS - 326)) | (1 << (tsqlParser.ROW_NUMBER - 326)) | (1 << (tsqlParser.SAMPLE - 326)) | (1 << (tsqlParser.SCHEMABINDING - 326)) | (1 << (tsqlParser.SCROLL - 326)) | (1 << (tsqlParser.SCROLL_LOCKS - 326)) | (1 << (tsqlParser.SELF - 326)) | (1 << (tsqlParser.SERIALIZABLE - 326)) | (1 << (tsqlParser.SIMPLE - 326)) | (1 << (tsqlParser.SIZE - 326)) | (1 << (tsqlParser.SNAPSHOT - 326)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 326)) | (1 << (tsqlParser.STATIC - 326)) | (1 << (tsqlParser.STATS_STREAM - 326)) | (1 << (tsqlParser.STDEV - 326)) | (1 << (tsqlParser.STDEVP - 326)) | (1 << (tsqlParser.SUM - 326)) | (1 << (tsqlParser.TEXTIMAGE_ON - 326)) | (1 << (tsqlParser.THROW - 326)) | (1 << (tsqlParser.TIES - 326)) | (1 << (tsqlParser.TIME - 326)) | (1 << (tsqlParser.TRY - 326)) | (1 << (tsqlParser.TYPE - 326)) | (1 << (tsqlParser.TYPE_WARNING - 326)) | (1 << (tsqlParser.UNBOUNDED - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.UNCOMMITTED - 390)) | (1 << (tsqlParser.UNKNOWN - 390)) | (1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                self.state = 1302
                localctx.scheme = self.r_id()


            self.state = 1305
            self.match(tsqlParser.DOT)

            self.state = 1306
            localctx.table = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(tsqlParser.DECLARE, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(tsqlParser.Table_type_definitionContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def declare_local(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Declare_localContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Declare_localContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_statement" ):
                listener.enterDeclare_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_statement" ):
                listener.exitDeclare_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_statement" ):
                return visitor.visitDeclare_statement(self)
            else:
                return visitor.visitChildren(self)




    def declare_statement(self):

        localctx = tsqlParser.Declare_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_declare_statement)
        self._la = 0 # Token type
        try:
            self.state = 1329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1308
                self.match(tsqlParser.DECLARE)
                self.state = 1309
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 1310
                    self.match(tsqlParser.AS)


                self.state = 1313
                self.table_type_definition()
                self.state = 1315
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1314
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1317
                self.match(tsqlParser.DECLARE)
                self.state = 1318
                self.declare_local()
                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1319
                    self.match(tsqlParser.COMMA)
                    self.state = 1320
                    self.declare_local()
                    self.state = 1325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1326
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(tsqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def DEALLOCATE(self):
            return self.getToken(tsqlParser.DEALLOCATE, 0)

        def declare_cursor(self):
            return self.getTypedRuleContext(tsqlParser.Declare_cursorContext,0)


        def fetch_cursor(self):
            return self.getTypedRuleContext(tsqlParser.Fetch_cursorContext,0)


        def OPEN(self):
            return self.getToken(tsqlParser.OPEN, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_statement" ):
                listener.enterCursor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_statement" ):
                listener.exitCursor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_statement" ):
                return visitor.visitCursor_statement(self)
            else:
                return visitor.visitChildren(self)




    def cursor_statement(self):

        localctx = tsqlParser.Cursor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_cursor_statement)
        try:
            self.state = 1357
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1331
                self.match(tsqlParser.CLOSE)
                self.state = 1333
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1332
                    self.match(tsqlParser.GLOBAL)


                self.state = 1335
                self.cursor_name()
                self.state = 1337
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                if la_ == 1:
                    self.state = 1336
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.DEALLOCATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1339
                self.match(tsqlParser.DEALLOCATE)
                self.state = 1341
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 1340
                    self.match(tsqlParser.GLOBAL)


                self.state = 1343
                self.cursor_name()
                self.state = 1345
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1344
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.DECLARE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1347
                self.declare_cursor()
                pass
            elif token in [tsqlParser.FETCH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1348
                self.fetch_cursor()
                pass
            elif token in [tsqlParser.OPEN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1349
                self.match(tsqlParser.OPEN)
                self.state = 1351
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1350
                    self.match(tsqlParser.GLOBAL)


                self.state = 1353
                self.cursor_name()
                self.state = 1355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1354
                    self.match(tsqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.return_status = None # Token

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def execute_statement_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Execute_statement_argContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Execute_statement_argContext,i)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def execute_var_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Execute_var_stringContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Execute_var_stringContext,i)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def LOGIN(self):
            return self.getToken(tsqlParser.LOGIN, 0)

        def USER(self):
            return self.getToken(tsqlParser.USER, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement" ):
                listener.enterExecute_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement" ):
                listener.exitExecute_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_statement" ):
                return visitor.visitExecute_statement(self)
            else:
                return visitor.visitChildren(self)




    def execute_statement(self):

        localctx = tsqlParser.Execute_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_execute_statement)
        self._la = 0 # Token type
        try:
            self.state = 1400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1359
                self.match(tsqlParser.EXECUTE)
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LOCAL_ID:
                    self.state = 1360
                    localctx.return_status = self.match(tsqlParser.LOCAL_ID)
                    self.state = 1361
                    self.match(tsqlParser.EQUAL)


                self.state = 1364
                self.func_proc_name()
                self.state = 1373
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1365
                    self.execute_statement_arg()
                    self.state = 1370
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 1366
                        self.match(tsqlParser.COMMA)
                        self.state = 1367
                        self.execute_statement_arg()
                        self.state = 1372
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1376
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1375
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1378
                self.match(tsqlParser.EXECUTE)
                self.state = 1379
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1380
                self.execute_var_string()
                self.state = 1385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.PLUS:
                    self.state = 1381
                    self.match(tsqlParser.PLUS)
                    self.state = 1382
                    self.execute_var_string()
                    self.state = 1387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1388
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1390
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.AS:
                        self.state = 1389
                        self.match(tsqlParser.AS)


                    self.state = 1392
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.USER or _la==tsqlParser.LOGIN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1393
                    self.match(tsqlParser.EQUAL)
                    self.state = 1394
                    self.match(tsqlParser.STRING)


                self.state = 1398
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1397
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_statement_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parameter = None # Token

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_statement_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement_arg" ):
                listener.enterExecute_statement_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement_arg" ):
                listener.exitExecute_statement_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_statement_arg" ):
                return visitor.visitExecute_statement_arg(self)
            else:
                return visitor.visitChildren(self)




    def execute_statement_arg(self):

        localctx = tsqlParser.Execute_statement_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_execute_statement_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1402
                localctx.parameter = self.match(tsqlParser.LOCAL_ID)
                self.state = 1403
                self.match(tsqlParser.EQUAL)


            self.state = 1415
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.state = 1408
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                    self.state = 1406
                    self.constant_LOCAL_ID()
                    pass
                elif token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1407
                    self.r_id()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1411
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1410
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.OUT or _la==tsqlParser.OUTPUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [tsqlParser.DEFAULT]:
                self.state = 1413
                self.match(tsqlParser.DEFAULT)
                pass
            elif token in [tsqlParser.NULL]:
                self.state = 1414
                self.match(tsqlParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_var_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_var_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_var_string" ):
                listener.enterExecute_var_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_var_string" ):
                listener.exitExecute_var_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_var_string" ):
                return visitor.visitExecute_var_string(self)
            else:
                return visitor.visitChildren(self)




    def execute_var_string(self):

        localctx = tsqlParser.Execute_var_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_execute_var_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1417
            _la = self._input.LA(1)
            if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Security_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.on_id = None # Table_nameContext
            self.to_principal = None # R_idContext
            self.as_principal = None # R_idContext

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.GRANT)
            else:
                return self.getToken(tsqlParser.GRANT, i)

        def TO(self):
            return self.getToken(tsqlParser.TO, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def grant_permission(self):
            return self.getTypedRuleContext(tsqlParser.Grant_permissionContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def PRIVILEGES(self):
            return self.getToken(tsqlParser.PRIVILEGES, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def REVERT(self):
            return self.getToken(tsqlParser.REVERT, 0)

        def COOKIE(self):
            return self.getToken(tsqlParser.COOKIE, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_security_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurity_statement" ):
                listener.enterSecurity_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurity_statement" ):
                listener.exitSecurity_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecurity_statement" ):
                return visitor.visitSecurity_statement(self)
            else:
                return visitor.visitChildren(self)




    def security_statement(self):

        localctx = tsqlParser.Security_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_security_statement)
        self._la = 0 # Token type
        try:
            self.state = 1467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1419
                self.execute_clause()
                self.state = 1421
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                if la_ == 1:
                    self.state = 1420
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.GRANT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1423
                self.match(tsqlParser.GRANT)
                self.state = 1435
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.ALL]:
                    self.state = 1424
                    self.match(tsqlParser.ALL)
                    self.state = 1426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.PRIVILEGES:
                        self.state = 1425
                        self.match(tsqlParser.PRIVILEGES)


                    pass
                elif token in [tsqlParser.ALTER, tsqlParser.CREATE, tsqlParser.EXECUTE, tsqlParser.INSERT, tsqlParser.REFERENCES, tsqlParser.SELECT, tsqlParser.VIEW, tsqlParser.CONTROL, tsqlParser.IMPERSONATE, tsqlParser.SHOWPLAN, tsqlParser.TAKE]:
                    self.state = 1428
                    self.grant_permission()
                    self.state = 1433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.LR_BRACKET:
                        self.state = 1429
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 1430
                        self.column_name_list()
                        self.state = 1431
                        self.match(tsqlParser.RR_BRACKET)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ON:
                    self.state = 1437
                    self.match(tsqlParser.ON)
                    self.state = 1438
                    localctx.on_id = self.table_name()


                self.state = 1441
                self.match(tsqlParser.TO)

                self.state = 1442
                localctx.to_principal = self.r_id()
                self.state = 1446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1443
                    self.match(tsqlParser.WITH)
                    self.state = 1444
                    self.match(tsqlParser.GRANT)
                    self.state = 1445
                    self.match(tsqlParser.OPTION)


                self.state = 1450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 1448
                    self.match(tsqlParser.AS)
                    self.state = 1449
                    localctx.as_principal = self.r_id()


                self.state = 1453
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1452
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.REVERT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1455
                self.match(tsqlParser.REVERT)
                self.state = 1462
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1456
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 1457
                    self.match(tsqlParser.WITH)
                    self.state = 1458
                    self.match(tsqlParser.COOKIE)
                    self.state = 1459
                    self.match(tsqlParser.EQUAL)
                    self.state = 1460
                    self.match(tsqlParser.LOCAL_ID)
                    self.state = 1461
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 1465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1464
                    self.match(tsqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grant_permissionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def TAKE(self):
            return self.getToken(tsqlParser.TAKE, 0)

        def CONTROL(self):
            return self.getToken(tsqlParser.CONTROL, 0)

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def SHOWPLAN(self):
            return self.getToken(tsqlParser.SHOWPLAN, 0)

        def IMPERSONATE(self):
            return self.getToken(tsqlParser.IMPERSONATE, 0)

        def SELECT(self):
            return self.getToken(tsqlParser.SELECT, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def ANY(self):
            return self.getToken(tsqlParser.ANY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_grant_permission

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_permission" ):
                listener.enterGrant_permission(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_permission" ):
                listener.exitGrant_permission(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrant_permission" ):
                return visitor.visitGrant_permission(self)
            else:
                return visitor.visitChildren(self)




    def grant_permission(self):

        localctx = tsqlParser.Grant_permissionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_grant_permission)
        self._la = 0 # Token type
        try:
            self.state = 1495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1469
                self.match(tsqlParser.EXECUTE)
                pass
            elif token in [tsqlParser.VIEW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1470
                self.match(tsqlParser.VIEW)
                self.state = 1471
                self.r_id()
                pass
            elif token in [tsqlParser.TAKE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1472
                self.match(tsqlParser.TAKE)
                self.state = 1473
                self.r_id()
                pass
            elif token in [tsqlParser.CONTROL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1474
                self.match(tsqlParser.CONTROL)
                self.state = 1476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or _la==tsqlParser.NEXT or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DELAY - 196)) | (1 << (tsqlParser.DELETED - 196)) | (1 << (tsqlParser.DENSE_RANK - 196)) | (1 << (tsqlParser.DISABLE - 196)) | (1 << (tsqlParser.DYNAMIC - 196)) | (1 << (tsqlParser.ENCRYPTION - 196)) | (1 << (tsqlParser.EXPAND - 196)) | (1 << (tsqlParser.FAST - 196)) | (1 << (tsqlParser.FAST_FORWARD - 196)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (tsqlParser.FIRST - 262)) | (1 << (tsqlParser.FIRST_VALUE - 262)) | (1 << (tsqlParser.FOLLOWING - 262)) | (1 << (tsqlParser.FORCE - 262)) | (1 << (tsqlParser.FORCED - 262)) | (1 << (tsqlParser.FORWARD_ONLY - 262)) | (1 << (tsqlParser.FULLSCAN - 262)) | (1 << (tsqlParser.GLOBAL - 262)) | (1 << (tsqlParser.GO - 262)) | (1 << (tsqlParser.GROUPING - 262)) | (1 << (tsqlParser.GROUPING_ID - 262)) | (1 << (tsqlParser.HASH - 262)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 262)) | (1 << (tsqlParser.IMPERSONATE - 262)) | (1 << (tsqlParser.INSENSITIVE - 262)) | (1 << (tsqlParser.INSERTED - 262)) | (1 << (tsqlParser.ISOLATION - 262)) | (1 << (tsqlParser.KEEP - 262)) | (1 << (tsqlParser.KEEPFIXED - 262)) | (1 << (tsqlParser.KEYSET - 262)) | (1 << (tsqlParser.LAG - 262)) | (1 << (tsqlParser.LAST - 262)) | (1 << (tsqlParser.LEAD - 262)) | (1 << (tsqlParser.LEVEL - 262)) | (1 << (tsqlParser.LOCAL - 262)) | (1 << (tsqlParser.LOCK_ESCALATION - 262)) | (1 << (tsqlParser.LOGIN - 262)) | (1 << (tsqlParser.LOOP - 262)) | (1 << (tsqlParser.MARK - 262)) | (1 << (tsqlParser.MAX - 262)) | (1 << (tsqlParser.MAXDOP - 262)) | (1 << (tsqlParser.MAXRECURSION - 262)) | (1 << (tsqlParser.MIN - 262)) | (1 << (tsqlParser.MODIFY - 262)) | (1 << (tsqlParser.NAME - 262)) | (1 << (tsqlParser.NOCOUNT - 262)) | (1 << (tsqlParser.NOEXPAND - 262)) | (1 << (tsqlParser.NORECOMPUTE - 262)) | (1 << (tsqlParser.NTILE - 262)) | (1 << (tsqlParser.NUMBER - 262)) | (1 << (tsqlParser.OFFSET - 262)) | (1 << (tsqlParser.ONLINE - 262)) | (1 << (tsqlParser.ONLY - 262)) | (1 << (tsqlParser.OPTIMISTIC - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (tsqlParser.OPTIMIZE - 326)) | (1 << (tsqlParser.OUT - 326)) | (1 << (tsqlParser.OUTPUT - 326)) | (1 << (tsqlParser.OWNER - 326)) | (1 << (tsqlParser.PARAMETERIZATION - 326)) | (1 << (tsqlParser.PARTITION - 326)) | (1 << (tsqlParser.PATH - 326)) | (1 << (tsqlParser.PRECEDING - 326)) | (1 << (tsqlParser.PRIOR - 326)) | (1 << (tsqlParser.PRIVILEGES - 326)) | (1 << (tsqlParser.RANGE - 326)) | (1 << (tsqlParser.RANK - 326)) | (1 << (tsqlParser.READONLY - 326)) | (1 << (tsqlParser.READ_ONLY - 326)) | (1 << (tsqlParser.RECOMPILE - 326)) | (1 << (tsqlParser.RELATIVE - 326)) | (1 << (tsqlParser.REMOTE - 326)) | (1 << (tsqlParser.REPEATABLE - 326)) | (1 << (tsqlParser.ROBUST - 326)) | (1 << (tsqlParser.ROOT - 326)) | (1 << (tsqlParser.ROW - 326)) | (1 << (tsqlParser.ROWGUID - 326)) | (1 << (tsqlParser.ROWS - 326)) | (1 << (tsqlParser.ROW_NUMBER - 326)) | (1 << (tsqlParser.SAMPLE - 326)) | (1 << (tsqlParser.SCHEMABINDING - 326)) | (1 << (tsqlParser.SCROLL - 326)) | (1 << (tsqlParser.SCROLL_LOCKS - 326)) | (1 << (tsqlParser.SELF - 326)) | (1 << (tsqlParser.SERIALIZABLE - 326)) | (1 << (tsqlParser.SIMPLE - 326)) | (1 << (tsqlParser.SIZE - 326)) | (1 << (tsqlParser.SNAPSHOT - 326)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 326)) | (1 << (tsqlParser.STATIC - 326)) | (1 << (tsqlParser.STATS_STREAM - 326)) | (1 << (tsqlParser.STDEV - 326)) | (1 << (tsqlParser.STDEVP - 326)) | (1 << (tsqlParser.SUM - 326)) | (1 << (tsqlParser.TEXTIMAGE_ON - 326)) | (1 << (tsqlParser.THROW - 326)) | (1 << (tsqlParser.TIES - 326)) | (1 << (tsqlParser.TIME - 326)) | (1 << (tsqlParser.TRY - 326)) | (1 << (tsqlParser.TYPE - 326)) | (1 << (tsqlParser.TYPE_WARNING - 326)) | (1 << (tsqlParser.UNBOUNDED - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.UNCOMMITTED - 390)) | (1 << (tsqlParser.UNKNOWN - 390)) | (1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                    self.state = 1475
                    self.r_id()


                pass
            elif token in [tsqlParser.CREATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1478
                self.match(tsqlParser.CREATE)
                self.state = 1479
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TABLE or _la==tsqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.SHOWPLAN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1480
                self.match(tsqlParser.SHOWPLAN)
                pass
            elif token in [tsqlParser.IMPERSONATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1481
                self.match(tsqlParser.IMPERSONATE)
                pass
            elif token in [tsqlParser.SELECT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1482
                self.match(tsqlParser.SELECT)
                pass
            elif token in [tsqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1483
                self.match(tsqlParser.REFERENCES)
                pass
            elif token in [tsqlParser.INSERT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1484
                self.match(tsqlParser.INSERT)
                pass
            elif token in [tsqlParser.ALTER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1485
                self.match(tsqlParser.ALTER)
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ANY or _la==tsqlParser.DATABASE or _la==tsqlParser.FORCESEEK or _la==tsqlParser.NEXT or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DELAY - 196)) | (1 << (tsqlParser.DELETED - 196)) | (1 << (tsqlParser.DENSE_RANK - 196)) | (1 << (tsqlParser.DISABLE - 196)) | (1 << (tsqlParser.DYNAMIC - 196)) | (1 << (tsqlParser.ENCRYPTION - 196)) | (1 << (tsqlParser.EXPAND - 196)) | (1 << (tsqlParser.FAST - 196)) | (1 << (tsqlParser.FAST_FORWARD - 196)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (tsqlParser.FIRST - 262)) | (1 << (tsqlParser.FIRST_VALUE - 262)) | (1 << (tsqlParser.FOLLOWING - 262)) | (1 << (tsqlParser.FORCE - 262)) | (1 << (tsqlParser.FORCED - 262)) | (1 << (tsqlParser.FORWARD_ONLY - 262)) | (1 << (tsqlParser.FULLSCAN - 262)) | (1 << (tsqlParser.GLOBAL - 262)) | (1 << (tsqlParser.GO - 262)) | (1 << (tsqlParser.GROUPING - 262)) | (1 << (tsqlParser.GROUPING_ID - 262)) | (1 << (tsqlParser.HASH - 262)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 262)) | (1 << (tsqlParser.IMPERSONATE - 262)) | (1 << (tsqlParser.INSENSITIVE - 262)) | (1 << (tsqlParser.INSERTED - 262)) | (1 << (tsqlParser.ISOLATION - 262)) | (1 << (tsqlParser.KEEP - 262)) | (1 << (tsqlParser.KEEPFIXED - 262)) | (1 << (tsqlParser.KEYSET - 262)) | (1 << (tsqlParser.LAG - 262)) | (1 << (tsqlParser.LAST - 262)) | (1 << (tsqlParser.LEAD - 262)) | (1 << (tsqlParser.LEVEL - 262)) | (1 << (tsqlParser.LOCAL - 262)) | (1 << (tsqlParser.LOCK_ESCALATION - 262)) | (1 << (tsqlParser.LOGIN - 262)) | (1 << (tsqlParser.LOOP - 262)) | (1 << (tsqlParser.MARK - 262)) | (1 << (tsqlParser.MAX - 262)) | (1 << (tsqlParser.MAXDOP - 262)) | (1 << (tsqlParser.MAXRECURSION - 262)) | (1 << (tsqlParser.MIN - 262)) | (1 << (tsqlParser.MODIFY - 262)) | (1 << (tsqlParser.NAME - 262)) | (1 << (tsqlParser.NOCOUNT - 262)) | (1 << (tsqlParser.NOEXPAND - 262)) | (1 << (tsqlParser.NORECOMPUTE - 262)) | (1 << (tsqlParser.NTILE - 262)) | (1 << (tsqlParser.NUMBER - 262)) | (1 << (tsqlParser.OFFSET - 262)) | (1 << (tsqlParser.ONLINE - 262)) | (1 << (tsqlParser.ONLY - 262)) | (1 << (tsqlParser.OPTIMISTIC - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (tsqlParser.OPTIMIZE - 326)) | (1 << (tsqlParser.OUT - 326)) | (1 << (tsqlParser.OUTPUT - 326)) | (1 << (tsqlParser.OWNER - 326)) | (1 << (tsqlParser.PARAMETERIZATION - 326)) | (1 << (tsqlParser.PARTITION - 326)) | (1 << (tsqlParser.PATH - 326)) | (1 << (tsqlParser.PRECEDING - 326)) | (1 << (tsqlParser.PRIOR - 326)) | (1 << (tsqlParser.PRIVILEGES - 326)) | (1 << (tsqlParser.RANGE - 326)) | (1 << (tsqlParser.RANK - 326)) | (1 << (tsqlParser.READONLY - 326)) | (1 << (tsqlParser.READ_ONLY - 326)) | (1 << (tsqlParser.RECOMPILE - 326)) | (1 << (tsqlParser.RELATIVE - 326)) | (1 << (tsqlParser.REMOTE - 326)) | (1 << (tsqlParser.REPEATABLE - 326)) | (1 << (tsqlParser.ROBUST - 326)) | (1 << (tsqlParser.ROOT - 326)) | (1 << (tsqlParser.ROW - 326)) | (1 << (tsqlParser.ROWGUID - 326)) | (1 << (tsqlParser.ROWS - 326)) | (1 << (tsqlParser.ROW_NUMBER - 326)) | (1 << (tsqlParser.SAMPLE - 326)) | (1 << (tsqlParser.SCHEMABINDING - 326)) | (1 << (tsqlParser.SCROLL - 326)) | (1 << (tsqlParser.SCROLL_LOCKS - 326)) | (1 << (tsqlParser.SELF - 326)) | (1 << (tsqlParser.SERIALIZABLE - 326)) | (1 << (tsqlParser.SIMPLE - 326)) | (1 << (tsqlParser.SIZE - 326)) | (1 << (tsqlParser.SNAPSHOT - 326)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 326)) | (1 << (tsqlParser.STATIC - 326)) | (1 << (tsqlParser.STATS_STREAM - 326)) | (1 << (tsqlParser.STDEV - 326)) | (1 << (tsqlParser.STDEVP - 326)) | (1 << (tsqlParser.SUM - 326)) | (1 << (tsqlParser.TEXTIMAGE_ON - 326)) | (1 << (tsqlParser.THROW - 326)) | (1 << (tsqlParser.TIES - 326)) | (1 << (tsqlParser.TIME - 326)) | (1 << (tsqlParser.TRY - 326)) | (1 << (tsqlParser.TYPE - 326)) | (1 << (tsqlParser.TYPE_WARNING - 326)) | (1 << (tsqlParser.UNBOUNDED - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.UNCOMMITTED - 390)) | (1 << (tsqlParser.UNKNOWN - 390)) | (1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                    self.state = 1487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.ANY:
                        self.state = 1486
                        self.match(tsqlParser.ANY)


                    self.state = 1491
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1489
                        self.r_id()
                        pass
                    elif token in [tsqlParser.DATABASE]:
                        self.state = 1490
                        self.match(tsqlParser.DATABASE)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.member_name = None # R_idContext

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(tsqlParser.Assignment_operatorContext,0)


        def CURSOR(self):
            return self.getToken(tsqlParser.CURSOR, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(tsqlParser.Declare_set_cursor_commonContext,0)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def set_special(self):
            return self.getTypedRuleContext(tsqlParser.Set_specialContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_set_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_statement" ):
                listener.enterSet_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_statement" ):
                listener.exitSet_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_statement" ):
                return visitor.visitSet_statement(self)
            else:
                return visitor.visitChildren(self)




    def set_statement(self):

        localctx = tsqlParser.Set_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_set_statement)
        self._la = 0 # Token type
        try:
            self.state = 1536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1497
                self.match(tsqlParser.SET)
                self.state = 1498
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.DOT:
                    self.state = 1499
                    self.match(tsqlParser.DOT)
                    self.state = 1500
                    localctx.member_name = self.r_id()


                self.state = 1503
                self.match(tsqlParser.EQUAL)
                self.state = 1504
                self.expression(0)
                self.state = 1506
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1505
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1508
                self.match(tsqlParser.SET)
                self.state = 1509
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1510
                self.assignment_operator()
                self.state = 1511
                self.expression(0)
                self.state = 1513
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1512
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1515
                self.match(tsqlParser.SET)
                self.state = 1516
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1517
                self.match(tsqlParser.EQUAL)
                self.state = 1518
                self.match(tsqlParser.CURSOR)
                self.state = 1519
                self.declare_set_cursor_common()
                self.state = 1530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FOR:
                    self.state = 1520
                    self.match(tsqlParser.FOR)
                    self.state = 1528
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.READ]:
                        self.state = 1521
                        self.match(tsqlParser.READ)
                        self.state = 1522
                        self.match(tsqlParser.ONLY)
                        pass
                    elif token in [tsqlParser.UPDATE]:
                        self.state = 1523
                        self.match(tsqlParser.UPDATE)
                        self.state = 1526
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==tsqlParser.OF:
                            self.state = 1524
                            self.match(tsqlParser.OF)
                            self.state = 1525
                            self.column_name_list()


                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 1533
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 1532
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1535
                self.set_special()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def DISTRIBUTED(self):
            return self.getToken(tsqlParser.DISTRIBUTED, 0)

        def TRAN(self):
            return self.getToken(tsqlParser.TRAN, 0)

        def TRANSACTION(self):
            return self.getToken(tsqlParser.TRANSACTION, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def MARK(self):
            return self.getToken(tsqlParser.MARK, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def COMMIT(self):
            return self.getToken(tsqlParser.COMMIT, 0)

        def DELAYED_DURABILITY(self):
            return self.getToken(tsqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def WORK(self):
            return self.getToken(tsqlParser.WORK, 0)

        def ROLLBACK(self):
            return self.getToken(tsqlParser.ROLLBACK, 0)

        def SAVE(self):
            return self.getToken(tsqlParser.SAVE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_transaction_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_statement" ):
                listener.enterTransaction_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_statement" ):
                listener.exitTransaction_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransaction_statement" ):
                return visitor.visitTransaction_statement(self)
            else:
                return visitor.visitChildren(self)




    def transaction_statement(self):

        localctx = tsqlParser.Transaction_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_transaction_statement)
        self._la = 0 # Token type
        try:
            self.state = 1615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1538
                self.match(tsqlParser.BEGIN)
                self.state = 1539
                self.match(tsqlParser.DISTRIBUTED)
                self.state = 1540
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1543
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                if la_ == 1:
                    self.state = 1541
                    self.r_id()

                elif la_ == 2:
                    self.state = 1542
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1546
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1545
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1548
                self.match(tsqlParser.BEGIN)
                self.state = 1549
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1559
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 1552
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1550
                        self.r_id()
                        pass
                    elif token in [tsqlParser.LOCAL_ID]:
                        self.state = 1551
                        self.match(tsqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1557
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                    if la_ == 1:
                        self.state = 1554
                        self.match(tsqlParser.WITH)
                        self.state = 1555
                        self.match(tsqlParser.MARK)
                        self.state = 1556
                        self.match(tsqlParser.STRING)




                self.state = 1562
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1561
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1564
                self.match(tsqlParser.COMMIT)
                self.state = 1565
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 1568
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1566
                        self.r_id()
                        pass
                    elif token in [tsqlParser.LOCAL_ID]:
                        self.state = 1567
                        self.match(tsqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1576
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                    if la_ == 1:
                        self.state = 1570
                        self.match(tsqlParser.WITH)
                        self.state = 1571
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 1572
                        self.match(tsqlParser.DELAYED_DURABILITY)
                        self.state = 1573
                        self.match(tsqlParser.EQUAL)
                        self.state = 1574
                        _la = self._input.LA(1)
                        if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1575
                        self.match(tsqlParser.RR_BRACKET)




                self.state = 1581
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1580
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1583
                self.match(tsqlParser.COMMIT)
                self.state = 1585
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1584
                    self.match(tsqlParser.WORK)


                self.state = 1588
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 1587
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1590
                self.match(tsqlParser.ROLLBACK)
                self.state = 1591
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1594
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 1592
                    self.r_id()

                elif la_ == 2:
                    self.state = 1593
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1597
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 1596
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1599
                self.match(tsqlParser.ROLLBACK)
                self.state = 1601
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                if la_ == 1:
                    self.state = 1600
                    self.match(tsqlParser.WORK)


                self.state = 1604
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 1603
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1606
                self.match(tsqlParser.SAVE)
                self.state = 1607
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1610
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1608
                    self.r_id()

                elif la_ == 2:
                    self.state = 1609
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1613
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1612
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Go_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # Token

        def GO(self):
            return self.getToken(tsqlParser.GO, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_go_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGo_statement" ):
                listener.enterGo_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGo_statement" ):
                listener.exitGo_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGo_statement" ):
                return visitor.visitGo_statement(self)
            else:
                return visitor.visitChildren(self)




    def go_statement(self):

        localctx = tsqlParser.Go_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_go_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.match(tsqlParser.GO)
            self.state = 1619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.DECIMAL:
                self.state = 1618
                localctx.count = self.match(tsqlParser.DECIMAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Use_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext

        def USE(self):
            return self.getToken(tsqlParser.USE, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_use_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_statement" ):
                listener.enterUse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_statement" ):
                listener.exitUse_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse_statement" ):
                return visitor.visitUse_statement(self)
            else:
                return visitor.visitChildren(self)




    def use_statement(self):

        localctx = tsqlParser.Use_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_use_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.match(tsqlParser.USE)
            self.state = 1622
            localctx.database = self.r_id()
            self.state = 1624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.state = 1623
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.clause = None # Token

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def CALLER(self):
            return self.getToken(tsqlParser.CALLER, 0)

        def SELF(self):
            return self.getToken(tsqlParser.SELF, 0)

        def OWNER(self):
            return self.getToken(tsqlParser.OWNER, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_clause" ):
                listener.enterExecute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_clause" ):
                listener.exitExecute_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_clause" ):
                return visitor.visitExecute_clause(self)
            else:
                return visitor.visitChildren(self)




    def execute_clause(self):

        localctx = tsqlParser.Execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1626
            self.match(tsqlParser.EXECUTE)
            self.state = 1627
            self.match(tsqlParser.AS)
            self.state = 1628
            localctx.clause = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.CALLER or _la==tsqlParser.OWNER or _la==tsqlParser.SELF or _la==tsqlParser.STRING):
                localctx.clause = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_localContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_local

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_local" ):
                listener.enterDeclare_local(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_local" ):
                listener.exitDeclare_local(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_local" ):
                return visitor.visitDeclare_local(self)
            else:
                return visitor.visitChildren(self)




    def declare_local(self):

        localctx = tsqlParser.Declare_localContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_declare_local)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1630
            self.match(tsqlParser.LOCAL_ID)
            self.state = 1632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 1631
                self.match(tsqlParser.AS)


            self.state = 1634
            self.data_type()
            self.state = 1637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.EQUAL:
                self.state = 1635
                self.match(tsqlParser.EQUAL)
                self.state = 1636
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_definition" ):
                listener.enterTable_type_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_definition" ):
                listener.exitTable_type_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_type_definition" ):
                return visitor.visitTable_type_definition(self)
            else:
                return visitor.visitChildren(self)




    def table_type_definition(self):

        localctx = tsqlParser.Table_type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_table_type_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            self.match(tsqlParser.TABLE)
            self.state = 1640
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1641
            self.column_def_table_constraints()
            self.state = 1642
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_def_table_constraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_def_table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_def_table_constraintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_def_table_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraints" ):
                listener.enterColumn_def_table_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraints" ):
                listener.exitColumn_def_table_constraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def_table_constraints" ):
                return visitor.visitColumn_def_table_constraints(self)
            else:
                return visitor.visitChildren(self)




    def column_def_table_constraints(self):

        localctx = tsqlParser.Column_def_table_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_column_def_table_constraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.column_def_table_constraint()
            self.state = 1651
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,240,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1646
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.COMMA:
                        self.state = 1645
                        self.match(tsqlParser.COMMA)


                    self.state = 1648
                    self.column_def_table_constraint() 
                self.state = 1653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,240,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_def_table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_definition(self):
            return self.getTypedRuleContext(tsqlParser.Column_definitionContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(tsqlParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_def_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraint" ):
                listener.enterColumn_def_table_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraint" ):
                listener.exitColumn_def_table_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def_table_constraint" ):
                return visitor.visitColumn_def_table_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_def_table_constraint(self):

        localctx = tsqlParser.Column_def_table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_column_def_table_constraint)
        try:
            self.state = 1656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1654
                self.column_definition()
                pass
            elif token in [tsqlParser.CHECK, tsqlParser.CONSTRAINT, tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1655
                self.table_constraint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # R_idContext
            self.seed = None # Token
            self.increment = None # Token

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(tsqlParser.Constant_expressionContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def ROWGUIDCOL(self):
            return self.getToken(tsqlParser.ROWGUIDCOL, 0)

        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_constraintContext,i)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_definition" ):
                listener.enterColumn_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_definition" ):
                listener.exitColumn_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_definition" ):
                return visitor.visitColumn_definition(self)
            else:
                return visitor.visitChildren(self)




    def column_definition(self):

        localctx = tsqlParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1658
            self.r_id()
            self.state = 1662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 1659
                self.data_type()
                pass
            elif token in [tsqlParser.AS]:
                self.state = 1660
                self.match(tsqlParser.AS)
                self.state = 1661
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COLLATE:
                self.state = 1664
                self.match(tsqlParser.COLLATE)
                self.state = 1665
                self.r_id()


            self.state = 1669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 1668
                self.null_notnull()


            self.state = 1694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.state = 1673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CONSTRAINT:
                    self.state = 1671
                    self.match(tsqlParser.CONSTRAINT)
                    self.state = 1672
                    localctx.constraint = self.r_id()


                self.state = 1675
                self.match(tsqlParser.DEFAULT)
                self.state = 1676
                self.constant_expression()
                self.state = 1679
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 1677
                    self.match(tsqlParser.WITH)
                    self.state = 1678
                    self.match(tsqlParser.VALUES)



            elif la_ == 2:
                self.state = 1681
                self.match(tsqlParser.IDENTITY)
                self.state = 1687
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 1682
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 1683
                    localctx.seed = self.match(tsqlParser.DECIMAL)
                    self.state = 1684
                    self.match(tsqlParser.COMMA)
                    self.state = 1685
                    localctx.increment = self.match(tsqlParser.DECIMAL)
                    self.state = 1686
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 1692
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                if la_ == 1:
                    self.state = 1689
                    self.match(tsqlParser.NOT)
                    self.state = 1690
                    self.match(tsqlParser.FOR)
                    self.state = 1691
                    self.match(tsqlParser.REPLICATION)




            self.state = 1697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ROWGUIDCOL:
                self.state = 1696
                self.match(tsqlParser.ROWGUIDCOL)


            self.state = 1702
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,251,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1699
                    self.column_constraint() 
                self.state = 1704
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,251,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_constraint" ):
                return visitor.visitColumn_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_constraint(self):

        localctx = tsqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONSTRAINT:
                self.state = 1705
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1706
                self.r_id()


            self.state = 1710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT or _la==tsqlParser.NULL:
                self.state = 1709
                self.null_notnull()


            self.state = 1733
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.state = 1715
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.PRIMARY]:
                    self.state = 1712
                    self.match(tsqlParser.PRIMARY)
                    self.state = 1713
                    self.match(tsqlParser.KEY)
                    pass
                elif token in [tsqlParser.UNIQUE]:
                    self.state = 1714
                    self.match(tsqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                    self.state = 1717
                    self.clustered()


                self.state = 1721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 1720
                    self.index_options()


                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 1723
                self.match(tsqlParser.CHECK)
                self.state = 1727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 1724
                    self.match(tsqlParser.NOT)
                    self.state = 1725
                    self.match(tsqlParser.FOR)
                    self.state = 1726
                    self.match(tsqlParser.REPLICATION)


                self.state = 1729
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1730
                self.search_condition(0)
                self.state = 1731
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_constraint" ):
                return visitor.visitTable_constraint(self)
            else:
                return visitor.visitChildren(self)




    def table_constraint(self):

        localctx = tsqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONSTRAINT:
                self.state = 1735
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1736
                self.r_id()


            self.state = 1770
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.state = 1742
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.PRIMARY]:
                    self.state = 1739
                    self.match(tsqlParser.PRIMARY)
                    self.state = 1740
                    self.match(tsqlParser.KEY)
                    pass
                elif token in [tsqlParser.UNIQUE]:
                    self.state = 1741
                    self.match(tsqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                    self.state = 1744
                    self.clustered()


                self.state = 1747
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1748
                self.column_name_list()
                self.state = 1750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                    self.state = 1749
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1752
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1754
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                if la_ == 1:
                    self.state = 1753
                    self.index_options()


                self.state = 1758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ON:
                    self.state = 1756
                    self.match(tsqlParser.ON)
                    self.state = 1757
                    self.r_id()


                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 1760
                self.match(tsqlParser.CHECK)
                self.state = 1764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 1761
                    self.match(tsqlParser.NOT)
                    self.state = 1762
                    self.match(tsqlParser.FOR)
                    self.state = 1763
                    self.match(tsqlParser.REPLICATION)


                self.state = 1766
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1767
                self.search_condition(0)
                self.state = 1768
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_optionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_options" ):
                listener.enterIndex_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_options" ):
                listener.exitIndex_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_options" ):
                return visitor.visitIndex_options(self)
            else:
                return visitor.visitChildren(self)




    def index_options(self):

        localctx = tsqlParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1772
            self.match(tsqlParser.WITH)
            self.state = 1773
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1774
            self.index_option()
            self.state = 1779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1775
                self.match(tsqlParser.COMMA)
                self.state = 1776
                self.index_option()
                self.state = 1781
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1782
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_idContext,i)


        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_option" ):
                listener.enterIndex_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_option" ):
                listener.exitIndex_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_option" ):
                return visitor.visitIndex_option(self)
            else:
                return visitor.visitChildren(self)




    def index_option(self):

        localctx = tsqlParser.Index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_index_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1784
            self.simple_id()
            self.state = 1785
            self.match(tsqlParser.EQUAL)
            self.state = 1789
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ID]:
                self.state = 1786
                self.simple_id()
                pass
            elif token in [tsqlParser.OFF, tsqlParser.ON]:
                self.state = 1787
                self.on_off()
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.state = 1788
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_cursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(tsqlParser.DECLARE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(tsqlParser.CURSOR, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FOR)
            else:
                return self.getToken(tsqlParser.FOR, i)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(tsqlParser.Declare_set_cursor_commonContext,0)


        def INSENSITIVE(self):
            return self.getToken(tsqlParser.INSENSITIVE, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_cursor" ):
                listener.enterDeclare_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_cursor" ):
                listener.exitDeclare_cursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_cursor" ):
                return visitor.visitDeclare_cursor(self)
            else:
                return visitor.visitChildren(self)




    def declare_cursor(self):

        localctx = tsqlParser.Declare_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_declare_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1791
            self.match(tsqlParser.DECLARE)
            self.state = 1792
            self.cursor_name()
            self.state = 1824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.state = 1793
                self.match(tsqlParser.CURSOR)
                self.state = 1803
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
                if la_ == 1:
                    self.state = 1794
                    self.declare_set_cursor_common()
                    self.state = 1801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.FOR:
                        self.state = 1795
                        self.match(tsqlParser.FOR)
                        self.state = 1796
                        self.match(tsqlParser.UPDATE)
                        self.state = 1799
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==tsqlParser.OF:
                            self.state = 1797
                            self.match(tsqlParser.OF)
                            self.state = 1798
                            self.column_name_list()






                pass

            elif la_ == 2:
                self.state = 1806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.INSENSITIVE:
                    self.state = 1805
                    self.match(tsqlParser.INSENSITIVE)


                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SCROLL:
                    self.state = 1808
                    self.match(tsqlParser.SCROLL)


                self.state = 1811
                self.match(tsqlParser.CURSOR)
                self.state = 1812
                self.match(tsqlParser.FOR)
                self.state = 1813
                self.select_statement()
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FOR:
                    self.state = 1814
                    self.match(tsqlParser.FOR)
                    self.state = 1820
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.READ]:
                        self.state = 1815
                        self.match(tsqlParser.READ)
                        self.state = 1816
                        self.match(tsqlParser.ONLY)
                        pass
                    elif token in [tsqlParser.UPDATE]:
                        self.state = 1817
                        self.match(tsqlParser.UPDATE)
                        pass
                    elif token in [tsqlParser.OF]:
                        self.state = 1818
                        self.match(tsqlParser.OF)
                        self.state = 1819
                        self.column_name_list()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


            self.state = 1827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.state = 1826
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_set_cursor_commonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def TYPE_WARNING(self):
            return self.getToken(tsqlParser.TYPE_WARNING, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def FORWARD_ONLY(self):
            return self.getToken(tsqlParser.FORWARD_ONLY, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def STATIC(self):
            return self.getToken(tsqlParser.STATIC, 0)

        def KEYSET(self):
            return self.getToken(tsqlParser.KEYSET, 0)

        def DYNAMIC(self):
            return self.getToken(tsqlParser.DYNAMIC, 0)

        def FAST_FORWARD(self):
            return self.getToken(tsqlParser.FAST_FORWARD, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(tsqlParser.SCROLL_LOCKS, 0)

        def OPTIMISTIC(self):
            return self.getToken(tsqlParser.OPTIMISTIC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_declare_set_cursor_common

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_set_cursor_common" ):
                listener.enterDeclare_set_cursor_common(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_set_cursor_common" ):
                listener.exitDeclare_set_cursor_common(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_set_cursor_common" ):
                return visitor.visitDeclare_set_cursor_common(self)
            else:
                return visitor.visitChildren(self)




    def declare_set_cursor_common(self):

        localctx = tsqlParser.Declare_set_cursor_commonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_declare_set_cursor_common)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL:
                self.state = 1829
                _la = self._input.LA(1)
                if not(_la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FORWARD_ONLY or _la==tsqlParser.SCROLL:
                self.state = 1832
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FORWARD_ONLY or _la==tsqlParser.SCROLL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 251)) & ~0x3f) == 0 and ((1 << (_la - 251)) & ((1 << (tsqlParser.DYNAMIC - 251)) | (1 << (tsqlParser.FAST_FORWARD - 251)) | (1 << (tsqlParser.KEYSET - 251)))) != 0) or _la==tsqlParser.STATIC:
                self.state = 1835
                _la = self._input.LA(1)
                if not(((((_la - 251)) & ~0x3f) == 0 and ((1 << (_la - 251)) & ((1 << (tsqlParser.DYNAMIC - 251)) | (1 << (tsqlParser.FAST_FORWARD - 251)) | (1 << (tsqlParser.KEYSET - 251)))) != 0) or _la==tsqlParser.STATIC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (tsqlParser.OPTIMISTIC - 325)) | (1 << (tsqlParser.READ_ONLY - 325)) | (1 << (tsqlParser.SCROLL_LOCKS - 325)))) != 0):
                self.state = 1838
                _la = self._input.LA(1)
                if not(((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (tsqlParser.OPTIMISTIC - 325)) | (1 << (tsqlParser.READ_ONLY - 325)) | (1 << (tsqlParser.SCROLL_LOCKS - 325)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TYPE_WARNING:
                self.state = 1841
                self.match(tsqlParser.TYPE_WARNING)


            self.state = 1844
            self.match(tsqlParser.FOR)
            self.state = 1845
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_cursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(tsqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LOCAL_ID)
            else:
                return self.getToken(tsqlParser.LOCAL_ID, i)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(tsqlParser.PRIOR, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(tsqlParser.LAST, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ABSOLUTE(self):
            return self.getToken(tsqlParser.ABSOLUTE, 0)

        def RELATIVE(self):
            return self.getToken(tsqlParser.RELATIVE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_fetch_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_cursor" ):
                listener.enterFetch_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_cursor" ):
                listener.exitFetch_cursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetch_cursor" ):
                return visitor.visitFetch_cursor(self)
            else:
                return visitor.visitChildren(self)




    def fetch_cursor(self):

        localctx = tsqlParser.Fetch_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_fetch_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1847
            self.match(tsqlParser.FETCH)
            self.state = 1857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 1854
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.NEXT]:
                    self.state = 1848
                    self.match(tsqlParser.NEXT)
                    pass
                elif token in [tsqlParser.PRIOR]:
                    self.state = 1849
                    self.match(tsqlParser.PRIOR)
                    pass
                elif token in [tsqlParser.FIRST]:
                    self.state = 1850
                    self.match(tsqlParser.FIRST)
                    pass
                elif token in [tsqlParser.LAST]:
                    self.state = 1851
                    self.match(tsqlParser.LAST)
                    pass
                elif token in [tsqlParser.ABSOLUTE, tsqlParser.RELATIVE]:
                    self.state = 1852
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ABSOLUTE or _la==tsqlParser.RELATIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1853
                    self.expression(0)
                    pass
                elif token in [tsqlParser.FROM]:
                    pass
                else:
                    pass
                self.state = 1856
                self.match(tsqlParser.FROM)


            self.state = 1860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.state = 1859
                self.match(tsqlParser.GLOBAL)


            self.state = 1862
            self.cursor_name()
            self.state = 1872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 1863
                self.match(tsqlParser.INTO)
                self.state = 1864
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1865
                    self.match(tsqlParser.COMMA)
                    self.state = 1866
                    self.match(tsqlParser.LOCAL_ID)
                    self.state = 1871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.state = 1874
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_specialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,0)


        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def TRANSACTION(self):
            return self.getToken(tsqlParser.TRANSACTION, 0)

        def ISOLATION(self):
            return self.getToken(tsqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(tsqlParser.LEVEL, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(tsqlParser.UNCOMMITTED, 0)

        def COMMITTED(self):
            return self.getToken(tsqlParser.COMMITTED, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def IDENTITY_INSERT(self):
            return self.getToken(tsqlParser.IDENTITY_INSERT, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def ANSI_NULLS(self):
            return self.getToken(tsqlParser.ANSI_NULLS, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(tsqlParser.QUOTED_IDENTIFIER, 0)

        def ANSI_PADDING(self):
            return self.getToken(tsqlParser.ANSI_PADDING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_set_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_special" ):
                listener.enterSet_special(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_special" ):
                listener.exitSet_special(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_special" ):
                return visitor.visitSet_special(self)
            else:
                return visitor.visitChildren(self)




    def set_special(self):

        localctx = tsqlParser.Set_specialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_set_special)
        try:
            self.state = 1920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1877
                self.match(tsqlParser.SET)
                self.state = 1878
                self.r_id()
                self.state = 1882
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1879
                    self.r_id()
                    pass
                elif token in [tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                    self.state = 1880
                    self.constant_LOCAL_ID()
                    pass
                elif token in [tsqlParser.OFF, tsqlParser.ON]:
                    self.state = 1881
                    self.on_off()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                if la_ == 1:
                    self.state = 1884
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1887
                self.match(tsqlParser.SET)
                self.state = 1888
                self.match(tsqlParser.TRANSACTION)
                self.state = 1889
                self.match(tsqlParser.ISOLATION)
                self.state = 1890
                self.match(tsqlParser.LEVEL)
                self.state = 1899
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                if la_ == 1:
                    self.state = 1891
                    self.match(tsqlParser.READ)
                    self.state = 1892
                    self.match(tsqlParser.UNCOMMITTED)
                    pass

                elif la_ == 2:
                    self.state = 1893
                    self.match(tsqlParser.READ)
                    self.state = 1894
                    self.match(tsqlParser.COMMITTED)
                    pass

                elif la_ == 3:
                    self.state = 1895
                    self.match(tsqlParser.REPEATABLE)
                    self.state = 1896
                    self.match(tsqlParser.READ)
                    pass

                elif la_ == 4:
                    self.state = 1897
                    self.match(tsqlParser.SNAPSHOT)
                    pass

                elif la_ == 5:
                    self.state = 1898
                    self.match(tsqlParser.SERIALIZABLE)
                    pass


                self.state = 1902
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
                if la_ == 1:
                    self.state = 1901
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1904
                self.match(tsqlParser.SET)
                self.state = 1905
                self.match(tsqlParser.IDENTITY_INSERT)
                self.state = 1906
                self.table_name()
                self.state = 1907
                self.on_off()
                self.state = 1909
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
                if la_ == 1:
                    self.state = 1908
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1911
                self.match(tsqlParser.SET)
                self.state = 1912
                self.match(tsqlParser.ANSI_NULLS)
                self.state = 1913
                self.on_off()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1914
                self.match(tsqlParser.SET)
                self.state = 1915
                self.match(tsqlParser.QUOTED_IDENTIFIER)
                self.state = 1916
                self.on_off()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1917
                self.match(tsqlParser.SET)
                self.state = 1918
                self.match(tsqlParser.ANSI_PADDING)
                self.state = 1919
                self.on_off()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_LOCAL_IDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant_LOCAL_ID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_LOCAL_ID" ):
                listener.enterConstant_LOCAL_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_LOCAL_ID" ):
                listener.exitConstant_LOCAL_ID(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_LOCAL_ID" ):
                return visitor.visitConstant_LOCAL_ID(self)
            else:
                return visitor.visitChildren(self)




    def constant_LOCAL_ID(self):

        localctx = tsqlParser.Constant_LOCAL_IDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_constant_LOCAL_ID)
        try:
            self.state = 1924
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1922
                self.constant()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1923
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Binary_operator_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_operator_expression" ):
                listener.enterBinary_operator_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_operator_expression" ):
                listener.exitBinary_operator_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_operator_expression" ):
                return visitor.visitBinary_operator_expression(self)
            else:
                return visitor.visitChildren(self)


    class Primitive_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)
        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)
        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)
        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_expression" ):
                listener.enterPrimitive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_expression" ):
                listener.exitPrimitive_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitive_expression" ):
                return visitor.visitPrimitive_expression(self)
            else:
                return visitor.visitChildren(self)


    class Bracket_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracket_expression" ):
                return visitor.visitBracket_expression(self)
            else:
                return visitor.visitChildren(self)


    class Unary_operator_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_expression" ):
                listener.enterUnary_operator_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_expression" ):
                listener.exitUnary_operator_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator_expression" ):
                return visitor.visitUnary_operator_expression(self)
            else:
                return visitor.visitChildren(self)


    class Function_call_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)
        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_expression" ):
                listener.enterFunction_call_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_expression" ):
                listener.exitFunction_call_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call_expression" ):
                return visitor.visitFunction_call_expression(self)
            else:
                return visitor.visitChildren(self)


    class Case_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.caseExpr = None # ExpressionContext
            self.elseExpr = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(tsqlParser.CASE, 0)
        def END(self):
            return self.getToken(tsqlParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Switch_sectionContext,i)

        def ELSE(self):
            return self.getToken(tsqlParser.ELSE, 0)
        def switch_search_condition_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Switch_search_condition_sectionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Switch_search_condition_sectionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expression" ):
                listener.enterCase_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expression" ):
                listener.exitCase_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_expression" ):
                return visitor.visitCase_expression(self)
            else:
                return visitor.visitChildren(self)


    class Column_ref_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def full_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_column_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_ref_expression" ):
                listener.enterColumn_ref_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_ref_expression" ):
                listener.exitColumn_ref_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_ref_expression" ):
                return visitor.visitColumn_ref_expression(self)
            else:
                return visitor.visitChildren(self)


    class Subquery_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_expression" ):
                listener.enterSubquery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_expression" ):
                listener.exitSubquery_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_expression" ):
                return visitor.visitSubquery_expression(self)
            else:
                return visitor.visitChildren(self)


    class Over_clause_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause_expression" ):
                listener.enterOver_clause_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause_expression" ):
                listener.exitOver_clause_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause_expression" ):
                return visitor.visitOver_clause_expression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 172
        self.enterRecursionRule(localctx, 172, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1927
                self.match(tsqlParser.DEFAULT)
                pass

            elif la_ == 2:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1928
                self.match(tsqlParser.NULL)
                pass

            elif la_ == 3:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1929
                self.match(tsqlParser.LOCAL_ID)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1930
                self.constant()
                pass

            elif la_ == 5:
                localctx = tsqlParser.Function_call_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1931
                self.function_call()
                pass

            elif la_ == 6:
                localctx = tsqlParser.Case_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1932
                self.match(tsqlParser.CASE)
                self.state = 1933
                localctx.caseExpr = self.expression(0)
                self.state = 1935 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1934
                    self.switch_section()
                    self.state = 1937 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==tsqlParser.WHEN):
                        break

                self.state = 1941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ELSE:
                    self.state = 1939
                    self.match(tsqlParser.ELSE)
                    self.state = 1940
                    localctx.elseExpr = self.expression(0)


                self.state = 1943
                self.match(tsqlParser.END)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Case_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1945
                self.match(tsqlParser.CASE)
                self.state = 1947 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1946
                    self.switch_search_condition_section()
                    self.state = 1949 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==tsqlParser.WHEN):
                        break

                self.state = 1953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ELSE:
                    self.state = 1951
                    self.match(tsqlParser.ELSE)
                    self.state = 1952
                    localctx.elseExpr = self.expression(0)


                self.state = 1955
                self.match(tsqlParser.END)
                pass

            elif la_ == 8:
                localctx = tsqlParser.Column_ref_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1957
                self.full_column_name()
                pass

            elif la_ == 9:
                localctx = tsqlParser.Bracket_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1958
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1959
                self.expression(0)
                self.state = 1960
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Subquery_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1962
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1963
                self.subquery()
                self.state = 1964
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = tsqlParser.Unary_operator_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1966
                localctx.op = self.match(tsqlParser.BIT_NOT)
                self.state = 1967
                self.expression(6)
                pass

            elif la_ == 12:
                localctx = tsqlParser.Unary_operator_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1968
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.PLUS or _la==tsqlParser.MINUS):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1969
                self.expression(4)
                pass

            elif la_ == 13:
                localctx = tsqlParser.Over_clause_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1970
                self.over_clause()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1988
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,302,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1986
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1973
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1974
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (tsqlParser.STAR - 436)) | (1 << (tsqlParser.DIVIDE - 436)) | (1 << (tsqlParser.MODULE - 436)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1975
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1976
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1977
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 439)) & ~0x3f) == 0 and ((1 << (_la - 439)) & ((1 << (tsqlParser.PLUS - 439)) | (1 << (tsqlParser.MINUS - 439)) | (1 << (tsqlParser.BIT_OR - 439)) | (1 << (tsqlParser.BIT_AND - 439)) | (1 << (tsqlParser.BIT_XOR - 439)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1978
                        localctx.right = self.expression(4)
                        pass

                    elif la_ == 3:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1979
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1980
                        self.comparison_operator()
                        self.state = 1981
                        localctx.right = self.expression(3)
                        pass

                    elif la_ == 4:
                        localctx = tsqlParser.Function_call_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1983
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1984
                        self.match(tsqlParser.COLLATE)
                        self.state = 1985
                        self.r_id()
                        pass

             
                self.state = 1990
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,302,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Constant_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(tsqlParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_expression" ):
                return visitor.visitConstant_expression(self)
            else:
                return visitor.visitChildren(self)




    def constant_expression(self):

        localctx = tsqlParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_constant_expression)
        try:
            self.state = 1999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1991
                self.match(tsqlParser.NULL)
                pass
            elif token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1992
                self.constant()
                pass
            elif token in [tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.IIF, tsqlParser.LEFT, tsqlParser.NEXT, tsqlParser.NULLIF, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SYSTEM_USER, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1993
                self.function_call()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1994
                self.match(tsqlParser.LOCAL_ID)
                pass
            elif token in [tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1995
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1996
                self.constant_expression()
                self.state = 1997
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)




    def subquery(self):

        localctx = tsqlParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2001
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Common_table_expressionContext,i)


        def XMLNAMESPACES(self):
            return self.getToken(tsqlParser.XMLNAMESPACES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_with_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_expression" ):
                listener.enterWith_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_expression" ):
                listener.exitWith_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_expression" ):
                return visitor.visitWith_expression(self)
            else:
                return visitor.visitChildren(self)




    def with_expression(self):

        localctx = tsqlParser.With_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_with_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2003
            self.match(tsqlParser.WITH)
            self.state = 2006
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.state = 2004
                self.match(tsqlParser.XMLNAMESPACES)
                self.state = 2005
                self.match(tsqlParser.COMMA)


            self.state = 2008
            self.common_table_expression()
            self.state = 2013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2009
                self.match(tsqlParser.COMMA)
                self.state = 2010
                self.common_table_expression()
                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expression_name = None # R_idContext

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommon_table_expression" ):
                return visitor.visitCommon_table_expression(self)
            else:
                return visitor.visitChildren(self)




    def common_table_expression(self):

        localctx = tsqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            localctx.expression_name = self.r_id()
            self.state = 2021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LR_BRACKET:
                self.state = 2017
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2018
                self.column_name_list()
                self.state = 2019
                self.match(tsqlParser.RR_BRACKET)


            self.state = 2023
            self.match(tsqlParser.AS)
            self.state = 2024
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2025
            self.select_statement()
            self.state = 2026
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.udt_column_name = None # R_idContext
            self.method_name = None # R_idContext

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def full_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_column_nameContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(tsqlParser.Assignment_operatorContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_update_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_elem" ):
                listener.enterUpdate_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_elem" ):
                listener.exitUpdate_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_elem" ):
                return visitor.visitUpdate_elem(self)
            else:
                return visitor.visitChildren(self)




    def update_elem(self):

        localctx = tsqlParser.Update_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_update_elem)
        try:
            self.state = 2044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2030
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2028
                    self.full_column_name()
                    pass
                elif token in [tsqlParser.LOCAL_ID]:
                    self.state = 2029
                    localctx.name = self.match(tsqlParser.LOCAL_ID)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2034
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.EQUAL]:
                    self.state = 2032
                    self.match(tsqlParser.EQUAL)
                    pass
                elif token in [tsqlParser.PLUS_ASSIGN, tsqlParser.MINUS_ASSIGN, tsqlParser.MULT_ASSIGN, tsqlParser.DIV_ASSIGN, tsqlParser.MOD_ASSIGN, tsqlParser.AND_ASSIGN, tsqlParser.XOR_ASSIGN, tsqlParser.OR_ASSIGN]:
                    self.state = 2033
                    self.assignment_operator()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2036
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2037
                localctx.udt_column_name = self.r_id()
                self.state = 2038
                self.match(tsqlParser.DOT)
                self.state = 2039
                localctx.method_name = self.r_id()
                self.state = 2040
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2041
                self.expression_list()
                self.state = 2042
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_condition_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_list" ):
                listener.enterSearch_condition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_list" ):
                listener.exitSearch_condition_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_condition_list" ):
                return visitor.visitSearch_condition_list(self)
            else:
                return visitor.visitChildren(self)




    def search_condition_list(self):

        localctx = tsqlParser.Search_condition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_search_condition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2046
            self.search_condition(0)
            self.state = 2051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2047
                self.match(tsqlParser.COMMA)
                self.state = 2048
                self.search_condition(0)
                self.state = 2053
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Search_cond_orContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.left = None # Search_conditionContext
            self.op = None # Token
            self.right = None # Search_conditionContext
            self.copyFrom(ctx)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)

        def OR(self):
            return self.getToken(tsqlParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_cond_or" ):
                listener.enterSearch_cond_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_cond_or" ):
                listener.exitSearch_cond_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_cond_or" ):
                return visitor.visitSearch_cond_or(self)
            else:
                return visitor.visitChildren(self)


    class Search_cond_predContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(tsqlParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_cond_pred" ):
                listener.enterSearch_cond_pred(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_cond_pred" ):
                listener.exitSearch_cond_pred(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_cond_pred" ):
                return visitor.visitSearch_cond_pred(self)
            else:
                return visitor.visitChildren(self)


    class Search_cond_andContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.left = None # Search_conditionContext
            self.op = None # Token
            self.right = None # Search_conditionContext
            self.copyFrom(ctx)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)

        def AND(self):
            return self.getToken(tsqlParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_cond_and" ):
                listener.enterSearch_cond_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_cond_and" ):
                listener.exitSearch_cond_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_cond_and" ):
                return visitor.visitSearch_cond_and(self)
            else:
                return visitor.visitChildren(self)



    def search_condition(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Search_conditionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 186
        self.enterRecursionRule(localctx, 186, self.RULE_search_condition, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = tsqlParser.Search_cond_predContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2055
            self.predicate()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2065
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,312,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2063
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Search_cond_andContext(self, tsqlParser.Search_conditionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                        self.state = 2057
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2058
                        localctx.op = self.match(tsqlParser.AND)
                        self.state = 2059
                        localctx.right = self.search_condition(4)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Search_cond_orContext(self, tsqlParser.Search_conditionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                        self.state = 2060
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2061
                        localctx.op = self.match(tsqlParser.OR)
                        self.state = 2062
                        localctx.right = self.search_condition(3)
                        pass

             
                self.state = 2067
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Binary_in_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def IN(self):
            return self.getToken(tsqlParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_in_expression" ):
                listener.enterBinary_in_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_in_expression" ):
                listener.exitBinary_in_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_in_expression" ):
                return visitor.visitBinary_in_expression(self)
            else:
                return visitor.visitChildren(self)


    class Unary_operator_expression2Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # SubqueryContext
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)
        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_expression2" ):
                listener.enterUnary_operator_expression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_expression2" ):
                listener.exitUnary_operator_expression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator_expression2" ):
                return visitor.visitUnary_operator_expression2(self)
            else:
                return visitor.visitChildren(self)


    class Binary_mod_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self._expression = None # ExpressionContext
            self.right = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def AND(self):
            return self.getToken(tsqlParser.AND, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def BETWEEN(self):
            return self.getToken(tsqlParser.BETWEEN, 0)
        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)
        def LIKE(self):
            return self.getToken(tsqlParser.LIKE, 0)
        def ESCAPE(self):
            return self.getToken(tsqlParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_mod_expression" ):
                listener.enterBinary_mod_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_mod_expression" ):
                listener.exitBinary_mod_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_mod_expression" ):
                return visitor.visitBinary_mod_expression(self)
            else:
                return visitor.visitChildren(self)


    class Unary_operator_expression3Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # PredicateContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)
        def predicate(self):
            return self.getTypedRuleContext(tsqlParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_expression3" ):
                listener.enterUnary_operator_expression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_expression3" ):
                listener.exitUnary_operator_expression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator_expression3" ):
                return visitor.visitUnary_operator_expression3(self)
            else:
                return visitor.visitChildren(self)


    class Bracket_search_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_search_expression" ):
                listener.enterBracket_search_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_search_expression" ):
                listener.exitBracket_search_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracket_search_expression" ):
                return visitor.visitBracket_search_expression(self)
            else:
                return visitor.visitChildren(self)


    class Sublink_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.test_expr = None # ExpressionContext
            self.op = None # Comparison_operatorContext
            self.pref = None # Token
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)
        def SOME(self):
            return self.getToken(tsqlParser.SOME, 0)
        def ANY(self):
            return self.getToken(tsqlParser.ANY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSublink_expression" ):
                listener.enterSublink_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSublink_expression" ):
                listener.exitSublink_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSublink_expression" ):
                return visitor.visitSublink_expression(self)
            else:
                return visitor.visitChildren(self)


    class Binary_operator_expression2Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Comparison_operatorContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)

        def IS(self):
            return self.getToken(tsqlParser.IS, 0)
        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_operator_expression2" ):
                listener.enterBinary_operator_expression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_operator_expression2" ):
                listener.exitBinary_operator_expression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_operator_expression2" ):
                return visitor.visitBinary_operator_expression2(self)
            else:
                return visitor.visitChildren(self)


    class Decimal_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimal_expression" ):
                listener.enterDecimal_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimal_expression" ):
                listener.exitDecimal_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimal_expression" ):
                return visitor.visitDecimal_expression(self)
            else:
                return visitor.visitChildren(self)



    def predicate(self):

        localctx = tsqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 2126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Unary_operator_expression3Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2068
                localctx.op = self.match(tsqlParser.NOT)
                self.state = 2069
                localctx.expr = self.predicate()
                pass

            elif la_ == 2:
                localctx = tsqlParser.Unary_operator_expression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2070
                localctx.op = self.match(tsqlParser.EXISTS)
                self.state = 2071
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2072
                localctx.expr = self.subquery()
                self.state = 2073
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = tsqlParser.Binary_operator_expression2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2075
                localctx.left = self.expression(0)
                self.state = 2076
                localctx.op = self.comparison_operator()
                self.state = 2077
                localctx.right = self.expression(0)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Sublink_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2079
                localctx.test_expr = self.expression(0)
                self.state = 2080
                localctx.op = self.comparison_operator()
                self.state = 2081
                localctx.pref = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ALL or _la==tsqlParser.ANY or _la==tsqlParser.SOME):
                    localctx.pref = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2082
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2083
                self.subquery()
                self.state = 2084
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = tsqlParser.Binary_mod_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2086
                localctx.left = self.expression(0)
                self.state = 2088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2087
                    self.match(tsqlParser.NOT)


                self.state = 2090
                localctx.op = self.match(tsqlParser.BETWEEN)
                self.state = 2091
                localctx._expression = self.expression(0)
                localctx.right.append(localctx._expression)
                self.state = 2092
                self.match(tsqlParser.AND)
                self.state = 2093
                localctx._expression = self.expression(0)
                localctx.right.append(localctx._expression)
                pass

            elif la_ == 6:
                localctx = tsqlParser.Binary_in_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2095
                localctx.left = self.expression(0)
                self.state = 2097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2096
                    self.match(tsqlParser.NOT)


                self.state = 2099
                localctx.op = self.match(tsqlParser.IN)
                self.state = 2100
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2103
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
                if la_ == 1:
                    self.state = 2101
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 2102
                    self.expression_list()
                    pass


                self.state = 2105
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Binary_mod_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2107
                localctx.left = self.expression(0)
                self.state = 2109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2108
                    self.match(tsqlParser.NOT)


                self.state = 2111
                localctx.op = self.match(tsqlParser.LIKE)
                self.state = 2112
                localctx._expression = self.expression(0)
                localctx.right.append(localctx._expression)
                self.state = 2115
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
                if la_ == 1:
                    self.state = 2113
                    self.match(tsqlParser.ESCAPE)
                    self.state = 2114
                    localctx._expression = self.expression(0)
                    localctx.right.append(localctx._expression)


                pass

            elif la_ == 8:
                localctx = tsqlParser.Binary_operator_expression2Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2117
                self.expression(0)
                self.state = 2118
                self.match(tsqlParser.IS)
                self.state = 2119
                self.null_notnull()
                pass

            elif la_ == 9:
                localctx = tsqlParser.Bracket_search_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2121
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2122
                self.search_condition(0)
                self.state = 2123
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Decimal_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2125
                self.match(tsqlParser.DECIMAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_query_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Bracket_query_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_query_expression" ):
                listener.enterBracket_query_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_query_expression" ):
                listener.exitBracket_query_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracket_query_expression" ):
                return visitor.visitBracket_query_expression(self)
            else:
                return visitor.visitChildren(self)


    class Query_specification_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query_specification(self):
            return self.getTypedRuleContext(tsqlParser.Query_specificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_specification_expression" ):
                listener.enterQuery_specification_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_specification_expression" ):
                listener.exitQuery_specification_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_specification_expression" ):
                return visitor.visitQuery_specification_expression(self)
            else:
                return visitor.visitChildren(self)


    class Union_query_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.left = None # Query_expressionContext
            self.op = None # Union_opContext
            self.right = None # Query_expressionContext
            self.copyFrom(ctx)

        def query_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Query_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Query_expressionContext,i)

        def union_op(self):
            return self.getTypedRuleContext(tsqlParser.Union_opContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_query_expression" ):
                listener.enterUnion_query_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_query_expression" ):
                listener.exitUnion_query_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion_query_expression" ):
                return visitor.visitUnion_query_expression(self)
            else:
                return visitor.visitChildren(self)



    def query_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Query_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 190
        self.enterRecursionRule(localctx, 190, self.RULE_query_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2134
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.LR_BRACKET]:
                localctx = tsqlParser.Bracket_query_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2129
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2130
                self.query_expression(0)
                self.state = 2131
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.SELECT]:
                localctx = tsqlParser.Query_specification_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2133
                self.query_specification()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2142
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,320,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = tsqlParser.Union_query_expressionContext(self, tsqlParser.Query_expressionContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expression)
                    self.state = 2136
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2137
                    localctx.op = self.union_op()
                    self.state = 2138
                    localctx.right = self.query_expression(3) 
                self.state = 2144
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,320,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Union_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(tsqlParser.UNION, 0)

        def EXCEPT(self):
            return self.getToken(tsqlParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(tsqlParser.INTERSECT, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_union_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_op" ):
                listener.enterUnion_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_op" ):
                listener.exitUnion_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion_op" ):
                return visitor.visitUnion_op(self)
            else:
                return visitor.visitChildren(self)




    def union_op(self):

        localctx = tsqlParser.Union_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_union_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNION]:
                self.state = 2145
                self.match(tsqlParser.UNION)
                self.state = 2147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ALL:
                    self.state = 2146
                    self.match(tsqlParser.ALL)


                pass
            elif token in [tsqlParser.EXCEPT]:
                self.state = 2149
                self.match(tsqlParser.EXCEPT)
                pass
            elif token in [tsqlParser.INTERSECT]:
                self.state = 2150
                self.match(tsqlParser.INTERSECT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pref = None # Token
            self.where = None # Search_conditionContext
            self.having = None # Search_conditionContext

        def SELECT(self):
            return self.getToken(tsqlParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(tsqlParser.Select_listContext,0)


        def top_clause(self):
            return self.getTypedRuleContext(tsqlParser.Top_clauseContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Group_by_itemContext,i)


        def HAVING(self):
            return self.getToken(tsqlParser.HAVING, 0)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(tsqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_query_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_specification" ):
                listener.enterQuery_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_specification" ):
                listener.exitQuery_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_specification" ):
                return visitor.visitQuery_specification(self)
            else:
                return visitor.visitChildren(self)




    def query_specification(self):

        localctx = tsqlParser.Query_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_query_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2153
            self.match(tsqlParser.SELECT)
            self.state = 2155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                self.state = 2154
                localctx.pref = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ALL or _la==tsqlParser.DISTINCT):
                    localctx.pref = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 2157
                self.top_clause()


            self.state = 2160
            self.select_list()
            self.state = 2163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                self.state = 2161
                self.match(tsqlParser.INTO)
                self.state = 2162
                self.table_name()


            self.state = 2167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 2165
                self.match(tsqlParser.FROM)
                self.state = 2166
                self.table_sources()


            self.state = 2171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
            if la_ == 1:
                self.state = 2169
                self.match(tsqlParser.WHERE)
                self.state = 2170
                localctx.where = self.search_condition(0)


            self.state = 2183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
            if la_ == 1:
                self.state = 2173
                self.match(tsqlParser.GROUP)
                self.state = 2174
                self.match(tsqlParser.BY)
                self.state = 2175
                self.group_by_item()
                self.state = 2180
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,328,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2176
                        self.match(tsqlParser.COMMA)
                        self.state = 2177
                        self.group_by_item() 
                    self.state = 2182
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,328,self._ctx)



            self.state = 2187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.state = 2185
                self.match(tsqlParser.HAVING)
                self.state = 2186
                localctx.having = self.search_condition(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Top_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def TIES(self):
            return self.getToken(tsqlParser.TIES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_top_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_clause" ):
                listener.enterTop_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_clause" ):
                listener.exitTop_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop_clause" ):
                return visitor.visitTop_clause(self)
            else:
                return visitor.visitChildren(self)




    def top_clause(self):

        localctx = tsqlParser.Top_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_top_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2189
            self.match(tsqlParser.TOP)
            self.state = 2190
            self.expression(0)
            self.state = 2192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.PERCENT:
                self.state = 2191
                self.match(tsqlParser.PERCENT)


            self.state = 2196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 2194
                self.match(tsqlParser.WITH)
                self.state = 2195
                self.match(tsqlParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Top_clause_dmContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_top_clause_dm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_clause_dm" ):
                listener.enterTop_clause_dm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_clause_dm" ):
                listener.exitTop_clause_dm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop_clause_dm" ):
                return visitor.visitTop_clause_dm(self)
            else:
                return visitor.visitChildren(self)




    def top_clause_dm(self):

        localctx = tsqlParser.Top_clause_dmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_top_clause_dm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2198
            self.match(tsqlParser.TOP)
            self.state = 2199
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2200
            self.expression(0)
            self.state = 2201
            self.match(tsqlParser.RR_BRACKET)
            self.state = 2203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.PERCENT:
                self.state = 2202
                self.match(tsqlParser.PERCENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # ExpressionContext

        def ORDER(self):
            return self.getToken(tsqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def order_by_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Order_by_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Order_by_expressionContext,i)


        def OFFSET(self):
            return self.getToken(tsqlParser.OFFSET, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def fetch_expression(self):
            return self.getTypedRuleContext(tsqlParser.Fetch_expressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = tsqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2205
            self.match(tsqlParser.ORDER)
            self.state = 2206
            self.match(tsqlParser.BY)
            self.state = 2207
            self.order_by_expression()
            self.state = 2212
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,334,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2208
                    self.match(tsqlParser.COMMA)
                    self.state = 2209
                    self.order_by_expression() 
                self.state = 2214
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,334,self._ctx)

            self.state = 2221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 2215
                self.match(tsqlParser.OFFSET)
                self.state = 2216
                localctx.offset = self.expression(0)
                self.state = 2217
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ROW or _la==tsqlParser.ROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2219
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                if la_ == 1:
                    self.state = 2218
                    self.fetch_expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(tsqlParser.FETCH, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_fetch_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_expression" ):
                listener.enterFetch_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_expression" ):
                listener.exitFetch_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetch_expression" ):
                return visitor.visitFetch_expression(self)
            else:
                return visitor.visitChildren(self)




    def fetch_expression(self):

        localctx = tsqlParser.Fetch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_fetch_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2223
            self.match(tsqlParser.FETCH)
            self.state = 2224
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NEXT or _la==tsqlParser.FIRST):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2225
            self.expression(0)
            self.state = 2226
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ROW or _la==tsqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2227
            self.match(tsqlParser.ONLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def BROWSE(self):
            return self.getToken(tsqlParser.BROWSE, 0)

        def XML(self):
            return self.getToken(tsqlParser.XML, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def xml_common_directives(self):
            return self.getTypedRuleContext(tsqlParser.Xml_common_directivesContext,0)


        def PATH(self):
            return self.getToken(tsqlParser.PATH, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_clause" ):
                listener.enterFor_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_clause" ):
                listener.exitFor_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_clause" ):
                return visitor.visitFor_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_clause(self):

        localctx = tsqlParser.For_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_for_clause)
        try:
            self.state = 2248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2229
                self.match(tsqlParser.FOR)
                self.state = 2230
                self.match(tsqlParser.BROWSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2231
                self.match(tsqlParser.FOR)
                self.state = 2232
                self.match(tsqlParser.XML)
                self.state = 2233
                self.match(tsqlParser.AUTO)
                self.state = 2235
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
                if la_ == 1:
                    self.state = 2234
                    self.xml_common_directives()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2237
                self.match(tsqlParser.FOR)
                self.state = 2238
                self.match(tsqlParser.XML)
                self.state = 2239
                self.match(tsqlParser.PATH)
                self.state = 2243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
                if la_ == 1:
                    self.state = 2240
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2241
                    self.match(tsqlParser.STRING)
                    self.state = 2242
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 2246
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
                if la_ == 1:
                    self.state = 2245
                    self.xml_common_directives()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_common_directivesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(tsqlParser.BINARY, 0)

        def BASE64(self):
            return self.getToken(tsqlParser.BASE64, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def ROOT(self):
            return self.getToken(tsqlParser.ROOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_xml_common_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_common_directives" ):
                listener.enterXml_common_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_common_directives" ):
                listener.exitXml_common_directives(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_common_directives" ):
                return visitor.visitXml_common_directives(self)
            else:
                return visitor.visitChildren(self)




    def xml_common_directives(self):

        localctx = tsqlParser.Xml_common_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_xml_common_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2250
            self.match(tsqlParser.COMMA)
            self.state = 2255
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.BINARY]:
                self.state = 2251
                self.match(tsqlParser.BINARY)
                self.state = 2252
                self.match(tsqlParser.BASE64)
                pass
            elif token in [tsqlParser.TYPE]:
                self.state = 2253
                self.match(tsqlParser.TYPE)
                pass
            elif token in [tsqlParser.ROOT]:
                self.state = 2254
                self.match(tsqlParser.ROOT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_order_by_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expression" ):
                listener.enterOrder_by_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expression" ):
                listener.exitOrder_by_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_expression" ):
                return visitor.visitOrder_by_expression(self)
            else:
                return visitor.visitChildren(self)




    def order_by_expression(self):

        localctx = tsqlParser.Order_by_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_order_by_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2257
            self.expression(0)
            self.state = 2259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.state = 2258
                localctx.direction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                    localctx.direction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_group_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_item" ):
                listener.enterGroup_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_item" ):
                listener.exitGroup_by_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_item" ):
                return visitor.visitGroup_by_item(self)
            else:
                return visitor.visitChildren(self)




    def group_by_item(self):

        localctx = tsqlParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_group_by_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2261
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Option_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.OptionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.OptionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_option_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption_clause" ):
                listener.enterOption_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption_clause" ):
                listener.exitOption_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption_clause" ):
                return visitor.visitOption_clause(self)
            else:
                return visitor.visitChildren(self)




    def option_clause(self):

        localctx = tsqlParser.Option_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_option_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self.match(tsqlParser.OPTION)
            self.state = 2264
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2265
            self.option()
            self.state = 2270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2266
                self.match(tsqlParser.COMMA)
                self.state = 2267
                self.option()
                self.state = 2272
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2273
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_rows = None # Token
            self.number_of_processors = None # Token
            self.number_recursion = None # Token

        def FAST(self):
            return self.getToken(tsqlParser.FAST, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def ORDER(self):
            return self.getToken(tsqlParser.ORDER, 0)

        def UNION(self):
            return self.getToken(tsqlParser.UNION, 0)

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def CONCAT(self):
            return self.getToken(tsqlParser.CONCAT, 0)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def EXPAND(self):
            return self.getToken(tsqlParser.EXPAND, 0)

        def VIEWS(self):
            return self.getToken(tsqlParser.VIEWS, 0)

        def FORCE(self):
            return self.getToken(tsqlParser.FORCE, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def KEEP(self):
            return self.getToken(tsqlParser.KEEP, 0)

        def PLAN(self):
            return self.getToken(tsqlParser.PLAN, 0)

        def KEEPFIXED(self):
            return self.getToken(tsqlParser.KEEPFIXED, 0)

        def MAXDOP(self):
            return self.getToken(tsqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(tsqlParser.MAXRECURSION, 0)

        def OPTIMIZE(self):
            return self.getToken(tsqlParser.OPTIMIZE, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def optimize_for_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Optimize_for_argContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Optimize_for_argContext,i)


        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def ROBUST(self):
            return self.getToken(tsqlParser.ROBUST, 0)

        def USE(self):
            return self.getToken(tsqlParser.USE, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption" ):
                listener.enterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption" ):
                listener.exitOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption" ):
                return visitor.visitOption(self)
            else:
                return visitor.visitChildren(self)




    def option(self):

        localctx = tsqlParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_option)
        self._la = 0 # Token type
        try:
            self.state = 2320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2275
                self.match(tsqlParser.FAST)
                self.state = 2276
                localctx.number_rows = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2277
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ORDER or _la==tsqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2278
                self.match(tsqlParser.GROUP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2279
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.CONCAT or _la==tsqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2280
                self.match(tsqlParser.UNION)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2281
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2282
                self.match(tsqlParser.JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2283
                self.match(tsqlParser.EXPAND)
                self.state = 2284
                self.match(tsqlParser.VIEWS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2285
                self.match(tsqlParser.FORCE)
                self.state = 2286
                self.match(tsqlParser.ORDER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2287
                self.match(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2288
                self.match(tsqlParser.KEEP)
                self.state = 2289
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2290
                self.match(tsqlParser.KEEPFIXED)
                self.state = 2291
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2292
                self.match(tsqlParser.MAXDOP)
                self.state = 2293
                localctx.number_of_processors = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2294
                self.match(tsqlParser.MAXRECURSION)
                self.state = 2295
                localctx.number_recursion = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2296
                self.match(tsqlParser.OPTIMIZE)
                self.state = 2297
                self.match(tsqlParser.FOR)
                self.state = 2298
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2299
                self.optimize_for_arg()
                self.state = 2304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2300
                    self.match(tsqlParser.COMMA)
                    self.state = 2301
                    self.optimize_for_arg()
                    self.state = 2306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2307
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2309
                self.match(tsqlParser.OPTIMIZE)
                self.state = 2310
                self.match(tsqlParser.FOR)
                self.state = 2311
                self.match(tsqlParser.UNKNOWN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2312
                self.match(tsqlParser.PARAMETERIZATION)
                self.state = 2313
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FORCED or _la==tsqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2314
                self.match(tsqlParser.RECOMPILE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2315
                self.match(tsqlParser.ROBUST)
                self.state = 2316
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2317
                self.match(tsqlParser.USE)
                self.state = 2318
                self.match(tsqlParser.PLAN)
                self.state = 2319
                self.match(tsqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Optimize_for_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_optimize_for_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimize_for_arg" ):
                listener.enterOptimize_for_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimize_for_arg" ):
                listener.exitOptimize_for_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptimize_for_arg" ):
                return visitor.visitOptimize_for_arg(self)
            else:
                return visitor.visitChildren(self)




    def optimize_for_arg(self):

        localctx = tsqlParser.Optimize_for_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_optimize_for_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2322
            self.match(tsqlParser.LOCAL_ID)
            self.state = 2326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNKNOWN]:
                self.state = 2323
                self.match(tsqlParser.UNKNOWN)
                pass
            elif token in [tsqlParser.EQUAL]:
                self.state = 2324
                self.match(tsqlParser.EQUAL)
                self.state = 2325
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Select_list_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Select_list_elemContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_list" ):
                return visitor.visitSelect_list(self)
            else:
                return visitor.visitChildren(self)




    def select_list(self):

        localctx = tsqlParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_select_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2328
            self.select_list_elem()
            self.state = 2333
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,347,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2329
                    self.match(tsqlParser.COMMA)
                    self.state = 2330
                    self.select_list_elem() 
                self.state = 2335
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,347,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_list_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.alias = None # Column_aliasContext

        def a_star(self):
            return self.getTypedRuleContext(tsqlParser.A_starContext,0)


        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def ROWGUID(self):
            return self.getToken(tsqlParser.ROWGUID, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(tsqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_select_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list_elem" ):
                listener.enterSelect_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list_elem" ):
                listener.exitSelect_list_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_list_elem" ):
                return visitor.visitSelect_list_elem(self)
            else:
                return visitor.visitChildren(self)




    def select_list_elem(self):

        localctx = tsqlParser.Select_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_select_list_elem)
        self._la = 0 # Token type
        try:
            self.state = 2357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or _la==tsqlParser.NEXT or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DELAY - 196)) | (1 << (tsqlParser.DELETED - 196)) | (1 << (tsqlParser.DENSE_RANK - 196)) | (1 << (tsqlParser.DISABLE - 196)) | (1 << (tsqlParser.DYNAMIC - 196)) | (1 << (tsqlParser.ENCRYPTION - 196)) | (1 << (tsqlParser.EXPAND - 196)) | (1 << (tsqlParser.FAST - 196)) | (1 << (tsqlParser.FAST_FORWARD - 196)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (tsqlParser.FIRST - 262)) | (1 << (tsqlParser.FIRST_VALUE - 262)) | (1 << (tsqlParser.FOLLOWING - 262)) | (1 << (tsqlParser.FORCE - 262)) | (1 << (tsqlParser.FORCED - 262)) | (1 << (tsqlParser.FORWARD_ONLY - 262)) | (1 << (tsqlParser.FULLSCAN - 262)) | (1 << (tsqlParser.GLOBAL - 262)) | (1 << (tsqlParser.GO - 262)) | (1 << (tsqlParser.GROUPING - 262)) | (1 << (tsqlParser.GROUPING_ID - 262)) | (1 << (tsqlParser.HASH - 262)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 262)) | (1 << (tsqlParser.IMPERSONATE - 262)) | (1 << (tsqlParser.INSENSITIVE - 262)) | (1 << (tsqlParser.INSERTED - 262)) | (1 << (tsqlParser.ISOLATION - 262)) | (1 << (tsqlParser.KEEP - 262)) | (1 << (tsqlParser.KEEPFIXED - 262)) | (1 << (tsqlParser.KEYSET - 262)) | (1 << (tsqlParser.LAG - 262)) | (1 << (tsqlParser.LAST - 262)) | (1 << (tsqlParser.LEAD - 262)) | (1 << (tsqlParser.LEVEL - 262)) | (1 << (tsqlParser.LOCAL - 262)) | (1 << (tsqlParser.LOCK_ESCALATION - 262)) | (1 << (tsqlParser.LOGIN - 262)) | (1 << (tsqlParser.LOOP - 262)) | (1 << (tsqlParser.MARK - 262)) | (1 << (tsqlParser.MAX - 262)) | (1 << (tsqlParser.MAXDOP - 262)) | (1 << (tsqlParser.MAXRECURSION - 262)) | (1 << (tsqlParser.MIN - 262)) | (1 << (tsqlParser.MODIFY - 262)) | (1 << (tsqlParser.NAME - 262)) | (1 << (tsqlParser.NOCOUNT - 262)) | (1 << (tsqlParser.NOEXPAND - 262)) | (1 << (tsqlParser.NORECOMPUTE - 262)) | (1 << (tsqlParser.NTILE - 262)) | (1 << (tsqlParser.NUMBER - 262)) | (1 << (tsqlParser.OFFSET - 262)) | (1 << (tsqlParser.ONLINE - 262)) | (1 << (tsqlParser.ONLY - 262)) | (1 << (tsqlParser.OPTIMISTIC - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (tsqlParser.OPTIMIZE - 326)) | (1 << (tsqlParser.OUT - 326)) | (1 << (tsqlParser.OUTPUT - 326)) | (1 << (tsqlParser.OWNER - 326)) | (1 << (tsqlParser.PARAMETERIZATION - 326)) | (1 << (tsqlParser.PARTITION - 326)) | (1 << (tsqlParser.PATH - 326)) | (1 << (tsqlParser.PRECEDING - 326)) | (1 << (tsqlParser.PRIOR - 326)) | (1 << (tsqlParser.PRIVILEGES - 326)) | (1 << (tsqlParser.RANGE - 326)) | (1 << (tsqlParser.RANK - 326)) | (1 << (tsqlParser.READONLY - 326)) | (1 << (tsqlParser.READ_ONLY - 326)) | (1 << (tsqlParser.RECOMPILE - 326)) | (1 << (tsqlParser.RELATIVE - 326)) | (1 << (tsqlParser.REMOTE - 326)) | (1 << (tsqlParser.REPEATABLE - 326)) | (1 << (tsqlParser.ROBUST - 326)) | (1 << (tsqlParser.ROOT - 326)) | (1 << (tsqlParser.ROW - 326)) | (1 << (tsqlParser.ROWGUID - 326)) | (1 << (tsqlParser.ROWS - 326)) | (1 << (tsqlParser.ROW_NUMBER - 326)) | (1 << (tsqlParser.SAMPLE - 326)) | (1 << (tsqlParser.SCHEMABINDING - 326)) | (1 << (tsqlParser.SCROLL - 326)) | (1 << (tsqlParser.SCROLL_LOCKS - 326)) | (1 << (tsqlParser.SELF - 326)) | (1 << (tsqlParser.SERIALIZABLE - 326)) | (1 << (tsqlParser.SIMPLE - 326)) | (1 << (tsqlParser.SIZE - 326)) | (1 << (tsqlParser.SNAPSHOT - 326)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 326)) | (1 << (tsqlParser.STATIC - 326)) | (1 << (tsqlParser.STATS_STREAM - 326)) | (1 << (tsqlParser.STDEV - 326)) | (1 << (tsqlParser.STDEVP - 326)) | (1 << (tsqlParser.SUM - 326)) | (1 << (tsqlParser.TEXTIMAGE_ON - 326)) | (1 << (tsqlParser.THROW - 326)) | (1 << (tsqlParser.TIES - 326)) | (1 << (tsqlParser.TIME - 326)) | (1 << (tsqlParser.TRY - 326)) | (1 << (tsqlParser.TYPE - 326)) | (1 << (tsqlParser.TYPE_WARNING - 326)) | (1 << (tsqlParser.UNBOUNDED - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.UNCOMMITTED - 390)) | (1 << (tsqlParser.UNKNOWN - 390)) | (1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                    self.state = 2336
                    self.table_name()
                    self.state = 2337
                    self.match(tsqlParser.DOT)


                self.state = 2344
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 2341
                    self.a_star()
                    pass
                elif token in [tsqlParser.DOLLAR]:
                    self.state = 2342
                    self.match(tsqlParser.DOLLAR)
                    self.state = 2343
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.IDENTITY or _la==tsqlParser.ROWGUID):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2346
                localctx.alias = self.column_alias()
                self.state = 2347
                self.match(tsqlParser.EQUAL)
                self.state = 2348
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2350
                self.expression(0)
                self.state = 2355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
                if la_ == 1:
                    self.state = 2352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.AS:
                        self.state = 2351
                        self.match(tsqlParser.AS)


                    self.state = 2354
                    localctx.alias = self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_sourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_sources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_sources" ):
                listener.enterTable_sources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_sources" ):
                listener.exitTable_sources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_sources" ):
                return visitor.visitTable_sources(self)
            else:
                return visitor.visitChildren(self)




    def table_sources(self):

        localctx = tsqlParser.Table_sourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_table_sources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2359
            self.table_source(0)
            self.state = 2364
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,353,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2360
                    self.match(tsqlParser.COMMA)
                    self.state = 2361
                    self.table_source(0) 
                self.state = 2366
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,353,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_sourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_table_source

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Cross_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.op = None # Token
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)
        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)

        def CROSS(self):
            return self.getToken(tsqlParser.CROSS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCross_join" ):
                listener.enterCross_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCross_join" ):
                listener.exitCross_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCross_join" ):
                return visitor.visitCross_join(self)
            else:
                return visitor.visitChildren(self)


    class Table_source_item_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_source_item(self):
            return self.getTypedRuleContext(tsqlParser.Table_source_itemContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_join" ):
                listener.enterTable_source_item_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_join" ):
                listener.exitTable_source_item_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item_join" ):
                return visitor.visitTable_source_item_join(self)
            else:
                return visitor.visitChildren(self)


    class Standard_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def join_type(self):
            return self.getTypedRuleContext(tsqlParser.Join_typeContext,0)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)
        def ON(self):
            return self.getToken(tsqlParser.ON, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_join" ):
                listener.enterStandard_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_join" ):
                listener.exitStandard_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_join" ):
                return visitor.visitStandard_join(self)
            else:
                return visitor.visitChildren(self)


    class Apply_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.op = None # Token
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)
        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)

        def CROSS(self):
            return self.getToken(tsqlParser.CROSS, 0)
        def OUTER(self):
            return self.getToken(tsqlParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApply_join" ):
                listener.enterApply_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApply_join" ):
                listener.exitApply_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitApply_join" ):
                return visitor.visitApply_join(self)
            else:
                return visitor.visitChildren(self)


    class Bracket_table_sourceContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_source(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_table_source" ):
                listener.enterBracket_table_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_table_source" ):
                listener.exitBracket_table_source(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracket_table_source" ):
                return visitor.visitBracket_table_source(self)
            else:
                return visitor.visitChildren(self)



    def table_source(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Table_sourceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 224
        self.enterRecursionRule(localctx, 224, self.RULE_table_source, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Bracket_table_sourceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2368
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2369
                self.table_source(0)
                self.state = 2370
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = tsqlParser.Table_source_item_joinContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2372
                self.table_source_item()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2392
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,356,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2390
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Cross_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2375
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2376
                        localctx.op = self.match(tsqlParser.CROSS)
                        self.state = 2377
                        self.match(tsqlParser.JOIN)
                        self.state = 2378
                        localctx.right = self.table_source(4)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Apply_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2379
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2380
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==tsqlParser.CROSS or _la==tsqlParser.OUTER):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2381
                        self.match(tsqlParser.APPLY)
                        self.state = 2382
                        localctx.right = self.table_source(3)
                        pass

                    elif la_ == 3:
                        localctx = tsqlParser.Standard_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2383
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2384
                        self.join_type()
                        self.state = 2385
                        self.match(tsqlParser.JOIN)
                        self.state = 2386
                        localctx.right = self.table_source(0)
                        self.state = 2387
                        self.match(tsqlParser.ON)
                        self.state = 2388
                        self.search_condition(0)
                        pass

             
                self.state = 2394
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,356,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Table_source_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_table_source_item

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Table_source_item_simpleContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowset_function(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_functionContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def change_table(self):
            return self.getTypedRuleContext(tsqlParser.Change_tableContext,0)

        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_simple" ):
                listener.enterTable_source_item_simple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_simple" ):
                listener.exitTable_source_item_simple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item_simple" ):
                return visitor.visitTable_source_item_simple(self)
            else:
                return visitor.visitChildren(self)


    class Table_source_item_complexContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def column_alias_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_alias_listContext,0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)
        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_complex" ):
                listener.enterTable_source_item_complex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_complex" ):
                listener.exitTable_source_item_complex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item_complex" ):
                return visitor.visitTable_source_item_complex(self)
            else:
                return visitor.visitChildren(self)


    class Table_source_item_nameContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_name" ):
                listener.enterTable_source_item_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_name" ):
                listener.exitTable_source_item_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item_name" ):
                return visitor.visitTable_source_item_name(self)
            else:
                return visitor.visitChildren(self)



    def table_source_item(self):

        localctx = tsqlParser.Table_source_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_table_source_item)
        try:
            self.state = 2434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Table_source_item_nameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2395
                self.table_name()
                self.state = 2397
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
                if la_ == 1:
                    self.state = 2396
                    self.table_alias()


                self.state = 2400
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
                if la_ == 1:
                    self.state = 2399
                    self.with_table_hints()


                pass

            elif la_ == 2:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2402
                self.rowset_function()
                self.state = 2404
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
                if la_ == 1:
                    self.state = 2403
                    self.table_alias()


                pass

            elif la_ == 3:
                localctx = tsqlParser.Table_source_item_complexContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2406
                self.derived_table()
                self.state = 2411
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
                if la_ == 1:
                    self.state = 2407
                    self.table_alias()
                    self.state = 2409
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
                    if la_ == 1:
                        self.state = 2408
                        self.column_alias_list()




                pass

            elif la_ == 4:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2413
                self.change_table()
                self.state = 2415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
                if la_ == 1:
                    self.state = 2414
                    self.table_alias()


                pass

            elif la_ == 5:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2417
                self.function_call()
                self.state = 2419
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
                if la_ == 1:
                    self.state = 2418
                    self.table_alias()


                pass

            elif la_ == 6:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2421
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2423
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
                if la_ == 1:
                    self.state = 2422
                    self.table_alias()


                pass

            elif la_ == 7:
                localctx = tsqlParser.Table_source_item_complexContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2425
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2426
                self.match(tsqlParser.DOT)
                self.state = 2427
                self.function_call()
                self.state = 2432
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
                if la_ == 1:
                    self.state = 2428
                    self.table_alias()
                    self.state = 2430
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                    if la_ == 1:
                        self.state = 2429
                        self.column_alias_list()




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = tsqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_table_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 2436
                self.match(tsqlParser.AS)


            self.state = 2439
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGETABLE(self):
            return self.getToken(tsqlParser.CHANGETABLE, 0)

        def CHANGES(self):
            return self.getToken(tsqlParser.CHANGES, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_table" ):
                listener.enterChange_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_table" ):
                listener.exitChange_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_table" ):
                return visitor.visitChange_table(self)
            else:
                return visitor.visitChildren(self)




    def change_table(self):

        localctx = tsqlParser.Change_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_change_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2441
            self.match(tsqlParser.CHANGETABLE)
            self.state = 2442
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2443
            self.match(tsqlParser.CHANGES)
            self.state = 2444
            self.table_name()
            self.state = 2445
            self.match(tsqlParser.COMMA)
            self.state = 2446
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NULL or _la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2447
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_hint = None # Token

        def LEFT(self):
            return self.getToken(tsqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(tsqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(tsqlParser.INNER, 0)

        def OUTER(self):
            return self.getToken(tsqlParser.OUTER, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def REMOTE(self):
            return self.getToken(tsqlParser.REMOTE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_type" ):
                return visitor.visitJoin_type(self)
            else:
                return visitor.visitChildren(self)




    def join_type(self):

        localctx = tsqlParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.INNER, tsqlParser.JOIN, tsqlParser.MERGE, tsqlParser.HASH, tsqlParser.LOOP, tsqlParser.REMOTE]:
                self.state = 2450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.INNER:
                    self.state = 2449
                    self.match(tsqlParser.INNER)


                pass
            elif token in [tsqlParser.FULL, tsqlParser.LEFT, tsqlParser.RIGHT]:
                self.state = 2452
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.LEFT or _la==tsqlParser.RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.OUTER:
                    self.state = 2453
                    self.match(tsqlParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP or _la==tsqlParser.REMOTE:
                self.state = 2458
                localctx.join_hint = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP or _la==tsqlParser.REMOTE):
                    localctx.join_hint = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_name_with_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_name_with_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name_with_hint" ):
                listener.enterTable_name_with_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name_with_hint" ):
                listener.exitTable_name_with_hint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name_with_hint" ):
                return visitor.visitTable_name_with_hint(self)
            else:
                return visitor.visitChildren(self)




    def table_name_with_hint(self):

        localctx = tsqlParser.Table_name_with_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_table_name_with_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2461
            self.table_name()
            self.state = 2463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
            if la_ == 1:
                self.state = 2462
                self.with_table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rowset_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # Token
            self.connectionString = None # Token
            self.sql = None # Token
            self.data_file = None # Token

        def OPENROWSET(self):
            return self.getToken(tsqlParser.OPENROWSET, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def BULK(self):
            return self.getToken(tsqlParser.BULK, 0)

        def bulk_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Bulk_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Bulk_optionContext,i)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_rowset_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function" ):
                listener.enterRowset_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function" ):
                listener.exitRowset_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowset_function" ):
                return visitor.visitRowset_function(self)
            else:
                return visitor.visitChildren(self)




    def rowset_function(self):

        localctx = tsqlParser.Rowset_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_rowset_function)
        self._la = 0 # Token type
        try:
            self.state = 2491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2465
                self.match(tsqlParser.OPENROWSET)
                self.state = 2466
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2467
                localctx.provider_name = self.match(tsqlParser.STRING)
                self.state = 2468
                self.match(tsqlParser.COMMA)
                self.state = 2469
                localctx.connectionString = self.match(tsqlParser.STRING)
                self.state = 2470
                self.match(tsqlParser.COMMA)
                self.state = 2471
                localctx.sql = self.match(tsqlParser.STRING)
                self.state = 2472
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2473
                self.match(tsqlParser.OPENROWSET)
                self.state = 2474
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2475
                self.match(tsqlParser.BULK)
                self.state = 2476
                localctx.data_file = self.match(tsqlParser.STRING)
                self.state = 2477
                self.match(tsqlParser.COMMA)
                self.state = 2487
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
                if la_ == 1:
                    self.state = 2478
                    self.bulk_option()
                    self.state = 2483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 2479
                        self.match(tsqlParser.COMMA)
                        self.state = 2480
                        self.bulk_option()
                        self.state = 2485
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 2486
                    self.r_id()
                    pass


                self.state = 2489
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bulk_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bulk_option_value = None # Token

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_bulk_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBulk_option" ):
                listener.enterBulk_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBulk_option" ):
                listener.exitBulk_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBulk_option" ):
                return visitor.visitBulk_option(self)
            else:
                return visitor.visitChildren(self)




    def bulk_option(self):

        localctx = tsqlParser.Bulk_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_bulk_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2493
            self.r_id()
            self.state = 2494
            self.match(tsqlParser.EQUAL)
            self.state = 2495
            localctx.bulk_option_value = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.DECIMAL or _la==tsqlParser.STRING):
                localctx.bulk_option_value = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Derived_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_derived_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_table" ):
                listener.enterDerived_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_table" ):
                listener.exitDerived_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDerived_table" ):
                return visitor.visitDerived_table(self)
            else:
                return visitor.visitChildren(self)




    def derived_table(self):

        localctx = tsqlParser.Derived_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_derived_table)
        try:
            self.state = 2502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2497
                self.subquery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2498
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2499
                self.subquery()
                self.state = 2500
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_function_call

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Standard_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.style = None # ExpressionContext
            self.seed = None # Token
            self.increment = None # Token
            self.copyFrom(ctx)

        def scalar_function_name(self):
            return self.getTypedRuleContext(tsqlParser.Scalar_function_nameContext,0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)

        def BINARY_CHECKSUM(self):
            return self.getToken(tsqlParser.BINARY_CHECKSUM, 0)
        def CONVERT(self):
            return self.getToken(tsqlParser.CONVERT, 0)
        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def COALESCE(self):
            return self.getToken(tsqlParser.COALESCE, 0)
        def DATEADD(self):
            return self.getToken(tsqlParser.DATEADD, 0)
        def ID(self):
            return self.getToken(tsqlParser.ID, 0)
        def DATEDIFF(self):
            return self.getToken(tsqlParser.DATEDIFF, 0)
        def DATENAME(self):
            return self.getToken(tsqlParser.DATENAME, 0)
        def DATEPART(self):
            return self.getToken(tsqlParser.DATEPART, 0)
        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)
        def IIF(self):
            return self.getToken(tsqlParser.IIF, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def NULLIF(self):
            return self.getToken(tsqlParser.NULLIF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_call" ):
                listener.enterStandard_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_call" ):
                listener.exitStandard_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_call" ):
                return visitor.visitStandard_call(self)
            else:
                return visitor.visitChildren(self)


    class Aggregate_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(tsqlParser.Aggregate_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_call" ):
                listener.enterAggregate_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_call" ):
                listener.exitAggregate_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_call" ):
                return visitor.visitAggregate_call(self)
            else:
                return visitor.visitChildren(self)


    class Nvf_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def next_value_for_function(self):
            return self.getTypedRuleContext(tsqlParser.Next_value_for_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNvf_call" ):
                listener.enterNvf_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNvf_call" ):
                listener.exitNvf_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNvf_call" ):
                return visitor.visitNvf_call(self)
            else:
                return visitor.visitChildren(self)


    class Rank_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ranking_windowed_function(self):
            return self.getTypedRuleContext(tsqlParser.Ranking_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank_call" ):
                listener.enterRank_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank_call" ):
                listener.exitRank_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRank_call" ):
                return visitor.visitRank_call(self)
            else:
                return visitor.visitChildren(self)


    class Simple_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(tsqlParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(tsqlParser.CURRENT_USER, 0)
        def MIN_ACTIVE_ROWVERSION(self):
            return self.getToken(tsqlParser.MIN_ACTIVE_ROWVERSION, 0)
        def SESSION_USER(self):
            return self.getToken(tsqlParser.SESSION_USER, 0)
        def SYSTEM_USER(self):
            return self.getToken(tsqlParser.SYSTEM_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_call" ):
                listener.enterSimple_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_call" ):
                listener.exitSimple_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_call" ):
                return visitor.visitSimple_call(self)
            else:
                return visitor.visitChildren(self)


    class Cast_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.alias = None # Data_typeContext
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(tsqlParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)
        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_call" ):
                listener.enterCast_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_call" ):
                listener.exitCast_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast_call" ):
                return visitor.visitCast_call(self)
            else:
                return visitor.visitChildren(self)



    def function_call(self):

        localctx = tsqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 2611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Rank_callContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2504
                self.ranking_windowed_function()
                pass

            elif la_ == 2:
                localctx = tsqlParser.Aggregate_callContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2505
                self.aggregate_windowed_function()
                pass

            elif la_ == 3:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2506
                self.scalar_function_name()
                self.state = 2507
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.CASE) | (1 << tsqlParser.COALESCE) | (1 << tsqlParser.CONVERT) | (1 << tsqlParser.CURRENT_TIMESTAMP) | (1 << tsqlParser.CURRENT_USER) | (1 << tsqlParser.DEFAULT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (tsqlParser.FORCESEEK - 72)) | (1 << (tsqlParser.IDENTITY - 72)) | (1 << (tsqlParser.IIF - 72)) | (1 << (tsqlParser.LEFT - 72)) | (1 << (tsqlParser.NEXT - 72)) | (1 << (tsqlParser.NULL - 72)) | (1 << (tsqlParser.NULLIF - 72)) | (1 << (tsqlParser.OVER - 72)))) != 0) or ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (tsqlParser.RIGHT - 147)) | (1 << (tsqlParser.SESSION_USER - 147)) | (1 << (tsqlParser.SYSTEM_USER - 147)) | (1 << (tsqlParser.ABSOLUTE - 147)) | (1 << (tsqlParser.APPLY - 147)) | (1 << (tsqlParser.AUTO - 147)))) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & ((1 << (tsqlParser.AVG - 213)) | (1 << (tsqlParser.BASE64 - 213)) | (1 << (tsqlParser.BINARY_CHECKSUM - 213)) | (1 << (tsqlParser.CALLER - 213)) | (1 << (tsqlParser.CAST - 213)) | (1 << (tsqlParser.CATCH - 213)) | (1 << (tsqlParser.CHECKSUM - 213)) | (1 << (tsqlParser.CHECKSUM_AGG - 213)) | (1 << (tsqlParser.COMMITTED - 213)) | (1 << (tsqlParser.CONCAT - 213)) | (1 << (tsqlParser.CONTROL - 213)) | (1 << (tsqlParser.COOKIE - 213)) | (1 << (tsqlParser.COUNT - 213)) | (1 << (tsqlParser.COUNT_BIG - 213)) | (1 << (tsqlParser.DATEADD - 213)) | (1 << (tsqlParser.DATEDIFF - 213)) | (1 << (tsqlParser.DATENAME - 213)) | (1 << (tsqlParser.DATEPART - 213)) | (1 << (tsqlParser.DELAY - 213)) | (1 << (tsqlParser.DELETED - 213)) | (1 << (tsqlParser.DENSE_RANK - 213)) | (1 << (tsqlParser.DISABLE - 213)) | (1 << (tsqlParser.DYNAMIC - 213)) | (1 << (tsqlParser.ENCRYPTION - 213)) | (1 << (tsqlParser.EXPAND - 213)) | (1 << (tsqlParser.FAST - 213)) | (1 << (tsqlParser.FAST_FORWARD - 213)) | (1 << (tsqlParser.FIRST - 213)) | (1 << (tsqlParser.FIRST_VALUE - 213)) | (1 << (tsqlParser.FOLLOWING - 213)) | (1 << (tsqlParser.FORCE - 213)) | (1 << (tsqlParser.FORCED - 213)) | (1 << (tsqlParser.FORWARD_ONLY - 213)) | (1 << (tsqlParser.FULLSCAN - 213)) | (1 << (tsqlParser.GLOBAL - 213)) | (1 << (tsqlParser.GO - 213)) | (1 << (tsqlParser.GROUPING - 213)) | (1 << (tsqlParser.GROUPING_ID - 213)) | (1 << (tsqlParser.HASH - 213)))) != 0) or ((((_la - 278)) & ~0x3f) == 0 and ((1 << (_la - 278)) & ((1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 278)) | (1 << (tsqlParser.IMPERSONATE - 278)) | (1 << (tsqlParser.INSENSITIVE - 278)) | (1 << (tsqlParser.INSERTED - 278)) | (1 << (tsqlParser.ISOLATION - 278)) | (1 << (tsqlParser.KEEP - 278)) | (1 << (tsqlParser.KEEPFIXED - 278)) | (1 << (tsqlParser.KEYSET - 278)) | (1 << (tsqlParser.LAG - 278)) | (1 << (tsqlParser.LAST - 278)) | (1 << (tsqlParser.LEAD - 278)) | (1 << (tsqlParser.LEVEL - 278)) | (1 << (tsqlParser.LOCAL - 278)) | (1 << (tsqlParser.LOCK_ESCALATION - 278)) | (1 << (tsqlParser.LOGIN - 278)) | (1 << (tsqlParser.LOOP - 278)) | (1 << (tsqlParser.MARK - 278)) | (1 << (tsqlParser.MAX - 278)) | (1 << (tsqlParser.MAXDOP - 278)) | (1 << (tsqlParser.MAXRECURSION - 278)) | (1 << (tsqlParser.MIN - 278)) | (1 << (tsqlParser.MIN_ACTIVE_ROWVERSION - 278)) | (1 << (tsqlParser.MODIFY - 278)) | (1 << (tsqlParser.NAME - 278)) | (1 << (tsqlParser.NOCOUNT - 278)) | (1 << (tsqlParser.NOEXPAND - 278)) | (1 << (tsqlParser.NORECOMPUTE - 278)) | (1 << (tsqlParser.NTILE - 278)) | (1 << (tsqlParser.NUMBER - 278)) | (1 << (tsqlParser.OFFSET - 278)) | (1 << (tsqlParser.ONLINE - 278)) | (1 << (tsqlParser.ONLY - 278)) | (1 << (tsqlParser.OPTIMISTIC - 278)) | (1 << (tsqlParser.OPTIMIZE - 278)) | (1 << (tsqlParser.OUT - 278)) | (1 << (tsqlParser.OUTPUT - 278)) | (1 << (tsqlParser.OWNER - 278)) | (1 << (tsqlParser.PARAMETERIZATION - 278)) | (1 << (tsqlParser.PARTITION - 278)) | (1 << (tsqlParser.PATH - 278)) | (1 << (tsqlParser.PRECEDING - 278)) | (1 << (tsqlParser.PRIOR - 278)) | (1 << (tsqlParser.PRIVILEGES - 278)) | (1 << (tsqlParser.RANGE - 278)) | (1 << (tsqlParser.RANK - 278)) | (1 << (tsqlParser.READONLY - 278)))) != 0) or ((((_la - 342)) & ~0x3f) == 0 and ((1 << (_la - 342)) & ((1 << (tsqlParser.READ_ONLY - 342)) | (1 << (tsqlParser.RECOMPILE - 342)) | (1 << (tsqlParser.RELATIVE - 342)) | (1 << (tsqlParser.REMOTE - 342)) | (1 << (tsqlParser.REPEATABLE - 342)) | (1 << (tsqlParser.ROBUST - 342)) | (1 << (tsqlParser.ROOT - 342)) | (1 << (tsqlParser.ROW - 342)) | (1 << (tsqlParser.ROWGUID - 342)) | (1 << (tsqlParser.ROWS - 342)) | (1 << (tsqlParser.ROW_NUMBER - 342)) | (1 << (tsqlParser.SAMPLE - 342)) | (1 << (tsqlParser.SCHEMABINDING - 342)) | (1 << (tsqlParser.SCROLL - 342)) | (1 << (tsqlParser.SCROLL_LOCKS - 342)) | (1 << (tsqlParser.SELF - 342)) | (1 << (tsqlParser.SERIALIZABLE - 342)) | (1 << (tsqlParser.SIMPLE - 342)) | (1 << (tsqlParser.SIZE - 342)) | (1 << (tsqlParser.SNAPSHOT - 342)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 342)) | (1 << (tsqlParser.STATIC - 342)) | (1 << (tsqlParser.STATS_STREAM - 342)) | (1 << (tsqlParser.STDEV - 342)) | (1 << (tsqlParser.STDEVP - 342)) | (1 << (tsqlParser.SUM - 342)) | (1 << (tsqlParser.TEXTIMAGE_ON - 342)) | (1 << (tsqlParser.THROW - 342)) | (1 << (tsqlParser.TIES - 342)) | (1 << (tsqlParser.TIME - 342)) | (1 << (tsqlParser.TRY - 342)) | (1 << (tsqlParser.TYPE - 342)) | (1 << (tsqlParser.TYPE_WARNING - 342)) | (1 << (tsqlParser.UNBOUNDED - 342)) | (1 << (tsqlParser.UNCOMMITTED - 342)) | (1 << (tsqlParser.UNKNOWN - 342)) | (1 << (tsqlParser.USING - 342)) | (1 << (tsqlParser.VAR - 342)) | (1 << (tsqlParser.VARP - 342)) | (1 << (tsqlParser.VIEWS - 342)) | (1 << (tsqlParser.VIEW_METADATA - 342)) | (1 << (tsqlParser.WORK - 342)) | (1 << (tsqlParser.XML - 342)) | (1 << (tsqlParser.XMLNAMESPACES - 342)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 342)))) != 0) or ((((_la - 406)) & ~0x3f) == 0 and ((1 << (_la - 406)) & ((1 << (tsqlParser.SQUARE_BRACKET_ID - 406)) | (1 << (tsqlParser.LOCAL_ID - 406)) | (1 << (tsqlParser.DECIMAL - 406)) | (1 << (tsqlParser.ID - 406)) | (1 << (tsqlParser.STRING - 406)) | (1 << (tsqlParser.BINARY - 406)) | (1 << (tsqlParser.FLOAT - 406)) | (1 << (tsqlParser.REAL - 406)) | (1 << (tsqlParser.DOLLAR - 406)) | (1 << (tsqlParser.LR_BRACKET - 406)) | (1 << (tsqlParser.PLUS - 406)) | (1 << (tsqlParser.MINUS - 406)) | (1 << (tsqlParser.BIT_NOT - 406)))) != 0):
                    self.state = 2508
                    self.expression_list()


                self.state = 2511
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Nvf_callContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2513
                self.next_value_for_function()
                pass

            elif la_ == 5:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2514
                self.match(tsqlParser.BINARY_CHECKSUM)
                self.state = 2515
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2516
                self.match(tsqlParser.STAR)
                self.state = 2517
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = tsqlParser.Cast_callContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2518
                self.match(tsqlParser.CAST)
                self.state = 2519
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2520
                self.expression(0)
                self.state = 2521
                self.match(tsqlParser.AS)
                self.state = 2522
                localctx.alias = self.data_type()
                self.state = 2523
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2525
                self.match(tsqlParser.CONVERT)
                self.state = 2526
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2527
                self.data_type()
                self.state = 2528
                self.match(tsqlParser.COMMA)
                self.state = 2529
                self.expression(0)
                self.state = 2532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2530
                    self.match(tsqlParser.COMMA)
                    self.state = 2531
                    localctx.style = self.expression(0)


                self.state = 2534
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2536
                self.match(tsqlParser.CHECKSUM)
                self.state = 2537
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2538
                self.match(tsqlParser.STAR)
                self.state = 2539
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2540
                self.match(tsqlParser.COALESCE)
                self.state = 2541
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2542
                self.expression_list()
                self.state = 2543
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2545
                self.match(tsqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 11:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2546
                self.match(tsqlParser.CURRENT_USER)
                pass

            elif la_ == 12:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2547
                self.match(tsqlParser.DATEADD)
                self.state = 2548
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2549
                self.match(tsqlParser.ID)
                self.state = 2550
                self.match(tsqlParser.COMMA)
                self.state = 2551
                self.expression(0)
                self.state = 2552
                self.match(tsqlParser.COMMA)
                self.state = 2553
                self.expression(0)
                self.state = 2554
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2556
                self.match(tsqlParser.DATEDIFF)
                self.state = 2557
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2558
                self.match(tsqlParser.ID)
                self.state = 2559
                self.match(tsqlParser.COMMA)
                self.state = 2560
                self.expression(0)
                self.state = 2561
                self.match(tsqlParser.COMMA)
                self.state = 2562
                self.expression(0)
                self.state = 2563
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2565
                self.match(tsqlParser.DATENAME)
                self.state = 2566
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2567
                self.match(tsqlParser.ID)
                self.state = 2568
                self.match(tsqlParser.COMMA)
                self.state = 2569
                self.expression(0)
                self.state = 2570
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2572
                self.match(tsqlParser.DATEPART)
                self.state = 2573
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2574
                self.match(tsqlParser.ID)
                self.state = 2575
                self.match(tsqlParser.COMMA)
                self.state = 2576
                self.expression(0)
                self.state = 2577
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 16:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2579
                self.match(tsqlParser.IDENTITY)
                self.state = 2580
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2581
                self.data_type()
                self.state = 2584
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
                if la_ == 1:
                    self.state = 2582
                    self.match(tsqlParser.COMMA)
                    self.state = 2583
                    localctx.seed = self.match(tsqlParser.DECIMAL)


                self.state = 2588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2586
                    self.match(tsqlParser.COMMA)
                    self.state = 2587
                    localctx.increment = self.match(tsqlParser.DECIMAL)


                self.state = 2590
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 17:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2592
                self.match(tsqlParser.IIF)
                self.state = 2593
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2594
                self.search_condition(0)
                self.state = 2595
                self.match(tsqlParser.COMMA)
                self.state = 2596
                self.expression(0)
                self.state = 2597
                self.match(tsqlParser.COMMA)
                self.state = 2598
                self.expression(0)
                self.state = 2599
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 18:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 2601
                self.match(tsqlParser.MIN_ACTIVE_ROWVERSION)
                pass

            elif la_ == 19:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 2602
                self.match(tsqlParser.NULLIF)
                self.state = 2603
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2604
                self.expression(0)
                self.state = 2605
                self.match(tsqlParser.COMMA)
                self.state = 2606
                self.expression(0)
                self.state = 2607
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 20:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 2609
                self.match(tsqlParser.SESSION_USER)
                pass

            elif la_ == 21:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 2610
                self.match(tsqlParser.SYSTEM_USER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # ExpressionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(tsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(tsqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_section" ):
                return visitor.visitSwitch_section(self)
            else:
                return visitor.visitChildren(self)




    def switch_section(self):

        localctx = tsqlParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2613
            self.match(tsqlParser.WHEN)
            self.state = 2614
            localctx.whenExpr = self.expression(0)
            self.state = 2615
            self.match(tsqlParser.THEN)
            self.state = 2616
            localctx.thenExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_search_condition_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # Search_conditionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(tsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(tsqlParser.THEN, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_switch_search_condition_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_search_condition_section" ):
                listener.enterSwitch_search_condition_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_search_condition_section" ):
                listener.exitSwitch_search_condition_section(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_search_condition_section" ):
                return visitor.visitSwitch_search_condition_section(self)
            else:
                return visitor.visitChildren(self)




    def switch_search_condition_section(self):

        localctx = tsqlParser.Switch_search_condition_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_switch_search_condition_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2618
            self.match(tsqlParser.WHEN)
            self.state = 2619
            localctx.whenExpr = self.search_condition(0)
            self.state = 2620
            self.match(tsqlParser.THEN)
            self.state = 2621
            localctx.thenExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_table_hintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_hintContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_table_hints" ):
                listener.enterWith_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_table_hints" ):
                listener.exitWith_table_hints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_table_hints" ):
                return visitor.visitWith_table_hints(self)
            else:
                return visitor.visitChildren(self)




    def with_table_hints(self):

        localctx = tsqlParser.With_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 2623
                self.match(tsqlParser.WITH)


            self.state = 2626
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2627
            self.table_hint()
            self.state = 2632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2628
                self.match(tsqlParser.COMMA)
                self.state = 2629
                self.table_hint()
                self.state = 2634
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2635
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_with_table_hintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_hintContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_insert_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_with_table_hints" ):
                listener.enterInsert_with_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_with_table_hints" ):
                listener.exitInsert_with_table_hints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_with_table_hints" ):
                return visitor.visitInsert_with_table_hints(self)
            else:
                return visitor.visitChildren(self)




    def insert_with_table_hints(self):

        localctx = tsqlParser.Insert_with_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_insert_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2637
            self.match(tsqlParser.WITH)
            self.state = 2638
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2639
            self.table_hint()
            self.state = 2644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2640
                self.match(tsqlParser.COMMA)
                self.state = 2641
                self.table_hint()
                self.state = 2646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2647
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOEXPAND(self):
            return self.getToken(tsqlParser.NOEXPAND, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def index_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_valueContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_valueContext,i)


        def FORCESEEK(self):
            return self.getToken(tsqlParser.FORCESEEK, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ID)
            else:
                return self.getToken(tsqlParser.ID, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_hint" ):
                listener.enterTable_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_hint" ):
                listener.exitTable_hint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_hint" ):
                return visitor.visitTable_hint(self)
            else:
                return visitor.visitChildren(self)




    def table_hint(self):

        localctx = tsqlParser.Table_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_table_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOEXPAND:
                self.state = 2649
                self.match(tsqlParser.NOEXPAND)


            self.state = 2690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
            if la_ == 1:
                self.state = 2652
                self.match(tsqlParser.INDEX)
                self.state = 2653
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2654
                self.index_value()
                self.state = 2659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2655
                    self.match(tsqlParser.COMMA)
                    self.state = 2656
                    self.index_value()
                    self.state = 2661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2662
                self.match(tsqlParser.RR_BRACKET)

            elif la_ == 2:
                self.state = 2664
                self.match(tsqlParser.INDEX)
                self.state = 2665
                self.match(tsqlParser.EQUAL)
                self.state = 2666
                self.index_value()

            elif la_ == 3:
                self.state = 2667
                self.match(tsqlParser.FORCESEEK)
                self.state = 2682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LR_BRACKET:
                    self.state = 2668
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2669
                    self.index_value()
                    self.state = 2670
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2671
                    self.match(tsqlParser.ID)
                    self.state = 2676
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 2672
                        self.match(tsqlParser.COMMA)
                        self.state = 2673
                        self.match(tsqlParser.ID)
                        self.state = 2678
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2679
                    self.match(tsqlParser.RR_BRACKET)
                    self.state = 2680
                    self.match(tsqlParser.RR_BRACKET)



            elif la_ == 4:
                self.state = 2684
                self.match(tsqlParser.SERIALIZABLE)

            elif la_ == 5:
                self.state = 2685
                self.match(tsqlParser.SNAPSHOT)

            elif la_ == 6:
                self.state = 2686
                self.match(tsqlParser.SPATIAL_WINDOW_MAX_CELLS)
                self.state = 2687
                self.match(tsqlParser.EQUAL)
                self.state = 2688
                self.match(tsqlParser.DECIMAL)

            elif la_ == 7:
                self.state = 2689
                self.match(tsqlParser.ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_value" ):
                listener.enterIndex_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_value" ):
                listener.exitIndex_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_value" ):
                return visitor.visitIndex_value(self)
            else:
                return visitor.visitChildren(self)




    def index_value(self):

        localctx = tsqlParser.Index_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_index_value)
        try:
            self.state = 2694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2692
                self.r_id()
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2693
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_alias_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_alias_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias_list" ):
                listener.enterColumn_alias_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias_list" ):
                listener.exitColumn_alias_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias_list" ):
                return visitor.visitColumn_alias_list(self)
            else:
                return visitor.visitChildren(self)




    def column_alias_list(self):

        localctx = tsqlParser.Column_alias_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_column_alias_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2696
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2697
            self.column_alias()
            self.state = 2702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2698
                self.match(tsqlParser.COMMA)
                self.state = 2699
                self.column_alias()
                self.state = 2704
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2705
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = tsqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_column_alias)
        try:
            self.state = 2709
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2707
                self.r_id()
                pass
            elif token in [tsqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2708
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class A_starContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_a_star

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_star" ):
                listener.enterA_star(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_star" ):
                listener.exitA_star(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitA_star" ):
                return visitor.visitA_star(self)
            else:
                return visitor.visitChildren(self)




    def a_star(self):

        localctx = tsqlParser.A_starContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_a_star)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2711
            self.match(tsqlParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_value_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def value_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Value_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Value_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_value_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_value_constructor" ):
                listener.enterTable_value_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_value_constructor" ):
                listener.exitTable_value_constructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_value_constructor" ):
                return visitor.visitTable_value_constructor(self)
            else:
                return visitor.visitChildren(self)




    def table_value_constructor(self):

        localctx = tsqlParser.Table_value_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_table_value_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2713
            self.match(tsqlParser.VALUES)
            self.state = 2714
            self.value_list()
            self.state = 2719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2715
                self.match(tsqlParser.COMMA)
                self.state = 2716
                self.value_list()
                self.state = 2721
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_list" ):
                return visitor.visitExpression_list(self)
            else:
                return visitor.visitChildren(self)




    def expression_list(self):

        localctx = tsqlParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2722
            self.expression(0)
            self.state = 2727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2723
                self.match(tsqlParser.COMMA)
                self.state = 2724
                self.expression(0)
                self.state = 2729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_value_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_list" ):
                listener.enterValue_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_list" ):
                listener.exitValue_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_list" ):
                return visitor.visitValue_list(self)
            else:
                return visitor.visitChildren(self)




    def value_list(self):

        localctx = tsqlParser.Value_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_value_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2730
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2731
            self.expression_list()
            self.state = 2732
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Next_value_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def VALUE(self):
            return self.getToken(tsqlParser.VALUE, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_next_value_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNext_value_for" ):
                listener.enterNext_value_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNext_value_for" ):
                listener.exitNext_value_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNext_value_for" ):
                return visitor.visitNext_value_for(self)
            else:
                return visitor.visitChildren(self)




    def next_value_for(self):

        localctx = tsqlParser.Next_value_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_next_value_for)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2734
            self.match(tsqlParser.NEXT)
            self.state = 2735
            self.match(tsqlParser.VALUE)
            self.state = 2736
            self.match(tsqlParser.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Next_value_for_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None # Func_proc_nameContext

        def next_value_for(self):
            return self.getTypedRuleContext(tsqlParser.Next_value_forContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_next_value_for_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNext_value_for_function" ):
                listener.enterNext_value_for_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNext_value_for_function" ):
                listener.exitNext_value_for_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNext_value_for_function" ):
                return visitor.visitNext_value_for_function(self)
            else:
                return visitor.visitChildren(self)




    def next_value_for_function(self):

        localctx = tsqlParser.Next_value_for_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_next_value_for_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2738
            self.next_value_for()
            self.state = 2739
            localctx.args = self.func_proc_name()
            self.state = 2740
            self.over_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ranking_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def RANK(self):
            return self.getToken(tsqlParser.RANK, 0)

        def DENSE_RANK(self):
            return self.getToken(tsqlParser.DENSE_RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(tsqlParser.ROW_NUMBER, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def NTILE(self):
            return self.getToken(tsqlParser.NTILE, 0)

        def FIRST_VALUE(self):
            return self.getToken(tsqlParser.FIRST_VALUE, 0)

        def LEAD(self):
            return self.getToken(tsqlParser.LEAD, 0)

        def LAG(self):
            return self.getToken(tsqlParser.LAG, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_ranking_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRanking_windowed_function" ):
                listener.enterRanking_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRanking_windowed_function" ):
                listener.exitRanking_windowed_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRanking_windowed_function" ):
                return visitor.visitRanking_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def ranking_windowed_function(self):

        localctx = tsqlParser.Ranking_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_ranking_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 2752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DENSE_RANK, tsqlParser.RANK, tsqlParser.ROW_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2742
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DENSE_RANK or _la==tsqlParser.RANK or _la==tsqlParser.ROW_NUMBER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2743
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2744
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2745
                self.over_clause()
                pass
            elif token in [tsqlParser.FIRST_VALUE, tsqlParser.LAG, tsqlParser.LEAD, tsqlParser.NTILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2746
                _la = self._input.LA(1)
                if not(((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & ((1 << (tsqlParser.FIRST_VALUE - 263)) | (1 << (tsqlParser.LAG - 263)) | (1 << (tsqlParser.LEAD - 263)) | (1 << (tsqlParser.NTILE - 263)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2747
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2748
                self.expression(0)
                self.state = 2749
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2750
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None # Token

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def AVG(self):
            return self.getToken(tsqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(tsqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(tsqlParser.SUM, 0)

        def STDEV(self):
            return self.getToken(tsqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(tsqlParser.STDEVP, 0)

        def VAR(self):
            return self.getToken(tsqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(tsqlParser.VARP, 0)

        def all_distinct(self):
            return self.getTypedRuleContext(tsqlParser.All_distinctContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def COUNT(self):
            return self.getToken(tsqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(tsqlParser.COUNT_BIG, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(tsqlParser.CHECKSUM_AGG, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(tsqlParser.GROUPING_ID, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_aggregate_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_windowed_function" ):
                listener.enterAggregate_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_windowed_function" ):
                listener.exitAggregate_windowed_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_windowed_function" ):
                return visitor.visitAggregate_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_windowed_function(self):

        localctx = tsqlParser.Aggregate_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_aggregate_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 2795
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AVG, tsqlParser.MAX, tsqlParser.MIN, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.VAR, tsqlParser.VARP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2754
                _la = self._input.LA(1)
                if not(_la==tsqlParser.AVG or _la==tsqlParser.MAX or _la==tsqlParser.MIN or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (tsqlParser.STDEV - 372)) | (1 << (tsqlParser.STDEVP - 372)) | (1 << (tsqlParser.SUM - 372)) | (1 << (tsqlParser.VAR - 372)) | (1 << (tsqlParser.VARP - 372)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2755
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                    self.state = 2756
                    self.all_distinct()


                self.state = 2759
                self.expression(0)
                self.state = 2760
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2762
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
                if la_ == 1:
                    self.state = 2761
                    self.over_clause()


                pass
            elif token in [tsqlParser.COUNT, tsqlParser.COUNT_BIG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2764
                _la = self._input.LA(1)
                if not(_la==tsqlParser.COUNT or _la==tsqlParser.COUNT_BIG):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2765
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2771
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 2766
                    localctx.args = self.match(tsqlParser.STAR)
                    pass
                elif token in [tsqlParser.ALL, tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DEFAULT, tsqlParser.DISTINCT, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.IIF, tsqlParser.LEFT, tsqlParser.NEXT, tsqlParser.NULL, tsqlParser.NULLIF, tsqlParser.OVER, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SYSTEM_USER, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                    self.state = 2768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                        self.state = 2767
                        self.all_distinct()


                    self.state = 2770
                    self.expression(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2773
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2775
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
                if la_ == 1:
                    self.state = 2774
                    self.over_clause()


                pass
            elif token in [tsqlParser.CHECKSUM_AGG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2777
                self.match(tsqlParser.CHECKSUM_AGG)
                self.state = 2778
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                    self.state = 2779
                    self.all_distinct()


                self.state = 2782
                self.expression(0)
                self.state = 2783
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.GROUPING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2785
                self.match(tsqlParser.GROUPING)
                self.state = 2786
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2787
                self.expression(0)
                self.state = 2788
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.GROUPING_ID]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2790
                self.match(tsqlParser.GROUPING_ID)
                self.state = 2791
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2792
                self.expression_list()
                self.state = 2793
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class All_distinctContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(tsqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_all_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_distinct" ):
                listener.enterAll_distinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_distinct" ):
                listener.exitAll_distinct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAll_distinct" ):
                return visitor.visitAll_distinct(self)
            else:
                return visitor.visitChildren(self)




    def all_distinct(self):

        localctx = tsqlParser.All_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_all_distinct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2797
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ALL or _la==tsqlParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(tsqlParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(tsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def row_or_range_clause(self):
            return self.getTypedRuleContext(tsqlParser.Row_or_range_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause" ):
                return visitor.visitOver_clause(self)
            else:
                return visitor.visitChildren(self)




    def over_clause(self):

        localctx = tsqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2799
            self.match(tsqlParser.OVER)
            self.state = 2800
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.PARTITION:
                self.state = 2801
                self.match(tsqlParser.PARTITION)
                self.state = 2802
                self.match(tsqlParser.BY)
                self.state = 2803
                self.expression_list()


            self.state = 2807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ORDER:
                self.state = 2806
                self.order_by_clause()


            self.state = 2810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.RANGE or _la==tsqlParser.ROWS:
                self.state = 2809
                self.row_or_range_clause()


            self.state = 2812
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Row_or_range_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_extent(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_extentContext,0)


        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(tsqlParser.RANGE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_row_or_range_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_or_range_clause" ):
                listener.enterRow_or_range_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_or_range_clause" ):
                listener.exitRow_or_range_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRow_or_range_clause" ):
                return visitor.visitRow_or_range_clause(self)
            else:
                return visitor.visitChildren(self)




    def row_or_range_clause(self):

        localctx = tsqlParser.Row_or_range_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_row_or_range_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2814
            _la = self._input.LA(1)
            if not(_la==tsqlParser.RANGE or _la==tsqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2815
            self.window_frame_extent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_extentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_precedingContext,0)


        def BETWEEN(self):
            return self.getToken(tsqlParser.BETWEEN, 0)

        def window_frame_bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Window_frame_boundContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Window_frame_boundContext,i)


        def AND(self):
            return self.getToken(tsqlParser.AND, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_extent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_extent" ):
                listener.enterWindow_frame_extent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_extent" ):
                listener.exitWindow_frame_extent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_extent" ):
                return visitor.visitWindow_frame_extent(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_extent(self):

        localctx = tsqlParser.Window_frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_window_frame_extent)
        try:
            self.state = 2823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CURRENT, tsqlParser.UNBOUNDED, tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2817
                self.window_frame_preceding()
                pass
            elif token in [tsqlParser.BETWEEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2818
                self.match(tsqlParser.BETWEEN)
                self.state = 2819
                self.window_frame_bound()
                self.state = 2820
                self.match(tsqlParser.AND)
                self.state = 2821
                self.window_frame_bound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_precedingContext,0)


        def window_frame_following(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_followingContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_bound" ):
                listener.enterWindow_frame_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_bound" ):
                listener.exitWindow_frame_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_bound" ):
                return visitor.visitWindow_frame_bound(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_bound(self):

        localctx = tsqlParser.Window_frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_window_frame_bound)
        try:
            self.state = 2827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2825
                self.window_frame_preceding()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2826
                self.window_frame_following()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_precedingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(tsqlParser.PRECEDING, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_preceding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_preceding" ):
                listener.enterWindow_frame_preceding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_preceding" ):
                listener.exitWindow_frame_preceding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_preceding" ):
                return visitor.visitWindow_frame_preceding(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_preceding(self):

        localctx = tsqlParser.Window_frame_precedingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_window_frame_preceding)
        try:
            self.state = 2835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2829
                self.match(tsqlParser.UNBOUNDED)
                self.state = 2830
                self.match(tsqlParser.PRECEDING)
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2831
                self.match(tsqlParser.DECIMAL)
                self.state = 2832
                self.match(tsqlParser.PRECEDING)
                pass
            elif token in [tsqlParser.CURRENT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2833
                self.match(tsqlParser.CURRENT)
                self.state = 2834
                self.match(tsqlParser.ROW)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_followingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def FOLLOWING(self):
            return self.getToken(tsqlParser.FOLLOWING, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_following

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_following" ):
                listener.enterWindow_frame_following(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_following" ):
                listener.exitWindow_frame_following(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_following" ):
                return visitor.visitWindow_frame_following(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_following(self):

        localctx = tsqlParser.Window_frame_followingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_window_frame_following)
        try:
            self.state = 2841
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2837
                self.match(tsqlParser.UNBOUNDED)
                self.state = 2838
                self.match(tsqlParser.FOLLOWING)
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2839
                self.match(tsqlParser.DECIMAL)
                self.state = 2840
                self.match(tsqlParser.FOLLOWING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_database_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def database_filestream_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Database_filestream_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Database_filestream_optionContext,i)


        def DEFAULT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(tsqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def DB_CHAINING(self):
            return self.getToken(tsqlParser.DB_CHAINING, 0)

        def TRUSTWORTHY(self):
            return self.getToken(tsqlParser.TRUSTWORTHY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_database_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_option" ):
                listener.enterCreate_database_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_option" ):
                listener.exitCreate_database_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_database_option" ):
                return visitor.visitCreate_database_option(self)
            else:
                return visitor.visitChildren(self)




    def create_database_option(self):

        localctx = tsqlParser.Create_database_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_create_database_option)
        self._la = 0 # Token type
        try:
            self.state = 2877
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILESTREAM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2843
                self.match(tsqlParser.FILESTREAM)

                self.state = 2844
                self.database_filestream_option()
                self.state = 2849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,411,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2845
                        self.match(tsqlParser.COMMA)
                        self.state = 2846
                        self.database_filestream_option() 
                    self.state = 2851
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,411,self._ctx)

                pass
            elif token in [tsqlParser.DEFAULT_LANGUAGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2852
                self.match(tsqlParser.DEFAULT_LANGUAGE)
                self.state = 2853
                self.match(tsqlParser.EQUAL)
                self.state = 2856
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2854
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 2855
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DEFAULT_FULLTEXT_LANGUAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2858
                self.match(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 2859
                self.match(tsqlParser.EQUAL)
                self.state = 2862
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2860
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 2861
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.NESTED_TRIGGERS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2864
                self.match(tsqlParser.NESTED_TRIGGERS)
                self.state = 2865
                self.match(tsqlParser.EQUAL)
                self.state = 2866
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRANSFORM_NOISE_WORDS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2867
                self.match(tsqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 2868
                self.match(tsqlParser.EQUAL)
                self.state = 2869
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TWO_DIGIT_YEAR_CUTOFF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2870
                self.match(tsqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 2871
                self.match(tsqlParser.EQUAL)
                self.state = 2872
                self.match(tsqlParser.DECIMAL)
                pass
            elif token in [tsqlParser.DB_CHAINING]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2873
                self.match(tsqlParser.DB_CHAINING)
                self.state = 2874
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRUSTWORTHY]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2875
                self.match(tsqlParser.TRUSTWORTHY)
                self.state = 2876
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_filestream_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def NON_TRANSACTED_ACCESS(self):
            return self.getToken(tsqlParser.NON_TRANSACTED_ACCESS, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DIRECTORY_NAME(self):
            return self.getToken(tsqlParser.DIRECTORY_NAME, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_database_filestream_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_filestream_option" ):
                listener.enterDatabase_filestream_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_filestream_option" ):
                listener.exitDatabase_filestream_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_filestream_option" ):
                return visitor.visitDatabase_filestream_option(self)
            else:
                return visitor.visitChildren(self)




    def database_filestream_option(self):

        localctx = tsqlParser.Database_filestream_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_database_filestream_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2879
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2886
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NON_TRANSACTED_ACCESS]:
                self.state = 2880
                self.match(tsqlParser.NON_TRANSACTED_ACCESS)
                self.state = 2881
                self.match(tsqlParser.EQUAL)
                self.state = 2882
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.OFF or _la==tsqlParser.READ_ONLY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.DIRECTORY_NAME]:
                self.state = 2883
                self.match(tsqlParser.DIRECTORY_NAME)
                self.state = 2884
                self.match(tsqlParser.EQUAL)
                self.state = 2885
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2888
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_file_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_group(self):
            return self.getTypedRuleContext(tsqlParser.File_groupContext,0)


        def file_spec(self):
            return self.getTypedRuleContext(tsqlParser.File_specContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_database_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_file_spec" ):
                listener.enterDatabase_file_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_file_spec" ):
                listener.exitDatabase_file_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_file_spec" ):
                return visitor.visitDatabase_file_spec(self)
            else:
                return visitor.visitChildren(self)




    def database_file_spec(self):

        localctx = tsqlParser.Database_file_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_database_file_spec)
        try:
            self.state = 2892
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILEGROUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2890
                self.file_group()
                pass
            elif token in [tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2891
                self.file_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILEGROUP(self):
            return self.getToken(tsqlParser.FILEGROUP, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.File_specContext)
            else:
                return self.getTypedRuleContext(tsqlParser.File_specContext,i)


        def CONTAINS(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.CONTAINS)
            else:
                return self.getToken(tsqlParser.CONTAINS, i)

        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def MEMORY_OPTIMIZED_DATA(self):
            return self.getToken(tsqlParser.MEMORY_OPTIMIZED_DATA, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_group" ):
                listener.enterFile_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_group" ):
                listener.exitFile_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_group" ):
                return visitor.visitFile_group(self)
            else:
                return visitor.visitChildren(self)




    def file_group(self):

        localctx = tsqlParser.File_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_file_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2894
            self.match(tsqlParser.FILEGROUP)
            self.state = 2895
            self.r_id()
            self.state = 2898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                self.state = 2896
                self.match(tsqlParser.CONTAINS)
                self.state = 2897
                self.match(tsqlParser.FILESTREAM)


            self.state = 2901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.DEFAULT:
                self.state = 2900
                self.match(tsqlParser.DEFAULT)


            self.state = 2905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONTAINS:
                self.state = 2903
                self.match(tsqlParser.CONTAINS)
                self.state = 2904
                self.match(tsqlParser.MEMORY_OPTIMIZED_DATA)


            self.state = 2907
            self.file_spec()
            self.state = 2912
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,420,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2908
                    self.match(tsqlParser.COMMA)
                    self.state = 2909
                    self.file_spec() 
                self.state = 2914
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,420,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r_file = None # Token

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.EQUAL)
            else:
                return self.getToken(tsqlParser.EQUAL, i)

        def FILENAME(self):
            return self.getToken(tsqlParser.FILENAME, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def SIZE(self):
            return self.getToken(tsqlParser.SIZE, 0)

        def file_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.File_sizeContext)
            else:
                return self.getTypedRuleContext(tsqlParser.File_sizeContext,i)


        def MAXSIZE(self):
            return self.getToken(tsqlParser.MAXSIZE, 0)

        def FILEGROWTH(self):
            return self.getToken(tsqlParser.FILEGROWTH, 0)

        def UNLIMITED(self):
            return self.getToken(tsqlParser.UNLIMITED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_spec" ):
                listener.enterFile_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_spec" ):
                listener.exitFile_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_spec" ):
                return visitor.visitFile_spec(self)
            else:
                return visitor.visitChildren(self)




    def file_spec(self):

        localctx = tsqlParser.File_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_file_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2915
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2916
            self.match(tsqlParser.NAME)
            self.state = 2917
            self.match(tsqlParser.EQUAL)
            self.state = 2920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 2918
                self.r_id()
                pass
            elif token in [tsqlParser.STRING]:
                self.state = 2919
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 2922
                self.match(tsqlParser.COMMA)


            self.state = 2925
            self.match(tsqlParser.FILENAME)
            self.state = 2926
            self.match(tsqlParser.EQUAL)
            self.state = 2927
            localctx.r_file = self.match(tsqlParser.STRING)
            self.state = 2929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 2928
                self.match(tsqlParser.COMMA)


            self.state = 2937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SIZE:
                self.state = 2931
                self.match(tsqlParser.SIZE)
                self.state = 2932
                self.match(tsqlParser.EQUAL)
                self.state = 2933
                self.file_size()
                self.state = 2935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2934
                    self.match(tsqlParser.COMMA)




            self.state = 2948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.MAXSIZE:
                self.state = 2939
                self.match(tsqlParser.MAXSIZE)
                self.state = 2940
                self.match(tsqlParser.EQUAL)
                self.state = 2943
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.DECIMAL]:
                    self.state = 2941
                    self.file_size()
                    pass
                elif token in [tsqlParser.UNLIMITED]:
                    self.state = 2942
                    self.match(tsqlParser.UNLIMITED)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2945
                    self.match(tsqlParser.COMMA)




            self.state = 2956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FILEGROWTH:
                self.state = 2950
                self.match(tsqlParser.FILEGROWTH)
                self.state = 2951
                self.match(tsqlParser.EQUAL)
                self.state = 2952
                self.file_size()
                self.state = 2954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2953
                    self.match(tsqlParser.COMMA)




            self.state = 2958
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Full_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server = None # R_idContext
            self.database = None # R_idContext
            self.schema = None # R_idContext
            self.table = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_full_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_table_name" ):
                listener.enterFull_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_table_name" ):
                listener.exitFull_table_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_table_name" ):
                return visitor.visitFull_table_name(self)
            else:
                return visitor.visitChildren(self)




    def full_table_name(self):

        localctx = tsqlParser.Full_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_full_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.state = 2960
                localctx.server = self.r_id()
                self.state = 2961
                self.match(tsqlParser.DOT)
                self.state = 2962
                localctx.database = self.r_id()
                self.state = 2963
                self.match(tsqlParser.DOT)
                self.state = 2964
                localctx.schema = self.r_id()
                self.state = 2965
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 2967
                localctx.database = self.r_id()
                self.state = 2968
                self.match(tsqlParser.DOT)
                self.state = 2970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or _la==tsqlParser.NEXT or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DELAY - 196)) | (1 << (tsqlParser.DELETED - 196)) | (1 << (tsqlParser.DENSE_RANK - 196)) | (1 << (tsqlParser.DISABLE - 196)) | (1 << (tsqlParser.DYNAMIC - 196)) | (1 << (tsqlParser.ENCRYPTION - 196)) | (1 << (tsqlParser.EXPAND - 196)) | (1 << (tsqlParser.FAST - 196)) | (1 << (tsqlParser.FAST_FORWARD - 196)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (tsqlParser.FIRST - 262)) | (1 << (tsqlParser.FIRST_VALUE - 262)) | (1 << (tsqlParser.FOLLOWING - 262)) | (1 << (tsqlParser.FORCE - 262)) | (1 << (tsqlParser.FORCED - 262)) | (1 << (tsqlParser.FORWARD_ONLY - 262)) | (1 << (tsqlParser.FULLSCAN - 262)) | (1 << (tsqlParser.GLOBAL - 262)) | (1 << (tsqlParser.GO - 262)) | (1 << (tsqlParser.GROUPING - 262)) | (1 << (tsqlParser.GROUPING_ID - 262)) | (1 << (tsqlParser.HASH - 262)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 262)) | (1 << (tsqlParser.IMPERSONATE - 262)) | (1 << (tsqlParser.INSENSITIVE - 262)) | (1 << (tsqlParser.INSERTED - 262)) | (1 << (tsqlParser.ISOLATION - 262)) | (1 << (tsqlParser.KEEP - 262)) | (1 << (tsqlParser.KEEPFIXED - 262)) | (1 << (tsqlParser.KEYSET - 262)) | (1 << (tsqlParser.LAG - 262)) | (1 << (tsqlParser.LAST - 262)) | (1 << (tsqlParser.LEAD - 262)) | (1 << (tsqlParser.LEVEL - 262)) | (1 << (tsqlParser.LOCAL - 262)) | (1 << (tsqlParser.LOCK_ESCALATION - 262)) | (1 << (tsqlParser.LOGIN - 262)) | (1 << (tsqlParser.LOOP - 262)) | (1 << (tsqlParser.MARK - 262)) | (1 << (tsqlParser.MAX - 262)) | (1 << (tsqlParser.MAXDOP - 262)) | (1 << (tsqlParser.MAXRECURSION - 262)) | (1 << (tsqlParser.MIN - 262)) | (1 << (tsqlParser.MODIFY - 262)) | (1 << (tsqlParser.NAME - 262)) | (1 << (tsqlParser.NOCOUNT - 262)) | (1 << (tsqlParser.NOEXPAND - 262)) | (1 << (tsqlParser.NORECOMPUTE - 262)) | (1 << (tsqlParser.NTILE - 262)) | (1 << (tsqlParser.NUMBER - 262)) | (1 << (tsqlParser.OFFSET - 262)) | (1 << (tsqlParser.ONLINE - 262)) | (1 << (tsqlParser.ONLY - 262)) | (1 << (tsqlParser.OPTIMISTIC - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (tsqlParser.OPTIMIZE - 326)) | (1 << (tsqlParser.OUT - 326)) | (1 << (tsqlParser.OUTPUT - 326)) | (1 << (tsqlParser.OWNER - 326)) | (1 << (tsqlParser.PARAMETERIZATION - 326)) | (1 << (tsqlParser.PARTITION - 326)) | (1 << (tsqlParser.PATH - 326)) | (1 << (tsqlParser.PRECEDING - 326)) | (1 << (tsqlParser.PRIOR - 326)) | (1 << (tsqlParser.PRIVILEGES - 326)) | (1 << (tsqlParser.RANGE - 326)) | (1 << (tsqlParser.RANK - 326)) | (1 << (tsqlParser.READONLY - 326)) | (1 << (tsqlParser.READ_ONLY - 326)) | (1 << (tsqlParser.RECOMPILE - 326)) | (1 << (tsqlParser.RELATIVE - 326)) | (1 << (tsqlParser.REMOTE - 326)) | (1 << (tsqlParser.REPEATABLE - 326)) | (1 << (tsqlParser.ROBUST - 326)) | (1 << (tsqlParser.ROOT - 326)) | (1 << (tsqlParser.ROW - 326)) | (1 << (tsqlParser.ROWGUID - 326)) | (1 << (tsqlParser.ROWS - 326)) | (1 << (tsqlParser.ROW_NUMBER - 326)) | (1 << (tsqlParser.SAMPLE - 326)) | (1 << (tsqlParser.SCHEMABINDING - 326)) | (1 << (tsqlParser.SCROLL - 326)) | (1 << (tsqlParser.SCROLL_LOCKS - 326)) | (1 << (tsqlParser.SELF - 326)) | (1 << (tsqlParser.SERIALIZABLE - 326)) | (1 << (tsqlParser.SIMPLE - 326)) | (1 << (tsqlParser.SIZE - 326)) | (1 << (tsqlParser.SNAPSHOT - 326)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 326)) | (1 << (tsqlParser.STATIC - 326)) | (1 << (tsqlParser.STATS_STREAM - 326)) | (1 << (tsqlParser.STDEV - 326)) | (1 << (tsqlParser.STDEVP - 326)) | (1 << (tsqlParser.SUM - 326)) | (1 << (tsqlParser.TEXTIMAGE_ON - 326)) | (1 << (tsqlParser.THROW - 326)) | (1 << (tsqlParser.TIES - 326)) | (1 << (tsqlParser.TIME - 326)) | (1 << (tsqlParser.TRY - 326)) | (1 << (tsqlParser.TYPE - 326)) | (1 << (tsqlParser.TYPE_WARNING - 326)) | (1 << (tsqlParser.UNBOUNDED - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.UNCOMMITTED - 390)) | (1 << (tsqlParser.UNKNOWN - 390)) | (1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                    self.state = 2969
                    localctx.schema = self.r_id()


                self.state = 2972
                self.match(tsqlParser.DOT)

            elif la_ == 3:
                self.state = 2974
                localctx.schema = self.r_id()
                self.state = 2975
                self.match(tsqlParser.DOT)


            self.state = 2979
            localctx.table = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.schema = None # R_idContext
            self.table = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = tsqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
            if la_ == 1:
                self.state = 2981
                localctx.database = self.r_id()
                self.state = 2982
                self.match(tsqlParser.DOT)
                self.state = 2984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or _la==tsqlParser.NEXT or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DELAY - 196)) | (1 << (tsqlParser.DELETED - 196)) | (1 << (tsqlParser.DENSE_RANK - 196)) | (1 << (tsqlParser.DISABLE - 196)) | (1 << (tsqlParser.DYNAMIC - 196)) | (1 << (tsqlParser.ENCRYPTION - 196)) | (1 << (tsqlParser.EXPAND - 196)) | (1 << (tsqlParser.FAST - 196)) | (1 << (tsqlParser.FAST_FORWARD - 196)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (tsqlParser.FIRST - 262)) | (1 << (tsqlParser.FIRST_VALUE - 262)) | (1 << (tsqlParser.FOLLOWING - 262)) | (1 << (tsqlParser.FORCE - 262)) | (1 << (tsqlParser.FORCED - 262)) | (1 << (tsqlParser.FORWARD_ONLY - 262)) | (1 << (tsqlParser.FULLSCAN - 262)) | (1 << (tsqlParser.GLOBAL - 262)) | (1 << (tsqlParser.GO - 262)) | (1 << (tsqlParser.GROUPING - 262)) | (1 << (tsqlParser.GROUPING_ID - 262)) | (1 << (tsqlParser.HASH - 262)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 262)) | (1 << (tsqlParser.IMPERSONATE - 262)) | (1 << (tsqlParser.INSENSITIVE - 262)) | (1 << (tsqlParser.INSERTED - 262)) | (1 << (tsqlParser.ISOLATION - 262)) | (1 << (tsqlParser.KEEP - 262)) | (1 << (tsqlParser.KEEPFIXED - 262)) | (1 << (tsqlParser.KEYSET - 262)) | (1 << (tsqlParser.LAG - 262)) | (1 << (tsqlParser.LAST - 262)) | (1 << (tsqlParser.LEAD - 262)) | (1 << (tsqlParser.LEVEL - 262)) | (1 << (tsqlParser.LOCAL - 262)) | (1 << (tsqlParser.LOCK_ESCALATION - 262)) | (1 << (tsqlParser.LOGIN - 262)) | (1 << (tsqlParser.LOOP - 262)) | (1 << (tsqlParser.MARK - 262)) | (1 << (tsqlParser.MAX - 262)) | (1 << (tsqlParser.MAXDOP - 262)) | (1 << (tsqlParser.MAXRECURSION - 262)) | (1 << (tsqlParser.MIN - 262)) | (1 << (tsqlParser.MODIFY - 262)) | (1 << (tsqlParser.NAME - 262)) | (1 << (tsqlParser.NOCOUNT - 262)) | (1 << (tsqlParser.NOEXPAND - 262)) | (1 << (tsqlParser.NORECOMPUTE - 262)) | (1 << (tsqlParser.NTILE - 262)) | (1 << (tsqlParser.NUMBER - 262)) | (1 << (tsqlParser.OFFSET - 262)) | (1 << (tsqlParser.ONLINE - 262)) | (1 << (tsqlParser.ONLY - 262)) | (1 << (tsqlParser.OPTIMISTIC - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (tsqlParser.OPTIMIZE - 326)) | (1 << (tsqlParser.OUT - 326)) | (1 << (tsqlParser.OUTPUT - 326)) | (1 << (tsqlParser.OWNER - 326)) | (1 << (tsqlParser.PARAMETERIZATION - 326)) | (1 << (tsqlParser.PARTITION - 326)) | (1 << (tsqlParser.PATH - 326)) | (1 << (tsqlParser.PRECEDING - 326)) | (1 << (tsqlParser.PRIOR - 326)) | (1 << (tsqlParser.PRIVILEGES - 326)) | (1 << (tsqlParser.RANGE - 326)) | (1 << (tsqlParser.RANK - 326)) | (1 << (tsqlParser.READONLY - 326)) | (1 << (tsqlParser.READ_ONLY - 326)) | (1 << (tsqlParser.RECOMPILE - 326)) | (1 << (tsqlParser.RELATIVE - 326)) | (1 << (tsqlParser.REMOTE - 326)) | (1 << (tsqlParser.REPEATABLE - 326)) | (1 << (tsqlParser.ROBUST - 326)) | (1 << (tsqlParser.ROOT - 326)) | (1 << (tsqlParser.ROW - 326)) | (1 << (tsqlParser.ROWGUID - 326)) | (1 << (tsqlParser.ROWS - 326)) | (1 << (tsqlParser.ROW_NUMBER - 326)) | (1 << (tsqlParser.SAMPLE - 326)) | (1 << (tsqlParser.SCHEMABINDING - 326)) | (1 << (tsqlParser.SCROLL - 326)) | (1 << (tsqlParser.SCROLL_LOCKS - 326)) | (1 << (tsqlParser.SELF - 326)) | (1 << (tsqlParser.SERIALIZABLE - 326)) | (1 << (tsqlParser.SIMPLE - 326)) | (1 << (tsqlParser.SIZE - 326)) | (1 << (tsqlParser.SNAPSHOT - 326)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 326)) | (1 << (tsqlParser.STATIC - 326)) | (1 << (tsqlParser.STATS_STREAM - 326)) | (1 << (tsqlParser.STDEV - 326)) | (1 << (tsqlParser.STDEVP - 326)) | (1 << (tsqlParser.SUM - 326)) | (1 << (tsqlParser.TEXTIMAGE_ON - 326)) | (1 << (tsqlParser.THROW - 326)) | (1 << (tsqlParser.TIES - 326)) | (1 << (tsqlParser.TIME - 326)) | (1 << (tsqlParser.TRY - 326)) | (1 << (tsqlParser.TYPE - 326)) | (1 << (tsqlParser.TYPE_WARNING - 326)) | (1 << (tsqlParser.UNBOUNDED - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.UNCOMMITTED - 390)) | (1 << (tsqlParser.UNKNOWN - 390)) | (1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                    self.state = 2983
                    localctx.schema = self.r_id()


                self.state = 2986
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 2988
                localctx.schema = self.r_id()
                self.state = 2989
                self.match(tsqlParser.DOT)


            self.state = 2993
            localctx.table = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # R_idContext
            self.name = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_simple_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_name" ):
                listener.enterSimple_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_name" ):
                listener.exitSimple_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_name" ):
                return visitor.visitSimple_name(self)
            else:
                return visitor.visitChildren(self)




    def simple_name(self):

        localctx = tsqlParser.Simple_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_simple_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
            if la_ == 1:
                self.state = 2995
                localctx.schema = self.r_id()
                self.state = 2996
                self.match(tsqlParser.DOT)


            self.state = 3000
            localctx.name = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_proc_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.schema = None # R_idContext
            self.procedure = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_func_proc_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_proc_name" ):
                listener.enterFunc_proc_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_proc_name" ):
                listener.exitFunc_proc_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_proc_name" ):
                return visitor.visitFunc_proc_name(self)
            else:
                return visitor.visitChildren(self)




    def func_proc_name(self):

        localctx = tsqlParser.Func_proc_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_func_proc_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
            if la_ == 1:
                self.state = 3002
                localctx.database = self.r_id()
                self.state = 3003
                self.match(tsqlParser.DOT)
                self.state = 3005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or _la==tsqlParser.NEXT or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DELAY - 196)) | (1 << (tsqlParser.DELETED - 196)) | (1 << (tsqlParser.DENSE_RANK - 196)) | (1 << (tsqlParser.DISABLE - 196)) | (1 << (tsqlParser.DYNAMIC - 196)) | (1 << (tsqlParser.ENCRYPTION - 196)) | (1 << (tsqlParser.EXPAND - 196)) | (1 << (tsqlParser.FAST - 196)) | (1 << (tsqlParser.FAST_FORWARD - 196)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (tsqlParser.FIRST - 262)) | (1 << (tsqlParser.FIRST_VALUE - 262)) | (1 << (tsqlParser.FOLLOWING - 262)) | (1 << (tsqlParser.FORCE - 262)) | (1 << (tsqlParser.FORCED - 262)) | (1 << (tsqlParser.FORWARD_ONLY - 262)) | (1 << (tsqlParser.FULLSCAN - 262)) | (1 << (tsqlParser.GLOBAL - 262)) | (1 << (tsqlParser.GO - 262)) | (1 << (tsqlParser.GROUPING - 262)) | (1 << (tsqlParser.GROUPING_ID - 262)) | (1 << (tsqlParser.HASH - 262)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 262)) | (1 << (tsqlParser.IMPERSONATE - 262)) | (1 << (tsqlParser.INSENSITIVE - 262)) | (1 << (tsqlParser.INSERTED - 262)) | (1 << (tsqlParser.ISOLATION - 262)) | (1 << (tsqlParser.KEEP - 262)) | (1 << (tsqlParser.KEEPFIXED - 262)) | (1 << (tsqlParser.KEYSET - 262)) | (1 << (tsqlParser.LAG - 262)) | (1 << (tsqlParser.LAST - 262)) | (1 << (tsqlParser.LEAD - 262)) | (1 << (tsqlParser.LEVEL - 262)) | (1 << (tsqlParser.LOCAL - 262)) | (1 << (tsqlParser.LOCK_ESCALATION - 262)) | (1 << (tsqlParser.LOGIN - 262)) | (1 << (tsqlParser.LOOP - 262)) | (1 << (tsqlParser.MARK - 262)) | (1 << (tsqlParser.MAX - 262)) | (1 << (tsqlParser.MAXDOP - 262)) | (1 << (tsqlParser.MAXRECURSION - 262)) | (1 << (tsqlParser.MIN - 262)) | (1 << (tsqlParser.MODIFY - 262)) | (1 << (tsqlParser.NAME - 262)) | (1 << (tsqlParser.NOCOUNT - 262)) | (1 << (tsqlParser.NOEXPAND - 262)) | (1 << (tsqlParser.NORECOMPUTE - 262)) | (1 << (tsqlParser.NTILE - 262)) | (1 << (tsqlParser.NUMBER - 262)) | (1 << (tsqlParser.OFFSET - 262)) | (1 << (tsqlParser.ONLINE - 262)) | (1 << (tsqlParser.ONLY - 262)) | (1 << (tsqlParser.OPTIMISTIC - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (tsqlParser.OPTIMIZE - 326)) | (1 << (tsqlParser.OUT - 326)) | (1 << (tsqlParser.OUTPUT - 326)) | (1 << (tsqlParser.OWNER - 326)) | (1 << (tsqlParser.PARAMETERIZATION - 326)) | (1 << (tsqlParser.PARTITION - 326)) | (1 << (tsqlParser.PATH - 326)) | (1 << (tsqlParser.PRECEDING - 326)) | (1 << (tsqlParser.PRIOR - 326)) | (1 << (tsqlParser.PRIVILEGES - 326)) | (1 << (tsqlParser.RANGE - 326)) | (1 << (tsqlParser.RANK - 326)) | (1 << (tsqlParser.READONLY - 326)) | (1 << (tsqlParser.READ_ONLY - 326)) | (1 << (tsqlParser.RECOMPILE - 326)) | (1 << (tsqlParser.RELATIVE - 326)) | (1 << (tsqlParser.REMOTE - 326)) | (1 << (tsqlParser.REPEATABLE - 326)) | (1 << (tsqlParser.ROBUST - 326)) | (1 << (tsqlParser.ROOT - 326)) | (1 << (tsqlParser.ROW - 326)) | (1 << (tsqlParser.ROWGUID - 326)) | (1 << (tsqlParser.ROWS - 326)) | (1 << (tsqlParser.ROW_NUMBER - 326)) | (1 << (tsqlParser.SAMPLE - 326)) | (1 << (tsqlParser.SCHEMABINDING - 326)) | (1 << (tsqlParser.SCROLL - 326)) | (1 << (tsqlParser.SCROLL_LOCKS - 326)) | (1 << (tsqlParser.SELF - 326)) | (1 << (tsqlParser.SERIALIZABLE - 326)) | (1 << (tsqlParser.SIMPLE - 326)) | (1 << (tsqlParser.SIZE - 326)) | (1 << (tsqlParser.SNAPSHOT - 326)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 326)) | (1 << (tsqlParser.STATIC - 326)) | (1 << (tsqlParser.STATS_STREAM - 326)) | (1 << (tsqlParser.STDEV - 326)) | (1 << (tsqlParser.STDEVP - 326)) | (1 << (tsqlParser.SUM - 326)) | (1 << (tsqlParser.TEXTIMAGE_ON - 326)) | (1 << (tsqlParser.THROW - 326)) | (1 << (tsqlParser.TIES - 326)) | (1 << (tsqlParser.TIME - 326)) | (1 << (tsqlParser.TRY - 326)) | (1 << (tsqlParser.TYPE - 326)) | (1 << (tsqlParser.TYPE_WARNING - 326)) | (1 << (tsqlParser.UNBOUNDED - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.UNCOMMITTED - 390)) | (1 << (tsqlParser.UNKNOWN - 390)) | (1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 390)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 390)) | (1 << (tsqlParser.ID - 390)))) != 0):
                    self.state = 3004
                    localctx.schema = self.r_id()


                self.state = 3007
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3009
                localctx.schema = self.r_id()
                self.state = 3010
                self.match(tsqlParser.DOT)


            self.state = 3014
            localctx.procedure = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ddl_objectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_object" ):
                listener.enterDdl_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_object" ):
                listener.exitDdl_object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdl_object" ):
                return visitor.visitDdl_object(self)
            else:
                return visitor.visitChildren(self)




    def ddl_object(self):

        localctx = tsqlParser.Ddl_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_ddl_object)
        try:
            self.state = 3018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3016
                self.full_table_name()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3017
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Full_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table = None # Table_nameContext
            self.name = None # R_idContext

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_full_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_column_name" ):
                listener.enterFull_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_column_name" ):
                listener.exitFull_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_column_name" ):
                return visitor.visitFull_column_name(self)
            else:
                return visitor.visitChildren(self)




    def full_column_name(self):

        localctx = tsqlParser.Full_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_full_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
            if la_ == 1:
                self.state = 3020
                localctx.table = self.table_name()
                self.state = 3021
                self.match(tsqlParser.DOT)


            self.state = 3025
            localctx.name = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name_list" ):
                return visitor.visitColumn_name_list(self)
            else:
                return visitor.visitChildren(self)




    def column_name_list(self):

        localctx = tsqlParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3027
            self.r_id()
            self.state = 3032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 3028
                self.match(tsqlParser.COMMA)
                self.state = 3029
                self.r_id()
                self.state = 3034
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_name" ):
                return visitor.visitCursor_name(self)
            else:
                return visitor.visitChildren(self)




    def cursor_name(self):

        localctx = tsqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_cursor_name)
        try:
            self.state = 3037
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3035
                self.r_id()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3036
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class On_offContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_on_off

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_off" ):
                listener.enterOn_off(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_off" ):
                listener.exitOn_off(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_off" ):
                return visitor.visitOn_off(self)
            else:
                return visitor.visitChildren(self)




    def on_off(self):

        localctx = tsqlParser.On_offContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_on_off)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3039
            _la = self._input.LA(1)
            if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClusteredContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(tsqlParser.CLUSTERED, 0)

        def NONCLUSTERED(self):
            return self.getToken(tsqlParser.NONCLUSTERED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_clustered

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClustered" ):
                listener.enterClustered(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClustered" ):
                listener.exitClustered(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClustered" ):
                return visitor.visitClustered(self)
            else:
                return visitor.visitChildren(self)




    def clustered(self):

        localctx = tsqlParser.ClusteredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_clustered)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3041
            _la = self._input.LA(1)
            if not(_la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_notnullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_null_notnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_notnull" ):
                listener.enterNull_notnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_notnull" ):
                listener.exitNull_notnull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_notnull" ):
                return visitor.visitNull_notnull(self)
            else:
                return visitor.visitChildren(self)




    def null_notnull(self):

        localctx = tsqlParser.Null_notnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_null_notnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT:
                self.state = 3043
                self.match(tsqlParser.NOT)


            self.state = 3046
            self.match(tsqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scalar_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def RIGHT(self):
            return self.getToken(tsqlParser.RIGHT, 0)

        def LEFT(self):
            return self.getToken(tsqlParser.LEFT, 0)

        def BINARY_CHECKSUM(self):
            return self.getToken(tsqlParser.BINARY_CHECKSUM, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_scalar_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_function_name" ):
                listener.enterScalar_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_function_name" ):
                listener.exitScalar_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalar_function_name" ):
                return visitor.visitScalar_function_name(self)
            else:
                return visitor.visitChildren(self)




    def scalar_function_name(self):

        localctx = tsqlParser.Scalar_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_scalar_function_name)
        try:
            self.state = 3053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3048
                self.func_proc_name()
                pass
            elif token in [tsqlParser.RIGHT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3049
                self.match(tsqlParser.RIGHT)
                pass
            elif token in [tsqlParser.LEFT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3050
                self.match(tsqlParser.LEFT)
                pass
            elif token in [tsqlParser.BINARY_CHECKSUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3051
                self.match(tsqlParser.BINARY_CHECKSUM)
                pass
            elif token in [tsqlParser.CHECKSUM]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3052
                self.match(tsqlParser.CHECKSUM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Data_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_type" ):
                return visitor.visitData_type(self)
            else:
                return visitor.visitChildren(self)




    def data_type(self):

        localctx = tsqlParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_data_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3055
            self.r_id()
            self.state = 3057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
            if la_ == 1:
                self.state = 3056
                self.match(tsqlParser.IDENTITY)


            self.state = 3066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.state = 3059
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3060
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MAX or _la==tsqlParser.DECIMAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3061
                    self.match(tsqlParser.COMMA)
                    self.state = 3062
                    self.match(tsqlParser.DECIMAL)


                self.state = 3065
                self.match(tsqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_value" ):
                return visitor.visitDefault_value(self)
            else:
                return visitor.visitChildren(self)




    def default_value(self):

        localctx = tsqlParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_default_value)
        try:
            self.state = 3070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3068
                self.match(tsqlParser.NULL)
                pass
            elif token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3069
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dollar = None # Token

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def BINARY(self):
            return self.getToken(tsqlParser.BINARY, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def sign(self):
            return self.getTypedRuleContext(tsqlParser.SignContext,0)


        def REAL(self):
            return self.getToken(tsqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(tsqlParser.FLOAT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = tsqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 3087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3072
                self.match(tsqlParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3073
                self.match(tsqlParser.BINARY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3074
                    self.sign()


                self.state = 3077
                self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3078
                    self.sign()


                self.state = 3081
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FLOAT or _la==tsqlParser.REAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3082
                    self.sign()


                self.state = 3085
                localctx.dollar = self.match(tsqlParser.DOLLAR)
                self.state = 3086
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DECIMAL or _la==tsqlParser.FLOAT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSign" ):
                listener.enterSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSign" ):
                listener.exitSign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSign" ):
                return visitor.visitSign(self)
            else:
                return visitor.visitChildren(self)




    def sign(self):

        localctx = tsqlParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3089
            _la = self._input.LA(1)
            if not(_la==tsqlParser.PLUS or _la==tsqlParser.MINUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class R_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self):
            return self.getTypedRuleContext(tsqlParser.Simple_idContext,0)


        def DOUBLE_QUOTE_ID(self):
            return self.getToken(tsqlParser.DOUBLE_QUOTE_ID, 0)

        def SQUARE_BRACKET_ID(self):
            return self.getToken(tsqlParser.SQUARE_BRACKET_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_r_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_id" ):
                listener.enterR_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_id" ):
                listener.exitR_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitR_id" ):
                return visitor.visitR_id(self)
            else:
                return visitor.visitChildren(self)




    def r_id(self):

        localctx = tsqlParser.R_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_r_id)
        try:
            self.state = 3094
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3091
                self.simple_id()
                pass
            elif token in [tsqlParser.DOUBLE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3092
                self.match(tsqlParser.DOUBLE_QUOTE_ID)
                pass
            elif token in [tsqlParser.SQUARE_BRACKET_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3093
                self.match(tsqlParser.SQUARE_BRACKET_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(tsqlParser.ID, 0)

        def ABSOLUTE(self):
            return self.getToken(tsqlParser.ABSOLUTE, 0)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def AVG(self):
            return self.getToken(tsqlParser.AVG, 0)

        def BASE64(self):
            return self.getToken(tsqlParser.BASE64, 0)

        def CALLER(self):
            return self.getToken(tsqlParser.CALLER, 0)

        def CAST(self):
            return self.getToken(tsqlParser.CAST, 0)

        def CATCH(self):
            return self.getToken(tsqlParser.CATCH, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(tsqlParser.CHECKSUM_AGG, 0)

        def COMMITTED(self):
            return self.getToken(tsqlParser.COMMITTED, 0)

        def CONCAT(self):
            return self.getToken(tsqlParser.CONCAT, 0)

        def CONTROL(self):
            return self.getToken(tsqlParser.CONTROL, 0)

        def COOKIE(self):
            return self.getToken(tsqlParser.COOKIE, 0)

        def COUNT(self):
            return self.getToken(tsqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(tsqlParser.COUNT_BIG, 0)

        def DELAY(self):
            return self.getToken(tsqlParser.DELAY, 0)

        def DELETED(self):
            return self.getToken(tsqlParser.DELETED, 0)

        def DENSE_RANK(self):
            return self.getToken(tsqlParser.DENSE_RANK, 0)

        def DISABLE(self):
            return self.getToken(tsqlParser.DISABLE, 0)

        def DYNAMIC(self):
            return self.getToken(tsqlParser.DYNAMIC, 0)

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def EXPAND(self):
            return self.getToken(tsqlParser.EXPAND, 0)

        def FAST(self):
            return self.getToken(tsqlParser.FAST, 0)

        def FAST_FORWARD(self):
            return self.getToken(tsqlParser.FAST_FORWARD, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def FIRST_VALUE(self):
            return self.getToken(tsqlParser.FIRST_VALUE, 0)

        def FOLLOWING(self):
            return self.getToken(tsqlParser.FOLLOWING, 0)

        def FORCE(self):
            return self.getToken(tsqlParser.FORCE, 0)

        def FORCESEEK(self):
            return self.getToken(tsqlParser.FORCESEEK, 0)

        def FORWARD_ONLY(self):
            return self.getToken(tsqlParser.FORWARD_ONLY, 0)

        def FULLSCAN(self):
            return self.getToken(tsqlParser.FULLSCAN, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def GO(self):
            return self.getToken(tsqlParser.GO, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(tsqlParser.GROUPING_ID, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def IMPERSONATE(self):
            return self.getToken(tsqlParser.IMPERSONATE, 0)

        def INSENSITIVE(self):
            return self.getToken(tsqlParser.INSENSITIVE, 0)

        def INSERTED(self):
            return self.getToken(tsqlParser.INSERTED, 0)

        def ISOLATION(self):
            return self.getToken(tsqlParser.ISOLATION, 0)

        def KEEP(self):
            return self.getToken(tsqlParser.KEEP, 0)

        def KEEPFIXED(self):
            return self.getToken(tsqlParser.KEEPFIXED, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def KEYSET(self):
            return self.getToken(tsqlParser.KEYSET, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def LAG(self):
            return self.getToken(tsqlParser.LAG, 0)

        def LAST(self):
            return self.getToken(tsqlParser.LAST, 0)

        def LEAD(self):
            return self.getToken(tsqlParser.LEAD, 0)

        def LEVEL(self):
            return self.getToken(tsqlParser.LEVEL, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(tsqlParser.LOCK_ESCALATION, 0)

        def LOGIN(self):
            return self.getToken(tsqlParser.LOGIN, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def MARK(self):
            return self.getToken(tsqlParser.MARK, 0)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def MAXDOP(self):
            return self.getToken(tsqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(tsqlParser.MAXRECURSION, 0)

        def MIN(self):
            return self.getToken(tsqlParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(tsqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def NOCOUNT(self):
            return self.getToken(tsqlParser.NOCOUNT, 0)

        def NOEXPAND(self):
            return self.getToken(tsqlParser.NOEXPAND, 0)

        def NORECOMPUTE(self):
            return self.getToken(tsqlParser.NORECOMPUTE, 0)

        def NTILE(self):
            return self.getToken(tsqlParser.NTILE, 0)

        def NUMBER(self):
            return self.getToken(tsqlParser.NUMBER, 0)

        def OFFSET(self):
            return self.getToken(tsqlParser.OFFSET, 0)

        def ONLINE(self):
            return self.getToken(tsqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def OPTIMISTIC(self):
            return self.getToken(tsqlParser.OPTIMISTIC, 0)

        def OPTIMIZE(self):
            return self.getToken(tsqlParser.OPTIMIZE, 0)

        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def OWNER(self):
            return self.getToken(tsqlParser.OWNER, 0)

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def PARTITION(self):
            return self.getToken(tsqlParser.PARTITION, 0)

        def PATH(self):
            return self.getToken(tsqlParser.PATH, 0)

        def PRECEDING(self):
            return self.getToken(tsqlParser.PRECEDING, 0)

        def PRIOR(self):
            return self.getToken(tsqlParser.PRIOR, 0)

        def PRIVILEGES(self):
            return self.getToken(tsqlParser.PRIVILEGES, 0)

        def RANGE(self):
            return self.getToken(tsqlParser.RANGE, 0)

        def RANK(self):
            return self.getToken(tsqlParser.RANK, 0)

        def READONLY(self):
            return self.getToken(tsqlParser.READONLY, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def RELATIVE(self):
            return self.getToken(tsqlParser.RELATIVE, 0)

        def REMOTE(self):
            return self.getToken(tsqlParser.REMOTE, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def ROBUST(self):
            return self.getToken(tsqlParser.ROBUST, 0)

        def ROOT(self):
            return self.getToken(tsqlParser.ROOT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWGUID(self):
            return self.getToken(tsqlParser.ROWGUID, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def ROW_NUMBER(self):
            return self.getToken(tsqlParser.ROW_NUMBER, 0)

        def SAMPLE(self):
            return self.getToken(tsqlParser.SAMPLE, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(tsqlParser.SCROLL_LOCKS, 0)

        def SELF(self):
            return self.getToken(tsqlParser.SELF, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def SIZE(self):
            return self.getToken(tsqlParser.SIZE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def STATIC(self):
            return self.getToken(tsqlParser.STATIC, 0)

        def STATS_STREAM(self):
            return self.getToken(tsqlParser.STATS_STREAM, 0)

        def STDEV(self):
            return self.getToken(tsqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(tsqlParser.STDEVP, 0)

        def SUM(self):
            return self.getToken(tsqlParser.SUM, 0)

        def TEXTIMAGE_ON(self):
            return self.getToken(tsqlParser.TEXTIMAGE_ON, 0)

        def THROW(self):
            return self.getToken(tsqlParser.THROW, 0)

        def TIES(self):
            return self.getToken(tsqlParser.TIES, 0)

        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def TRY(self):
            return self.getToken(tsqlParser.TRY, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def TYPE_WARNING(self):
            return self.getToken(tsqlParser.TYPE_WARNING, 0)

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(tsqlParser.UNCOMMITTED, 0)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def USING(self):
            return self.getToken(tsqlParser.USING, 0)

        def VAR(self):
            return self.getToken(tsqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(tsqlParser.VARP, 0)

        def VIEW_METADATA(self):
            return self.getToken(tsqlParser.VIEW_METADATA, 0)

        def VIEWS(self):
            return self.getToken(tsqlParser.VIEWS, 0)

        def WORK(self):
            return self.getToken(tsqlParser.WORK, 0)

        def XML(self):
            return self.getToken(tsqlParser.XML, 0)

        def XMLNAMESPACES(self):
            return self.getToken(tsqlParser.XMLNAMESPACES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_simple_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_id" ):
                listener.enterSimple_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_id" ):
                listener.exitSimple_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_id" ):
                return visitor.visitSimple_id(self)
            else:
                return visitor.visitChildren(self)




    def simple_id(self):

        localctx = tsqlParser.Simple_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_simple_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3096
            _la = self._input.LA(1)
            if not(_la==tsqlParser.FORCESEEK or _la==tsqlParser.NEXT or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DELAY - 196)) | (1 << (tsqlParser.DELETED - 196)) | (1 << (tsqlParser.DENSE_RANK - 196)) | (1 << (tsqlParser.DISABLE - 196)) | (1 << (tsqlParser.DYNAMIC - 196)) | (1 << (tsqlParser.ENCRYPTION - 196)) | (1 << (tsqlParser.EXPAND - 196)) | (1 << (tsqlParser.FAST - 196)) | (1 << (tsqlParser.FAST_FORWARD - 196)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (tsqlParser.FIRST - 262)) | (1 << (tsqlParser.FIRST_VALUE - 262)) | (1 << (tsqlParser.FOLLOWING - 262)) | (1 << (tsqlParser.FORCE - 262)) | (1 << (tsqlParser.FORCED - 262)) | (1 << (tsqlParser.FORWARD_ONLY - 262)) | (1 << (tsqlParser.FULLSCAN - 262)) | (1 << (tsqlParser.GLOBAL - 262)) | (1 << (tsqlParser.GO - 262)) | (1 << (tsqlParser.GROUPING - 262)) | (1 << (tsqlParser.GROUPING_ID - 262)) | (1 << (tsqlParser.HASH - 262)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 262)) | (1 << (tsqlParser.IMPERSONATE - 262)) | (1 << (tsqlParser.INSENSITIVE - 262)) | (1 << (tsqlParser.INSERTED - 262)) | (1 << (tsqlParser.ISOLATION - 262)) | (1 << (tsqlParser.KEEP - 262)) | (1 << (tsqlParser.KEEPFIXED - 262)) | (1 << (tsqlParser.KEYSET - 262)) | (1 << (tsqlParser.LAG - 262)) | (1 << (tsqlParser.LAST - 262)) | (1 << (tsqlParser.LEAD - 262)) | (1 << (tsqlParser.LEVEL - 262)) | (1 << (tsqlParser.LOCAL - 262)) | (1 << (tsqlParser.LOCK_ESCALATION - 262)) | (1 << (tsqlParser.LOGIN - 262)) | (1 << (tsqlParser.LOOP - 262)) | (1 << (tsqlParser.MARK - 262)) | (1 << (tsqlParser.MAX - 262)) | (1 << (tsqlParser.MAXDOP - 262)) | (1 << (tsqlParser.MAXRECURSION - 262)) | (1 << (tsqlParser.MIN - 262)) | (1 << (tsqlParser.MODIFY - 262)) | (1 << (tsqlParser.NAME - 262)) | (1 << (tsqlParser.NOCOUNT - 262)) | (1 << (tsqlParser.NOEXPAND - 262)) | (1 << (tsqlParser.NORECOMPUTE - 262)) | (1 << (tsqlParser.NTILE - 262)) | (1 << (tsqlParser.NUMBER - 262)) | (1 << (tsqlParser.OFFSET - 262)) | (1 << (tsqlParser.ONLINE - 262)) | (1 << (tsqlParser.ONLY - 262)) | (1 << (tsqlParser.OPTIMISTIC - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (tsqlParser.OPTIMIZE - 326)) | (1 << (tsqlParser.OUT - 326)) | (1 << (tsqlParser.OUTPUT - 326)) | (1 << (tsqlParser.OWNER - 326)) | (1 << (tsqlParser.PARAMETERIZATION - 326)) | (1 << (tsqlParser.PARTITION - 326)) | (1 << (tsqlParser.PATH - 326)) | (1 << (tsqlParser.PRECEDING - 326)) | (1 << (tsqlParser.PRIOR - 326)) | (1 << (tsqlParser.PRIVILEGES - 326)) | (1 << (tsqlParser.RANGE - 326)) | (1 << (tsqlParser.RANK - 326)) | (1 << (tsqlParser.READONLY - 326)) | (1 << (tsqlParser.READ_ONLY - 326)) | (1 << (tsqlParser.RECOMPILE - 326)) | (1 << (tsqlParser.RELATIVE - 326)) | (1 << (tsqlParser.REMOTE - 326)) | (1 << (tsqlParser.REPEATABLE - 326)) | (1 << (tsqlParser.ROBUST - 326)) | (1 << (tsqlParser.ROOT - 326)) | (1 << (tsqlParser.ROW - 326)) | (1 << (tsqlParser.ROWGUID - 326)) | (1 << (tsqlParser.ROWS - 326)) | (1 << (tsqlParser.ROW_NUMBER - 326)) | (1 << (tsqlParser.SAMPLE - 326)) | (1 << (tsqlParser.SCHEMABINDING - 326)) | (1 << (tsqlParser.SCROLL - 326)) | (1 << (tsqlParser.SCROLL_LOCKS - 326)) | (1 << (tsqlParser.SELF - 326)) | (1 << (tsqlParser.SERIALIZABLE - 326)) | (1 << (tsqlParser.SIMPLE - 326)) | (1 << (tsqlParser.SIZE - 326)) | (1 << (tsqlParser.SNAPSHOT - 326)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 326)) | (1 << (tsqlParser.STATIC - 326)) | (1 << (tsqlParser.STATS_STREAM - 326)) | (1 << (tsqlParser.STDEV - 326)) | (1 << (tsqlParser.STDEVP - 326)) | (1 << (tsqlParser.SUM - 326)) | (1 << (tsqlParser.TEXTIMAGE_ON - 326)) | (1 << (tsqlParser.THROW - 326)) | (1 << (tsqlParser.TIES - 326)) | (1 << (tsqlParser.TIME - 326)) | (1 << (tsqlParser.TRY - 326)) | (1 << (tsqlParser.TYPE - 326)) | (1 << (tsqlParser.TYPE_WARNING - 326)) | (1 << (tsqlParser.UNBOUNDED - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (tsqlParser.UNCOMMITTED - 390)) | (1 << (tsqlParser.UNKNOWN - 390)) | (1 << (tsqlParser.USING - 390)) | (1 << (tsqlParser.VAR - 390)) | (1 << (tsqlParser.VARP - 390)) | (1 << (tsqlParser.VIEWS - 390)) | (1 << (tsqlParser.VIEW_METADATA - 390)) | (1 << (tsqlParser.WORK - 390)) | (1 << (tsqlParser.XML - 390)) | (1 << (tsqlParser.XMLNAMESPACES - 390)) | (1 << (tsqlParser.ID - 390)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comparison_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison_operator" ):
                return visitor.visitComparison_operator(self)
            else:
                return visitor.visitChildren(self)




    def comparison_operator(self):

        localctx = tsqlParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_comparison_operator)
        try:
            self.state = 3113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3098
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3099
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3100
                self.match(tsqlParser.LESS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3101
                self.match(tsqlParser.LESS)
                self.state = 3102
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3103
                self.match(tsqlParser.GREATER)
                self.state = 3104
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3105
                self.match(tsqlParser.LESS)
                self.state = 3106
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3107
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3108
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3109
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3110
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3111
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3112
                self.match(tsqlParser.LESS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignment_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_operator" ):
                return visitor.visitAssignment_operator(self)
            else:
                return visitor.visitChildren(self)




    def assignment_operator(self):

        localctx = tsqlParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3115
            _la = self._input.LA(1)
            if not(((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (tsqlParser.PLUS_ASSIGN - 418)) | (1 << (tsqlParser.MINUS_ASSIGN - 418)) | (1 << (tsqlParser.MULT_ASSIGN - 418)) | (1 << (tsqlParser.DIV_ASSIGN - 418)) | (1 << (tsqlParser.MOD_ASSIGN - 418)) | (1 << (tsqlParser.AND_ASSIGN - 418)) | (1 << (tsqlParser.XOR_ASSIGN - 418)) | (1 << (tsqlParser.OR_ASSIGN - 418)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_sizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def KB(self):
            return self.getToken(tsqlParser.KB, 0)

        def MB(self):
            return self.getToken(tsqlParser.MB, 0)

        def GB(self):
            return self.getToken(tsqlParser.GB, 0)

        def TB(self):
            return self.getToken(tsqlParser.TB, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_size" ):
                listener.enterFile_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_size" ):
                listener.exitFile_size(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_size" ):
                return visitor.visitFile_size(self)
            else:
                return visitor.visitChildren(self)




    def file_size(self):

        localctx = tsqlParser.File_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_file_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3117
            self.match(tsqlParser.DECIMAL)
            self.state = 3119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 269)) & ~0x3f) == 0 and ((1 << (_la - 269)) & ((1 << (tsqlParser.GB - 269)) | (1 << (tsqlParser.KB - 269)) | (1 << (tsqlParser.MB - 269)))) != 0) or _la==tsqlParser.TB or _la==tsqlParser.MODULE:
                self.state = 3118
                _la = self._input.LA(1)
                if not(((((_la - 269)) & ~0x3f) == 0 and ((1 << (_la - 269)) & ((1 << (tsqlParser.GB - 269)) | (1 << (tsqlParser.KB - 269)) | (1 << (tsqlParser.MB - 269)))) != 0) or _la==tsqlParser.TB or _la==tsqlParser.MODULE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[86] = self.expression_sempred
        self._predicates[93] = self.search_condition_sempred
        self._predicates[95] = self.query_expression_sempred
        self._predicates[112] = self.table_source_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

    def search_condition_sempred(self, localctx:Search_conditionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def query_expression_sempred(self, localctx:Query_expressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def table_source_sempred(self, localctx:Table_sourceContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         




