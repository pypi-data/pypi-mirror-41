# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_core')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_core')
    _core = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_core', [dirname(__file__)])
        except ImportError:
            import _core
            return _core
        try:
            _mod = imp.load_module('_core', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _core = swig_import_helper()
    del swig_import_helper
else:
    import _core
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _core.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _core.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _core.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _core.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _core.SwigPyIterator_equal(self, x)

    def copy(self):
        return _core.SwigPyIterator_copy(self)

    def next(self):
        return _core.SwigPyIterator_next(self)

    def __next__(self):
        return _core.SwigPyIterator___next__(self)

    def previous(self):
        return _core.SwigPyIterator_previous(self)

    def advance(self, n):
        return _core.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _core.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _core.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _core.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _core.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _core.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _core.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _core.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def EndOfProgram():
    return _core.EndOfProgram()
EndOfProgram = _core.EndOfProgram

def FatalError(ErrorText):
    return _core.FatalError(ErrorText)
FatalError = _core.FatalError
class CRandomMersenne(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRandomMersenne, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRandomMersenne, name)
    __repr__ = _swig_repr

    def __init__(self, seed):
        this = _core.new_CRandomMersenne(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def RandomInit(self, seed):
        return _core.CRandomMersenne_RandomInit(self, seed)

    def RandomInitByArray(self, seeds, NumSeeds):
        return _core.CRandomMersenne_RandomInitByArray(self, seeds, NumSeeds)

    def IRandom(self, min, max):
        return _core.CRandomMersenne_IRandom(self, min, max)

    def IRandomX(self, min, max):
        return _core.CRandomMersenne_IRandomX(self, min, max)

    def Random(self):
        return _core.CRandomMersenne_Random(self)

    def BRandom(self):
        return _core.CRandomMersenne_BRandom(self)
    __swig_destroy__ = _core.delete_CRandomMersenne
    __del__ = lambda self: None
CRandomMersenne_swigregister = _core.CRandomMersenne_swigregister
CRandomMersenne_swigregister(CRandomMersenne)

class CRandomMother(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRandomMother, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRandomMother, name)
    __repr__ = _swig_repr

    def RandomInit(self, seed):
        return _core.CRandomMother_RandomInit(self, seed)

    def IRandom(self, min, max):
        return _core.CRandomMother_IRandom(self, min, max)

    def Random(self):
        return _core.CRandomMother_Random(self)

    def BRandom(self):
        return _core.CRandomMother_BRandom(self)

    def __init__(self, seed):
        this = _core.new_CRandomMother(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _core.delete_CRandomMother
    __del__ = lambda self: None
CRandomMother_swigregister = _core.CRandomMother_swigregister
CRandomMother_swigregister(CRandomMother)


def LnFac(n):
    return _core.LnFac(n)
LnFac = _core.LnFac

def LnFacr(x):
    return _core.LnFacr(x)
LnFacr = _core.LnFacr

def FallingFactorial(a, b):
    return _core.FallingFactorial(a, b)
FallingFactorial = _core.FallingFactorial

def Erf(x):
    return _core.Erf(x)
Erf = _core.Erf

def FloorLog2(x):
    return _core.FloorLog2(x)
FloorLog2 = _core.FloorLog2

def NumSD(accuracy):
    return _core.NumSD(accuracy)
NumSD = _core.NumSD
MAXCOLORS = _core.MAXCOLORS
class StochasticLib1(CRandomMersenne):
    __swig_setmethods__ = {}
    for _s in [CRandomMersenne]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StochasticLib1, name, value)
    __swig_getmethods__ = {}
    for _s in [CRandomMersenne]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StochasticLib1, name)
    __repr__ = _swig_repr

    def __init__(self, seed):
        this = _core.new_StochasticLib1(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Bernoulli(self, p):
        return _core.StochasticLib1_Bernoulli(self, p)

    def Normal(self, m, s):
        return _core.StochasticLib1_Normal(self, m, s)

    def NormalTrunc(self, m, s, limit):
        return _core.StochasticLib1_NormalTrunc(self, m, s, limit)

    def Poisson(self, L):
        return _core.StochasticLib1_Poisson(self, L)

    def Binomial(self, n, p):
        return _core.StochasticLib1_Binomial(self, n, p)

    def Hypergeometric(self, n, m, N):
        return _core.StochasticLib1_Hypergeometric(self, n, m, N)

    def Multinomial(self, *args):
        return _core.StochasticLib1_Multinomial(self, *args)

    def MultiHypergeometric(self, destination, source, n, colors):
        return _core.StochasticLib1_MultiHypergeometric(self, destination, source, n, colors)

    def Shuffle(self, list, min, n):
        return _core.StochasticLib1_Shuffle(self, list, min, n)
    __swig_destroy__ = _core.delete_StochasticLib1
    __del__ = lambda self: None
StochasticLib1_swigregister = _core.StochasticLib1_swigregister
StochasticLib1_swigregister(StochasticLib1)
cvar = _core.cvar
FAK_LEN = cvar.FAK_LEN
ERFRES_B = cvar.ERFRES_B
ERFRES_E = cvar.ERFRES_E
ERFRES_S = cvar.ERFRES_S
ERFRES_N = cvar.ERFRES_N
ERFRES_L = cvar.ERFRES_L

class StochasticLib2(StochasticLib1):
    __swig_setmethods__ = {}
    for _s in [StochasticLib1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StochasticLib2, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticLib1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StochasticLib2, name)
    __repr__ = _swig_repr

    def Poisson(self, L):
        return _core.StochasticLib2_Poisson(self, L)

    def Binomial(self, n, p):
        return _core.StochasticLib2_Binomial(self, n, p)

    def Hypergeometric(self, n, M, N):
        return _core.StochasticLib2_Hypergeometric(self, n, M, N)

    def __init__(self, seed):
        this = _core.new_StochasticLib2(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _core.delete_StochasticLib2
    __del__ = lambda self: None
StochasticLib2_swigregister = _core.StochasticLib2_swigregister
StochasticLib2_swigregister(StochasticLib2)

class StochasticLib3(StochasticLib1):
    __swig_setmethods__ = {}
    for _s in [StochasticLib1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StochasticLib3, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticLib1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StochasticLib3, name)
    __repr__ = _swig_repr

    def __init__(self, seed):
        this = _core.new_StochasticLib3(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetAccuracy(self, accur):
        return _core.StochasticLib3_SetAccuracy(self, accur)

    def WalleniusNCHyp(self, n, m, N, odds):
        return _core.StochasticLib3_WalleniusNCHyp(self, n, m, N, odds)

    def FishersNCHyp(self, n, m, N, odds):
        return _core.StochasticLib3_FishersNCHyp(self, n, m, N, odds)

    def MultiWalleniusNCHyp(self, destination, source, weights, n, colors):
        return _core.StochasticLib3_MultiWalleniusNCHyp(self, destination, source, weights, n, colors)

    def MultiComplWalleniusNCHyp(self, destination, source, weights, n, colors):
        return _core.StochasticLib3_MultiComplWalleniusNCHyp(self, destination, source, weights, n, colors)

    def MultiFishersNCHyp(self, destination, source, weights, n, colors):
        return _core.StochasticLib3_MultiFishersNCHyp(self, destination, source, weights, n, colors)
    __swig_destroy__ = _core.delete_StochasticLib3
    __del__ = lambda self: None
StochasticLib3_swigregister = _core.StochasticLib3_swigregister
StochasticLib3_swigregister(StochasticLib3)

class CWalleniusNCHypergeometric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CWalleniusNCHypergeometric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CWalleniusNCHypergeometric, name)
    __repr__ = _swig_repr

    def __init__(self, n, m, N, odds, accuracy=1.E-8):
        this = _core.new_CWalleniusNCHypergeometric(n, m, N, odds, accuracy)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetParameters(self, n, m, N, odds):
        return _core.CWalleniusNCHypergeometric_SetParameters(self, n, m, N, odds)

    def probability(self, x):
        return _core.CWalleniusNCHypergeometric_probability(self, x)

    def MakeTable(self, table, MaxLength, xfirst, xlast, cutoff=0.):
        return _core.CWalleniusNCHypergeometric_MakeTable(self, table, MaxLength, xfirst, xlast, cutoff)

    def mean(self):
        return _core.CWalleniusNCHypergeometric_mean(self)

    def variance(self):
        return _core.CWalleniusNCHypergeometric_variance(self)

    def mode(self):
        return _core.CWalleniusNCHypergeometric_mode(self)

    def moments(self, mean, var):
        return _core.CWalleniusNCHypergeometric_moments(self, mean, var)

    def BernouilliH(self, x, h, rh, sto):
        return _core.CWalleniusNCHypergeometric_BernouilliH(self, x, h, rh, sto)
    __swig_destroy__ = _core.delete_CWalleniusNCHypergeometric
    __del__ = lambda self: None
CWalleniusNCHypergeometric_swigregister = _core.CWalleniusNCHypergeometric_swigregister
CWalleniusNCHypergeometric_swigregister(CWalleniusNCHypergeometric)

class CMultiWalleniusNCHypergeometric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMultiWalleniusNCHypergeometric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMultiWalleniusNCHypergeometric, name)
    __repr__ = _swig_repr

    def __init__(self, n, m, odds, colors, accuracy=1.E-8):
        this = _core.new_CMultiWalleniusNCHypergeometric(n, m, odds, colors, accuracy)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetParameters(self, n, m, odds, colors):
        return _core.CMultiWalleniusNCHypergeometric_SetParameters(self, n, m, odds, colors)

    def probability(self, x):
        return _core.CMultiWalleniusNCHypergeometric_probability(self, x)

    def mean(self, mu):
        return _core.CMultiWalleniusNCHypergeometric_mean(self, mu)
    __swig_destroy__ = _core.delete_CMultiWalleniusNCHypergeometric
    __del__ = lambda self: None
CMultiWalleniusNCHypergeometric_swigregister = _core.CMultiWalleniusNCHypergeometric_swigregister
CMultiWalleniusNCHypergeometric_swigregister(CMultiWalleniusNCHypergeometric)

class CMultiWalleniusNCHypergeometricMoments(CMultiWalleniusNCHypergeometric):
    __swig_setmethods__ = {}
    for _s in [CMultiWalleniusNCHypergeometric]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMultiWalleniusNCHypergeometricMoments, name, value)
    __swig_getmethods__ = {}
    for _s in [CMultiWalleniusNCHypergeometric]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMultiWalleniusNCHypergeometricMoments, name)
    __repr__ = _swig_repr

    def __init__(self, n, m, odds, colors, accuracy=1.E-8):
        this = _core.new_CMultiWalleniusNCHypergeometricMoments(n, m, odds, colors, accuracy)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def moments(self, mean, stddev, combinations=None):
        return _core.CMultiWalleniusNCHypergeometricMoments_moments(self, mean, stddev, combinations)
    __swig_destroy__ = _core.delete_CMultiWalleniusNCHypergeometricMoments
    __del__ = lambda self: None
CMultiWalleniusNCHypergeometricMoments_swigregister = _core.CMultiWalleniusNCHypergeometricMoments_swigregister
CMultiWalleniusNCHypergeometricMoments_swigregister(CMultiWalleniusNCHypergeometricMoments)

class CFishersNCHypergeometric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFishersNCHypergeometric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFishersNCHypergeometric, name)
    __repr__ = _swig_repr

    def __init__(self, n, m, N, odds, accuracy=1E-8):
        this = _core.new_CFishersNCHypergeometric(n, m, N, odds, accuracy)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def probability(self, x):
        return _core.CFishersNCHypergeometric_probability(self, x)

    def probabilityRatio(self, x, x0):
        return _core.CFishersNCHypergeometric_probabilityRatio(self, x, x0)

    def MakeTable(self, table, MaxLength, xfirst, xlast, cutoff=0.):
        return _core.CFishersNCHypergeometric_MakeTable(self, table, MaxLength, xfirst, xlast, cutoff)

    def mean(self):
        return _core.CFishersNCHypergeometric_mean(self)

    def variance(self):
        return _core.CFishersNCHypergeometric_variance(self)

    def mode(self):
        return _core.CFishersNCHypergeometric_mode(self)

    def moments(self, mean, var):
        return _core.CFishersNCHypergeometric_moments(self, mean, var)
    __swig_destroy__ = _core.delete_CFishersNCHypergeometric
    __del__ = lambda self: None
CFishersNCHypergeometric_swigregister = _core.CFishersNCHypergeometric_swigregister
CFishersNCHypergeometric_swigregister(CFishersNCHypergeometric)

class CMultiFishersNCHypergeometric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMultiFishersNCHypergeometric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMultiFishersNCHypergeometric, name)
    __repr__ = _swig_repr

    def __init__(self, n, m, odds, colors, accuracy=1E-9):
        this = _core.new_CMultiFishersNCHypergeometric(n, m, odds, colors, accuracy)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def probability(self, x):
        return _core.CMultiFishersNCHypergeometric_probability(self, x)

    def mean(self, mu):
        return _core.CMultiFishersNCHypergeometric_mean(self, mu)

    def variance(self, var):
        return _core.CMultiFishersNCHypergeometric_variance(self, var)

    def moments(self, mean, stddev, combinations=None):
        return _core.CMultiFishersNCHypergeometric_moments(self, mean, stddev, combinations)
    __swig_destroy__ = _core.delete_CMultiFishersNCHypergeometric
    __del__ = lambda self: None
CMultiFishersNCHypergeometric_swigregister = _core.CMultiFishersNCHypergeometric_swigregister
CMultiFishersNCHypergeometric_swigregister(CMultiFishersNCHypergeometric)


def dWNCHypergeo(px, m1, m2, n, odds, prec):
    return _core.dWNCHypergeo(px, m1, m2, n, odds, prec)
dWNCHypergeo = _core.dWNCHypergeo
# This file is compatible with both classic and new-style classes.


