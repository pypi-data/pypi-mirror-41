Metadata-Version: 1.2
Name: xml2rfc
Version: 2.18.0
Summary: Xml2rfc generates RFCs and IETF drafts from document source in XML according to the dtd in RFC2629.
Home-page: https://tools.ietf.org/tools/xml2rfc/trac/
Author: Henrik Levkowetz, Josh Bothun
Author-email: tools-discuss@ietf.org
Maintainer: Henrik Levkowetz
Maintainer-email: henrik@levkowetz.com
License: Simplified BSD Licence
Download-URL: https://pypi.python.org/pypi/xml2rfc
Description: Introduction
        ============
        
        The IETF_ uses a specific format for the standards and other documents it
        publishes as RFCs_, and for the draft documents which are produced when
        developing documents for publications.  There exists a number of different
        tools to facilitate the formatting of drafts and RFCs according to the
        existing rules, and this tool, **xml2rfc**, is one of them.  It takes as input
        an xml file which contains the text and meta-information about author names
        etc., and transforms it into suitably formatted output.  The input xml file
        should follow the DTD given in RFC2629_ (or it's `inofficial successor`_).
        
        The current incarnation of **xml2rfc** provides output in the following
        formats: Paginated and unpaginated ascii text, html, nroff, and expanded xml.
        Only the paginated text format is currently (January 2013) accepable as draft
        submissions to the IETF.
        
        .. _IETF: https://www.ietf.org/
        .. _RFCs: https://www.rfc-editor.org/
        .. _RFC2629: https://tools.ietf.org/html/rfc2629
        .. _inofficial successor: https://tools.ietf.org/html/draft-mrose-writing-rfcs
        
        Installation
        ============
        
        Installation of the python package is done as usual with 'pip install xml2rfc',
        using appropriate switches and/or sudo.
        
        Installation of support libraries for the PDF-formatter
        -------------------------------------------------------
        
        In order to generate PDFs, xml2rfc uses the WeasyPrint module, which
        depends on external libaries that must be installed as native packages
        on your platform, separately from the xml2rfc install.
        
        First, install the Cairo, Pango, and GDK-PixBuf library files on your
        system.  See installation instructions on the WeasyPrint Docs:
        
            https://weasyprint.readthedocs.io/en/stable/install.html
        
        (Python 3 is not needed if your system Python is 2.7, though).
        
        (On some OS X systems with System Integrity Protection active, you may
        need to create a symlink from your home directory to the library installation
        directory (often /opt/local/lib):
        
            ln -s /opt/local/lib ~/lib
        
        in order for weasyprint to find the installed cairo and pango libraries.
        Whether this is needed or not depends on whether you used macports or homebrew
        to install cairo and pango, and the homebrew / macport version.)
        
        Next, install the pycairo and weasyprint python modules using pip.
        Depending on your system, you may need to use 'sudo' or install in
        user-specific directories, using the --user switch.  On OS X in
        particular, you may also need to install a newer version of setuptools
        using --user before weasyprint can be installed.  If you install with 
        the --user switch, you may need to also set PYTHONPATH, e.g.,
        
            PYTHONPATH=/Users/henrik/Library/Python/2.7/lib/python/site-packages
        
        for Python 2.7.
        
        The basic pip commands (modify as needed according to the text above)
        are:
        
            pip install 'pycairo>=1.18' 'weasyprint<=0.42.3'
        
        With these installed and available to xml2rfc, the --pdf switch will be
        enabled.
        
        For PDF output, you also need to install the Noto font set.  Download the full
        set from https://noto-website-2.storage.googleapis.com/pkgs/Noto-unhinted.zip,
        and install as appropriate for your platform.
        
        Usage
        =====
        
        xml2rfc accepts a single XML document as input and outputs to one or more conversion formats.
        
        **Basic Usage**: ``xml2rfc SOURCE [options] FORMATS...``
        
        Run ``xml2rfc --help`` for a full listing of command-line options.
        
        
        Changelog
        =========
        
        
        Version 2.18.0 (06 Feb 2019)
        ------------------------------------------------
        
        
          This release provides additional support for <referencegroup> rendering, and
          and adds validation of fetched reference files before they are used or put
          in the reference cache.  A warning for un-cited references was added to the
          preptool; this has been present for v2 renderers for a long time, but was
          absent from the v3 specification.  A number of bugs have also been fixed.
          From the commit log:
        
          * Fixed an issue with the v3 html renderer when given an author without 
            an address entry.  Fixes issue #390.
        
          * Fixed a bug in the HTML renderer's SVG reading exception code.  Added
            support for a <referencegroup> target attribute, and suppression of target
            URLs for indivudual entries within a <referencegroup>.
        
          * Adjusted the text rendering of reference annotations to match the html 
            rendering better.  Added support for <referencegroup> target rendering.  
            Suppressed rendering of target URLs for individual entries in a 
            referencegroup.
        
          * Added a preptool check for reference citations, as earlier provided by v2
            renderers.  Made the reference section numbering code more general, to
            support additional levels in the future.
        
          * Added an attribute 'target' to <referencegroup>, in order to be able to
            link out to for instance IETF STD and BCP documents.
        
          * Added ValueError to the exceptions caught on 'import weasyprint' as a 
            workaround for a problem in Python's locale.py file under 3.7.
        
          * Added the Python version to the version list emitted with --version 
            --verbose.
        
          * Added validation of included reference files before usage, to prevent
            html files fetched from dns-spoofing captive portals from being used.
        
        
        
        
        
        
        
        Version 2.17.2 (28 Jan 2019)
        ------------------------------------------------
        
        
          * Added a v3 text renderer for <referencegroup>, and made it possible to 
            refer to a reference group anchor with <xref>.
        
        
        
        
        
        
        
        Version 2.17.1 (23 Jan 2019)
        ------------------------------------------------
        
        
          This release addresses a couple of issues with SCG rendering in HTML and
          PDF formats, pointed out by sginoza@amsl.com, and adds testing under
          Python 3.7:
        
          * Added code to add missing <svg> element attribute viewBox, and scale 
            down large svg images for use in html and pdf renderings.  Added an error 
            case when the svg element doesn't contain sufficient information (width and 
            height, or viewBox) to do so.  This improves the rendering in general, and 
            in particular lets the PDF rendering show the full image, which was not 
            always the case when viewBox was missing for a large image.
        
          * Added Python 3.7 to the tox test settings.
        
        
        
        
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python
Classifier: Topic :: Text Processing
Classifier: Topic :: Text Processing :: Markup :: XML
Classifier: License :: OSI Approved :: BSD License
