# -*- coding: utf-8 -*-
"""

test_all
========

:date: 2019-01-23 
:author: kjetil
"""

#
# Set up
#

#
# Add adfags to ptyhonpath... might not be the nicest way to do it but...
#
# import sys
# sys.path.insert(0, '../src')

import pandas as pd
import pytest
import time
import logging
import os

from libgs.scheduler import CommsPass, Schedule,Scheduler
from libgs.rpc import RPCSchedulerServer, RPCSchedulerClient
from libgs.database import CommsLog, PassDb, MonitorDb
from libgs.utils import setup_logger
from libgs.groundstation import GroundStation


log = logging.getLogger("libgs-log")
setup_logger(log, 
             cons_loglvl=10, 
             file_logpath=None)


#
# Use a local database file for testing
#
DBFNAME = 'test_all.db'
DB = "sqlite:///" + DBFNAME






def pass_data(real_pass = True):
    if real_pass == True:
        pdat = pd.read_json('{"norad_id":{"42734.7790625":0,"42734.7791782407":0,"42734.7792939815":0,"42734.7794097222":0,"42734.779525463":0,"42734.7796412037":0,"42734.7797569444":0,"42734.7798726852":0,"42734.7799884259":0,"42734.7801041667":0,"42734.7802199074":0,"42734.7803356482":0,"42734.7804513889":0,"42734.7805671296":0,"42734.7806828704":0,"42734.7807986111":0,"42734.7809143518":0,"42734.7810300926":0,"42734.7811458333":0,"42734.7812615741":0,"42734.7813773148":0,"42734.7814930556":0,"42734.7816087963":0,"42734.781724537":0,"42734.7818402778":0,"42734.7819560185":0,"42734.7820717593":0,"42734.7821875":0,"42734.7823032407":0,"42734.7824189815":0,"42734.7825347222":0,"42734.782650463":0,"42734.7827662037":0,"42734.7828819444":0,"42734.7829976852":0,"42734.7831134259":0},"tstamp_str":{"42734.7790625":"2017\\/1\\/1 06:41:51","42734.7791782407":"2017\\/1\\/1 06:42:01","42734.7792939815":"2017\\/1\\/1 06:42:11","42734.7794097222":"2017\\/1\\/1 06:42:21","42734.779525463":"2017\\/1\\/1 06:42:31","42734.7796412037":"2017\\/1\\/1 06:42:41","42734.7797569444":"2017\\/1\\/1 06:42:51","42734.7798726852":"2017\\/1\\/1 06:43:01","42734.7799884259":"2017\\/1\\/1 06:43:11","42734.7801041667":"2017\\/1\\/1 06:43:21","42734.7802199074":"2017\\/1\\/1 06:43:31","42734.7803356482":"2017\\/1\\/1 06:43:41","42734.7804513889":"2017\\/1\\/1 06:43:51","42734.7805671296":"2017\\/1\\/1 06:44:01","42734.7806828704":"2017\\/1\\/1 06:44:11","42734.7807986111":"2017\\/1\\/1 06:44:21","42734.7809143518":"2017\\/1\\/1 06:44:31","42734.7810300926":"2017\\/1\\/1 06:44:41","42734.7811458333":"2017\\/1\\/1 06:44:51","42734.7812615741":"2017\\/1\\/1 06:45:01","42734.7813773148":"2017\\/1\\/1 06:45:11","42734.7814930556":"2017\\/1\\/1 06:45:21","42734.7816087963":"2017\\/1\\/1 06:45:31","42734.781724537":"2017\\/1\\/1 06:45:41","42734.7818402778":"2017\\/1\\/1 06:45:51","42734.7819560185":"2017\\/1\\/1 06:46:01","42734.7820717593":"2017\\/1\\/1 06:46:11","42734.7821875":"2017\\/1\\/1 06:46:21","42734.7823032407":"2017\\/1\\/1 06:46:31","42734.7824189815":"2017\\/1\\/1 06:46:41","42734.7825347222":"2017\\/1\\/1 06:46:51","42734.782650463":"2017\\/1\\/1 06:47:01","42734.7827662037":"2017\\/1\\/1 06:47:11","42734.7828819444":"2017\\/1\\/1 06:47:21","42734.7829976852":"2017\\/1\\/1 06:47:31","42734.7831134259":"2017\\/1\\/1 06:47:41"},"az":{"42734.7790625":346.9824890826,"42734.7791782407":348.4476739426,"42734.7792939815":350.0551179826,"42734.7794097222":351.8237271663,"42734.779525463":353.7752214952,"42734.7796412037":355.9342989333,"42734.7797569444":358.3288812941,"42734.7798726852":0.989958547,"42734.7799884259":3.951124416,"42734.7801041667":7.2475410491,"42734.7802199074":10.9137970578,"42734.7803356482":14.9804609537,"42734.7804513889":19.4689334272,"42734.7805671296":24.3845881295,"42734.7806828704":29.7089152479,"42734.7807986111":35.3924420147,"42734.7809143518":41.3512356504,"42734.7810300926":47.4700367127,"42734.7811458333":53.6132761919,"42734.7812615741":59.6421339081,"42734.7813773148":65.4325838713,"42734.7814930556":70.8889487917,"42734.7816087963":75.9497979478,"42734.781724537":80.5864445451,"42734.7818402778":84.7967985457,"42734.7819560185":88.5974914603,"42734.7820717593":92.0165680456,"42734.7821875":95.0876669832,"42734.7823032407":97.8460525399,"42734.7824189815":100.3260464162,"42734.7825347222":102.5596343881,"42734.782650463":104.5758242688,"42734.7827662037":106.4004273433,"42734.7828819444":108.0561949717,"42734.7829976852":109.5630030045,"42734.7831134259":110.938159141},"el":{"42734.7790625":10.7768790857,"42734.7791782407":11.7923011115,"42734.7792939815":12.8577448814,"42734.7794097222":13.9755958391,"42734.779525463":15.1481198998,"42734.7796412037":16.3746391671,"42734.7797569444":17.6540736175,"42734.7798726852":18.9825863923,"42734.7799884259":20.3520751793,"42734.7801041667":21.7490452325,"42734.7802199074":23.1529872013,"42734.7803356482":24.5348027723,"42734.7804513889":25.8557545276,"42734.7805671296":27.0676127939,"42734.7806828704":28.1148395956,"42734.7807986111":28.9395115133,"42734.7809143518":29.488853383,"42734.7810300926":29.7240782678,"42734.7811458333":29.6280253175,"42734.7812615741":29.2088019667,"42734.7813773148":28.4979893024,"42734.7814930556":27.5441585074,"42734.7816087963":26.4041299255,"42734.781724537":25.1347768343,"42734.7818402778":23.787142945,"42734.7819560185":22.4033432041,"42734.7820717593":21.0157868591,"42734.7821875":19.6478912136,"42734.7823032407":18.315515967,"42734.7824189815":17.0285905066,"42734.7825347222":15.7926199649,"42734.782650463":14.6090216063,"42734.7827662037":13.4793962563,"42734.7828819444":12.4021311364,"42734.7829976852":11.375014973,"42734.7831134259":10.3954702234},"range_rate":{"42734.7790625":-5961.3515625,"42734.7791782407":-5855.8232421875,"42734.7792939815":-5735.376953125,"42734.7794097222":-5597.6459960938,"42734.779525463":-5439.8842773438,"42734.7796412037":-5258.9360351562,"42734.7797569444":-5051.220703125,"42734.7798726852":-4812.759765625,"42734.7799884259":-4539.2587890625,"42734.7801041667":-4226.287109375,"42734.7802199074":-3869.5861816406,"42734.7803356482":-3465.5419921875,"42734.7804513889":-3011.8383789062,"42734.7805671296":-2508.2514648438,"42734.7806828704":-1957.46875,"42734.7807986111":-1365.7282714844,"42734.7809143518":-743.0068969727,"42734.7810300926":-102.5293273926,"42734.7811458333":540.4511108398,"42734.7812615741":1170.3852539062,"42734.7813773148":1773.2392578125,"42734.7814930556":2337.9135742188,"42734.7816087963":2856.9721679688,"42734.781724537":3326.6511230469,"42734.7818402778":3746.3330078125,"42734.7819560185":4117.759765625,"42734.7820717593":4444.2104492188,"42734.7821875":4729.798828125,"42734.7823032407":4978.94140625,"42734.7824189815":5196.0014648438,"42734.7825347222":5385.0708007812,"42734.782650463":5549.861328125,"42734.7827662037":5693.6645507812,"42734.7828819444":5819.3540039062,"42734.7829976852":5929.4130859375,"42734.7831134259":6025.9716796875}}', convert_axes=False)
    else:
        pdat = pd.read_json('{"p":{"0":1,"1":1,"2":1,"3":1},"tstamp_str":{"0":"2017-11-14T14:52:00.000","1":"2017-11-14T14:52:20.000","2":"2017-11-14T14:52:40.000","3":"2017-11-14T14:53:00.000"},"az":{"0":12,"1":12,"2":190,"3":190},"el":{"0":20,"1":20,"2":20,"3":20},"range_rate":{"0":-8000,"1":-6000,"2":6000,"3":8000}}')
        pdat.nid = 0

    return pdat

def passes(pass_data, data = True):
    ps = [
    CommsPass(pass_data)]

    if data == True:
        ps[0].add_communication('DC-00-00-00-05-03-00-00-00-00-2C-A9', wait=False)
        ps[0].add_communication('DC-00-0C-00-05-0E-00-00-00-00-AA-55-E8-03-00-00-00-5C-26-05-FF-FF-D8-CB', wait=False)
        ps[0].add_communication('DC-00-00-00-05-0C-00-00-00-00-D5-CC')


    #
    # Run this to make pass start right away
    #
    ps[0]._change_time(tstamp=pd.Timestamp.utcnow() + pd.Timedelta(seconds=15))


    return ps

def schedule(passes, buffertime = 10):
    s = Schedule(passes, buffertime)
    return s

@pytest.fixture
def groundstation(db=DB, test_rpc=False, connect_hardware = False):
    """
    Create a ground station
    """

    # If required, set up rpc interface to ground station in order to test it as well
    if test_rpc:
        rpcserver = RPCServer(conf.GS_RPCSERVER_URI)
    else:
        rpcserver = None

    if connect_hardware:
        raise Exception("connect_hardware not yet implemeented")
        # Requires calling libgs-emulate to set up dummy hardware, and then connecting it

    gs = GroundStation(
                name       = 'libgs Ground station',
                propagator = None,
                #protocols  = None,#[DummyProtocol()],
                #radios     = None,#[DummyRadio()],
                #rotators   = None,#[DummyRotator()],
                commslog   = CommsLog(db=DB, disk_path='.'),
                passlog    = PassDb(db=DB, disk_path='.'),
                monlog     = MonitorDb(db=DB, disk_path='.'),
                rpcserver  = rpcserver
            )
            
    return gs


def test_track(
        groundstation, 
        real_pass = False, 
        communicate = False, 
        rpc=False):
    """
    End-End test of ground station functionality. Will track a pass and communicate
    with the spacecraft. The groundstaion hardware and spacecraft are emulated.
    
    args:
    
       real_pass (bool)  : Use a real pass data set. If false, use a shortened set to speed up test.
       communicate (bool): Send/Receive data
       rpc (bool)        : Upload schedule using the RPCSchedulerServer/Client
                           Functionality rather than directly
    """
    s = schedule(passes(pass_data(real_pass), communicate))
    gs = groundstation

    try:
        os.remove(DBFNAME)
        print(' *** Deleted {}'.format(DBFNAME))
    except:
        print(' *** Could not delete {}'.format(DBFNAME))

    msg = "\n" + "-"*80 + "\n"\
        + "Integration test (end-end but emulating hardware)\n"\
        + "Pass data: \n"\
        + s.passes[0].pass_data.__str__()

    if communicate == True:
        msg += "Sending the following commands, one at a time:\n"\
            + "  - Start communication\n"

        for k,c in enumerate(s.passes[0].comms):
            msg += "  - " + c['hexstr'] + "\n"

        msg += "  - Stop communication\n"


    if rpc is True:
        sch_server = RPCSchedulerServer(gs)
        sch_server.start()
        sch = RPCSchedulerClient(s, track_full_pass = True, compute_ant_points = False)
    else:
        # 2) Create scheduler
        sch = Scheduler(gs, s, track_full_pass = True, compute_ant_points = False)

    sch.execute()
    
    while sch.state == 'executing':
        time.sleep(1.0)


    print ('*** DATABASE ENTRIES GENERATED DURING TEST: ***')

    print (' ** PASSLOG')
    print (gs._passlog.get()) #<-- should always exsist

    try:
        print (' ** COMMSLOG')
        print (gs._commslog.get())
    except:
        print (' *** NO COMMSLOG')
    
    try:
        print (' ** MONLOG')
        print (gs._monlog.get())
    except:
        print (' *** NO MONLOG')



if __name__ == '__main__':
    gs = groundstation()
    test_track(gs, real_pass = False, communicate = True, rpc=True)
