# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Trunk(pulumi.CustomResource):
    admin_state_up: pulumi.Output[bool]
    """
    Administrative up/down status for the trunk
    (must be "true" or "false" if provided). Changing this updates the
    `admin_state_up` of an existing trunk.
    """
    name: pulumi.Output[str]
    """
    A unique name for the port. Changing this
    updates the `name` of an existing port.
    """
    port_id: pulumi.Output[str]
    """
    The ID of the port to be used as the parent port of the
    trunk. This is the port that should be used as the compute instance network
    port. Changing this creates a new trunk.
    """
    region: pulumi.Output[str]
    """
    The region in which to obtain the V2 networking client.
    A networking client is needed to create a trunk. If omitted, the
    `region` argument of the provider is used. Changing this creates a new
    trunk.
    """
    sub_ports: pulumi.Output[list]
    """
    The set of ports that will be made subports of the trunk.
    The structure of each subport is described below.
    """
    tags: pulumi.Output[list]
    tenant_id: pulumi.Output[str]
    """
    The owner of the Trunk. Required if admin wants
    to create a trunk on behalf of another tenant. Changing this creates a new trunk.
    """
    def __init__(__self__, __name__, __opts__=None, admin_state_up=None, name=None, port_id=None, region=None, sub_ports=None, tags=None, tenant_id=None):
        """
        Manages a networking V2 trunk resource within OpenStack.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[bool] admin_state_up: Administrative up/down status for the trunk
               (must be "true" or "false" if provided). Changing this updates the
               `admin_state_up` of an existing trunk.
        :param pulumi.Input[str] name: A unique name for the port. Changing this
               updates the `name` of an existing port.
        :param pulumi.Input[str] port_id: The ID of the port to be used as the parent port of the
               trunk. This is the port that should be used as the compute instance network
               port. Changing this creates a new trunk.
        :param pulumi.Input[str] region: The region in which to obtain the V2 networking client.
               A networking client is needed to create a trunk. If omitted, the
               `region` argument of the provider is used. Changing this creates a new
               trunk.
        :param pulumi.Input[list] sub_ports: The set of ports that will be made subports of the trunk.
               The structure of each subport is described below.
        :param pulumi.Input[list] tags
        :param pulumi.Input[str] tenant_id: The owner of the Trunk. Required if admin wants
               to create a trunk on behalf of another tenant. Changing this creates a new trunk.
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['admin_state_up'] = admin_state_up

        __props__['name'] = name

        if not port_id:
            raise TypeError('Missing required property port_id')
        __props__['port_id'] = port_id

        __props__['region'] = region

        __props__['sub_ports'] = sub_ports

        __props__['tags'] = tags

        __props__['tenant_id'] = tenant_id

        super(Trunk, __self__).__init__(
            'openstack:networking/trunk:Trunk',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

