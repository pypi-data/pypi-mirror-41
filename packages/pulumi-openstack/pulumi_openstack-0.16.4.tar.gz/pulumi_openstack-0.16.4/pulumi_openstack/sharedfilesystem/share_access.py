# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class ShareAccess(pulumi.CustomResource):
    access_level: pulumi.Output[str]
    """
    The access level to the share. Can either be rw or ro.
    """
    access_to: pulumi.Output[str]
    """
    The value that defines the access. Can either be an IP
    address or a username verified by configured Security Service of the Share Network.
    """
    access_type: pulumi.Output[str]
    """
    The access rule type. Can either be an ip, user or cert.
    """
    share_id: pulumi.Output[str]
    """
    The UUID of the share to which you are granted access.
    """
    def __init__(__self__, __name__, __opts__=None, access_level=None, access_to=None, access_type=None, share_id=None):
        """
        Use this resource to control the share access lists.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[str] access_level: The access level to the share. Can either be rw or ro.
        :param pulumi.Input[str] access_to: The value that defines the access. Can either be an IP
               address or a username verified by configured Security Service of the Share Network.
        :param pulumi.Input[str] access_type: The access rule type. Can either be an ip, user or cert.
        :param pulumi.Input[str] share_id: The UUID of the share to which you are granted access.
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not access_level:
            raise TypeError('Missing required property access_level')
        __props__['access_level'] = access_level

        if not access_to:
            raise TypeError('Missing required property access_to')
        __props__['access_to'] = access_to

        if not access_type:
            raise TypeError('Missing required property access_type')
        __props__['access_type'] = access_type

        if not share_id:
            raise TypeError('Missing required property share_id')
        __props__['share_id'] = share_id

        super(ShareAccess, __self__).__init__(
            'openstack:sharedfilesystem/shareAccess:ShareAccess',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

