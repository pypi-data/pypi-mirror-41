# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class User(pulumi.CustomResource):
    databases: pulumi.Output[list]
    """
    A list of database user should have access to.
    """
    host: pulumi.Output[str]
    instance_id: pulumi.Output[str]
    name: pulumi.Output[str]
    """
    A unique name for the resource.
    """
    password: pulumi.Output[str]
    """
    User's password.
    """
    region: pulumi.Output[str]
    """
    Openstack region resource is created in.
    """
    def __init__(__self__, __name__, __opts__=None, databases=None, host=None, instance_id=None, name=None, password=None, region=None):
        """
        Manages a V1 DB user resource within OpenStack.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[list] databases: A list of database user should have access to.
        :param pulumi.Input[str] host
        :param pulumi.Input[str] instance_id
        :param pulumi.Input[str] name: A unique name for the resource.
        :param pulumi.Input[str] password: User's password.
        :param pulumi.Input[str] region: Openstack region resource is created in.
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['databases'] = databases

        __props__['host'] = host

        if not instance_id:
            raise TypeError('Missing required property instance_id')
        __props__['instance_id'] = instance_id

        __props__['name'] = name

        if not password:
            raise TypeError('Missing required property password')
        __props__['password'] = password

        if not region:
            raise TypeError('Missing required property region')
        __props__['region'] = region

        super(User, __self__).__init__(
            'openstack:database/user:User',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

