# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class VolumeAttach(pulumi.CustomResource):
    device: pulumi.Output[str]
    """
    The device of the volume attachment (ex: `/dev/vdc`).
    _NOTE_: Being able to specify a device is dependent upon the hypervisor in
    use. There is a chance that the device specified in Terraform will not be
    the same device the hypervisor chose. If this happens, Terraform will wish
    to update the device upon subsequent applying which will cause the volume
    to be detached and reattached indefinitely. Please use with caution.
    """
    instance_id: pulumi.Output[str]
    """
    The ID of the Instance to attach the Volume to.
    """
    multiattach: pulumi.Output[bool]
    """
    Enable attachment of multiattach-capable volumes.
    """
    region: pulumi.Output[str]
    """
    The region in which to obtain the V2 Compute client.
    A Compute client is needed to create a volume attachment. If omitted, the
    `region` argument of the provider is used. Changing this creates a
    new volume attachment.
    """
    volume_id: pulumi.Output[str]
    """
    The ID of the Volume to attach to an Instance.
    """
    def __init__(__self__, __name__, __opts__=None, device=None, instance_id=None, multiattach=None, region=None, volume_id=None):
        """
        Attaches a Block Storage Volume to an Instance using the OpenStack
        Compute (Nova) v2 API.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[str] device: The device of the volume attachment (ex: `/dev/vdc`).
               _NOTE_: Being able to specify a device is dependent upon the hypervisor in
               use. There is a chance that the device specified in Terraform will not be
               the same device the hypervisor chose. If this happens, Terraform will wish
               to update the device upon subsequent applying which will cause the volume
               to be detached and reattached indefinitely. Please use with caution.
        :param pulumi.Input[str] instance_id: The ID of the Instance to attach the Volume to.
        :param pulumi.Input[bool] multiattach: Enable attachment of multiattach-capable volumes.
        :param pulumi.Input[str] region: The region in which to obtain the V2 Compute client.
               A Compute client is needed to create a volume attachment. If omitted, the
               `region` argument of the provider is used. Changing this creates a
               new volume attachment.
        :param pulumi.Input[str] volume_id: The ID of the Volume to attach to an Instance.
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['device'] = device

        if not instance_id:
            raise TypeError('Missing required property instance_id')
        __props__['instance_id'] = instance_id

        __props__['multiattach'] = multiattach

        __props__['region'] = region

        if not volume_id:
            raise TypeError('Missing required property volume_id')
        __props__['volume_id'] = volume_id

        super(VolumeAttach, __self__).__init__(
            'openstack:compute/volumeAttach:VolumeAttach',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

