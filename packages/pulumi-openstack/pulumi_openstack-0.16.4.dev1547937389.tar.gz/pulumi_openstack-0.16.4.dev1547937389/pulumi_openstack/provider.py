# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from . import utilities, tables

class Provider(pulumi.ProviderResource):
    def __init__(__self__, __name__, __opts__=None, auth_url=None, cacert_file=None, cert=None, cloud=None, default_domain=None, domain_id=None, domain_name=None, endpoint_overrides=None, endpoint_type=None, insecure=None, key=None, max_retries=None, password=None, project_domain_id=None, project_domain_name=None, region=None, swauth=None, tenant_id=None, tenant_name=None, token=None, use_octavia=None, user_domain_id=None, user_domain_name=None, user_id=None, user_name=None):
        """
        The provider type for the openstack package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://pulumi.io/reference/programming-model.html#providers) for more information.
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[str] auth_url
        :param pulumi.Input[str] cacert_file
        :param pulumi.Input[str] cert
        :param pulumi.Input[str] cloud
        :param pulumi.Input[str] default_domain
        :param pulumi.Input[str] domain_id
        :param pulumi.Input[str] domain_name
        :param pulumi.Input[dict] endpoint_overrides
        :param pulumi.Input[str] endpoint_type
        :param pulumi.Input[bool] insecure
        :param pulumi.Input[str] key
        :param pulumi.Input[int] max_retries
        :param pulumi.Input[str] password
        :param pulumi.Input[str] project_domain_id
        :param pulumi.Input[str] project_domain_name
        :param pulumi.Input[str] region
        :param pulumi.Input[bool] swauth
        :param pulumi.Input[str] tenant_id
        :param pulumi.Input[str] tenant_name
        :param pulumi.Input[str] token
        :param pulumi.Input[bool] use_octavia
        :param pulumi.Input[str] user_domain_id
        :param pulumi.Input[str] user_domain_name
        :param pulumi.Input[str] user_id
        :param pulumi.Input[str] user_name
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not auth_url:
            auth_url = utilities.get_env('OS_AUTH_URL')
        __props__['auth_url'] = auth_url

        if not cacert_file:
            cacert_file = utilities.get_env('OS_CACERT')
        __props__['cacert_file'] = cacert_file

        if not cert:
            cert = utilities.get_env('OS_CERT')
        __props__['cert'] = cert

        if not cloud:
            cloud = utilities.get_env('OS_CLOUD')
        __props__['cloud'] = cloud

        if not default_domain:
            default_domain = (utilities.get_env('OS_DEFAULT_DOMAIN') or 'default')
        __props__['default_domain'] = default_domain

        if not domain_id:
            domain_id = utilities.get_env('OS_DOMAIN_ID')
        __props__['domain_id'] = domain_id

        if not domain_name:
            domain_name = utilities.get_env('OS_DOMAIN_NAME')
        __props__['domain_name'] = domain_name

        __props__['endpoint_overrides'] = pulumi.Output.from_input(endpoint_overrides).apply(json.dumps) if endpoint_overrides is not None else None

        if not endpoint_type:
            endpoint_type = utilities.get_env('OS_ENDPOINT_TYPE')
        __props__['endpoint_type'] = endpoint_type

        if not insecure:
            insecure = utilities.get_env_bool('OS_INSECURE')
        __props__['insecure'] = pulumi.Output.from_input(insecure).apply(json.dumps) if insecure is not None else None

        if not key:
            key = utilities.get_env('OS_KEY')
        __props__['key'] = key

        __props__['max_retries'] = pulumi.Output.from_input(max_retries).apply(json.dumps) if max_retries is not None else None

        if not password:
            password = utilities.get_env('OS_PASSWORD')
        __props__['password'] = password

        if not project_domain_id:
            project_domain_id = utilities.get_env('OS_PROJECT_DOMAIN_ID')
        __props__['project_domain_id'] = project_domain_id

        if not project_domain_name:
            project_domain_name = utilities.get_env('OS_PROJECT_DOMAIN_NAME')
        __props__['project_domain_name'] = project_domain_name

        if not region:
            region = utilities.get_env('OS_REGION_NAME')
        __props__['region'] = region

        if not swauth:
            swauth = utilities.get_env_bool('OS_SWAUTH')
        __props__['swauth'] = pulumi.Output.from_input(swauth).apply(json.dumps) if swauth is not None else None

        if not tenant_id:
            tenant_id = utilities.get_env('OS_TENANT_ID', 'OS_PROJECT_ID')
        __props__['tenant_id'] = tenant_id

        if not tenant_name:
            tenant_name = utilities.get_env('OS_TENANT_NAME', 'OS_PROJECT_NAME')
        __props__['tenant_name'] = tenant_name

        if not token:
            token = utilities.get_env('OS_TOKEN', 'OS_AUTH_TOKEN')
        __props__['token'] = token

        if not use_octavia:
            use_octavia = utilities.get_env_bool('OS_USE_OCTAVIA')
        __props__['use_octavia'] = pulumi.Output.from_input(use_octavia).apply(json.dumps) if use_octavia is not None else None

        if not user_domain_id:
            user_domain_id = utilities.get_env('OS_USER_DOMAIN_ID')
        __props__['user_domain_id'] = user_domain_id

        if not user_domain_name:
            user_domain_name = utilities.get_env('OS_USER_DOMAIN_NAME')
        __props__['user_domain_name'] = user_domain_name

        if not user_id:
            user_id = utilities.get_env('OS_USER_ID')
        __props__['user_id'] = user_id

        if not user_name:
            user_name = utilities.get_env('OS_USERNAME')
        __props__['user_name'] = user_name

        super(Provider, __self__).__init__(
            'openstack',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

