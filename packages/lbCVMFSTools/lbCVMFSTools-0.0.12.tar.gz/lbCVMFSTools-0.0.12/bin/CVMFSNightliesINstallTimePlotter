#!/usr/bin/env python

###############################################################################
# (c) Copyright 2016 CERN                                                     #
#                                                                             #
# This software is distributed under the terms of the GNU General Public      #
# Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".   #
#                                                                             #
# In applying this licence, CERN does not waive the privileges and immunities #
# granted to it by virtue of its status as an Intergovernmental Organization  #
# or submit itself to any jurisdiction.                                       #
###############################################################################
'''
Command line client that interfaces to the Installer class

:author: Stefan-Gabriel CHITIC
'''
from __future__ import print_function

import logging
import optparse
import sys
import traceback

import os

from lbCVMFSTools.Injector import injector
from lbCVMFSTools.Scheduler import Scheduler
from lbCVMFSTools.TaskHandlerInterface import TaskHandlerInterface
from lbCVMFSTools.TaskHandlers.NightliesInstallTimePlotter.\
    NightliesInstallTimePlotter import NightliesInstallTimePlotter
from lbCVMFSTools.TransactionHandlers.DefaultTransactionHandler. \
    DefaultTransactionHandler import DefaultTransactionHandler
from lbCVMFSTools.TransactionHandlerInterface import \
    TransactionHandlerInterface


# Class for known install exceptions
###############################################################################


class CVMFSNightliesInstallTimePlotterException(Exception):
    """ Custom exception for cvmfs-install

    :param msg: the exception message
    """

    def __init__(self, msg):
        """ Constructor for the exception """
        # super(CVMFSNightliesInstallTimePlotterException, self).__init__(msg)
        Exception.__init__(self, msg)


# Classes and method for command line parsing
###############################################################################


class CVMFSNightliesInstallTimePlotterOptionParser(optparse.OptionParser):
    """ Custom OptionParser to intercept the errors and rethrow
    them as CVMFSNightliesInstallTimePlotterException """

    def error(self, msg):
        """
        Arguments parsing error message exception handler

        :param msg: the message of the exception
        :return: Raises CVMFSNightliesInstallTimePlotterException with
        the exception message
        """
        raise CVMFSNightliesInstallTimePlotterException(
            "Error parsing arguments: " + str(msg))

    def exit(self, status=0, msg=None):
        """
        Arguments parsing error message exception handler

        :param status: the status of the application
        :param msg: the message of the exception
        :return: Raises CVMFSNightliesInstallTimePlotterException with the
        exception message
        """
        raise CVMFSNightliesInstallTimePlotterException(
            "Error parsing arguments: " + str(msg))


class CVMFSNightliesInstallTimePlotterClient(object):
    """ Main class for the tool """

    def __init__(self, arguments=None,
                 prog="CVMFSNightliesInstallTimePlotter"):
        """ Common setup for both clients """
        self.log = logging.getLogger(__name__)
        self.arguments = arguments
        self.installer = None
        self.prog = prog
        self.logsName = None
        self.date = None
        parser = CVMFSNightliesInstallTimePlotterOptionParser(
            usage=usage(self.prog))

        parser.add_option('--date',
                          dest="date",
                          default=None,
                          action="store",
                          help="Specify the date to parse")
        self.parser = parser

    def main(self):
        """ Main method for the ancestor:
        call parse and run in sequence

        :returns: the return code of the call
        """
        rc = 0
        try:
            opts, args = self.parser.parse_args(self.arguments)
            if len(args) != 1:
                raise CVMFSNightliesInstallTimePlotterException(
                    "Manager.log path needs to be provided")
            self.logsName = args[0]

            transactionHandler = DefaultTransactionHandler()
            taskHandler = NightliesInstallTimePlotter(self.logsName,
                                                      date=opts.date)
            injector.provide_instance(TransactionHandlerInterface,
                                      transactionHandler)
            injector.provide_instance(TaskHandlerInterface, taskHandler)

            # Getting the function to be invoked
            self.run(opts, args)

        except CVMFSNightliesInstallTimePlotterException as lie:
            print("ERROR: " + str(lie), file=sys.stderr)
            self.parser.print_help()
            rc = 1
        except:
            print("Exception in lb-install:", file=sys.stderr)
            print('-'*60, file=sys.stderr)
            traceback.print_exc(file=sys.stderr)
            print('-'*60, file=sys.stderr)
            rc = 1
        return rc

    def run(self, opts, args):
        """ Main method for the command

        :param opts: The option list
        :param args: The arguments list
        """
        # Parsing first argument to check the mode
        Scheduler()


# Usage for the script
###############################################################################
def usage(cmd):
    """ Prints out how to use the script...

    :param cmd: the command executed
    """
    cmd = os.path.basename(cmd)
    return """\n%(cmd)s repo_name -  installs nighlties builds on CVMFS'

""" % {"cmd": cmd}


def CVMFSNightliesInstallTimePlotter(prog="CVMFSNightliesInstallTimePlotter"):
    """
    Default caller for command line CVMFSNightliesInstallTimePlotter client
    :param configType: the configuration used
    :param prog: the name of the executable
    """
    logging.basicConfig(format="%(levelname)-8s: %(asctime)s %(message)s")
    logging.getLogger().setLevel(logging.WARNING)
    sys.exit(CVMFSNightliesInstallTimePlotterClient(prog=prog).main())

# Main just chooses the client and starts it
if __name__ == "__main__":
    CVMFSNightliesInstallTimePlotter()
