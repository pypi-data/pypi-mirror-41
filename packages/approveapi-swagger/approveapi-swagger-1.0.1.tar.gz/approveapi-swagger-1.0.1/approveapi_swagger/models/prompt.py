# coding: utf-8

"""
    ApproveAPISwagger

    The simple API to request a user's approval on anything via email + sms.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: dev@approveapi.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Prompt(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'sent_at': 'float',
        'answer': 'PromptAnswer'
    }

    attribute_map = {
        'id': 'id',
        'sent_at': 'sent_at',
        'answer': 'answer'
    }

    def __init__(self, id=None, sent_at=None, answer=None):  # noqa: E501
        """Prompt - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._sent_at = None
        self._answer = None
        self.discriminator = None

        self.id = id
        self.sent_at = sent_at
        if answer is not None:
            self.answer = answer

    @property
    def id(self):
        """Gets the id of this Prompt.  # noqa: E501

        A unique id for this prompt.  # noqa: E501

        :return: The id of this Prompt.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Prompt.

        A unique id for this prompt.  # noqa: E501

        :param id: The id of this Prompt.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def sent_at(self):
        """Gets the sent_at of this Prompt.  # noqa: E501

        The unix timestamp when this prompt was sent.  # noqa: E501

        :return: The sent_at of this Prompt.  # noqa: E501
        :rtype: float
        """
        return self._sent_at

    @sent_at.setter
    def sent_at(self, sent_at):
        """Sets the sent_at of this Prompt.

        The unix timestamp when this prompt was sent.  # noqa: E501

        :param sent_at: The sent_at of this Prompt.  # noqa: E501
        :type: float
        """
        if sent_at is None:
            raise ValueError("Invalid value for `sent_at`, must not be `None`")  # noqa: E501

        self._sent_at = sent_at

    @property
    def answer(self):
        """Gets the answer of this Prompt.  # noqa: E501


        :return: The answer of this Prompt.  # noqa: E501
        :rtype: PromptAnswer
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this Prompt.


        :param answer: The answer of this Prompt.  # noqa: E501
        :type: PromptAnswer
        """

        self._answer = answer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Prompt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
