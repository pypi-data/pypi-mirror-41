# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Pluto')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Pluto')
    _Pluto = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Pluto', [dirname(__file__)])
        except ImportError:
            import _Pluto
            return _Pluto
        try:
            _mod = imp.load_module('_Pluto', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Pluto = swig_import_helper()
    del swig_import_helper
else:
    import _Pluto
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Pluto.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """
        value(self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _Pluto.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(self, n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        incr(self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _Pluto.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(self, n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        decr(self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _Pluto.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(self, x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Pluto.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Pluto.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _Pluto.SwigPyIterator_copy(self)


    def next(self):
        """
        next(self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _Pluto.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _Pluto.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _Pluto.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Pluto.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Pluto.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Pluto.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Pluto.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Pluto.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Pluto.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(self, x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Pluto.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Pluto.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _Pluto.SHARED_PTR_DISOWN
class UInt32Vector(_object):
    """Proxy of C++ std::vector<(uint32_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt32Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt32Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< uint32_t > *

        """
        return _Pluto.UInt32Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< uint32_t > const *

        """
        return _Pluto.UInt32Vector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< uint32_t > const *

        """
        return _Pluto.UInt32Vector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< unsigned int >::size_type

        Parameters
        ----------
        self: std::vector< uint32_t > const *

        """
        return _Pluto.UInt32Vector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> UInt32Vector

        Parameters
        ----------
        i: std::vector< unsigned int >::difference_type
        j: std::vector< unsigned int >::difference_type

        """
        return _Pluto.UInt32Vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< unsigned int >::difference_type
        j: std::vector< unsigned int >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< unsigned int >::difference_type
        j: std::vector< unsigned int >::difference_type
        v: std::vector< unsigned int,std::allocator< unsigned int > > const &

        """
        return _Pluto.UInt32Vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< unsigned int >::difference_type
        j: std::vector< unsigned int >::difference_type

        """
        return _Pluto.UInt32Vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< unsigned int >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Pluto.UInt32Vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> UInt32Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< unsigned int >::value_type const &

        Parameters
        ----------
        i: std::vector< unsigned int >::difference_type

        """
        return _Pluto.UInt32Vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< unsigned int,std::allocator< unsigned int > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< unsigned int >::difference_type
        x: std::vector< unsigned int >::value_type const &

        """
        return _Pluto.UInt32Vector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> std::vector< unsigned int >::value_type

        Parameters
        ----------
        self: std::vector< uint32_t > *

        """
        return _Pluto.UInt32Vector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< unsigned int >::value_type const &

        """
        return _Pluto.UInt32Vector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< uint32_t > const *

        """
        return _Pluto.UInt32Vector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< unsigned int >::size_type

        Parameters
        ----------
        self: std::vector< uint32_t > const *

        """
        return _Pluto.UInt32Vector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< uint32_t > &

        """
        return _Pluto.UInt32Vector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< unsigned int >::iterator

        Parameters
        ----------
        self: std::vector< uint32_t > *

        """
        return _Pluto.UInt32Vector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< unsigned int >::iterator

        Parameters
        ----------
        self: std::vector< uint32_t > *

        """
        return _Pluto.UInt32Vector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< unsigned int >::reverse_iterator

        Parameters
        ----------
        self: std::vector< uint32_t > *

        """
        return _Pluto.UInt32Vector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< unsigned int >::reverse_iterator

        Parameters
        ----------
        self: std::vector< uint32_t > *

        """
        return _Pluto.UInt32Vector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< uint32_t > *

        """
        return _Pluto.UInt32Vector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< unsigned int >::allocator_type

        Parameters
        ----------
        self: std::vector< uint32_t > const *

        """
        return _Pluto.UInt32Vector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< uint32_t > *

        """
        return _Pluto.UInt32Vector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< unsigned int >::iterator

        Parameters
        ----------
        pos: std::vector< unsigned int >::iterator

        erase(self, first, last) -> std::vector< unsigned int >::iterator

        Parameters
        ----------
        first: std::vector< unsigned int >::iterator
        last: std::vector< unsigned int >::iterator

        """
        return _Pluto.UInt32Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> UInt32Vector
        __init__(self, arg2) -> UInt32Vector

        Parameters
        ----------
        arg2: std::vector< uint32_t > const &

        __init__(self, size) -> UInt32Vector

        Parameters
        ----------
        size: std::vector< unsigned int >::size_type

        __init__(self, size, value) -> UInt32Vector

        Parameters
        ----------
        size: std::vector< unsigned int >::size_type
        value: std::vector< unsigned int >::value_type const &

        """
        this = _Pluto.new_UInt32Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< unsigned int >::value_type const &

        """
        return _Pluto.UInt32Vector_push_back(self, x)


    def front(self):
        """
        front(self) -> std::vector< unsigned int >::value_type const &

        Parameters
        ----------
        self: std::vector< uint32_t > const *

        """
        return _Pluto.UInt32Vector_front(self)


    def back(self):
        """
        back(self) -> std::vector< unsigned int >::value_type const &

        Parameters
        ----------
        self: std::vector< uint32_t > const *

        """
        return _Pluto.UInt32Vector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< unsigned int >::size_type
        x: std::vector< unsigned int >::value_type const &

        """
        return _Pluto.UInt32Vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< unsigned int >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< unsigned int >::size_type
        x: std::vector< unsigned int >::value_type const &

        """
        return _Pluto.UInt32Vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< unsigned int >::iterator

        Parameters
        ----------
        pos: std::vector< unsigned int >::iterator
        x: std::vector< unsigned int >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< unsigned int >::iterator
        n: std::vector< unsigned int >::size_type
        x: std::vector< unsigned int >::value_type const &

        """
        return _Pluto.UInt32Vector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< unsigned int >::size_type

        """
        return _Pluto.UInt32Vector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< unsigned int >::size_type

        Parameters
        ----------
        self: std::vector< uint32_t > const *

        """
        return _Pluto.UInt32Vector_capacity(self)

    __swig_destroy__ = _Pluto.delete_UInt32Vector
    __del__ = lambda self: None
UInt32Vector_swigregister = _Pluto.UInt32Vector_swigregister
UInt32Vector_swigregister(UInt32Vector)

class UInt16Vector(_object):
    """Proxy of C++ std::vector<(uint16_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt16Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt16Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< uint16_t > *

        """
        return _Pluto.UInt16Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< uint16_t > const *

        """
        return _Pluto.UInt16Vector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< uint16_t > const *

        """
        return _Pluto.UInt16Vector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< unsigned short >::size_type

        Parameters
        ----------
        self: std::vector< uint16_t > const *

        """
        return _Pluto.UInt16Vector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> UInt16Vector

        Parameters
        ----------
        i: std::vector< unsigned short >::difference_type
        j: std::vector< unsigned short >::difference_type

        """
        return _Pluto.UInt16Vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< unsigned short >::difference_type
        j: std::vector< unsigned short >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< unsigned short >::difference_type
        j: std::vector< unsigned short >::difference_type
        v: std::vector< unsigned short,std::allocator< unsigned short > > const &

        """
        return _Pluto.UInt16Vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< unsigned short >::difference_type
        j: std::vector< unsigned short >::difference_type

        """
        return _Pluto.UInt16Vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< unsigned short >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Pluto.UInt16Vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> UInt16Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< unsigned short >::value_type const &

        Parameters
        ----------
        i: std::vector< unsigned short >::difference_type

        """
        return _Pluto.UInt16Vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< unsigned short,std::allocator< unsigned short > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< unsigned short >::difference_type
        x: std::vector< unsigned short >::value_type const &

        """
        return _Pluto.UInt16Vector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> std::vector< unsigned short >::value_type

        Parameters
        ----------
        self: std::vector< uint16_t > *

        """
        return _Pluto.UInt16Vector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< unsigned short >::value_type const &

        """
        return _Pluto.UInt16Vector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< uint16_t > const *

        """
        return _Pluto.UInt16Vector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< unsigned short >::size_type

        Parameters
        ----------
        self: std::vector< uint16_t > const *

        """
        return _Pluto.UInt16Vector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< uint16_t > &

        """
        return _Pluto.UInt16Vector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< unsigned short >::iterator

        Parameters
        ----------
        self: std::vector< uint16_t > *

        """
        return _Pluto.UInt16Vector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< unsigned short >::iterator

        Parameters
        ----------
        self: std::vector< uint16_t > *

        """
        return _Pluto.UInt16Vector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< unsigned short >::reverse_iterator

        Parameters
        ----------
        self: std::vector< uint16_t > *

        """
        return _Pluto.UInt16Vector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< unsigned short >::reverse_iterator

        Parameters
        ----------
        self: std::vector< uint16_t > *

        """
        return _Pluto.UInt16Vector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< uint16_t > *

        """
        return _Pluto.UInt16Vector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< unsigned short >::allocator_type

        Parameters
        ----------
        self: std::vector< uint16_t > const *

        """
        return _Pluto.UInt16Vector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< uint16_t > *

        """
        return _Pluto.UInt16Vector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< unsigned short >::iterator

        Parameters
        ----------
        pos: std::vector< unsigned short >::iterator

        erase(self, first, last) -> std::vector< unsigned short >::iterator

        Parameters
        ----------
        first: std::vector< unsigned short >::iterator
        last: std::vector< unsigned short >::iterator

        """
        return _Pluto.UInt16Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> UInt16Vector
        __init__(self, arg2) -> UInt16Vector

        Parameters
        ----------
        arg2: std::vector< uint16_t > const &

        __init__(self, size) -> UInt16Vector

        Parameters
        ----------
        size: std::vector< unsigned short >::size_type

        __init__(self, size, value) -> UInt16Vector

        Parameters
        ----------
        size: std::vector< unsigned short >::size_type
        value: std::vector< unsigned short >::value_type const &

        """
        this = _Pluto.new_UInt16Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< unsigned short >::value_type const &

        """
        return _Pluto.UInt16Vector_push_back(self, x)


    def front(self):
        """
        front(self) -> std::vector< unsigned short >::value_type const &

        Parameters
        ----------
        self: std::vector< uint16_t > const *

        """
        return _Pluto.UInt16Vector_front(self)


    def back(self):
        """
        back(self) -> std::vector< unsigned short >::value_type const &

        Parameters
        ----------
        self: std::vector< uint16_t > const *

        """
        return _Pluto.UInt16Vector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< unsigned short >::size_type
        x: std::vector< unsigned short >::value_type const &

        """
        return _Pluto.UInt16Vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< unsigned short >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< unsigned short >::size_type
        x: std::vector< unsigned short >::value_type const &

        """
        return _Pluto.UInt16Vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< unsigned short >::iterator

        Parameters
        ----------
        pos: std::vector< unsigned short >::iterator
        x: std::vector< unsigned short >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< unsigned short >::iterator
        n: std::vector< unsigned short >::size_type
        x: std::vector< unsigned short >::value_type const &

        """
        return _Pluto.UInt16Vector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< unsigned short >::size_type

        """
        return _Pluto.UInt16Vector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< unsigned short >::size_type

        Parameters
        ----------
        self: std::vector< uint16_t > const *

        """
        return _Pluto.UInt16Vector_capacity(self)

    __swig_destroy__ = _Pluto.delete_UInt16Vector
    __del__ = lambda self: None
UInt16Vector_swigregister = _Pluto.UInt16Vector_swigregister
UInt16Vector_swigregister(UInt16Vector)

class UInt8Vector(_object):
    """Proxy of C++ std::vector<(uint8_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt8Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt8Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< uint8_t > *

        """
        return _Pluto.UInt8Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< uint8_t > const *

        """
        return _Pluto.UInt8Vector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< uint8_t > const *

        """
        return _Pluto.UInt8Vector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< unsigned char >::size_type

        Parameters
        ----------
        self: std::vector< uint8_t > const *

        """
        return _Pluto.UInt8Vector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> UInt8Vector

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        j: std::vector< unsigned char >::difference_type

        """
        return _Pluto.UInt8Vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        j: std::vector< unsigned char >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        j: std::vector< unsigned char >::difference_type
        v: std::vector< unsigned char,std::allocator< unsigned char > > const &

        """
        return _Pluto.UInt8Vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        j: std::vector< unsigned char >::difference_type

        """
        return _Pluto.UInt8Vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Pluto.UInt8Vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> UInt8Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< unsigned char >::value_type const &

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type

        """
        return _Pluto.UInt8Vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< unsigned char,std::allocator< unsigned char > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        x: std::vector< unsigned char >::value_type const &

        """
        return _Pluto.UInt8Vector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> std::vector< unsigned char >::value_type

        Parameters
        ----------
        self: std::vector< uint8_t > *

        """
        return _Pluto.UInt8Vector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< unsigned char >::value_type const &

        """
        return _Pluto.UInt8Vector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< uint8_t > const *

        """
        return _Pluto.UInt8Vector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< unsigned char >::size_type

        Parameters
        ----------
        self: std::vector< uint8_t > const *

        """
        return _Pluto.UInt8Vector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< uint8_t > &

        """
        return _Pluto.UInt8Vector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< unsigned char >::iterator

        Parameters
        ----------
        self: std::vector< uint8_t > *

        """
        return _Pluto.UInt8Vector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< unsigned char >::iterator

        Parameters
        ----------
        self: std::vector< uint8_t > *

        """
        return _Pluto.UInt8Vector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< unsigned char >::reverse_iterator

        Parameters
        ----------
        self: std::vector< uint8_t > *

        """
        return _Pluto.UInt8Vector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< unsigned char >::reverse_iterator

        Parameters
        ----------
        self: std::vector< uint8_t > *

        """
        return _Pluto.UInt8Vector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< uint8_t > *

        """
        return _Pluto.UInt8Vector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< unsigned char >::allocator_type

        Parameters
        ----------
        self: std::vector< uint8_t > const *

        """
        return _Pluto.UInt8Vector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< uint8_t > *

        """
        return _Pluto.UInt8Vector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< unsigned char >::iterator

        Parameters
        ----------
        pos: std::vector< unsigned char >::iterator

        erase(self, first, last) -> std::vector< unsigned char >::iterator

        Parameters
        ----------
        first: std::vector< unsigned char >::iterator
        last: std::vector< unsigned char >::iterator

        """
        return _Pluto.UInt8Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> UInt8Vector
        __init__(self, arg2) -> UInt8Vector

        Parameters
        ----------
        arg2: std::vector< uint8_t > const &

        __init__(self, size) -> UInt8Vector

        Parameters
        ----------
        size: std::vector< unsigned char >::size_type

        __init__(self, size, value) -> UInt8Vector

        Parameters
        ----------
        size: std::vector< unsigned char >::size_type
        value: std::vector< unsigned char >::value_type const &

        """
        this = _Pluto.new_UInt8Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< unsigned char >::value_type const &

        """
        return _Pluto.UInt8Vector_push_back(self, x)


    def front(self):
        """
        front(self) -> std::vector< unsigned char >::value_type const &

        Parameters
        ----------
        self: std::vector< uint8_t > const *

        """
        return _Pluto.UInt8Vector_front(self)


    def back(self):
        """
        back(self) -> std::vector< unsigned char >::value_type const &

        Parameters
        ----------
        self: std::vector< uint8_t > const *

        """
        return _Pluto.UInt8Vector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< unsigned char >::size_type
        x: std::vector< unsigned char >::value_type const &

        """
        return _Pluto.UInt8Vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< unsigned char >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< unsigned char >::size_type
        x: std::vector< unsigned char >::value_type const &

        """
        return _Pluto.UInt8Vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< unsigned char >::iterator

        Parameters
        ----------
        pos: std::vector< unsigned char >::iterator
        x: std::vector< unsigned char >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< unsigned char >::iterator
        n: std::vector< unsigned char >::size_type
        x: std::vector< unsigned char >::value_type const &

        """
        return _Pluto.UInt8Vector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< unsigned char >::size_type

        """
        return _Pluto.UInt8Vector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< unsigned char >::size_type

        Parameters
        ----------
        self: std::vector< uint8_t > const *

        """
        return _Pluto.UInt8Vector_capacity(self)

    __swig_destroy__ = _Pluto.delete_UInt8Vector
    __del__ = lambda self: None
UInt8Vector_swigregister = _Pluto.UInt8Vector_swigregister
UInt8Vector_swigregister(UInt8Vector)

class Int32Vector(_object):
    """Proxy of C++ std::vector<(int32_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int32Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int32Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< int32_t > *

        """
        return _Pluto.Int32Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< int32_t > const *

        """
        return _Pluto.Int32Vector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< int32_t > const *

        """
        return _Pluto.Int32Vector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int32_t > const *

        """
        return _Pluto.Int32Vector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> Int32Vector

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _Pluto.Int32Vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type
        v: std::vector< int,std::allocator< int > > const &

        """
        return _Pluto.Int32Vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _Pluto.Int32Vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< int >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Pluto.Int32Vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> Int32Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< int >::value_type const &

        Parameters
        ----------
        i: std::vector< int >::difference_type

        """
        return _Pluto.Int32Vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< int,std::allocator< int > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        x: std::vector< int >::value_type const &

        """
        return _Pluto.Int32Vector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> std::vector< int >::value_type

        Parameters
        ----------
        self: std::vector< int32_t > *

        """
        return _Pluto.Int32Vector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _Pluto.Int32Vector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< int32_t > const *

        """
        return _Pluto.Int32Vector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int32_t > const *

        """
        return _Pluto.Int32Vector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< int32_t > &

        """
        return _Pluto.Int32Vector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< int >::iterator

        Parameters
        ----------
        self: std::vector< int32_t > *

        """
        return _Pluto.Int32Vector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< int >::iterator

        Parameters
        ----------
        self: std::vector< int32_t > *

        """
        return _Pluto.Int32Vector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< int >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int32_t > *

        """
        return _Pluto.Int32Vector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< int >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int32_t > *

        """
        return _Pluto.Int32Vector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< int32_t > *

        """
        return _Pluto.Int32Vector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< int >::allocator_type

        Parameters
        ----------
        self: std::vector< int32_t > const *

        """
        return _Pluto.Int32Vector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< int32_t > *

        """
        return _Pluto.Int32Vector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator

        erase(self, first, last) -> std::vector< int >::iterator

        Parameters
        ----------
        first: std::vector< int >::iterator
        last: std::vector< int >::iterator

        """
        return _Pluto.Int32Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> Int32Vector
        __init__(self, arg2) -> Int32Vector

        Parameters
        ----------
        arg2: std::vector< int32_t > const &

        __init__(self, size) -> Int32Vector

        Parameters
        ----------
        size: std::vector< int >::size_type

        __init__(self, size, value) -> Int32Vector

        Parameters
        ----------
        size: std::vector< int >::size_type
        value: std::vector< int >::value_type const &

        """
        this = _Pluto.new_Int32Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _Pluto.Int32Vector_push_back(self, x)


    def front(self):
        """
        front(self) -> std::vector< int >::value_type const &

        Parameters
        ----------
        self: std::vector< int32_t > const *

        """
        return _Pluto.Int32Vector_front(self)


    def back(self):
        """
        back(self) -> std::vector< int >::value_type const &

        Parameters
        ----------
        self: std::vector< int32_t > const *

        """
        return _Pluto.Int32Vector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _Pluto.Int32Vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< int >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _Pluto.Int32Vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator
        x: std::vector< int >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< int >::iterator
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _Pluto.Int32Vector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< int >::size_type

        """
        return _Pluto.Int32Vector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int32_t > const *

        """
        return _Pluto.Int32Vector_capacity(self)

    __swig_destroy__ = _Pluto.delete_Int32Vector
    __del__ = lambda self: None
Int32Vector_swigregister = _Pluto.Int32Vector_swigregister
Int32Vector_swigregister(Int32Vector)

class Int16Vector(_object):
    """Proxy of C++ std::vector<(int16_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int16Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int16Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< int16_t > *

        """
        return _Pluto.Int16Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< int16_t > const *

        """
        return _Pluto.Int16Vector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< int16_t > const *

        """
        return _Pluto.Int16Vector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< short >::size_type

        Parameters
        ----------
        self: std::vector< int16_t > const *

        """
        return _Pluto.Int16Vector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> Int16Vector

        Parameters
        ----------
        i: std::vector< short >::difference_type
        j: std::vector< short >::difference_type

        """
        return _Pluto.Int16Vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< short >::difference_type
        j: std::vector< short >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< short >::difference_type
        j: std::vector< short >::difference_type
        v: std::vector< short,std::allocator< short > > const &

        """
        return _Pluto.Int16Vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< short >::difference_type
        j: std::vector< short >::difference_type

        """
        return _Pluto.Int16Vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< short >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Pluto.Int16Vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> Int16Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< short >::value_type const &

        Parameters
        ----------
        i: std::vector< short >::difference_type

        """
        return _Pluto.Int16Vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< short,std::allocator< short > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< short >::difference_type
        x: std::vector< short >::value_type const &

        """
        return _Pluto.Int16Vector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> std::vector< short >::value_type

        Parameters
        ----------
        self: std::vector< int16_t > *

        """
        return _Pluto.Int16Vector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< short >::value_type const &

        """
        return _Pluto.Int16Vector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< int16_t > const *

        """
        return _Pluto.Int16Vector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< short >::size_type

        Parameters
        ----------
        self: std::vector< int16_t > const *

        """
        return _Pluto.Int16Vector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< int16_t > &

        """
        return _Pluto.Int16Vector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< short >::iterator

        Parameters
        ----------
        self: std::vector< int16_t > *

        """
        return _Pluto.Int16Vector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< short >::iterator

        Parameters
        ----------
        self: std::vector< int16_t > *

        """
        return _Pluto.Int16Vector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< short >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int16_t > *

        """
        return _Pluto.Int16Vector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< short >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int16_t > *

        """
        return _Pluto.Int16Vector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< int16_t > *

        """
        return _Pluto.Int16Vector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< short >::allocator_type

        Parameters
        ----------
        self: std::vector< int16_t > const *

        """
        return _Pluto.Int16Vector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< int16_t > *

        """
        return _Pluto.Int16Vector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< short >::iterator

        Parameters
        ----------
        pos: std::vector< short >::iterator

        erase(self, first, last) -> std::vector< short >::iterator

        Parameters
        ----------
        first: std::vector< short >::iterator
        last: std::vector< short >::iterator

        """
        return _Pluto.Int16Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> Int16Vector
        __init__(self, arg2) -> Int16Vector

        Parameters
        ----------
        arg2: std::vector< int16_t > const &

        __init__(self, size) -> Int16Vector

        Parameters
        ----------
        size: std::vector< short >::size_type

        __init__(self, size, value) -> Int16Vector

        Parameters
        ----------
        size: std::vector< short >::size_type
        value: std::vector< short >::value_type const &

        """
        this = _Pluto.new_Int16Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< short >::value_type const &

        """
        return _Pluto.Int16Vector_push_back(self, x)


    def front(self):
        """
        front(self) -> std::vector< short >::value_type const &

        Parameters
        ----------
        self: std::vector< int16_t > const *

        """
        return _Pluto.Int16Vector_front(self)


    def back(self):
        """
        back(self) -> std::vector< short >::value_type const &

        Parameters
        ----------
        self: std::vector< int16_t > const *

        """
        return _Pluto.Int16Vector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< short >::size_type
        x: std::vector< short >::value_type const &

        """
        return _Pluto.Int16Vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< short >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< short >::size_type
        x: std::vector< short >::value_type const &

        """
        return _Pluto.Int16Vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< short >::iterator

        Parameters
        ----------
        pos: std::vector< short >::iterator
        x: std::vector< short >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< short >::iterator
        n: std::vector< short >::size_type
        x: std::vector< short >::value_type const &

        """
        return _Pluto.Int16Vector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< short >::size_type

        """
        return _Pluto.Int16Vector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< short >::size_type

        Parameters
        ----------
        self: std::vector< int16_t > const *

        """
        return _Pluto.Int16Vector_capacity(self)

    __swig_destroy__ = _Pluto.delete_Int16Vector
    __del__ = lambda self: None
Int16Vector_swigregister = _Pluto.Int16Vector_swigregister
Int16Vector_swigregister(Int16Vector)

class Int8Vector(_object):
    """Proxy of C++ std::vector<(int8_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int8Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int8Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< int8_t > *

        """
        return _Pluto.Int8Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< int8_t > const *

        """
        return _Pluto.Int8Vector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< int8_t > const *

        """
        return _Pluto.Int8Vector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< signed char >::size_type

        Parameters
        ----------
        self: std::vector< int8_t > const *

        """
        return _Pluto.Int8Vector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> Int8Vector

        Parameters
        ----------
        i: std::vector< signed char >::difference_type
        j: std::vector< signed char >::difference_type

        """
        return _Pluto.Int8Vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< signed char >::difference_type
        j: std::vector< signed char >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< signed char >::difference_type
        j: std::vector< signed char >::difference_type
        v: std::vector< signed char,std::allocator< signed char > > const &

        """
        return _Pluto.Int8Vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< signed char >::difference_type
        j: std::vector< signed char >::difference_type

        """
        return _Pluto.Int8Vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< signed char >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Pluto.Int8Vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> Int8Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< signed char >::value_type const &

        Parameters
        ----------
        i: std::vector< signed char >::difference_type

        """
        return _Pluto.Int8Vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< signed char,std::allocator< signed char > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< signed char >::difference_type
        x: std::vector< signed char >::value_type const &

        """
        return _Pluto.Int8Vector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> std::vector< signed char >::value_type

        Parameters
        ----------
        self: std::vector< int8_t > *

        """
        return _Pluto.Int8Vector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< signed char >::value_type const &

        """
        return _Pluto.Int8Vector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< int8_t > const *

        """
        return _Pluto.Int8Vector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< signed char >::size_type

        Parameters
        ----------
        self: std::vector< int8_t > const *

        """
        return _Pluto.Int8Vector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< int8_t > &

        """
        return _Pluto.Int8Vector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< signed char >::iterator

        Parameters
        ----------
        self: std::vector< int8_t > *

        """
        return _Pluto.Int8Vector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< signed char >::iterator

        Parameters
        ----------
        self: std::vector< int8_t > *

        """
        return _Pluto.Int8Vector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< signed char >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int8_t > *

        """
        return _Pluto.Int8Vector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< signed char >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int8_t > *

        """
        return _Pluto.Int8Vector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< int8_t > *

        """
        return _Pluto.Int8Vector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< signed char >::allocator_type

        Parameters
        ----------
        self: std::vector< int8_t > const *

        """
        return _Pluto.Int8Vector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< int8_t > *

        """
        return _Pluto.Int8Vector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< signed char >::iterator

        Parameters
        ----------
        pos: std::vector< signed char >::iterator

        erase(self, first, last) -> std::vector< signed char >::iterator

        Parameters
        ----------
        first: std::vector< signed char >::iterator
        last: std::vector< signed char >::iterator

        """
        return _Pluto.Int8Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> Int8Vector
        __init__(self, arg2) -> Int8Vector

        Parameters
        ----------
        arg2: std::vector< int8_t > const &

        __init__(self, size) -> Int8Vector

        Parameters
        ----------
        size: std::vector< signed char >::size_type

        __init__(self, size, value) -> Int8Vector

        Parameters
        ----------
        size: std::vector< signed char >::size_type
        value: std::vector< signed char >::value_type const &

        """
        this = _Pluto.new_Int8Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< signed char >::value_type const &

        """
        return _Pluto.Int8Vector_push_back(self, x)


    def front(self):
        """
        front(self) -> std::vector< signed char >::value_type const &

        Parameters
        ----------
        self: std::vector< int8_t > const *

        """
        return _Pluto.Int8Vector_front(self)


    def back(self):
        """
        back(self) -> std::vector< signed char >::value_type const &

        Parameters
        ----------
        self: std::vector< int8_t > const *

        """
        return _Pluto.Int8Vector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< signed char >::size_type
        x: std::vector< signed char >::value_type const &

        """
        return _Pluto.Int8Vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< signed char >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< signed char >::size_type
        x: std::vector< signed char >::value_type const &

        """
        return _Pluto.Int8Vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< signed char >::iterator

        Parameters
        ----------
        pos: std::vector< signed char >::iterator
        x: std::vector< signed char >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< signed char >::iterator
        n: std::vector< signed char >::size_type
        x: std::vector< signed char >::value_type const &

        """
        return _Pluto.Int8Vector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< signed char >::size_type

        """
        return _Pluto.Int8Vector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< signed char >::size_type

        Parameters
        ----------
        self: std::vector< int8_t > const *

        """
        return _Pluto.Int8Vector_capacity(self)

    __swig_destroy__ = _Pluto.delete_Int8Vector
    __del__ = lambda self: None
Int8Vector_swigregister = _Pluto.Int8Vector_swigregister
Int8Vector_swigregister(Int8Vector)

class DoubleVector(_object):
    """Proxy of C++ std::vector<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _Pluto.DoubleVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _Pluto.DoubleVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _Pluto.DoubleVector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _Pluto.DoubleVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> DoubleVector

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _Pluto.DoubleVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _Pluto.DoubleVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _Pluto.DoubleVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Pluto.DoubleVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> DoubleVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _Pluto.DoubleVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _Pluto.DoubleVector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> std::vector< double >::value_type

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _Pluto.DoubleVector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _Pluto.DoubleVector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _Pluto.DoubleVector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _Pluto.DoubleVector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _Pluto.DoubleVector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _Pluto.DoubleVector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _Pluto.DoubleVector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _Pluto.DoubleVector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _Pluto.DoubleVector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _Pluto.DoubleVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< double >::allocator_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _Pluto.DoubleVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _Pluto.DoubleVector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(self, first, last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _Pluto.DoubleVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> DoubleVector
        __init__(self, arg2) -> DoubleVector

        Parameters
        ----------
        arg2: std::vector< double > const &

        __init__(self, size) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(self, size, value) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        this = _Pluto.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _Pluto.DoubleVector_push_back(self, x)


    def front(self):
        """
        front(self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _Pluto.DoubleVector_front(self)


    def back(self):
        """
        back(self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _Pluto.DoubleVector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _Pluto.DoubleVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _Pluto.DoubleVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _Pluto.DoubleVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _Pluto.DoubleVector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _Pluto.DoubleVector_capacity(self)

    __swig_destroy__ = _Pluto.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _Pluto.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector(_object):
    """Proxy of C++ std::vector<(float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _Pluto.FloatVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _Pluto.FloatVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _Pluto.FloatVector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< float >::size_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _Pluto.FloatVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> FloatVector

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        """
        return _Pluto.FloatVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type
        v: std::vector< float,std::allocator< float > > const &

        """
        return _Pluto.FloatVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        """
        return _Pluto.FloatVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< float >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Pluto.FloatVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> FloatVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< float >::value_type const &

        Parameters
        ----------
        i: std::vector< float >::difference_type

        """
        return _Pluto.FloatVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< float,std::allocator< float > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        x: std::vector< float >::value_type const &

        """
        return _Pluto.FloatVector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> std::vector< float >::value_type

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _Pluto.FloatVector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< float >::value_type const &

        """
        return _Pluto.FloatVector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _Pluto.FloatVector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< float >::size_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _Pluto.FloatVector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< float > &

        """
        return _Pluto.FloatVector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< float >::iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _Pluto.FloatVector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< float >::iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _Pluto.FloatVector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< float >::reverse_iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _Pluto.FloatVector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< float >::reverse_iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _Pluto.FloatVector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _Pluto.FloatVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< float >::allocator_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _Pluto.FloatVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _Pluto.FloatVector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< float >::iterator

        Parameters
        ----------
        pos: std::vector< float >::iterator

        erase(self, first, last) -> std::vector< float >::iterator

        Parameters
        ----------
        first: std::vector< float >::iterator
        last: std::vector< float >::iterator

        """
        return _Pluto.FloatVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> FloatVector
        __init__(self, arg2) -> FloatVector

        Parameters
        ----------
        arg2: std::vector< float > const &

        __init__(self, size) -> FloatVector

        Parameters
        ----------
        size: std::vector< float >::size_type

        __init__(self, size, value) -> FloatVector

        Parameters
        ----------
        size: std::vector< float >::size_type
        value: std::vector< float >::value_type const &

        """
        this = _Pluto.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< float >::value_type const &

        """
        return _Pluto.FloatVector_push_back(self, x)


    def front(self):
        """
        front(self) -> std::vector< float >::value_type const &

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _Pluto.FloatVector_front(self)


    def back(self):
        """
        back(self) -> std::vector< float >::value_type const &

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _Pluto.FloatVector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _Pluto.FloatVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< float >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _Pluto.FloatVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< float >::iterator

        Parameters
        ----------
        pos: std::vector< float >::iterator
        x: std::vector< float >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< float >::iterator
        n: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _Pluto.FloatVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< float >::size_type

        """
        return _Pluto.FloatVector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< float >::size_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _Pluto.FloatVector_capacity(self)

    __swig_destroy__ = _Pluto.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _Pluto.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class StringVector(_object):
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _Pluto.StringVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _Pluto.StringVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _Pluto.StringVector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _Pluto.StringVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> StringVector

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _Pluto.StringVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _Pluto.StringVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _Pluto.StringVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Pluto.StringVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> StringVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _Pluto.StringVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _Pluto.StringVector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> std::vector< std::string >::value_type

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _Pluto.StringVector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _Pluto.StringVector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _Pluto.StringVector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _Pluto.StringVector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _Pluto.StringVector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _Pluto.StringVector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _Pluto.StringVector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _Pluto.StringVector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _Pluto.StringVector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _Pluto.StringVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< std::string >::allocator_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _Pluto.StringVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _Pluto.StringVector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(self, first, last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _Pluto.StringVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> StringVector
        __init__(self, arg2) -> StringVector

        Parameters
        ----------
        arg2: std::vector< std::string > const &

        __init__(self, size) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(self, size, value) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        this = _Pluto.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _Pluto.StringVector_push_back(self, x)


    def front(self):
        """
        front(self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _Pluto.StringVector_front(self)


    def back(self):
        """
        back(self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _Pluto.StringVector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _Pluto.StringVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _Pluto.StringVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _Pluto.StringVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _Pluto.StringVector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _Pluto.StringVector_capacity(self)

    __swig_destroy__ = _Pluto.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _Pluto.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntSet(_object):
    """Proxy of C++ std::set<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::set< int > *

        """
        return _Pluto.IntSet_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::set< int > const *

        """
        return _Pluto.IntSet___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::set< int > const *

        """
        return _Pluto.IntSet___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::set< int >::size_type

        Parameters
        ----------
        self: std::set< int > const *

        """
        return _Pluto.IntSet___len__(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::set< int >::value_type

        """
        return _Pluto.IntSet_append(self, x)


    def __contains__(self, x):
        """
        __contains__(self, x) -> bool

        Parameters
        ----------
        x: std::set< int >::value_type

        """
        return _Pluto.IntSet___contains__(self, x)


    def __getitem__(self, i):
        """
        __getitem__(self, i) -> std::set< int >::value_type

        Parameters
        ----------
        i: std::set< int >::difference_type

        """
        return _Pluto.IntSet___getitem__(self, i)


    def add(self, x):
        """
        add(self, x)

        Parameters
        ----------
        x: std::set< int >::value_type

        """
        return _Pluto.IntSet_add(self, x)


    def discard(self, x):
        """
        discard(self, x)

        Parameters
        ----------
        x: std::set< int >::value_type

        """
        return _Pluto.IntSet_discard(self, x)


    def __init__(self, *args):
        """
        __init__(self, arg2) -> IntSet

        Parameters
        ----------
        arg2: std::less< int > const &

        __init__(self) -> IntSet
        __init__(self, arg2) -> IntSet

        Parameters
        ----------
        arg2: std::set< int > const &

        """
        this = _Pluto.new_IntSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::set< int > const *

        """
        return _Pluto.IntSet_empty(self)


    def size(self):
        """
        size(self) -> std::set< int >::size_type

        Parameters
        ----------
        self: std::set< int > const *

        """
        return _Pluto.IntSet_size(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::set< int > *

        """
        return _Pluto.IntSet_clear(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::set< int > &

        """
        return _Pluto.IntSet_swap(self, v)


    def count(self, x):
        """
        count(self, x) -> std::set< int >::size_type

        Parameters
        ----------
        x: std::set< int >::key_type const &

        """
        return _Pluto.IntSet_count(self, x)


    def begin(self):
        """
        begin(self) -> std::set< int >::iterator

        Parameters
        ----------
        self: std::set< int > *

        """
        return _Pluto.IntSet_begin(self)


    def end(self):
        """
        end(self) -> std::set< int >::iterator

        Parameters
        ----------
        self: std::set< int > *

        """
        return _Pluto.IntSet_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::set< int >::reverse_iterator

        Parameters
        ----------
        self: std::set< int > *

        """
        return _Pluto.IntSet_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::set< int >::reverse_iterator

        Parameters
        ----------
        self: std::set< int > *

        """
        return _Pluto.IntSet_rend(self)


    def erase(self, *args):
        """
        erase(self, x) -> std::set< int >::size_type

        Parameters
        ----------
        x: std::set< int >::key_type const &

        erase(self, pos)

        Parameters
        ----------
        pos: std::set< int >::iterator

        erase(self, first, last)

        Parameters
        ----------
        first: std::set< int >::iterator
        last: std::set< int >::iterator

        """
        return _Pluto.IntSet_erase(self, *args)


    def find(self, x):
        """
        find(self, x) -> std::set< int >::iterator

        Parameters
        ----------
        x: std::set< int >::key_type const &

        """
        return _Pluto.IntSet_find(self, x)


    def lower_bound(self, x):
        """
        lower_bound(self, x) -> std::set< int >::iterator

        Parameters
        ----------
        x: std::set< int >::key_type const &

        """
        return _Pluto.IntSet_lower_bound(self, x)


    def upper_bound(self, x):
        """
        upper_bound(self, x) -> std::set< int >::iterator

        Parameters
        ----------
        x: std::set< int >::key_type const &

        """
        return _Pluto.IntSet_upper_bound(self, x)


    def equal_range(self, x):
        """
        equal_range(self, x) -> std::pair< std::set< int >::iterator,std::set< int >::iterator >

        Parameters
        ----------
        x: std::set< int >::key_type const &

        """
        return _Pluto.IntSet_equal_range(self, x)


    def insert(self, __x):
        """
        insert(self, __x) -> std::pair< std::set< int >::iterator,bool >

        Parameters
        ----------
        __x: std::set< int >::value_type const &

        """
        return _Pluto.IntSet_insert(self, __x)

    __swig_destroy__ = _Pluto.delete_IntSet
    __del__ = lambda self: None
IntSet_swigregister = _Pluto.IntSet_swigregister
IntSet_swigregister(IntSet)

class DoubleSet(_object):
    """Proxy of C++ std::set<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::set< double > *

        """
        return _Pluto.DoubleSet_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::set< double > const *

        """
        return _Pluto.DoubleSet___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::set< double > const *

        """
        return _Pluto.DoubleSet___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::set< double >::size_type

        Parameters
        ----------
        self: std::set< double > const *

        """
        return _Pluto.DoubleSet___len__(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::set< double >::value_type

        """
        return _Pluto.DoubleSet_append(self, x)


    def __contains__(self, x):
        """
        __contains__(self, x) -> bool

        Parameters
        ----------
        x: std::set< double >::value_type

        """
        return _Pluto.DoubleSet___contains__(self, x)


    def __getitem__(self, i):
        """
        __getitem__(self, i) -> std::set< double >::value_type

        Parameters
        ----------
        i: std::set< double >::difference_type

        """
        return _Pluto.DoubleSet___getitem__(self, i)


    def add(self, x):
        """
        add(self, x)

        Parameters
        ----------
        x: std::set< double >::value_type

        """
        return _Pluto.DoubleSet_add(self, x)


    def discard(self, x):
        """
        discard(self, x)

        Parameters
        ----------
        x: std::set< double >::value_type

        """
        return _Pluto.DoubleSet_discard(self, x)


    def __init__(self, *args):
        """
        __init__(self, arg2) -> DoubleSet

        Parameters
        ----------
        arg2: std::less< double > const &

        __init__(self) -> DoubleSet
        __init__(self, arg2) -> DoubleSet

        Parameters
        ----------
        arg2: std::set< double > const &

        """
        this = _Pluto.new_DoubleSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::set< double > const *

        """
        return _Pluto.DoubleSet_empty(self)


    def size(self):
        """
        size(self) -> std::set< double >::size_type

        Parameters
        ----------
        self: std::set< double > const *

        """
        return _Pluto.DoubleSet_size(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::set< double > *

        """
        return _Pluto.DoubleSet_clear(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::set< double > &

        """
        return _Pluto.DoubleSet_swap(self, v)


    def count(self, x):
        """
        count(self, x) -> std::set< double >::size_type

        Parameters
        ----------
        x: std::set< double >::key_type const &

        """
        return _Pluto.DoubleSet_count(self, x)


    def begin(self):
        """
        begin(self) -> std::set< double >::iterator

        Parameters
        ----------
        self: std::set< double > *

        """
        return _Pluto.DoubleSet_begin(self)


    def end(self):
        """
        end(self) -> std::set< double >::iterator

        Parameters
        ----------
        self: std::set< double > *

        """
        return _Pluto.DoubleSet_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::set< double >::reverse_iterator

        Parameters
        ----------
        self: std::set< double > *

        """
        return _Pluto.DoubleSet_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::set< double >::reverse_iterator

        Parameters
        ----------
        self: std::set< double > *

        """
        return _Pluto.DoubleSet_rend(self)


    def erase(self, *args):
        """
        erase(self, x) -> std::set< double >::size_type

        Parameters
        ----------
        x: std::set< double >::key_type const &

        erase(self, pos)

        Parameters
        ----------
        pos: std::set< double >::iterator

        erase(self, first, last)

        Parameters
        ----------
        first: std::set< double >::iterator
        last: std::set< double >::iterator

        """
        return _Pluto.DoubleSet_erase(self, *args)


    def find(self, x):
        """
        find(self, x) -> std::set< double >::iterator

        Parameters
        ----------
        x: std::set< double >::key_type const &

        """
        return _Pluto.DoubleSet_find(self, x)


    def lower_bound(self, x):
        """
        lower_bound(self, x) -> std::set< double >::iterator

        Parameters
        ----------
        x: std::set< double >::key_type const &

        """
        return _Pluto.DoubleSet_lower_bound(self, x)


    def upper_bound(self, x):
        """
        upper_bound(self, x) -> std::set< double >::iterator

        Parameters
        ----------
        x: std::set< double >::key_type const &

        """
        return _Pluto.DoubleSet_upper_bound(self, x)


    def equal_range(self, x):
        """
        equal_range(self, x) -> std::pair< std::set< double >::iterator,std::set< double >::iterator >

        Parameters
        ----------
        x: std::set< double >::key_type const &

        """
        return _Pluto.DoubleSet_equal_range(self, x)


    def insert(self, __x):
        """
        insert(self, __x) -> std::pair< std::set< double >::iterator,bool >

        Parameters
        ----------
        __x: std::set< double >::value_type const &

        """
        return _Pluto.DoubleSet_insert(self, __x)

    __swig_destroy__ = _Pluto.delete_DoubleSet
    __del__ = lambda self: None
DoubleSet_swigregister = _Pluto.DoubleSet_swigregister
DoubleSet_swigregister(DoubleSet)

class FloatSet(_object):
    """Proxy of C++ std::set<(float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::set< float > *

        """
        return _Pluto.FloatSet_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::set< float > const *

        """
        return _Pluto.FloatSet___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::set< float > const *

        """
        return _Pluto.FloatSet___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::set< float >::size_type

        Parameters
        ----------
        self: std::set< float > const *

        """
        return _Pluto.FloatSet___len__(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::set< float >::value_type

        """
        return _Pluto.FloatSet_append(self, x)


    def __contains__(self, x):
        """
        __contains__(self, x) -> bool

        Parameters
        ----------
        x: std::set< float >::value_type

        """
        return _Pluto.FloatSet___contains__(self, x)


    def __getitem__(self, i):
        """
        __getitem__(self, i) -> std::set< float >::value_type

        Parameters
        ----------
        i: std::set< float >::difference_type

        """
        return _Pluto.FloatSet___getitem__(self, i)


    def add(self, x):
        """
        add(self, x)

        Parameters
        ----------
        x: std::set< float >::value_type

        """
        return _Pluto.FloatSet_add(self, x)


    def discard(self, x):
        """
        discard(self, x)

        Parameters
        ----------
        x: std::set< float >::value_type

        """
        return _Pluto.FloatSet_discard(self, x)


    def __init__(self, *args):
        """
        __init__(self, arg2) -> FloatSet

        Parameters
        ----------
        arg2: std::less< float > const &

        __init__(self) -> FloatSet
        __init__(self, arg2) -> FloatSet

        Parameters
        ----------
        arg2: std::set< float > const &

        """
        this = _Pluto.new_FloatSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::set< float > const *

        """
        return _Pluto.FloatSet_empty(self)


    def size(self):
        """
        size(self) -> std::set< float >::size_type

        Parameters
        ----------
        self: std::set< float > const *

        """
        return _Pluto.FloatSet_size(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::set< float > *

        """
        return _Pluto.FloatSet_clear(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::set< float > &

        """
        return _Pluto.FloatSet_swap(self, v)


    def count(self, x):
        """
        count(self, x) -> std::set< float >::size_type

        Parameters
        ----------
        x: std::set< float >::key_type const &

        """
        return _Pluto.FloatSet_count(self, x)


    def begin(self):
        """
        begin(self) -> std::set< float >::iterator

        Parameters
        ----------
        self: std::set< float > *

        """
        return _Pluto.FloatSet_begin(self)


    def end(self):
        """
        end(self) -> std::set< float >::iterator

        Parameters
        ----------
        self: std::set< float > *

        """
        return _Pluto.FloatSet_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::set< float >::reverse_iterator

        Parameters
        ----------
        self: std::set< float > *

        """
        return _Pluto.FloatSet_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::set< float >::reverse_iterator

        Parameters
        ----------
        self: std::set< float > *

        """
        return _Pluto.FloatSet_rend(self)


    def erase(self, *args):
        """
        erase(self, x) -> std::set< float >::size_type

        Parameters
        ----------
        x: std::set< float >::key_type const &

        erase(self, pos)

        Parameters
        ----------
        pos: std::set< float >::iterator

        erase(self, first, last)

        Parameters
        ----------
        first: std::set< float >::iterator
        last: std::set< float >::iterator

        """
        return _Pluto.FloatSet_erase(self, *args)


    def find(self, x):
        """
        find(self, x) -> std::set< float >::iterator

        Parameters
        ----------
        x: std::set< float >::key_type const &

        """
        return _Pluto.FloatSet_find(self, x)


    def lower_bound(self, x):
        """
        lower_bound(self, x) -> std::set< float >::iterator

        Parameters
        ----------
        x: std::set< float >::key_type const &

        """
        return _Pluto.FloatSet_lower_bound(self, x)


    def upper_bound(self, x):
        """
        upper_bound(self, x) -> std::set< float >::iterator

        Parameters
        ----------
        x: std::set< float >::key_type const &

        """
        return _Pluto.FloatSet_upper_bound(self, x)


    def equal_range(self, x):
        """
        equal_range(self, x) -> std::pair< std::set< float >::iterator,std::set< float >::iterator >

        Parameters
        ----------
        x: std::set< float >::key_type const &

        """
        return _Pluto.FloatSet_equal_range(self, x)


    def insert(self, __x):
        """
        insert(self, __x) -> std::pair< std::set< float >::iterator,bool >

        Parameters
        ----------
        __x: std::set< float >::value_type const &

        """
        return _Pluto.FloatSet_insert(self, __x)

    __swig_destroy__ = _Pluto.delete_FloatSet
    __del__ = lambda self: None
FloatSet_swigregister = _Pluto.FloatSet_swigregister
FloatSet_swigregister(FloatSet)

class StringSet(_object):
    """Proxy of C++ std::set<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::set< std::string > *

        """
        return _Pluto.StringSet_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::set< std::string > const *

        """
        return _Pluto.StringSet___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::set< std::string > const *

        """
        return _Pluto.StringSet___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::set< std::string >::size_type

        Parameters
        ----------
        self: std::set< std::string > const *

        """
        return _Pluto.StringSet___len__(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::set< std::string >::value_type

        """
        return _Pluto.StringSet_append(self, x)


    def __contains__(self, x):
        """
        __contains__(self, x) -> bool

        Parameters
        ----------
        x: std::set< std::string >::value_type

        """
        return _Pluto.StringSet___contains__(self, x)


    def __getitem__(self, i):
        """
        __getitem__(self, i) -> std::set< std::string >::value_type

        Parameters
        ----------
        i: std::set< std::string >::difference_type

        """
        return _Pluto.StringSet___getitem__(self, i)


    def add(self, x):
        """
        add(self, x)

        Parameters
        ----------
        x: std::set< std::string >::value_type

        """
        return _Pluto.StringSet_add(self, x)


    def discard(self, x):
        """
        discard(self, x)

        Parameters
        ----------
        x: std::set< std::string >::value_type

        """
        return _Pluto.StringSet_discard(self, x)


    def __init__(self, *args):
        """
        __init__(self, arg2) -> StringSet

        Parameters
        ----------
        arg2: std::less< std::string > const &

        __init__(self) -> StringSet
        __init__(self, arg2) -> StringSet

        Parameters
        ----------
        arg2: std::set< std::string > const &

        """
        this = _Pluto.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::set< std::string > const *

        """
        return _Pluto.StringSet_empty(self)


    def size(self):
        """
        size(self) -> std::set< std::string >::size_type

        Parameters
        ----------
        self: std::set< std::string > const *

        """
        return _Pluto.StringSet_size(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::set< std::string > *

        """
        return _Pluto.StringSet_clear(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::set< std::string > &

        """
        return _Pluto.StringSet_swap(self, v)


    def count(self, x):
        """
        count(self, x) -> std::set< std::string >::size_type

        Parameters
        ----------
        x: std::set< std::string >::key_type const &

        """
        return _Pluto.StringSet_count(self, x)


    def begin(self):
        """
        begin(self) -> std::set< std::string >::iterator

        Parameters
        ----------
        self: std::set< std::string > *

        """
        return _Pluto.StringSet_begin(self)


    def end(self):
        """
        end(self) -> std::set< std::string >::iterator

        Parameters
        ----------
        self: std::set< std::string > *

        """
        return _Pluto.StringSet_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::set< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::set< std::string > *

        """
        return _Pluto.StringSet_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::set< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::set< std::string > *

        """
        return _Pluto.StringSet_rend(self)


    def erase(self, *args):
        """
        erase(self, x) -> std::set< std::string >::size_type

        Parameters
        ----------
        x: std::set< std::string >::key_type const &

        erase(self, pos)

        Parameters
        ----------
        pos: std::set< std::string >::iterator

        erase(self, first, last)

        Parameters
        ----------
        first: std::set< std::string >::iterator
        last: std::set< std::string >::iterator

        """
        return _Pluto.StringSet_erase(self, *args)


    def find(self, x):
        """
        find(self, x) -> std::set< std::string >::iterator

        Parameters
        ----------
        x: std::set< std::string >::key_type const &

        """
        return _Pluto.StringSet_find(self, x)


    def lower_bound(self, x):
        """
        lower_bound(self, x) -> std::set< std::string >::iterator

        Parameters
        ----------
        x: std::set< std::string >::key_type const &

        """
        return _Pluto.StringSet_lower_bound(self, x)


    def upper_bound(self, x):
        """
        upper_bound(self, x) -> std::set< std::string >::iterator

        Parameters
        ----------
        x: std::set< std::string >::key_type const &

        """
        return _Pluto.StringSet_upper_bound(self, x)


    def equal_range(self, x):
        """
        equal_range(self, x) -> std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator >

        Parameters
        ----------
        x: std::set< std::string >::key_type const &

        """
        return _Pluto.StringSet_equal_range(self, x)


    def insert(self, __x):
        """
        insert(self, __x) -> std::pair< std::set< std::string >::iterator,bool >

        Parameters
        ----------
        __x: std::set< std::string >::value_type const &

        """
        return _Pluto.StringSet_insert(self, __x)

    __swig_destroy__ = _Pluto.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _Pluto.StringSet_swigregister
StringSet_swigregister(StringSet)

import Pluto.Libraries.GLM

def Initialize(*args):
    """
    Initialize(useGLFW=True, useOpenVR=False, validation_layers, instance_extensions, device_extensions, device_features)

    Parameters
    ----------
    useGLFW: bool
    useOpenVR: bool
    validation_layers: std::set< std::string,std::less< std::string >,std::allocator< std::string > >
    instance_extensions: std::set< std::string,std::less< std::string >,std::allocator< std::string > >
    device_extensions: std::set< std::string,std::less< std::string >,std::allocator< std::string > >
    device_features: std::set< std::string,std::less< std::string >,std::allocator< std::string > >

    Initialize(useGLFW=True, useOpenVR=False, validation_layers, instance_extensions, device_extensions)

    Parameters
    ----------
    useGLFW: bool
    useOpenVR: bool
    validation_layers: std::set< std::string,std::less< std::string >,std::allocator< std::string > >
    instance_extensions: std::set< std::string,std::less< std::string >,std::allocator< std::string > >
    device_extensions: std::set< std::string,std::less< std::string >,std::allocator< std::string > >

    Initialize(useGLFW=True, useOpenVR=False, validation_layers, instance_extensions)

    Parameters
    ----------
    useGLFW: bool
    useOpenVR: bool
    validation_layers: std::set< std::string,std::less< std::string >,std::allocator< std::string > >
    instance_extensions: std::set< std::string,std::less< std::string >,std::allocator< std::string > >

    Initialize(useGLFW=True, useOpenVR=False, validation_layers)

    Parameters
    ----------
    useGLFW: bool
    useOpenVR: bool
    validation_layers: std::set< std::string,std::less< std::string >,std::allocator< std::string > >

    Initialize(useGLFW=True, useOpenVR=False)

    Parameters
    ----------
    useGLFW: bool
    useOpenVR: bool

    Initialize(useGLFW=True)

    Parameters
    ----------
    useGLFW: bool

    Initialize()
    """
    return _Pluto.Initialize(*args)

def CleanUp():
    """CleanUp()"""
    return _Pluto.CleanUp()
class Singleton(_object):
    """Proxy of C++ Singleton class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def is_initialized(self):
        """
        is_initialized(self) -> bool

        Parameters
        ----------
        self: Singleton const *

        """
        return _Pluto.Singleton_is_initialized(self)

Singleton_swigregister = _Pluto.Singleton_swigregister
Singleton_swigregister(Singleton)

class StaticFactory(_object):
    """Proxy of C++ StaticFactory class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StaticFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StaticFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def to_string(self):
        """
        to_string(self) -> std::string

        Parameters
        ----------
        self: StaticFactory *

        """
        return _Pluto.StaticFactory_to_string(self)


    def get_name(self):
        """
        get_name(self) -> std::string

        Parameters
        ----------
        self: StaticFactory *

        """
        return _Pluto.StaticFactory_get_name(self)


    def get_id(self):
        """
        get_id(self) -> int32_t

        Parameters
        ----------
        self: StaticFactory *

        """
        return _Pluto.StaticFactory_get_id(self)


    def is_initialized(self):
        """
        is_initialized(self) -> bool

        Parameters
        ----------
        self: StaticFactory *

        """
        return _Pluto.StaticFactory_is_initialized(self)


    def DoesItemExist(lookupTable, name):
        """
        DoesItemExist(lookupTable, name) -> bool

        Parameters
        ----------
        lookupTable: std::map< std::string,uint32_t,std::less< std::string >,std::allocator< std::pair< std::string const,uint32_t > > > &
        name: std::string

        """
        return _Pluto.StaticFactory_DoesItemExist(lookupTable, name)

    DoesItemExist = staticmethod(DoesItemExist)
    __swig_destroy__ = _Pluto.delete_StaticFactory
    __del__ = lambda self: None
StaticFactory_swigregister = _Pluto.StaticFactory_swigregister
StaticFactory_swigregister(StaticFactory)

def StaticFactory_DoesItemExist(lookupTable, name):
    """
    StaticFactory_DoesItemExist(lookupTable, name) -> bool

    Parameters
    ----------
    lookupTable: std::map< std::string,uint32_t,std::less< std::string >,std::allocator< std::pair< std::string const,uint32_t > > > &
    name: std::string

    """
    return _Pluto.StaticFactory_DoesItemExist(lookupTable, name)

class Transform(StaticFactory):
    """Proxy of C++ Transform class."""

    __swig_setmethods__ = {}
    for _s in [StaticFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transform, name, value)
    __swig_getmethods__ = {}
    for _s in [StaticFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Transform, name)

    def Create(name):
        """
        Create(name) -> Transform

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Transform_Create(name)

    Create = staticmethod(Create)

    def Get(*args):
        """
        Get(name) -> Transform

        Parameters
        ----------
        name: std::string

        Get(id) -> Transform

        Parameters
        ----------
        id: uint32_t

        """
        return _Pluto.Transform_Get(*args)

    Get = staticmethod(Get)

    def GetFront():
        """GetFront() -> Transform"""
        return _Pluto.Transform_GetFront()

    GetFront = staticmethod(GetFront)

    def GetCount():
        """GetCount() -> uint32_t"""
        return _Pluto.Transform_GetCount()

    GetCount = staticmethod(GetCount)

    def Delete(*args):
        """
        Delete(name)

        Parameters
        ----------
        name: std::string

        Delete(id)

        Parameters
        ----------
        id: uint32_t

        """
        return _Pluto.Transform_Delete(*args)

    Delete = staticmethod(Delete)

    def Initialize():
        """Initialize()"""
        return _Pluto.Transform_Initialize()

    Initialize = staticmethod(Initialize)

    def UploadSSBO():
        """UploadSSBO()"""
        return _Pluto.Transform_UploadSSBO()

    UploadSSBO = staticmethod(UploadSSBO)

    def GetSSBO():
        """GetSSBO() -> vk::Buffer"""
        return _Pluto.Transform_GetSSBO()

    GetSSBO = staticmethod(GetSSBO)

    def GetSSBOSize():
        """GetSSBOSize() -> uint32_t"""
        return _Pluto.Transform_GetSSBOSize()

    GetSSBOSize = staticmethod(GetSSBOSize)

    def CleanUp():
        """CleanUp()"""
        return _Pluto.Transform_CleanUp()

    CleanUp = staticmethod(CleanUp)

    def __init__(self, *args):
        """
        __init__(self) -> Transform
        __init__(self, name, id) -> Transform

        Parameters
        ----------
        name: std::string
        id: uint32_t

        """
        this = _Pluto.new_Transform(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def to_string(self):
        """
        to_string(self) -> std::string

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_to_string(self)


    def transform_direction(self, direction):
        """
        transform_direction(self, direction) -> vec3

        Parameters
        ----------
        direction: glm::vec3

        """
        return _Pluto.Transform_transform_direction(self, direction)


    def transform_point(self, point):
        """
        transform_point(self, point) -> vec3

        Parameters
        ----------
        point: glm::vec3

        """
        return _Pluto.Transform_transform_point(self, point)


    def transform_vector(self, vector):
        """
        transform_vector(self, vector) -> vec3

        Parameters
        ----------
        vector: glm::vec3

        """
        return _Pluto.Transform_transform_vector(self, vector)


    def inverse_transform_direction(self, direction):
        """
        inverse_transform_direction(self, direction) -> vec3

        Parameters
        ----------
        direction: glm::vec3

        """
        return _Pluto.Transform_inverse_transform_direction(self, direction)


    def inverse_transform_point(self, point):
        """
        inverse_transform_point(self, point) -> vec3

        Parameters
        ----------
        point: glm::vec3

        """
        return _Pluto.Transform_inverse_transform_point(self, point)


    def inverse_transform_vector(self, vector):
        """
        inverse_transform_vector(self, vector) -> vec3

        Parameters
        ----------
        vector: glm::vec3

        """
        return _Pluto.Transform_inverse_transform_vector(self, vector)


    def rotate_around(self, *args):
        """
        rotate_around(self, point, axis, angle)

        Parameters
        ----------
        point: glm::vec3
        axis: glm::vec3
        angle: float

        rotate_around(self, point, rot)

        Parameters
        ----------
        point: glm::vec3
        rot: glm::quat

        """
        return _Pluto.Transform_rotate_around(self, *args)


    def set_transform(self, transformation, decompose=True):
        """
        set_transform(self, transformation, decompose=True)

        Parameters
        ----------
        transformation: glm::mat4
        decompose: bool

        set_transform(self, transformation)

        Parameters
        ----------
        transformation: glm::mat4

        """
        return _Pluto.Transform_set_transform(self, transformation, decompose)


    def get_rotation(self):
        """
        get_rotation(self) -> quat

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_get_rotation(self)


    def set_rotation(self, *args):
        """
        set_rotation(self, newRotation)

        Parameters
        ----------
        newRotation: glm::quat

        set_rotation(self, angle, axis)

        Parameters
        ----------
        angle: float
        axis: glm::vec3

        """
        return _Pluto.Transform_set_rotation(self, *args)


    def add_rotation(self, *args):
        """
        add_rotation(self, additionalRotation)

        Parameters
        ----------
        additionalRotation: glm::quat

        add_rotation(self, angle, axis)

        Parameters
        ----------
        angle: float
        axis: glm::vec3

        """
        return _Pluto.Transform_add_rotation(self, *args)


    def update_rotation(self):
        """
        update_rotation(self)

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_update_rotation(self)


    def get_position(self):
        """
        get_position(self) -> vec3

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_get_position(self)


    def get_right(self):
        """
        get_right(self) -> vec3

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_get_right(self)


    def get_up(self):
        """
        get_up(self) -> vec3

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_get_up(self)


    def get_forward(self):
        """
        get_forward(self) -> vec3

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_get_forward(self)


    def set_position(self, *args):
        """
        set_position(self, newPosition)

        Parameters
        ----------
        newPosition: glm::vec3

        set_position(self, x, y, z)

        Parameters
        ----------
        x: float
        y: float
        z: float

        """
        return _Pluto.Transform_set_position(self, *args)


    def add_position(self, *args):
        """
        add_position(self, additionalPosition)

        Parameters
        ----------
        additionalPosition: glm::vec3

        add_position(self, dx, dy, dz)

        Parameters
        ----------
        dx: float
        dy: float
        dz: float

        """
        return _Pluto.Transform_add_position(self, *args)


    def update_position(self):
        """
        update_position(self)

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_update_position(self)


    def get_scale(self):
        """
        get_scale(self) -> vec3

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_get_scale(self)


    def set_scale(self, *args):
        """
        set_scale(self, newScale)

        Parameters
        ----------
        newScale: glm::vec3

        set_scale(self, newScale)

        Parameters
        ----------
        newScale: float

        set_scale(self, x, y, z)

        Parameters
        ----------
        x: float
        y: float
        z: float

        """
        return _Pluto.Transform_set_scale(self, *args)


    def add_scale(self, *args):
        """
        add_scale(self, additionalScale)

        Parameters
        ----------
        additionalScale: glm::vec3

        add_scale(self, dx, dy, dz)

        Parameters
        ----------
        dx: float
        dy: float
        dz: float

        add_scale(self, ds)

        Parameters
        ----------
        ds: float

        """
        return _Pluto.Transform_add_scale(self, *args)


    def update_scale(self):
        """
        update_scale(self)

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_update_scale(self)


    def update_matrix(self):
        """
        update_matrix(self)

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_update_matrix(self)


    def parent_to_local_matrix(self):
        """
        parent_to_local_matrix(self) -> mat4

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_parent_to_local_matrix(self)


    def local_to_parent_matrix(self):
        """
        local_to_parent_matrix(self) -> mat4

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_local_to_parent_matrix(self)


    def local_to_parent_position(self):
        """
        local_to_parent_position(self) -> mat4

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_local_to_parent_position(self)


    def local_to_parent_scale(self):
        """
        local_to_parent_scale(self) -> mat4

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_local_to_parent_scale(self)


    def local_to_parent_rotation(self):
        """
        local_to_parent_rotation(self) -> mat4

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_local_to_parent_rotation(self)


    def parent_to_local_position(self):
        """
        parent_to_local_position(self) -> mat4

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_parent_to_local_position(self)


    def parent_to_local_scale(self):
        """
        parent_to_local_scale(self) -> mat4

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_parent_to_local_scale(self)


    def parent_to_local_rotation(self):
        """
        parent_to_local_rotation(self) -> mat4

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform_parent_to_local_rotation(self)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: Transform *

        """
        return _Pluto.Transform___repr__(self)

    __swig_destroy__ = _Pluto.delete_Transform
    __del__ = lambda self: None
Transform_swigregister = _Pluto.Transform_swigregister
Transform_swigregister(Transform)

def Transform_Create(name):
    """
    Transform_Create(name) -> Transform

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Transform_Create(name)

def Transform_Get(*args):
    """
    Get(name) -> Transform

    Parameters
    ----------
    name: std::string

    Transform_Get(id) -> Transform

    Parameters
    ----------
    id: uint32_t

    """
    return _Pluto.Transform_Get(*args)

def Transform_GetFront():
    """Transform_GetFront() -> Transform"""
    return _Pluto.Transform_GetFront()

def Transform_GetCount():
    """Transform_GetCount() -> uint32_t"""
    return _Pluto.Transform_GetCount()

def Transform_Delete(*args):
    """
    Delete(name)

    Parameters
    ----------
    name: std::string

    Transform_Delete(id)

    Parameters
    ----------
    id: uint32_t

    """
    return _Pluto.Transform_Delete(*args)

def Transform_Initialize():
    """Transform_Initialize()"""
    return _Pluto.Transform_Initialize()

def Transform_UploadSSBO():
    """Transform_UploadSSBO()"""
    return _Pluto.Transform_UploadSSBO()

def Transform_GetSSBO():
    """Transform_GetSSBO() -> vk::Buffer"""
    return _Pluto.Transform_GetSSBO()

def Transform_GetSSBOSize():
    """Transform_GetSSBOSize() -> uint32_t"""
    return _Pluto.Transform_GetSSBOSize()

def Transform_CleanUp():
    """Transform_CleanUp()"""
    return _Pluto.Transform_CleanUp()

class Texture(StaticFactory):
    """Proxy of C++ Texture class."""

    __swig_setmethods__ = {}
    for _s in [StaticFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture, name, value)
    __swig_getmethods__ = {}
    for _s in [StaticFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Texture, name)

    def CreateFromKTX(name, filepath, submit_immediately=False):
        """
        CreateFromKTX(name, filepath, submit_immediately=False) -> Texture

        Parameters
        ----------
        name: std::string
        filepath: std::string
        submit_immediately: bool

        CreateFromKTX(name, filepath) -> Texture

        Parameters
        ----------
        name: std::string
        filepath: std::string

        """
        return _Pluto.Texture_CreateFromKTX(name, filepath, submit_immediately)

    CreateFromKTX = staticmethod(CreateFromKTX)

    def CreateFromExternalData(name, data):
        """
        CreateFromExternalData(name, data) -> Texture

        Parameters
        ----------
        name: std::string
        data: Texture::Data

        """
        return _Pluto.Texture_CreateFromExternalData(name, data)

    CreateFromExternalData = staticmethod(CreateFromExternalData)

    def Create2DFromColorData(name, width, height, data, submit_immediately=False):
        """
        Create2DFromColorData(name, width, height, data, submit_immediately=False) -> Texture

        Parameters
        ----------
        name: std::string
        width: uint32_t
        height: uint32_t
        data: std::vector< float,std::allocator< float > >
        submit_immediately: bool

        Create2DFromColorData(name, width, height, data) -> Texture

        Parameters
        ----------
        name: std::string
        width: uint32_t
        height: uint32_t
        data: std::vector< float,std::allocator< float > >

        """
        return _Pluto.Texture_Create2DFromColorData(name, width, height, data, submit_immediately)

    Create2DFromColorData = staticmethod(Create2DFromColorData)

    def CreateCubemap(name, width, height, hasColor, hasDepth, submit_immediately=False):
        """
        CreateCubemap(name, width, height, hasColor, hasDepth, submit_immediately=False) -> Texture

        Parameters
        ----------
        name: std::string
        width: uint32_t
        height: uint32_t
        hasColor: bool
        hasDepth: bool
        submit_immediately: bool

        CreateCubemap(name, width, height, hasColor, hasDepth) -> Texture

        Parameters
        ----------
        name: std::string
        width: uint32_t
        height: uint32_t
        hasColor: bool
        hasDepth: bool

        """
        return _Pluto.Texture_CreateCubemap(name, width, height, hasColor, hasDepth, submit_immediately)

    CreateCubemap = staticmethod(CreateCubemap)

    def Create2D(name, width, height, hasColor, hasDepth, sampleCount, layers, submit_immediately=False):
        """
        Create2D(name, width, height, hasColor, hasDepth, sampleCount, layers, submit_immediately=False) -> Texture

        Parameters
        ----------
        name: std::string
        width: uint32_t
        height: uint32_t
        hasColor: bool
        hasDepth: bool
        sampleCount: uint32_t
        layers: uint32_t
        submit_immediately: bool

        Create2D(name, width, height, hasColor, hasDepth, sampleCount, layers) -> Texture

        Parameters
        ----------
        name: std::string
        width: uint32_t
        height: uint32_t
        hasColor: bool
        hasDepth: bool
        sampleCount: uint32_t
        layers: uint32_t

        """
        return _Pluto.Texture_Create2D(name, width, height, hasColor, hasDepth, sampleCount, layers, submit_immediately)

    Create2D = staticmethod(Create2D)

    def Create3D(name, width, height, depth, layers, submit_immediately=False):
        """
        Create3D(name, width, height, depth, layers, submit_immediately=False) -> Texture

        Parameters
        ----------
        name: std::string
        width: uint32_t
        height: uint32_t
        depth: uint32_t
        layers: uint32_t
        submit_immediately: bool

        Create3D(name, width, height, depth, layers) -> Texture

        Parameters
        ----------
        name: std::string
        width: uint32_t
        height: uint32_t
        depth: uint32_t
        layers: uint32_t

        """
        return _Pluto.Texture_Create3D(name, width, height, depth, layers, submit_immediately)

    Create3D = staticmethod(Create3D)

    def CreateChecker(name, submit_immediately=False):
        """
        CreateChecker(name, submit_immediately=False) -> Texture

        Parameters
        ----------
        name: std::string
        submit_immediately: bool

        CreateChecker(name) -> Texture

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Texture_CreateChecker(name, submit_immediately)

    CreateChecker = staticmethod(CreateChecker)

    def Get(*args):
        """
        Get(name) -> Texture

        Parameters
        ----------
        name: std::string

        Get(id) -> Texture

        Parameters
        ----------
        id: uint32_t

        """
        return _Pluto.Texture_Get(*args)

    Get = staticmethod(Get)

    def GetFront():
        """GetFront() -> Texture"""
        return _Pluto.Texture_GetFront()

    GetFront = staticmethod(GetFront)

    def GetCount():
        """GetCount() -> uint32_t"""
        return _Pluto.Texture_GetCount()

    GetCount = staticmethod(GetCount)

    def Delete(*args):
        """
        Delete(name)

        Parameters
        ----------
        name: std::string

        Delete(id)

        Parameters
        ----------
        id: uint32_t

        """
        return _Pluto.Texture_Delete(*args)

    Delete = staticmethod(Delete)

    def Initialize():
        """Initialize()"""
        return _Pluto.Texture_Initialize()

    Initialize = staticmethod(Initialize)

    def UploadSSBO():
        """UploadSSBO()"""
        return _Pluto.Texture_UploadSSBO()

    UploadSSBO = staticmethod(UploadSSBO)

    def GetSSBO():
        """GetSSBO() -> vk::Buffer"""
        return _Pluto.Texture_GetSSBO()

    GetSSBO = staticmethod(GetSSBO)

    def GetSSBOSize():
        """GetSSBOSize() -> uint32_t"""
        return _Pluto.Texture_GetSSBOSize()

    GetSSBOSize = staticmethod(GetSSBOSize)

    def GetSamplers():
        """GetSamplers() -> std::vector< vk::Sampler,std::allocator< vk::Sampler > >"""
        return _Pluto.Texture_GetSamplers()

    GetSamplers = staticmethod(GetSamplers)

    def GetImageViews(view_type):
        """
        GetImageViews(view_type) -> std::vector< vk::ImageView,std::allocator< vk::ImageView > >

        Parameters
        ----------
        view_type: vk::ImageViewType

        """
        return _Pluto.Texture_GetImageViews(view_type)

    GetImageViews = staticmethod(GetImageViews)

    def GetLayouts(view_type):
        """
        GetLayouts(view_type) -> std::vector< vk::ImageLayout,std::allocator< vk::ImageLayout > >

        Parameters
        ----------
        view_type: vk::ImageViewType

        """
        return _Pluto.Texture_GetLayouts(view_type)

    GetLayouts = staticmethod(GetLayouts)

    def CleanUp():
        """CleanUp()"""
        return _Pluto.Texture_CleanUp()

    CleanUp = staticmethod(CleanUp)

    def __init__(self, *args):
        """
        __init__(self) -> Texture
        __init__(self, name, id) -> Texture

        Parameters
        ----------
        name: std::string
        id: uint32_t

        """
        this = _Pluto.new_Texture(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_color_format(self):
        """
        get_color_format(self) -> vk::Format

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_color_format(self)


    def get_color_image_layout(self):
        """
        get_color_image_layout(self) -> vk::ImageLayout

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_color_image_layout(self)


    def get_color_image_view(self):
        """
        get_color_image_view(self) -> vk::ImageView

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_color_image_view(self)


    def get_color_image_view_layers(self):
        """
        get_color_image_view_layers(self) -> std::vector< vk::ImageView,std::allocator< vk::ImageView > >

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_color_image_view_layers(self)


    def get_color_image(self):
        """
        get_color_image(self) -> vk::Image

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_color_image(self)


    def get_color_mip_levels(self):
        """
        get_color_mip_levels(self) -> uint32_t

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_color_mip_levels(self)


    def get_color_sampler(self):
        """
        get_color_sampler(self) -> vk::Sampler

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_color_sampler(self)


    def get_depth_format(self):
        """
        get_depth_format(self) -> vk::Format

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_depth_format(self)


    def get_depth_image_layout(self):
        """
        get_depth_image_layout(self) -> vk::ImageLayout

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_depth_image_layout(self)


    def get_depth_image_view(self):
        """
        get_depth_image_view(self) -> vk::ImageView

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_depth_image_view(self)


    def get_depth_image_view_layers(self):
        """
        get_depth_image_view_layers(self) -> std::vector< vk::ImageView,std::allocator< vk::ImageView > >

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_depth_image_view_layers(self)


    def get_depth_image(self):
        """
        get_depth_image(self) -> vk::Image

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_depth_image(self)


    def get_depth_sampler(self):
        """
        get_depth_sampler(self) -> vk::Sampler

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_depth_sampler(self)


    def get_depth(self):
        """
        get_depth(self) -> uint32_t

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_depth(self)


    def get_height(self):
        """
        get_height(self) -> uint32_t

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_height(self)


    def get_total_layers(self):
        """
        get_total_layers(self) -> uint32_t

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_total_layers(self)


    def get_width(self):
        """
        get_width(self) -> uint32_t

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_width(self)


    def get_sample_count(self):
        """
        get_sample_count(self) -> vk::SampleCountFlagBits

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_get_sample_count(self)


    def download_color_data(self, width, height, depth, submit_immediately=False):
        """
        download_color_data(self, width, height, depth, submit_immediately=False) -> FloatVector

        Parameters
        ----------
        width: uint32_t
        height: uint32_t
        depth: uint32_t
        submit_immediately: bool

        download_color_data(self, width, height, depth) -> FloatVector

        Parameters
        ----------
        width: uint32_t
        height: uint32_t
        depth: uint32_t

        """
        return _Pluto.Texture_download_color_data(self, width, height, depth, submit_immediately)


    def upload_color_data(self, width, height, depth, color_data, submit_immediately=False):
        """
        upload_color_data(self, width, height, depth, color_data, submit_immediately=False)

        Parameters
        ----------
        width: uint32_t
        height: uint32_t
        depth: uint32_t
        color_data: std::vector< float,std::allocator< float > >
        submit_immediately: bool

        upload_color_data(self, width, height, depth, color_data)

        Parameters
        ----------
        width: uint32_t
        height: uint32_t
        depth: uint32_t
        color_data: std::vector< float,std::allocator< float > >

        """
        return _Pluto.Texture_upload_color_data(self, width, height, depth, color_data, submit_immediately)


    def record_blit_to(self, command_buffer, other, layer=0):
        """
        record_blit_to(self, command_buffer, other, layer=0)

        Parameters
        ----------
        command_buffer: vk::CommandBuffer
        other: Texture *
        layer: uint32_t

        record_blit_to(self, command_buffer, other)

        Parameters
        ----------
        command_buffer: vk::CommandBuffer
        other: Texture *

        """
        return _Pluto.Texture_record_blit_to(self, command_buffer, other, layer)


    def setData(self, data):
        """
        setData(self, data)

        Parameters
        ----------
        data: Texture::Data

        """
        return _Pluto.Texture_setData(self, data)


    def set_procedural_color_1(self, r, g, b, a):
        """
        set_procedural_color_1(self, r, g, b, a)

        Parameters
        ----------
        r: float
        g: float
        b: float
        a: float

        """
        return _Pluto.Texture_set_procedural_color_1(self, r, g, b, a)


    def set_procedural_color_2(self, r, g, b, a):
        """
        set_procedural_color_2(self, r, g, b, a)

        Parameters
        ----------
        r: float
        g: float
        b: float
        a: float

        """
        return _Pluto.Texture_set_procedural_color_2(self, r, g, b, a)


    def set_procedural_scale(self, scale):
        """
        set_procedural_scale(self, scale)

        Parameters
        ----------
        scale: float

        """
        return _Pluto.Texture_set_procedural_scale(self, scale)


    def to_string(self):
        """
        to_string(self) -> std::string

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture_to_string(self)


    def setImageLayout(self, *args):
        """
        setImageLayout(self, cmdbuffer, image, oldImageLayout, newImageLayout, subresourceRange, srcStageMask, dstStageMask)

        Parameters
        ----------
        cmdbuffer: vk::CommandBuffer
        image: vk::Image
        oldImageLayout: vk::ImageLayout
        newImageLayout: vk::ImageLayout
        subresourceRange: vk::ImageSubresourceRange
        srcStageMask: vk::PipelineStageFlags
        dstStageMask: vk::PipelineStageFlags

        setImageLayout(self, cmdbuffer, image, oldImageLayout, newImageLayout, subresourceRange, srcStageMask)

        Parameters
        ----------
        cmdbuffer: vk::CommandBuffer
        image: vk::Image
        oldImageLayout: vk::ImageLayout
        newImageLayout: vk::ImageLayout
        subresourceRange: vk::ImageSubresourceRange
        srcStageMask: vk::PipelineStageFlags

        setImageLayout(self, cmdbuffer, image, oldImageLayout, newImageLayout, subresourceRange)

        Parameters
        ----------
        cmdbuffer: vk::CommandBuffer
        image: vk::Image
        oldImageLayout: vk::ImageLayout
        newImageLayout: vk::ImageLayout
        subresourceRange: vk::ImageSubresourceRange

        """
        return _Pluto.Texture_setImageLayout(self, *args)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: Texture *

        """
        return _Pluto.Texture___repr__(self)

    __swig_destroy__ = _Pluto.delete_Texture
    __del__ = lambda self: None
Texture_swigregister = _Pluto.Texture_swigregister
Texture_swigregister(Texture)

def Texture_CreateFromKTX(name, filepath, submit_immediately=False):
    """
    CreateFromKTX(name, filepath, submit_immediately=False) -> Texture

    Parameters
    ----------
    name: std::string
    filepath: std::string
    submit_immediately: bool

    Texture_CreateFromKTX(name, filepath) -> Texture

    Parameters
    ----------
    name: std::string
    filepath: std::string

    """
    return _Pluto.Texture_CreateFromKTX(name, filepath, submit_immediately)

def Texture_CreateFromExternalData(name, data):
    """
    Texture_CreateFromExternalData(name, data) -> Texture

    Parameters
    ----------
    name: std::string
    data: Texture::Data

    """
    return _Pluto.Texture_CreateFromExternalData(name, data)

def Texture_Create2DFromColorData(name, width, height, data, submit_immediately=False):
    """
    Create2DFromColorData(name, width, height, data, submit_immediately=False) -> Texture

    Parameters
    ----------
    name: std::string
    width: uint32_t
    height: uint32_t
    data: std::vector< float,std::allocator< float > >
    submit_immediately: bool

    Texture_Create2DFromColorData(name, width, height, data) -> Texture

    Parameters
    ----------
    name: std::string
    width: uint32_t
    height: uint32_t
    data: std::vector< float,std::allocator< float > >

    """
    return _Pluto.Texture_Create2DFromColorData(name, width, height, data, submit_immediately)

def Texture_CreateCubemap(name, width, height, hasColor, hasDepth, submit_immediately=False):
    """
    CreateCubemap(name, width, height, hasColor, hasDepth, submit_immediately=False) -> Texture

    Parameters
    ----------
    name: std::string
    width: uint32_t
    height: uint32_t
    hasColor: bool
    hasDepth: bool
    submit_immediately: bool

    Texture_CreateCubemap(name, width, height, hasColor, hasDepth) -> Texture

    Parameters
    ----------
    name: std::string
    width: uint32_t
    height: uint32_t
    hasColor: bool
    hasDepth: bool

    """
    return _Pluto.Texture_CreateCubemap(name, width, height, hasColor, hasDepth, submit_immediately)

def Texture_Create2D(name, width, height, hasColor, hasDepth, sampleCount, layers, submit_immediately=False):
    """
    Create2D(name, width, height, hasColor, hasDepth, sampleCount, layers, submit_immediately=False) -> Texture

    Parameters
    ----------
    name: std::string
    width: uint32_t
    height: uint32_t
    hasColor: bool
    hasDepth: bool
    sampleCount: uint32_t
    layers: uint32_t
    submit_immediately: bool

    Texture_Create2D(name, width, height, hasColor, hasDepth, sampleCount, layers) -> Texture

    Parameters
    ----------
    name: std::string
    width: uint32_t
    height: uint32_t
    hasColor: bool
    hasDepth: bool
    sampleCount: uint32_t
    layers: uint32_t

    """
    return _Pluto.Texture_Create2D(name, width, height, hasColor, hasDepth, sampleCount, layers, submit_immediately)

def Texture_Create3D(name, width, height, depth, layers, submit_immediately=False):
    """
    Create3D(name, width, height, depth, layers, submit_immediately=False) -> Texture

    Parameters
    ----------
    name: std::string
    width: uint32_t
    height: uint32_t
    depth: uint32_t
    layers: uint32_t
    submit_immediately: bool

    Texture_Create3D(name, width, height, depth, layers) -> Texture

    Parameters
    ----------
    name: std::string
    width: uint32_t
    height: uint32_t
    depth: uint32_t
    layers: uint32_t

    """
    return _Pluto.Texture_Create3D(name, width, height, depth, layers, submit_immediately)

def Texture_CreateChecker(name, submit_immediately=False):
    """
    CreateChecker(name, submit_immediately=False) -> Texture

    Parameters
    ----------
    name: std::string
    submit_immediately: bool

    Texture_CreateChecker(name) -> Texture

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Texture_CreateChecker(name, submit_immediately)

def Texture_Get(*args):
    """
    Get(name) -> Texture

    Parameters
    ----------
    name: std::string

    Texture_Get(id) -> Texture

    Parameters
    ----------
    id: uint32_t

    """
    return _Pluto.Texture_Get(*args)

def Texture_GetFront():
    """Texture_GetFront() -> Texture"""
    return _Pluto.Texture_GetFront()

def Texture_GetCount():
    """Texture_GetCount() -> uint32_t"""
    return _Pluto.Texture_GetCount()

def Texture_Delete(*args):
    """
    Delete(name)

    Parameters
    ----------
    name: std::string

    Texture_Delete(id)

    Parameters
    ----------
    id: uint32_t

    """
    return _Pluto.Texture_Delete(*args)

def Texture_Initialize():
    """Texture_Initialize()"""
    return _Pluto.Texture_Initialize()

def Texture_UploadSSBO():
    """Texture_UploadSSBO()"""
    return _Pluto.Texture_UploadSSBO()

def Texture_GetSSBO():
    """Texture_GetSSBO() -> vk::Buffer"""
    return _Pluto.Texture_GetSSBO()

def Texture_GetSSBOSize():
    """Texture_GetSSBOSize() -> uint32_t"""
    return _Pluto.Texture_GetSSBOSize()

def Texture_GetSamplers():
    """Texture_GetSamplers() -> std::vector< vk::Sampler,std::allocator< vk::Sampler > >"""
    return _Pluto.Texture_GetSamplers()

def Texture_GetImageViews(view_type):
    """
    Texture_GetImageViews(view_type) -> std::vector< vk::ImageView,std::allocator< vk::ImageView > >

    Parameters
    ----------
    view_type: vk::ImageViewType

    """
    return _Pluto.Texture_GetImageViews(view_type)

def Texture_GetLayouts(view_type):
    """
    Texture_GetLayouts(view_type) -> std::vector< vk::ImageLayout,std::allocator< vk::ImageLayout > >

    Parameters
    ----------
    view_type: vk::ImageViewType

    """
    return _Pluto.Texture_GetLayouts(view_type)

def Texture_CleanUp():
    """Texture_CleanUp()"""
    return _Pluto.Texture_CleanUp()

MAX_MESHES = _Pluto.MAX_MESHES
class Mesh(StaticFactory):
    """Proxy of C++ Mesh class."""

    __swig_setmethods__ = {}
    for _s in [StaticFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    for _s in [StaticFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)

    def CreateBox(name, allow_edits=False, submit_immediately=False):
        """
        CreateBox(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateBox(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateBox(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateBox(name, allow_edits, submit_immediately)

    CreateBox = staticmethod(CreateBox)

    def CreateCappedCone(name, allow_edits=False, submit_immediately=False):
        """
        CreateCappedCone(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateCappedCone(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateCappedCone(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateCappedCone(name, allow_edits, submit_immediately)

    CreateCappedCone = staticmethod(CreateCappedCone)

    def CreateCappedCylinder(name, allow_edits=False, submit_immediately=False):
        """
        CreateCappedCylinder(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateCappedCylinder(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateCappedCylinder(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateCappedCylinder(name, allow_edits, submit_immediately)

    CreateCappedCylinder = staticmethod(CreateCappedCylinder)

    def CreateCappedTube(name, allow_edits=False, submit_immediately=False):
        """
        CreateCappedTube(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateCappedTube(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateCappedTube(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateCappedTube(name, allow_edits, submit_immediately)

    CreateCappedTube = staticmethod(CreateCappedTube)

    def CreateCapsule(name, allow_edits=False, submit_immediately=False):
        """
        CreateCapsule(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateCapsule(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateCapsule(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateCapsule(name, allow_edits, submit_immediately)

    CreateCapsule = staticmethod(CreateCapsule)

    def CreateCone(name, allow_edits=False, submit_immediately=False):
        """
        CreateCone(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateCone(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateCone(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateCone(name, allow_edits, submit_immediately)

    CreateCone = staticmethod(CreateCone)

    def CreatePentagon(name, allow_edits=False, submit_immediately=False):
        """
        CreatePentagon(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreatePentagon(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreatePentagon(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreatePentagon(name, allow_edits, submit_immediately)

    CreatePentagon = staticmethod(CreatePentagon)

    def CreateCylinder(name, allow_edits=False, submit_immediately=False):
        """
        CreateCylinder(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateCylinder(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateCylinder(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateCylinder(name, allow_edits, submit_immediately)

    CreateCylinder = staticmethod(CreateCylinder)

    def CreateDisk(name, allow_edits=False, submit_immediately=False):
        """
        CreateDisk(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateDisk(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateDisk(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateDisk(name, allow_edits, submit_immediately)

    CreateDisk = staticmethod(CreateDisk)

    def CreateDodecahedron(name, allow_edits=False, submit_immediately=False):
        """
        CreateDodecahedron(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateDodecahedron(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateDodecahedron(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateDodecahedron(name, allow_edits, submit_immediately)

    CreateDodecahedron = staticmethod(CreateDodecahedron)

    def CreatePlane(name, allow_edits=False, submit_immediately=False):
        """
        CreatePlane(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreatePlane(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreatePlane(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreatePlane(name, allow_edits, submit_immediately)

    CreatePlane = staticmethod(CreatePlane)

    def CreateIcosahedron(name, allow_edits=False, submit_immediately=False):
        """
        CreateIcosahedron(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateIcosahedron(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateIcosahedron(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateIcosahedron(name, allow_edits, submit_immediately)

    CreateIcosahedron = staticmethod(CreateIcosahedron)

    def CreateIcosphere(name, allow_edits=False, submit_immediately=False):
        """
        CreateIcosphere(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateIcosphere(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateIcosphere(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateIcosphere(name, allow_edits, submit_immediately)

    CreateIcosphere = staticmethod(CreateIcosphere)

    def CreateRoundedBox(name, allow_edits=False, submit_immediately=False):
        """
        CreateRoundedBox(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateRoundedBox(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateRoundedBox(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateRoundedBox(name, allow_edits, submit_immediately)

    CreateRoundedBox = staticmethod(CreateRoundedBox)

    def CreateSphere(name, allow_edits=False, submit_immediately=False):
        """
        CreateSphere(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateSphere(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateSphere(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateSphere(name, allow_edits, submit_immediately)

    CreateSphere = staticmethod(CreateSphere)

    def CreateSphericalCone(name, allow_edits=False, submit_immediately=False):
        """
        CreateSphericalCone(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateSphericalCone(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateSphericalCone(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateSphericalCone(name, allow_edits, submit_immediately)

    CreateSphericalCone = staticmethod(CreateSphericalCone)

    def CreateSphericalTriangle(name, allow_edits=False, submit_immediately=False):
        """
        CreateSphericalTriangle(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateSphericalTriangle(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateSphericalTriangle(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateSphericalTriangle(name, allow_edits, submit_immediately)

    CreateSphericalTriangle = staticmethod(CreateSphericalTriangle)

    def CreateSpring(name, allow_edits=False, submit_immediately=False):
        """
        CreateSpring(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateSpring(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateSpring(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateSpring(name, allow_edits, submit_immediately)

    CreateSpring = staticmethod(CreateSpring)

    def CreateTeapot(name, allow_edits=False, submit_immediately=False):
        """
        CreateTeapot(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateTeapot(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateTeapot(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateTeapot(name, allow_edits, submit_immediately)

    CreateTeapot = staticmethod(CreateTeapot)

    def CreateTorus(name, allow_edits=False, submit_immediately=False):
        """
        CreateTorus(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateTorus(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateTorus(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateTorus(name, allow_edits, submit_immediately)

    CreateTorus = staticmethod(CreateTorus)

    def CreateTorusKnot(name, allow_edits=False, submit_immediately=False):
        """
        CreateTorusKnot(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateTorusKnot(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateTorusKnot(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateTorusKnot(name, allow_edits, submit_immediately)

    CreateTorusKnot = staticmethod(CreateTorusKnot)

    def CreateTriangle(name, allow_edits=False, submit_immediately=False):
        """
        CreateTriangle(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateTriangle(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateTriangle(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateTriangle(name, allow_edits, submit_immediately)

    CreateTriangle = staticmethod(CreateTriangle)

    def CreateTube(name, allow_edits=False, submit_immediately=False):
        """
        CreateTube(name, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateTube(name, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        allow_edits: bool

        CreateTube(name) -> Mesh

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Mesh_CreateTube(name, allow_edits, submit_immediately)

    CreateTube = staticmethod(CreateTube)

    def CreateFromOBJ(name, objPath, allow_edits=False, submit_immediately=False):
        """
        CreateFromOBJ(name, objPath, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        objPath: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateFromOBJ(name, objPath, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        objPath: std::string
        allow_edits: bool

        CreateFromOBJ(name, objPath) -> Mesh

        Parameters
        ----------
        name: std::string
        objPath: std::string

        """
        return _Pluto.Mesh_CreateFromOBJ(name, objPath, allow_edits, submit_immediately)

    CreateFromOBJ = staticmethod(CreateFromOBJ)

    def CreateFromSTL(name, stlPath, allow_edits=False, submit_immediately=False):
        """
        CreateFromSTL(name, stlPath, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        stlPath: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateFromSTL(name, stlPath, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        stlPath: std::string
        allow_edits: bool

        CreateFromSTL(name, stlPath) -> Mesh

        Parameters
        ----------
        name: std::string
        stlPath: std::string

        """
        return _Pluto.Mesh_CreateFromSTL(name, stlPath, allow_edits, submit_immediately)

    CreateFromSTL = staticmethod(CreateFromSTL)

    def CreateFromGLB(name, glbPath, allow_edits=False, submit_immediately=False):
        """
        CreateFromGLB(name, glbPath, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        glbPath: std::string
        allow_edits: bool
        submit_immediately: bool

        CreateFromGLB(name, glbPath, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        glbPath: std::string
        allow_edits: bool

        CreateFromGLB(name, glbPath) -> Mesh

        Parameters
        ----------
        name: std::string
        glbPath: std::string

        """
        return _Pluto.Mesh_CreateFromGLB(name, glbPath, allow_edits, submit_immediately)

    CreateFromGLB = staticmethod(CreateFromGLB)

    def CreateFromRaw(*args):
        """
        CreateFromRaw(name, points, normals, colors, texcoords, indices, allow_edits=False, submit_immediately=False) -> Mesh

        Parameters
        ----------
        name: std::string
        points: std::vector< glm::vec3,std::allocator< glm::vec3 > >
        normals: std::vector< glm::vec3,std::allocator< glm::vec3 > >
        colors: std::vector< glm::vec4,std::allocator< glm::vec4 > >
        texcoords: std::vector< glm::vec2,std::allocator< glm::vec2 > >
        indices: std::vector< uint32_t,std::allocator< uint32_t > >
        allow_edits: bool
        submit_immediately: bool

        CreateFromRaw(name, points, normals, colors, texcoords, indices, allow_edits=False) -> Mesh

        Parameters
        ----------
        name: std::string
        points: std::vector< glm::vec3,std::allocator< glm::vec3 > >
        normals: std::vector< glm::vec3,std::allocator< glm::vec3 > >
        colors: std::vector< glm::vec4,std::allocator< glm::vec4 > >
        texcoords: std::vector< glm::vec2,std::allocator< glm::vec2 > >
        indices: std::vector< uint32_t,std::allocator< uint32_t > >
        allow_edits: bool

        CreateFromRaw(name, points, normals, colors, texcoords, indices) -> Mesh

        Parameters
        ----------
        name: std::string
        points: std::vector< glm::vec3,std::allocator< glm::vec3 > >
        normals: std::vector< glm::vec3,std::allocator< glm::vec3 > >
        colors: std::vector< glm::vec4,std::allocator< glm::vec4 > >
        texcoords: std::vector< glm::vec2,std::allocator< glm::vec2 > >
        indices: std::vector< uint32_t,std::allocator< uint32_t > >

        CreateFromRaw(name, points, normals, colors, texcoords) -> Mesh

        Parameters
        ----------
        name: std::string
        points: std::vector< glm::vec3,std::allocator< glm::vec3 > >
        normals: std::vector< glm::vec3,std::allocator< glm::vec3 > >
        colors: std::vector< glm::vec4,std::allocator< glm::vec4 > >
        texcoords: std::vector< glm::vec2,std::allocator< glm::vec2 > >

        CreateFromRaw(name, points, normals, colors) -> Mesh

        Parameters
        ----------
        name: std::string
        points: std::vector< glm::vec3,std::allocator< glm::vec3 > >
        normals: std::vector< glm::vec3,std::allocator< glm::vec3 > >
        colors: std::vector< glm::vec4,std::allocator< glm::vec4 > >

        CreateFromRaw(name, points, normals) -> Mesh

        Parameters
        ----------
        name: std::string
        points: std::vector< glm::vec3,std::allocator< glm::vec3 > >
        normals: std::vector< glm::vec3,std::allocator< glm::vec3 > >

        CreateFromRaw(name, points) -> Mesh

        Parameters
        ----------
        name: std::string
        points: std::vector< glm::vec3,std::allocator< glm::vec3 > >

        """
        return _Pluto.Mesh_CreateFromRaw(*args)

    CreateFromRaw = staticmethod(CreateFromRaw)

    def Get(*args):
        """
        Get(name) -> Mesh

        Parameters
        ----------
        name: std::string

        Get(id) -> Mesh

        Parameters
        ----------
        id: uint32_t

        """
        return _Pluto.Mesh_Get(*args)

    Get = staticmethod(Get)

    def GetFront():
        """GetFront() -> Mesh"""
        return _Pluto.Mesh_GetFront()

    GetFront = staticmethod(GetFront)

    def GetCount():
        """GetCount() -> uint32_t"""
        return _Pluto.Mesh_GetCount()

    GetCount = staticmethod(GetCount)

    def Delete(*args):
        """
        Delete(name)

        Parameters
        ----------
        name: std::string

        Delete(id)

        Parameters
        ----------
        id: uint32_t

        """
        return _Pluto.Mesh_Delete(*args)

    Delete = staticmethod(Delete)

    def Initialize():
        """Initialize()"""
        return _Pluto.Mesh_Initialize()

    Initialize = staticmethod(Initialize)

    def __init__(self, *args):
        """
        __init__(self) -> Mesh
        __init__(self, name, id) -> Mesh

        Parameters
        ----------
        name: std::string
        id: uint32_t

        """
        this = _Pluto.new_Mesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def to_string(self):
        """
        to_string(self) -> std::string

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_to_string(self)


    def get_points(self):
        """
        get_points(self) -> Vec3Vector

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_get_points(self)


    def get_colors(self):
        """
        get_colors(self) -> Vec4Vector

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_get_colors(self)


    def get_normals(self):
        """
        get_normals(self) -> Vec3Vector

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_get_normals(self)


    def get_texcoords(self):
        """
        get_texcoords(self) -> Vec2Vector

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_get_texcoords(self)


    def get_indices(self):
        """
        get_indices(self) -> UInt32Vector

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_get_indices(self)


    def get_point_buffer(self):
        """
        get_point_buffer(self) -> vk::Buffer

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_get_point_buffer(self)


    def get_color_buffer(self):
        """
        get_color_buffer(self) -> vk::Buffer

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_get_color_buffer(self)


    def get_index_buffer(self):
        """
        get_index_buffer(self) -> vk::Buffer

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_get_index_buffer(self)


    def get_normal_buffer(self):
        """
        get_normal_buffer(self) -> vk::Buffer

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_get_normal_buffer(self)


    def get_texcoord_buffer(self):
        """
        get_texcoord_buffer(self) -> vk::Buffer

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_get_texcoord_buffer(self)


    def get_total_indices(self):
        """
        get_total_indices(self) -> uint32_t

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_get_total_indices(self)


    def get_index_bytes(self):
        """
        get_index_bytes(self) -> uint32_t

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_get_index_bytes(self)


    def compute_centroid(self):
        """
        compute_centroid(self) -> vec3

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_compute_centroid(self)


    def get_centroid(self):
        """
        get_centroid(self) -> vec3

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_get_centroid(self)


    def edit_position(self, index, new_position):
        """
        edit_position(self, index, new_position)

        Parameters
        ----------
        index: uint32_t
        new_position: glm::vec3

        """
        return _Pluto.Mesh_edit_position(self, index, new_position)


    def edit_positions(self, index, new_positions):
        """
        edit_positions(self, index, new_positions)

        Parameters
        ----------
        index: uint32_t
        new_positions: std::vector< glm::vec3,std::allocator< glm::vec3 > >

        """
        return _Pluto.Mesh_edit_positions(self, index, new_positions)


    def edit_normal(self, index, new_normal):
        """
        edit_normal(self, index, new_normal)

        Parameters
        ----------
        index: uint32_t
        new_normal: glm::vec3

        """
        return _Pluto.Mesh_edit_normal(self, index, new_normal)


    def edit_normals(self, index, new_normals):
        """
        edit_normals(self, index, new_normals)

        Parameters
        ----------
        index: uint32_t
        new_normals: std::vector< glm::vec3,std::allocator< glm::vec3 > >

        """
        return _Pluto.Mesh_edit_normals(self, index, new_normals)


    def edit_vertex_color(self, index, new_color):
        """
        edit_vertex_color(self, index, new_color)

        Parameters
        ----------
        index: uint32_t
        new_color: glm::vec4

        """
        return _Pluto.Mesh_edit_vertex_color(self, index, new_color)


    def edit_vertex_colors(self, index, new_colors):
        """
        edit_vertex_colors(self, index, new_colors)

        Parameters
        ----------
        index: uint32_t
        new_colors: std::vector< glm::vec4,std::allocator< glm::vec4 > >

        """
        return _Pluto.Mesh_edit_vertex_colors(self, index, new_colors)


    def edit_texture_coordinate(self, index, new_texcoord):
        """
        edit_texture_coordinate(self, index, new_texcoord)

        Parameters
        ----------
        index: uint32_t
        new_texcoord: glm::vec2

        """
        return _Pluto.Mesh_edit_texture_coordinate(self, index, new_texcoord)


    def edit_texture_coordinates(self, index, new_texcoords):
        """
        edit_texture_coordinates(self, index, new_texcoords)

        Parameters
        ----------
        index: uint32_t
        new_texcoords: std::vector< glm::vec2,std::allocator< glm::vec2 > >

        """
        return _Pluto.Mesh_edit_texture_coordinates(self, index, new_texcoords)


    def build_low_level_bvh(self, submit_immediately=False):
        """
        build_low_level_bvh(self, submit_immediately=False)

        Parameters
        ----------
        submit_immediately: bool

        build_low_level_bvh(self)

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh_build_low_level_bvh(self, submit_immediately)


    def build_top_level_bvh(submit_immediately=False):
        """
        build_top_level_bvh(submit_immediately=False)

        Parameters
        ----------
        submit_immediately: bool

        build_top_level_bvh()
        """
        return _Pluto.Mesh_build_top_level_bvh(submit_immediately)

    build_top_level_bvh = staticmethod(build_top_level_bvh)

    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: Mesh *

        """
        return _Pluto.Mesh___repr__(self)

    __swig_destroy__ = _Pluto.delete_Mesh
    __del__ = lambda self: None
Mesh_swigregister = _Pluto.Mesh_swigregister
Mesh_swigregister(Mesh)

def Mesh_CreateBox(name, allow_edits=False, submit_immediately=False):
    """
    CreateBox(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateBox(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateBox(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateBox(name, allow_edits, submit_immediately)

def Mesh_CreateCappedCone(name, allow_edits=False, submit_immediately=False):
    """
    CreateCappedCone(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateCappedCone(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateCappedCone(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateCappedCone(name, allow_edits, submit_immediately)

def Mesh_CreateCappedCylinder(name, allow_edits=False, submit_immediately=False):
    """
    CreateCappedCylinder(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateCappedCylinder(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateCappedCylinder(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateCappedCylinder(name, allow_edits, submit_immediately)

def Mesh_CreateCappedTube(name, allow_edits=False, submit_immediately=False):
    """
    CreateCappedTube(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateCappedTube(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateCappedTube(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateCappedTube(name, allow_edits, submit_immediately)

def Mesh_CreateCapsule(name, allow_edits=False, submit_immediately=False):
    """
    CreateCapsule(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateCapsule(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateCapsule(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateCapsule(name, allow_edits, submit_immediately)

def Mesh_CreateCone(name, allow_edits=False, submit_immediately=False):
    """
    CreateCone(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateCone(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateCone(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateCone(name, allow_edits, submit_immediately)

def Mesh_CreatePentagon(name, allow_edits=False, submit_immediately=False):
    """
    CreatePentagon(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreatePentagon(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreatePentagon(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreatePentagon(name, allow_edits, submit_immediately)

def Mesh_CreateCylinder(name, allow_edits=False, submit_immediately=False):
    """
    CreateCylinder(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateCylinder(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateCylinder(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateCylinder(name, allow_edits, submit_immediately)

def Mesh_CreateDisk(name, allow_edits=False, submit_immediately=False):
    """
    CreateDisk(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateDisk(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateDisk(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateDisk(name, allow_edits, submit_immediately)

def Mesh_CreateDodecahedron(name, allow_edits=False, submit_immediately=False):
    """
    CreateDodecahedron(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateDodecahedron(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateDodecahedron(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateDodecahedron(name, allow_edits, submit_immediately)

def Mesh_CreatePlane(name, allow_edits=False, submit_immediately=False):
    """
    CreatePlane(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreatePlane(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreatePlane(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreatePlane(name, allow_edits, submit_immediately)

def Mesh_CreateIcosahedron(name, allow_edits=False, submit_immediately=False):
    """
    CreateIcosahedron(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateIcosahedron(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateIcosahedron(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateIcosahedron(name, allow_edits, submit_immediately)

def Mesh_CreateIcosphere(name, allow_edits=False, submit_immediately=False):
    """
    CreateIcosphere(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateIcosphere(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateIcosphere(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateIcosphere(name, allow_edits, submit_immediately)

def Mesh_CreateRoundedBox(name, allow_edits=False, submit_immediately=False):
    """
    CreateRoundedBox(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateRoundedBox(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateRoundedBox(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateRoundedBox(name, allow_edits, submit_immediately)

def Mesh_CreateSphere(name, allow_edits=False, submit_immediately=False):
    """
    CreateSphere(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateSphere(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateSphere(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateSphere(name, allow_edits, submit_immediately)

def Mesh_CreateSphericalCone(name, allow_edits=False, submit_immediately=False):
    """
    CreateSphericalCone(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateSphericalCone(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateSphericalCone(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateSphericalCone(name, allow_edits, submit_immediately)

def Mesh_CreateSphericalTriangle(name, allow_edits=False, submit_immediately=False):
    """
    CreateSphericalTriangle(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateSphericalTriangle(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateSphericalTriangle(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateSphericalTriangle(name, allow_edits, submit_immediately)

def Mesh_CreateSpring(name, allow_edits=False, submit_immediately=False):
    """
    CreateSpring(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateSpring(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateSpring(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateSpring(name, allow_edits, submit_immediately)

def Mesh_CreateTeapot(name, allow_edits=False, submit_immediately=False):
    """
    CreateTeapot(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateTeapot(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateTeapot(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateTeapot(name, allow_edits, submit_immediately)

def Mesh_CreateTorus(name, allow_edits=False, submit_immediately=False):
    """
    CreateTorus(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateTorus(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateTorus(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateTorus(name, allow_edits, submit_immediately)

def Mesh_CreateTorusKnot(name, allow_edits=False, submit_immediately=False):
    """
    CreateTorusKnot(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateTorusKnot(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateTorusKnot(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateTorusKnot(name, allow_edits, submit_immediately)

def Mesh_CreateTriangle(name, allow_edits=False, submit_immediately=False):
    """
    CreateTriangle(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateTriangle(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateTriangle(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateTriangle(name, allow_edits, submit_immediately)

def Mesh_CreateTube(name, allow_edits=False, submit_immediately=False):
    """
    CreateTube(name, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateTube(name, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    allow_edits: bool

    Mesh_CreateTube(name) -> Mesh

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Mesh_CreateTube(name, allow_edits, submit_immediately)

def Mesh_CreateFromOBJ(name, objPath, allow_edits=False, submit_immediately=False):
    """
    CreateFromOBJ(name, objPath, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    objPath: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateFromOBJ(name, objPath, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    objPath: std::string
    allow_edits: bool

    Mesh_CreateFromOBJ(name, objPath) -> Mesh

    Parameters
    ----------
    name: std::string
    objPath: std::string

    """
    return _Pluto.Mesh_CreateFromOBJ(name, objPath, allow_edits, submit_immediately)

def Mesh_CreateFromSTL(name, stlPath, allow_edits=False, submit_immediately=False):
    """
    CreateFromSTL(name, stlPath, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    stlPath: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateFromSTL(name, stlPath, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    stlPath: std::string
    allow_edits: bool

    Mesh_CreateFromSTL(name, stlPath) -> Mesh

    Parameters
    ----------
    name: std::string
    stlPath: std::string

    """
    return _Pluto.Mesh_CreateFromSTL(name, stlPath, allow_edits, submit_immediately)

def Mesh_CreateFromGLB(name, glbPath, allow_edits=False, submit_immediately=False):
    """
    CreateFromGLB(name, glbPath, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    glbPath: std::string
    allow_edits: bool
    submit_immediately: bool

    CreateFromGLB(name, glbPath, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    glbPath: std::string
    allow_edits: bool

    Mesh_CreateFromGLB(name, glbPath) -> Mesh

    Parameters
    ----------
    name: std::string
    glbPath: std::string

    """
    return _Pluto.Mesh_CreateFromGLB(name, glbPath, allow_edits, submit_immediately)

def Mesh_CreateFromRaw(*args):
    """
    CreateFromRaw(name, points, normals, colors, texcoords, indices, allow_edits=False, submit_immediately=False) -> Mesh

    Parameters
    ----------
    name: std::string
    points: std::vector< glm::vec3,std::allocator< glm::vec3 > >
    normals: std::vector< glm::vec3,std::allocator< glm::vec3 > >
    colors: std::vector< glm::vec4,std::allocator< glm::vec4 > >
    texcoords: std::vector< glm::vec2,std::allocator< glm::vec2 > >
    indices: std::vector< uint32_t,std::allocator< uint32_t > >
    allow_edits: bool
    submit_immediately: bool

    CreateFromRaw(name, points, normals, colors, texcoords, indices, allow_edits=False) -> Mesh

    Parameters
    ----------
    name: std::string
    points: std::vector< glm::vec3,std::allocator< glm::vec3 > >
    normals: std::vector< glm::vec3,std::allocator< glm::vec3 > >
    colors: std::vector< glm::vec4,std::allocator< glm::vec4 > >
    texcoords: std::vector< glm::vec2,std::allocator< glm::vec2 > >
    indices: std::vector< uint32_t,std::allocator< uint32_t > >
    allow_edits: bool

    CreateFromRaw(name, points, normals, colors, texcoords, indices) -> Mesh

    Parameters
    ----------
    name: std::string
    points: std::vector< glm::vec3,std::allocator< glm::vec3 > >
    normals: std::vector< glm::vec3,std::allocator< glm::vec3 > >
    colors: std::vector< glm::vec4,std::allocator< glm::vec4 > >
    texcoords: std::vector< glm::vec2,std::allocator< glm::vec2 > >
    indices: std::vector< uint32_t,std::allocator< uint32_t > >

    CreateFromRaw(name, points, normals, colors, texcoords) -> Mesh

    Parameters
    ----------
    name: std::string
    points: std::vector< glm::vec3,std::allocator< glm::vec3 > >
    normals: std::vector< glm::vec3,std::allocator< glm::vec3 > >
    colors: std::vector< glm::vec4,std::allocator< glm::vec4 > >
    texcoords: std::vector< glm::vec2,std::allocator< glm::vec2 > >

    CreateFromRaw(name, points, normals, colors) -> Mesh

    Parameters
    ----------
    name: std::string
    points: std::vector< glm::vec3,std::allocator< glm::vec3 > >
    normals: std::vector< glm::vec3,std::allocator< glm::vec3 > >
    colors: std::vector< glm::vec4,std::allocator< glm::vec4 > >

    CreateFromRaw(name, points, normals) -> Mesh

    Parameters
    ----------
    name: std::string
    points: std::vector< glm::vec3,std::allocator< glm::vec3 > >
    normals: std::vector< glm::vec3,std::allocator< glm::vec3 > >

    Mesh_CreateFromRaw(name, points) -> Mesh

    Parameters
    ----------
    name: std::string
    points: std::vector< glm::vec3,std::allocator< glm::vec3 > >

    """
    return _Pluto.Mesh_CreateFromRaw(*args)

def Mesh_Get(*args):
    """
    Get(name) -> Mesh

    Parameters
    ----------
    name: std::string

    Mesh_Get(id) -> Mesh

    Parameters
    ----------
    id: uint32_t

    """
    return _Pluto.Mesh_Get(*args)

def Mesh_GetFront():
    """Mesh_GetFront() -> Mesh"""
    return _Pluto.Mesh_GetFront()

def Mesh_GetCount():
    """Mesh_GetCount() -> uint32_t"""
    return _Pluto.Mesh_GetCount()

def Mesh_Delete(*args):
    """
    Delete(name)

    Parameters
    ----------
    name: std::string

    Mesh_Delete(id)

    Parameters
    ----------
    id: uint32_t

    """
    return _Pluto.Mesh_Delete(*args)

def Mesh_Initialize():
    """Mesh_Initialize()"""
    return _Pluto.Mesh_Initialize()

def Mesh_build_top_level_bvh(submit_immediately=False):
    """
    build_top_level_bvh(submit_immediately=False)

    Parameters
    ----------
    submit_immediately: bool

    Mesh_build_top_level_bvh()
    """
    return _Pluto.Mesh_build_top_level_bvh(submit_immediately)

class Light(StaticFactory):
    """Proxy of C++ Light class."""

    __swig_setmethods__ = {}
    for _s in [StaticFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Light, name, value)
    __swig_getmethods__ = {}
    for _s in [StaticFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Light, name)

    def Create(name):
        """
        Create(name) -> Light

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Light_Create(name)

    Create = staticmethod(Create)

    def Get(*args):
        """
        Get(name) -> Light

        Parameters
        ----------
        name: std::string

        Get(id) -> Light

        Parameters
        ----------
        id: uint32_t

        """
        return _Pluto.Light_Get(*args)

    Get = staticmethod(Get)

    def GetFront():
        """GetFront() -> Light"""
        return _Pluto.Light_GetFront()

    GetFront = staticmethod(GetFront)

    def GetCount():
        """GetCount() -> uint32_t"""
        return _Pluto.Light_GetCount()

    GetCount = staticmethod(GetCount)

    def Delete(*args):
        """
        Delete(name)

        Parameters
        ----------
        name: std::string

        Delete(id)

        Parameters
        ----------
        id: uint32_t

        """
        return _Pluto.Light_Delete(*args)

    Delete = staticmethod(Delete)

    def Initialize():
        """Initialize()"""
        return _Pluto.Light_Initialize()

    Initialize = staticmethod(Initialize)

    def UploadSSBO():
        """UploadSSBO()"""
        return _Pluto.Light_UploadSSBO()

    UploadSSBO = staticmethod(UploadSSBO)

    def GetSSBO():
        """GetSSBO() -> vk::Buffer"""
        return _Pluto.Light_GetSSBO()

    GetSSBO = staticmethod(GetSSBO)

    def GetSSBOSize():
        """GetSSBOSize() -> uint32_t"""
        return _Pluto.Light_GetSSBOSize()

    GetSSBOSize = staticmethod(GetSSBOSize)

    def CleanUp():
        """CleanUp()"""
        return _Pluto.Light_CleanUp()

    CleanUp = staticmethod(CleanUp)

    def __init__(self, *args):
        """
        __init__(self) -> Light
        __init__(self, name, id) -> Light

        Parameters
        ----------
        name: std::string
        id: uint32_t

        """
        this = _Pluto.new_Light(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_color(self, r, g, b):
        """
        set_color(self, r, g, b)

        Parameters
        ----------
        r: float
        g: float
        b: float

        """
        return _Pluto.Light_set_color(self, r, g, b)


    def to_string(self):
        """
        to_string(self) -> std::string

        Parameters
        ----------
        self: Light *

        """
        return _Pluto.Light_to_string(self)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: Light *

        """
        return _Pluto.Light___repr__(self)

    __swig_destroy__ = _Pluto.delete_Light
    __del__ = lambda self: None
Light_swigregister = _Pluto.Light_swigregister
Light_swigregister(Light)

def Light_Create(name):
    """
    Light_Create(name) -> Light

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Light_Create(name)

def Light_Get(*args):
    """
    Get(name) -> Light

    Parameters
    ----------
    name: std::string

    Light_Get(id) -> Light

    Parameters
    ----------
    id: uint32_t

    """
    return _Pluto.Light_Get(*args)

def Light_GetFront():
    """Light_GetFront() -> Light"""
    return _Pluto.Light_GetFront()

def Light_GetCount():
    """Light_GetCount() -> uint32_t"""
    return _Pluto.Light_GetCount()

def Light_Delete(*args):
    """
    Delete(name)

    Parameters
    ----------
    name: std::string

    Light_Delete(id)

    Parameters
    ----------
    id: uint32_t

    """
    return _Pluto.Light_Delete(*args)

def Light_Initialize():
    """Light_Initialize()"""
    return _Pluto.Light_Initialize()

def Light_UploadSSBO():
    """Light_UploadSSBO()"""
    return _Pluto.Light_UploadSSBO()

def Light_GetSSBO():
    """Light_GetSSBO() -> vk::Buffer"""
    return _Pluto.Light_GetSSBO()

def Light_GetSSBOSize():
    """Light_GetSSBOSize() -> uint32_t"""
    return _Pluto.Light_GetSSBOSize()

def Light_CleanUp():
    """Light_CleanUp()"""
    return _Pluto.Light_CleanUp()

class Material(StaticFactory):
    """Proxy of C++ Material class."""

    __swig_setmethods__ = {}
    for _s in [StaticFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    for _s in [StaticFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)

    def Create(name):
        """
        Create(name) -> Material

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Material_Create(name)

    Create = staticmethod(Create)

    def Get(*args):
        """
        Get(name) -> Material

        Parameters
        ----------
        name: std::string

        Get(id) -> Material

        Parameters
        ----------
        id: uint32_t

        """
        return _Pluto.Material_Get(*args)

    Get = staticmethod(Get)

    def GetFront():
        """GetFront() -> Material"""
        return _Pluto.Material_GetFront()

    GetFront = staticmethod(GetFront)

    def GetCount():
        """GetCount() -> uint32_t"""
        return _Pluto.Material_GetCount()

    GetCount = staticmethod(GetCount)

    def Delete(*args):
        """
        Delete(name)

        Parameters
        ----------
        name: std::string

        Delete(id)

        Parameters
        ----------
        id: uint32_t

        """
        return _Pluto.Material_Delete(*args)

    Delete = staticmethod(Delete)

    def SetupGraphicsPipelines(renderpass, sampleCount):
        """
        SetupGraphicsPipelines(renderpass, sampleCount)

        Parameters
        ----------
        renderpass: vk::RenderPass
        sampleCount: uint32_t

        """
        return _Pluto.Material_SetupGraphicsPipelines(renderpass, sampleCount)

    SetupGraphicsPipelines = staticmethod(SetupGraphicsPipelines)

    def SetupRaytracingShaderBindingTable(renderpass):
        """
        SetupRaytracingShaderBindingTable(renderpass)

        Parameters
        ----------
        renderpass: vk::RenderPass

        """
        return _Pluto.Material_SetupRaytracingShaderBindingTable(renderpass)

    SetupRaytracingShaderBindingTable = staticmethod(SetupRaytracingShaderBindingTable)

    def Initialize():
        """Initialize()"""
        return _Pluto.Material_Initialize()

    Initialize = staticmethod(Initialize)

    def UploadSSBO():
        """UploadSSBO()"""
        return _Pluto.Material_UploadSSBO()

    UploadSSBO = staticmethod(UploadSSBO)

    def UpdateRasterDescriptorSets():
        """UpdateRasterDescriptorSets()"""
        return _Pluto.Material_UpdateRasterDescriptorSets()

    UpdateRasterDescriptorSets = staticmethod(UpdateRasterDescriptorSets)

    def UpdateRaytracingDescriptorSets():
        """UpdateRaytracingDescriptorSets()"""
        return _Pluto.Material_UpdateRaytracingDescriptorSets()

    UpdateRaytracingDescriptorSets = staticmethod(UpdateRaytracingDescriptorSets)

    def GetSSBO():
        """GetSSBO() -> vk::Buffer"""
        return _Pluto.Material_GetSSBO()

    GetSSBO = staticmethod(GetSSBO)

    def GetSSBOSize():
        """GetSSBOSize() -> uint32_t"""
        return _Pluto.Material_GetSSBOSize()

    GetSSBOSize = staticmethod(GetSSBOSize)

    def CleanUp():
        """CleanUp()"""
        return _Pluto.Material_CleanUp()

    CleanUp = staticmethod(CleanUp)

    def BindDescriptorSets(command_buffer, render_pass):
        """
        BindDescriptorSets(command_buffer, render_pass)

        Parameters
        ----------
        command_buffer: vk::CommandBuffer &
        render_pass: vk::RenderPass &

        """
        return _Pluto.Material_BindDescriptorSets(command_buffer, render_pass)

    BindDescriptorSets = staticmethod(BindDescriptorSets)

    def DrawEntity(command_buffer, render_pass, entity, push_constants):
        """
        DrawEntity(command_buffer, render_pass, entity, push_constants)

        Parameters
        ----------
        command_buffer: vk::CommandBuffer &
        render_pass: vk::RenderPass &
        entity: Entity &
        push_constants: PushConsts &

        """
        return _Pluto.Material_DrawEntity(command_buffer, render_pass, entity, push_constants)

    DrawEntity = staticmethod(DrawEntity)

    def DrawVolume(command_buffer, render_pass, entity, push_constants):
        """
        DrawVolume(command_buffer, render_pass, entity, push_constants)

        Parameters
        ----------
        command_buffer: vk::CommandBuffer &
        render_pass: vk::RenderPass &
        entity: Entity &
        push_constants: PushConsts &

        """
        return _Pluto.Material_DrawVolume(command_buffer, render_pass, entity, push_constants)

    DrawVolume = staticmethod(DrawVolume)

    def __init__(self, *args):
        """
        __init__(self) -> Material
        __init__(self, name, id) -> Material

        Parameters
        ----------
        name: std::string
        id: uint32_t

        """
        this = _Pluto.new_Material(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def to_string(self):
        """
        to_string(self) -> std::string

        Parameters
        ----------
        self: Material *

        """
        return _Pluto.Material_to_string(self)


    def show_pbr(self):
        """
        show_pbr(self)

        Parameters
        ----------
        self: Material *

        """
        return _Pluto.Material_show_pbr(self)


    def show_normals(self):
        """
        show_normals(self)

        Parameters
        ----------
        self: Material *

        """
        return _Pluto.Material_show_normals(self)


    def show_base_color(self):
        """
        show_base_color(self)

        Parameters
        ----------
        self: Material *

        """
        return _Pluto.Material_show_base_color(self)


    def show_texcoords(self):
        """
        show_texcoords(self)

        Parameters
        ----------
        self: Material *

        """
        return _Pluto.Material_show_texcoords(self)


    def show_blinn(self):
        """
        show_blinn(self)

        Parameters
        ----------
        self: Material *

        """
        return _Pluto.Material_show_blinn(self)


    def show_depth(self):
        """
        show_depth(self)

        Parameters
        ----------
        self: Material *

        """
        return _Pluto.Material_show_depth(self)


    def show_environment(self):
        """
        show_environment(self)

        Parameters
        ----------
        self: Material *

        """
        return _Pluto.Material_show_environment(self)


    def show_volume(self):
        """
        show_volume(self)

        Parameters
        ----------
        self: Material *

        """
        return _Pluto.Material_show_volume(self)


    def hide(self):
        """
        hide(self)

        Parameters
        ----------
        self: Material *

        """
        return _Pluto.Material_hide(self)


    def set_base_color(self, *args):
        """
        set_base_color(self, color)

        Parameters
        ----------
        color: glm::vec4

        set_base_color(self, r, g, b, a)

        Parameters
        ----------
        r: float
        g: float
        b: float
        a: float

        """
        return _Pluto.Material_set_base_color(self, *args)


    def set_roughness(self, roughness):
        """
        set_roughness(self, roughness)

        Parameters
        ----------
        roughness: float

        """
        return _Pluto.Material_set_roughness(self, roughness)


    def set_metallic(self, metallic):
        """
        set_metallic(self, metallic)

        Parameters
        ----------
        metallic: float

        """
        return _Pluto.Material_set_metallic(self, metallic)


    def set_transmission(self, transmission):
        """
        set_transmission(self, transmission)

        Parameters
        ----------
        transmission: float

        """
        return _Pluto.Material_set_transmission(self, transmission)


    def set_transmission_roughness(self, transmission_roughness):
        """
        set_transmission_roughness(self, transmission_roughness)

        Parameters
        ----------
        transmission_roughness: float

        """
        return _Pluto.Material_set_transmission_roughness(self, transmission_roughness)


    def set_ior(self, ior):
        """
        set_ior(self, ior)

        Parameters
        ----------
        ior: float

        """
        return _Pluto.Material_set_ior(self, ior)


    def use_base_color_texture(self, *args):
        """
        use_base_color_texture(self, texture_id)

        Parameters
        ----------
        texture_id: uint32_t

        use_base_color_texture(self, texture)

        Parameters
        ----------
        texture: Texture *

        """
        return _Pluto.Material_use_base_color_texture(self, *args)


    def clear_base_color_texture(self):
        """
        clear_base_color_texture(self)

        Parameters
        ----------
        self: Material *

        """
        return _Pluto.Material_clear_base_color_texture(self)


    def use_roughness_texture(self, *args):
        """
        use_roughness_texture(self, texture_id)

        Parameters
        ----------
        texture_id: uint32_t

        use_roughness_texture(self, texture)

        Parameters
        ----------
        texture: Texture *

        """
        return _Pluto.Material_use_roughness_texture(self, *args)


    def clear_roughness_texture(self):
        """
        clear_roughness_texture(self)

        Parameters
        ----------
        self: Material *

        """
        return _Pluto.Material_clear_roughness_texture(self)


    def use_vertex_colors(self, use):
        """
        use_vertex_colors(self, use)

        Parameters
        ----------
        use: bool

        """
        return _Pluto.Material_use_vertex_colors(self, use)


    def use_volume_texture(self, *args):
        """
        use_volume_texture(self, texture_id)

        Parameters
        ----------
        texture_id: uint32_t

        use_volume_texture(self, texture)

        Parameters
        ----------
        texture: Texture *

        """
        return _Pluto.Material_use_volume_texture(self, *args)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: Material *

        """
        return _Pluto.Material___repr__(self)

    __swig_destroy__ = _Pluto.delete_Material
    __del__ = lambda self: None
Material_swigregister = _Pluto.Material_swigregister
Material_swigregister(Material)

def Material_Create(name):
    """
    Material_Create(name) -> Material

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Material_Create(name)

def Material_Get(*args):
    """
    Get(name) -> Material

    Parameters
    ----------
    name: std::string

    Material_Get(id) -> Material

    Parameters
    ----------
    id: uint32_t

    """
    return _Pluto.Material_Get(*args)

def Material_GetFront():
    """Material_GetFront() -> Material"""
    return _Pluto.Material_GetFront()

def Material_GetCount():
    """Material_GetCount() -> uint32_t"""
    return _Pluto.Material_GetCount()

def Material_Delete(*args):
    """
    Delete(name)

    Parameters
    ----------
    name: std::string

    Material_Delete(id)

    Parameters
    ----------
    id: uint32_t

    """
    return _Pluto.Material_Delete(*args)

def Material_SetupGraphicsPipelines(renderpass, sampleCount):
    """
    Material_SetupGraphicsPipelines(renderpass, sampleCount)

    Parameters
    ----------
    renderpass: vk::RenderPass
    sampleCount: uint32_t

    """
    return _Pluto.Material_SetupGraphicsPipelines(renderpass, sampleCount)

def Material_SetupRaytracingShaderBindingTable(renderpass):
    """
    Material_SetupRaytracingShaderBindingTable(renderpass)

    Parameters
    ----------
    renderpass: vk::RenderPass

    """
    return _Pluto.Material_SetupRaytracingShaderBindingTable(renderpass)

def Material_Initialize():
    """Material_Initialize()"""
    return _Pluto.Material_Initialize()

def Material_UploadSSBO():
    """Material_UploadSSBO()"""
    return _Pluto.Material_UploadSSBO()

def Material_UpdateRasterDescriptorSets():
    """Material_UpdateRasterDescriptorSets()"""
    return _Pluto.Material_UpdateRasterDescriptorSets()

def Material_UpdateRaytracingDescriptorSets():
    """Material_UpdateRaytracingDescriptorSets()"""
    return _Pluto.Material_UpdateRaytracingDescriptorSets()

def Material_GetSSBO():
    """Material_GetSSBO() -> vk::Buffer"""
    return _Pluto.Material_GetSSBO()

def Material_GetSSBOSize():
    """Material_GetSSBOSize() -> uint32_t"""
    return _Pluto.Material_GetSSBOSize()

def Material_CleanUp():
    """Material_CleanUp()"""
    return _Pluto.Material_CleanUp()

def Material_BindDescriptorSets(command_buffer, render_pass):
    """
    Material_BindDescriptorSets(command_buffer, render_pass)

    Parameters
    ----------
    command_buffer: vk::CommandBuffer &
    render_pass: vk::RenderPass &

    """
    return _Pluto.Material_BindDescriptorSets(command_buffer, render_pass)

def Material_DrawEntity(command_buffer, render_pass, entity, push_constants):
    """
    Material_DrawEntity(command_buffer, render_pass, entity, push_constants)

    Parameters
    ----------
    command_buffer: vk::CommandBuffer &
    render_pass: vk::RenderPass &
    entity: Entity &
    push_constants: PushConsts &

    """
    return _Pluto.Material_DrawEntity(command_buffer, render_pass, entity, push_constants)

def Material_DrawVolume(command_buffer, render_pass, entity, push_constants):
    """
    Material_DrawVolume(command_buffer, render_pass, entity, push_constants)

    Parameters
    ----------
    command_buffer: vk::CommandBuffer &
    render_pass: vk::RenderPass &
    entity: Entity &
    push_constants: PushConsts &

    """
    return _Pluto.Material_DrawVolume(command_buffer, render_pass, entity, push_constants)

class Camera(StaticFactory):
    """Proxy of C++ Camera class."""

    __swig_setmethods__ = {}
    for _s in [StaticFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    for _s in [StaticFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)

    def Create(name, allow_recording=False, cubemap=False, tex_width=0, tex_height=0, msaa_samples=1, layers=1):
        """
        Create(name, allow_recording=False, cubemap=False, tex_width=0, tex_height=0, msaa_samples=1, layers=1) -> Camera

        Parameters
        ----------
        name: std::string
        allow_recording: bool
        cubemap: bool
        tex_width: uint32_t
        tex_height: uint32_t
        msaa_samples: uint32_t
        layers: uint32_t

        Create(name, allow_recording=False, cubemap=False, tex_width=0, tex_height=0, msaa_samples=1) -> Camera

        Parameters
        ----------
        name: std::string
        allow_recording: bool
        cubemap: bool
        tex_width: uint32_t
        tex_height: uint32_t
        msaa_samples: uint32_t

        Create(name, allow_recording=False, cubemap=False, tex_width=0, tex_height=0) -> Camera

        Parameters
        ----------
        name: std::string
        allow_recording: bool
        cubemap: bool
        tex_width: uint32_t
        tex_height: uint32_t

        Create(name, allow_recording=False, cubemap=False, tex_width=0) -> Camera

        Parameters
        ----------
        name: std::string
        allow_recording: bool
        cubemap: bool
        tex_width: uint32_t

        Create(name, allow_recording=False, cubemap=False) -> Camera

        Parameters
        ----------
        name: std::string
        allow_recording: bool
        cubemap: bool

        Create(name, allow_recording=False) -> Camera

        Parameters
        ----------
        name: std::string
        allow_recording: bool

        Create(name) -> Camera

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Camera_Create(name, allow_recording, cubemap, tex_width, tex_height, msaa_samples, layers)

    Create = staticmethod(Create)

    def Get(*args):
        """
        Get(name) -> Camera

        Parameters
        ----------
        name: std::string

        Get(id) -> Camera

        Parameters
        ----------
        id: uint32_t

        """
        return _Pluto.Camera_Get(*args)

    Get = staticmethod(Get)

    def GetFront():
        """GetFront() -> Camera"""
        return _Pluto.Camera_GetFront()

    GetFront = staticmethod(GetFront)

    def GetCount():
        """GetCount() -> uint32_t"""
        return _Pluto.Camera_GetCount()

    GetCount = staticmethod(GetCount)

    def GetCamerasByOrder(order):
        """
        GetCamerasByOrder(order) -> std::vector< Camera *,std::allocator< Camera * > >

        Parameters
        ----------
        order: uint32_t

        """
        return _Pluto.Camera_GetCamerasByOrder(order)

    GetCamerasByOrder = staticmethod(GetCamerasByOrder)

    def Delete(*args):
        """
        Delete(name)

        Parameters
        ----------
        name: std::string

        Delete(id)

        Parameters
        ----------
        id: uint32_t

        """
        return _Pluto.Camera_Delete(*args)

    Delete = staticmethod(Delete)

    def Initialize():
        """Initialize()"""
        return _Pluto.Camera_Initialize()

    Initialize = staticmethod(Initialize)

    def UploadSSBO():
        """UploadSSBO()"""
        return _Pluto.Camera_UploadSSBO()

    UploadSSBO = staticmethod(UploadSSBO)

    def GetSSBO():
        """GetSSBO() -> vk::Buffer"""
        return _Pluto.Camera_GetSSBO()

    GetSSBO = staticmethod(GetSSBO)

    def GetSSBOSize():
        """GetSSBOSize() -> uint32_t"""
        return _Pluto.Camera_GetSSBOSize()

    GetSSBOSize = staticmethod(GetSSBOSize)

    def CleanUp():
        """CleanUp()"""
        return _Pluto.Camera_CleanUp()

    CleanUp = staticmethod(CleanUp)

    def __init__(self, *args):
        """
        __init__(self) -> Camera
        __init__(self, name, id) -> Camera

        Parameters
        ----------
        name: std::string
        id: uint32_t

        """
        this = _Pluto.new_Camera(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_perspective_projection(self, fov_in_radians, width, height, near_pos, multiview=0):
        """
        set_perspective_projection(self, fov_in_radians, width, height, near_pos, multiview=0)

        Parameters
        ----------
        fov_in_radians: float
        width: float
        height: float
        near_pos: float
        multiview: uint32_t

        set_perspective_projection(self, fov_in_radians, width, height, near_pos)

        Parameters
        ----------
        fov_in_radians: float
        width: float
        height: float
        near_pos: float

        """
        return _Pluto.Camera_set_perspective_projection(self, fov_in_radians, width, height, near_pos, multiview)


    def set_custom_projection(self, custom_projection, near_pos, multiview=0):
        """
        set_custom_projection(self, custom_projection, near_pos, multiview=0)

        Parameters
        ----------
        custom_projection: glm::mat4
        near_pos: float
        multiview: uint32_t

        set_custom_projection(self, custom_projection, near_pos)

        Parameters
        ----------
        custom_projection: glm::mat4
        near_pos: float

        """
        return _Pluto.Camera_set_custom_projection(self, custom_projection, near_pos, multiview)


    def get_near_pos(self, multiview=0):
        """
        get_near_pos(self, multiview=0) -> float

        Parameters
        ----------
        multiview: uint32_t

        get_near_pos(self) -> float

        Parameters
        ----------
        self: Camera *

        """
        return _Pluto.Camera_get_near_pos(self, multiview)


    def get_view(self, multiview=0):
        """
        get_view(self, multiview=0) -> mat4

        Parameters
        ----------
        multiview: uint32_t

        get_view(self) -> mat4

        Parameters
        ----------
        self: Camera *

        """
        return _Pluto.Camera_get_view(self, multiview)


    def set_view(self, view, multiview=0):
        """
        set_view(self, view, multiview=0)

        Parameters
        ----------
        view: glm::mat4
        multiview: uint32_t

        set_view(self, view)

        Parameters
        ----------
        view: glm::mat4

        """
        return _Pluto.Camera_set_view(self, view, multiview)


    def get_projection(self, multiview=0):
        """
        get_projection(self, multiview=0) -> mat4

        Parameters
        ----------
        multiview: uint32_t

        get_projection(self) -> mat4

        Parameters
        ----------
        self: Camera *

        """
        return _Pluto.Camera_get_projection(self, multiview)


    def get_texture(self):
        """
        get_texture(self) -> Texture

        Parameters
        ----------
        self: Camera *

        """
        return _Pluto.Camera_get_texture(self)


    def to_string(self):
        """
        to_string(self) -> std::string

        Parameters
        ----------
        self: Camera *

        """
        return _Pluto.Camera_to_string(self)


    def begin_renderpass(self, command_buffer, index=0):
        """
        begin_renderpass(self, command_buffer, index=0)

        Parameters
        ----------
        command_buffer: vk::CommandBuffer
        index: uint32_t

        begin_renderpass(self, command_buffer)

        Parameters
        ----------
        command_buffer: vk::CommandBuffer

        """
        return _Pluto.Camera_begin_renderpass(self, command_buffer, index)


    def get_renderpass(self, arg2):
        """
        get_renderpass(self, arg2) -> vk::RenderPass

        Parameters
        ----------
        arg2: uint32_t

        """
        return _Pluto.Camera_get_renderpass(self, arg2)


    def get_num_renderpasses(self):
        """
        get_num_renderpasses(self) -> uint32_t

        Parameters
        ----------
        self: Camera *

        """
        return _Pluto.Camera_get_num_renderpasses(self)


    def end_renderpass(self, command_buffer, index=0):
        """
        end_renderpass(self, command_buffer, index=0)

        Parameters
        ----------
        command_buffer: vk::CommandBuffer
        index: uint32_t

        end_renderpass(self, command_buffer)

        Parameters
        ----------
        command_buffer: vk::CommandBuffer

        """
        return _Pluto.Camera_end_renderpass(self, command_buffer, index)


    def get_command_buffer(self):
        """
        get_command_buffer(self) -> vk::CommandBuffer

        Parameters
        ----------
        self: Camera *

        """
        return _Pluto.Camera_get_command_buffer(self)


    def set_clear_color(self, r, g, b, a):
        """
        set_clear_color(self, r, g, b, a)

        Parameters
        ----------
        r: float
        g: float
        b: float
        a: float

        """
        return _Pluto.Camera_set_clear_color(self, r, g, b, a)


    def set_clear_stencil(self, stencil):
        """
        set_clear_stencil(self, stencil)

        Parameters
        ----------
        stencil: uint32_t

        """
        return _Pluto.Camera_set_clear_stencil(self, stencil)


    def set_clear_depth(self, depth):
        """
        set_clear_depth(self, depth)

        Parameters
        ----------
        depth: float

        """
        return _Pluto.Camera_set_clear_depth(self, depth)


    def set_render_order(self, order):
        """
        set_render_order(self, order)

        Parameters
        ----------
        order: uint32_t

        """
        return _Pluto.Camera_set_render_order(self, order)


    def allows_recording(self):
        """
        allows_recording(self) -> bool

        Parameters
        ----------
        self: Camera *

        """
        return _Pluto.Camera_allows_recording(self)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: Camera *

        """
        return _Pluto.Camera___repr__(self)

    __swig_destroy__ = _Pluto.delete_Camera
    __del__ = lambda self: None
Camera_swigregister = _Pluto.Camera_swigregister
Camera_swigregister(Camera)

def Camera_Create(name, allow_recording=False, cubemap=False, tex_width=0, tex_height=0, msaa_samples=1, layers=1):
    """
    Create(name, allow_recording=False, cubemap=False, tex_width=0, tex_height=0, msaa_samples=1, layers=1) -> Camera

    Parameters
    ----------
    name: std::string
    allow_recording: bool
    cubemap: bool
    tex_width: uint32_t
    tex_height: uint32_t
    msaa_samples: uint32_t
    layers: uint32_t

    Create(name, allow_recording=False, cubemap=False, tex_width=0, tex_height=0, msaa_samples=1) -> Camera

    Parameters
    ----------
    name: std::string
    allow_recording: bool
    cubemap: bool
    tex_width: uint32_t
    tex_height: uint32_t
    msaa_samples: uint32_t

    Create(name, allow_recording=False, cubemap=False, tex_width=0, tex_height=0) -> Camera

    Parameters
    ----------
    name: std::string
    allow_recording: bool
    cubemap: bool
    tex_width: uint32_t
    tex_height: uint32_t

    Create(name, allow_recording=False, cubemap=False, tex_width=0) -> Camera

    Parameters
    ----------
    name: std::string
    allow_recording: bool
    cubemap: bool
    tex_width: uint32_t

    Create(name, allow_recording=False, cubemap=False) -> Camera

    Parameters
    ----------
    name: std::string
    allow_recording: bool
    cubemap: bool

    Create(name, allow_recording=False) -> Camera

    Parameters
    ----------
    name: std::string
    allow_recording: bool

    Camera_Create(name) -> Camera

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Camera_Create(name, allow_recording, cubemap, tex_width, tex_height, msaa_samples, layers)

def Camera_Get(*args):
    """
    Get(name) -> Camera

    Parameters
    ----------
    name: std::string

    Camera_Get(id) -> Camera

    Parameters
    ----------
    id: uint32_t

    """
    return _Pluto.Camera_Get(*args)

def Camera_GetFront():
    """Camera_GetFront() -> Camera"""
    return _Pluto.Camera_GetFront()

def Camera_GetCount():
    """Camera_GetCount() -> uint32_t"""
    return _Pluto.Camera_GetCount()

def Camera_GetCamerasByOrder(order):
    """
    Camera_GetCamerasByOrder(order) -> std::vector< Camera *,std::allocator< Camera * > >

    Parameters
    ----------
    order: uint32_t

    """
    return _Pluto.Camera_GetCamerasByOrder(order)

def Camera_Delete(*args):
    """
    Delete(name)

    Parameters
    ----------
    name: std::string

    Camera_Delete(id)

    Parameters
    ----------
    id: uint32_t

    """
    return _Pluto.Camera_Delete(*args)

def Camera_Initialize():
    """Camera_Initialize()"""
    return _Pluto.Camera_Initialize()

def Camera_UploadSSBO():
    """Camera_UploadSSBO()"""
    return _Pluto.Camera_UploadSSBO()

def Camera_GetSSBO():
    """Camera_GetSSBO() -> vk::Buffer"""
    return _Pluto.Camera_GetSSBO()

def Camera_GetSSBOSize():
    """Camera_GetSSBOSize() -> uint32_t"""
    return _Pluto.Camera_GetSSBOSize()

def Camera_CleanUp():
    """Camera_CleanUp()"""
    return _Pluto.Camera_CleanUp()

class Entity(StaticFactory):
    """Proxy of C++ Entity class."""

    __swig_setmethods__ = {}
    for _s in [StaticFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Entity, name, value)
    __swig_getmethods__ = {}
    for _s in [StaticFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Entity, name)

    def Create(name):
        """
        Create(name) -> Entity

        Parameters
        ----------
        name: std::string

        """
        return _Pluto.Entity_Create(name)

    Create = staticmethod(Create)

    def Get(*args):
        """
        Get(name) -> Entity

        Parameters
        ----------
        name: std::string

        Get(id) -> Entity

        Parameters
        ----------
        id: uint32_t

        """
        return _Pluto.Entity_Get(*args)

    Get = staticmethod(Get)

    def GetFront():
        """GetFront() -> Entity"""
        return _Pluto.Entity_GetFront()

    GetFront = staticmethod(GetFront)

    def GetCount():
        """GetCount() -> uint32_t"""
        return _Pluto.Entity_GetCount()

    GetCount = staticmethod(GetCount)

    def Delete(*args):
        """
        Delete(name)

        Parameters
        ----------
        name: std::string

        Delete(id)

        Parameters
        ----------
        id: uint32_t

        """
        return _Pluto.Entity_Delete(*args)

    Delete = staticmethod(Delete)

    def Initialize():
        """Initialize()"""
        return _Pluto.Entity_Initialize()

    Initialize = staticmethod(Initialize)

    def UploadSSBO():
        """UploadSSBO()"""
        return _Pluto.Entity_UploadSSBO()

    UploadSSBO = staticmethod(UploadSSBO)

    def GetSSBO():
        """GetSSBO() -> vk::Buffer"""
        return _Pluto.Entity_GetSSBO()

    GetSSBO = staticmethod(GetSSBO)

    def GetSSBOSize():
        """GetSSBOSize() -> uint32_t"""
        return _Pluto.Entity_GetSSBOSize()

    GetSSBOSize = staticmethod(GetSSBOSize)

    def CleanUp():
        """CleanUp()"""
        return _Pluto.Entity_CleanUp()

    CleanUp = staticmethod(CleanUp)

    def __init__(self, *args):
        """
        __init__(self) -> Entity
        __init__(self, name, id) -> Entity

        Parameters
        ----------
        name: std::string
        id: uint32_t

        """
        this = _Pluto.new_Entity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def to_string(self):
        """
        to_string(self) -> std::string

        Parameters
        ----------
        self: Entity *

        """
        return _Pluto.Entity_to_string(self)


    def connect_to_window(self, key):
        """
        connect_to_window(self, key)

        Parameters
        ----------
        key: std::string

        """
        return _Pluto.Entity_connect_to_window(self, key)


    def connect_to_vr(self):
        """
        connect_to_vr(self)

        Parameters
        ----------
        self: Entity *

        """
        return _Pluto.Entity_connect_to_vr(self)


    def get_connected_window(self):
        """
        get_connected_window(self) -> std::string

        Parameters
        ----------
        self: Entity *

        """
        return _Pluto.Entity_get_connected_window(self)


    def GetEntityFromWindow(key):
        """
        GetEntityFromWindow(key) -> int32_t

        Parameters
        ----------
        key: std::string

        """
        return _Pluto.Entity_GetEntityFromWindow(key)

    GetEntityFromWindow = staticmethod(GetEntityFromWindow)

    def GetEntityForVR():
        """GetEntityForVR() -> int32_t"""
        return _Pluto.Entity_GetEntityForVR()

    GetEntityForVR = staticmethod(GetEntityForVR)

    def set_transform(self, *args):
        """
        set_transform(self, transform_id)

        Parameters
        ----------
        transform_id: int32_t

        set_transform(self, transform)

        Parameters
        ----------
        transform: Transform *

        """
        return _Pluto.Entity_set_transform(self, *args)


    def clear_transform(self):
        """
        clear_transform(self)

        Parameters
        ----------
        self: Entity *

        """
        return _Pluto.Entity_clear_transform(self)


    def get_transform(self):
        """
        get_transform(self) -> int32_t

        Parameters
        ----------
        self: Entity *

        """
        return _Pluto.Entity_get_transform(self)


    def set_camera(self, *args):
        """
        set_camera(self, camera_id)

        Parameters
        ----------
        camera_id: int32_t

        set_camera(self, camera)

        Parameters
        ----------
        camera: Camera *

        """
        return _Pluto.Entity_set_camera(self, *args)


    def clear_camera(self):
        """
        clear_camera(self)

        Parameters
        ----------
        self: Entity *

        """
        return _Pluto.Entity_clear_camera(self)


    def get_camera(self):
        """
        get_camera(self) -> int32_t

        Parameters
        ----------
        self: Entity *

        """
        return _Pluto.Entity_get_camera(self)


    def set_material(self, *args):
        """
        set_material(self, material_id)

        Parameters
        ----------
        material_id: int32_t

        set_material(self, material)

        Parameters
        ----------
        material: Material *

        """
        return _Pluto.Entity_set_material(self, *args)


    def clear_material(self):
        """
        clear_material(self)

        Parameters
        ----------
        self: Entity *

        """
        return _Pluto.Entity_clear_material(self)


    def get_material(self):
        """
        get_material(self) -> int32_t

        Parameters
        ----------
        self: Entity *

        """
        return _Pluto.Entity_get_material(self)


    def set_light(self, *args):
        """
        set_light(self, light_id)

        Parameters
        ----------
        light_id: int32_t

        set_light(self, light)

        Parameters
        ----------
        light: Light *

        """
        return _Pluto.Entity_set_light(self, *args)


    def clear_light(self):
        """
        clear_light(self)

        Parameters
        ----------
        self: Entity *

        """
        return _Pluto.Entity_clear_light(self)


    def get_light(self):
        """
        get_light(self) -> int32_t

        Parameters
        ----------
        self: Entity *

        """
        return _Pluto.Entity_get_light(self)


    def set_mesh(self, *args):
        """
        set_mesh(self, mesh_id)

        Parameters
        ----------
        mesh_id: int32_t

        set_mesh(self, mesh)

        Parameters
        ----------
        mesh: Mesh *

        """
        return _Pluto.Entity_set_mesh(self, *args)


    def clear_mesh(self):
        """
        clear_mesh(self)

        Parameters
        ----------
        self: Entity *

        """
        return _Pluto.Entity_clear_mesh(self)


    def get_mesh(self):
        """
        get_mesh(self) -> int32_t

        Parameters
        ----------
        self: Entity *

        """
        return _Pluto.Entity_get_mesh(self)


    def setParent(self, parent):
        """
        setParent(self, parent)

        Parameters
        ----------
        parent: uint32_t

        """
        return _Pluto.Entity_setParent(self, parent)


    def addChild(self, object):
        """
        addChild(self, object)

        Parameters
        ----------
        object: uint32_t

        """
        return _Pluto.Entity_addChild(self, object)


    def removeChild(self, object):
        """
        removeChild(self, object)

        Parameters
        ----------
        object: uint32_t

        """
        return _Pluto.Entity_removeChild(self, object)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: Entity *

        """
        return _Pluto.Entity___repr__(self)

    __swig_destroy__ = _Pluto.delete_Entity
    __del__ = lambda self: None
Entity_swigregister = _Pluto.Entity_swigregister
Entity_swigregister(Entity)

def Entity_Create(name):
    """
    Entity_Create(name) -> Entity

    Parameters
    ----------
    name: std::string

    """
    return _Pluto.Entity_Create(name)

def Entity_Get(*args):
    """
    Get(name) -> Entity

    Parameters
    ----------
    name: std::string

    Entity_Get(id) -> Entity

    Parameters
    ----------
    id: uint32_t

    """
    return _Pluto.Entity_Get(*args)

def Entity_GetFront():
    """Entity_GetFront() -> Entity"""
    return _Pluto.Entity_GetFront()

def Entity_GetCount():
    """Entity_GetCount() -> uint32_t"""
    return _Pluto.Entity_GetCount()

def Entity_Delete(*args):
    """
    Delete(name)

    Parameters
    ----------
    name: std::string

    Entity_Delete(id)

    Parameters
    ----------
    id: uint32_t

    """
    return _Pluto.Entity_Delete(*args)

def Entity_Initialize():
    """Entity_Initialize()"""
    return _Pluto.Entity_Initialize()

def Entity_UploadSSBO():
    """Entity_UploadSSBO()"""
    return _Pluto.Entity_UploadSSBO()

def Entity_GetSSBO():
    """Entity_GetSSBO() -> vk::Buffer"""
    return _Pluto.Entity_GetSSBO()

def Entity_GetSSBOSize():
    """Entity_GetSSBOSize() -> uint32_t"""
    return _Pluto.Entity_GetSSBOSize()

def Entity_CleanUp():
    """Entity_CleanUp()"""
    return _Pluto.Entity_CleanUp()

def Entity_GetEntityFromWindow(key):
    """
    Entity_GetEntityFromWindow(key) -> int32_t

    Parameters
    ----------
    key: std::string

    """
    return _Pluto.Entity_GetEntityFromWindow(key)

def Entity_GetEntityForVR():
    """Entity_GetEntityForVR() -> int32_t"""
    return _Pluto.Entity_GetEntityForVR()

# This file is compatible with both classic and new-style classes.


