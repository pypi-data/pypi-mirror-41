# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GLM')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GLM')
    _GLM = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GLM', [dirname(__file__)])
        except ImportError:
            import _GLM
            return _GLM
        try:
            _mod = imp.load_module('_GLM', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GLM = swig_import_helper()
    del swig_import_helper
else:
    import _GLM
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class ivec2(_object):
    """Proxy of C++ glm::ivec2 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ivec2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ivec2, name)
    __swig_setmethods__["x"] = _GLM.ivec2_x_set
    __swig_getmethods__["x"] = _GLM.ivec2_x_get
    if _newclass:
        x = _swig_property(_GLM.ivec2_x_get, _GLM.ivec2_x_set)
    __swig_setmethods__["y"] = _GLM.ivec2_y_set
    __swig_getmethods__["y"] = _GLM.ivec2_y_get
    if _newclass:
        y = _swig_property(_GLM.ivec2_y_get, _GLM.ivec2_y_set)

    def length():
        """length() -> glm::length_t"""
        return _GLM.ivec2_length()

    length = staticmethod(length)

    def __init__(self, *args):
        """
        __init__(self) -> ivec2
        __init__(self, v) -> ivec2

        Parameters
        ----------
        v: glm::ivec2 const &

        __init__(self, scalar) -> ivec2

        Parameters
        ----------
        scalar: int

        __init__(self, s1, s2) -> ivec2

        Parameters
        ----------
        s1: int
        s2: int

        __init__(self, v) -> ivec2

        Parameters
        ----------
        v: glm::ivec3 const &

        __init__(self, v) -> ivec2

        Parameters
        ----------
        v: glm::ivec4 const &

        """
        this = _GLM.new_ivec2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, i):
        """
        __getitem__(self, i) -> int

        Parameters
        ----------
        i: int

        """
        return _GLM.ivec2___getitem__(self, i)


    def __setitem__(self, i, f):
        """
        __setitem__(self, i, f)

        Parameters
        ----------
        i: int
        f: int

        """
        return _GLM.ivec2___setitem__(self, i, f)


    def __tostring(self):
        """
        __tostring(self) -> std::string

        Parameters
        ----------
        self: glm::ivec2 *

        """
        return _GLM.ivec2___tostring(self)


    def __add__(self, *args):
        """
        __add__(self, v) -> ivec2

        Parameters
        ----------
        v: glm::ivec2 const &

        __add__(self, scalar) -> ivec2

        Parameters
        ----------
        scalar: int

        """
        return _GLM.ivec2___add__(self, *args)


    def __sub__(self, *args):
        """
        __sub__(self, v) -> ivec2

        Parameters
        ----------
        v: glm::ivec2 const &

        __sub__(self, scalar) -> ivec2

        Parameters
        ----------
        scalar: int

        """
        return _GLM.ivec2___sub__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(self, v) -> ivec2

        Parameters
        ----------
        v: glm::ivec2 const &

        __mul__(self, scalar) -> ivec2

        Parameters
        ----------
        scalar: int

        """
        return _GLM.ivec2___mul__(self, *args)


    def __truediv__(self, *args):
        return _GLM.ivec2___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, v):
        """
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: glm::ivec2 const &

        """
        return _GLM.ivec2___eq__(self, v)


    def __ne__(self, v):
        """
        __ne__(self, v) -> bool

        Parameters
        ----------
        v: glm::ivec2 const &

        """
        return _GLM.ivec2___ne__(self, v)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: glm::ivec2 *

        """
        return _GLM.ivec2___repr__(self)

    __swig_destroy__ = _GLM.delete_ivec2
    __del__ = lambda self: None
ivec2_swigregister = _GLM.ivec2_swigregister
ivec2_swigregister(ivec2)

def ivec2_length():
    """ivec2_length() -> glm::length_t"""
    return _GLM.ivec2_length()

class ivec3(_object):
    """Proxy of C++ glm::ivec3 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ivec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ivec3, name)
    __swig_setmethods__["x"] = _GLM.ivec3_x_set
    __swig_getmethods__["x"] = _GLM.ivec3_x_get
    if _newclass:
        x = _swig_property(_GLM.ivec3_x_get, _GLM.ivec3_x_set)
    __swig_setmethods__["y"] = _GLM.ivec3_y_set
    __swig_getmethods__["y"] = _GLM.ivec3_y_get
    if _newclass:
        y = _swig_property(_GLM.ivec3_y_get, _GLM.ivec3_y_set)
    __swig_setmethods__["z"] = _GLM.ivec3_z_set
    __swig_getmethods__["z"] = _GLM.ivec3_z_get
    if _newclass:
        z = _swig_property(_GLM.ivec3_z_get, _GLM.ivec3_z_set)

    def length():
        """length() -> glm::length_t"""
        return _GLM.ivec3_length()

    length = staticmethod(length)

    def __init__(self, *args):
        """
        __init__(self) -> ivec3
        __init__(self, v) -> ivec3

        Parameters
        ----------
        v: glm::ivec3 const &

        __init__(self, scalar) -> ivec3

        Parameters
        ----------
        scalar: int

        __init__(self, s1, s2, s3) -> ivec3

        Parameters
        ----------
        s1: int
        s2: int
        s3: int

        __init__(self, a, b) -> ivec3

        Parameters
        ----------
        a: glm::ivec2 const &
        b: int

        __init__(self, a, b) -> ivec3

        Parameters
        ----------
        a: int
        b: glm::ivec2 const &

        __init__(self, v) -> ivec3

        Parameters
        ----------
        v: glm::ivec4 const &

        """
        this = _GLM.new_ivec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, i):
        """
        __getitem__(self, i) -> int

        Parameters
        ----------
        i: int

        """
        return _GLM.ivec3___getitem__(self, i)


    def __setitem__(self, i, f):
        """
        __setitem__(self, i, f)

        Parameters
        ----------
        i: int
        f: int

        """
        return _GLM.ivec3___setitem__(self, i, f)


    def __tostring(self):
        """
        __tostring(self) -> std::string

        Parameters
        ----------
        self: glm::ivec3 *

        """
        return _GLM.ivec3___tostring(self)


    def __add__(self, *args):
        """
        __add__(self, v) -> ivec3

        Parameters
        ----------
        v: glm::ivec3 const &

        __add__(self, scalar) -> ivec3

        Parameters
        ----------
        scalar: int

        """
        return _GLM.ivec3___add__(self, *args)


    def __sub__(self, *args):
        """
        __sub__(self, v) -> ivec3

        Parameters
        ----------
        v: glm::ivec3 const &

        __sub__(self, scalar) -> ivec3

        Parameters
        ----------
        scalar: int

        """
        return _GLM.ivec3___sub__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(self, v) -> ivec3

        Parameters
        ----------
        v: glm::ivec3 const &

        __mul__(self, scalar) -> ivec3

        Parameters
        ----------
        scalar: int

        """
        return _GLM.ivec3___mul__(self, *args)


    def __truediv__(self, *args):
        return _GLM.ivec3___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, v):
        """
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: glm::ivec3 const &

        """
        return _GLM.ivec3___eq__(self, v)


    def __ne__(self, v):
        """
        __ne__(self, v) -> bool

        Parameters
        ----------
        v: glm::ivec3 const &

        """
        return _GLM.ivec3___ne__(self, v)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: glm::ivec3 *

        """
        return _GLM.ivec3___repr__(self)

    __swig_destroy__ = _GLM.delete_ivec3
    __del__ = lambda self: None
ivec3_swigregister = _GLM.ivec3_swigregister
ivec3_swigregister(ivec3)

def ivec3_length():
    """ivec3_length() -> glm::length_t"""
    return _GLM.ivec3_length()

class ivec4(_object):
    """Proxy of C++ glm::ivec4 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ivec4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ivec4, name)
    __swig_setmethods__["x"] = _GLM.ivec4_x_set
    __swig_getmethods__["x"] = _GLM.ivec4_x_get
    if _newclass:
        x = _swig_property(_GLM.ivec4_x_get, _GLM.ivec4_x_set)
    __swig_setmethods__["y"] = _GLM.ivec4_y_set
    __swig_getmethods__["y"] = _GLM.ivec4_y_get
    if _newclass:
        y = _swig_property(_GLM.ivec4_y_get, _GLM.ivec4_y_set)
    __swig_setmethods__["z"] = _GLM.ivec4_z_set
    __swig_getmethods__["z"] = _GLM.ivec4_z_get
    if _newclass:
        z = _swig_property(_GLM.ivec4_z_get, _GLM.ivec4_z_set)
    __swig_setmethods__["w"] = _GLM.ivec4_w_set
    __swig_getmethods__["w"] = _GLM.ivec4_w_get
    if _newclass:
        w = _swig_property(_GLM.ivec4_w_get, _GLM.ivec4_w_set)

    def length():
        """length() -> glm::length_t"""
        return _GLM.ivec4_length()

    length = staticmethod(length)

    def __init__(self, *args):
        """
        __init__(self) -> ivec4
        __init__(self, v) -> ivec4

        Parameters
        ----------
        v: glm::ivec4 const &

        __init__(self, scalar) -> ivec4

        Parameters
        ----------
        scalar: int

        __init__(self, s1, s2, s3, s4) -> ivec4

        Parameters
        ----------
        s1: int
        s2: int
        s3: int
        s4: int

        __init__(self, a, b) -> ivec4

        Parameters
        ----------
        a: glm::ivec2 const &
        b: glm::ivec2 const &

        __init__(self, a, b, c) -> ivec4

        Parameters
        ----------
        a: glm::ivec2 const &
        b: int
        c: int

        __init__(self, a, b, c) -> ivec4

        Parameters
        ----------
        a: int
        b: glm::ivec2 const &
        c: int

        __init__(self, a, b, c) -> ivec4

        Parameters
        ----------
        a: int
        b: int
        c: glm::ivec2 const &

        __init__(self, a, b) -> ivec4

        Parameters
        ----------
        a: glm::ivec3 const &
        b: int

        __init__(self, a, b) -> ivec4

        Parameters
        ----------
        a: int
        b: glm::ivec3 const &

        """
        this = _GLM.new_ivec4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, i):
        """
        __getitem__(self, i) -> int

        Parameters
        ----------
        i: int

        """
        return _GLM.ivec4___getitem__(self, i)


    def __setitem__(self, i, f):
        """
        __setitem__(self, i, f)

        Parameters
        ----------
        i: int
        f: int

        """
        return _GLM.ivec4___setitem__(self, i, f)


    def __tostring(self):
        """
        __tostring(self) -> std::string

        Parameters
        ----------
        self: glm::ivec4 *

        """
        return _GLM.ivec4___tostring(self)


    def __add__(self, *args):
        """
        __add__(self, v) -> ivec4

        Parameters
        ----------
        v: glm::ivec4 const &

        __add__(self, scalar) -> ivec4

        Parameters
        ----------
        scalar: int

        """
        return _GLM.ivec4___add__(self, *args)


    def __sub__(self, *args):
        """
        __sub__(self, v) -> ivec4

        Parameters
        ----------
        v: glm::ivec4 const &

        __sub__(self, scalar) -> ivec4

        Parameters
        ----------
        scalar: int

        """
        return _GLM.ivec4___sub__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(self, v) -> ivec4

        Parameters
        ----------
        v: glm::ivec4 const &

        __mul__(self, scalar) -> ivec4

        Parameters
        ----------
        scalar: int

        """
        return _GLM.ivec4___mul__(self, *args)


    def __truediv__(self, *args):
        return _GLM.ivec4___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, v):
        """
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: glm::ivec4 const &

        """
        return _GLM.ivec4___eq__(self, v)


    def __ne__(self, v):
        """
        __ne__(self, v) -> bool

        Parameters
        ----------
        v: glm::ivec4 const &

        """
        return _GLM.ivec4___ne__(self, v)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: glm::ivec4 *

        """
        return _GLM.ivec4___repr__(self)

    __swig_destroy__ = _GLM.delete_ivec4
    __del__ = lambda self: None
ivec4_swigregister = _GLM.ivec4_swigregister
ivec4_swigregister(ivec4)

def ivec4_length():
    """ivec4_length() -> glm::length_t"""
    return _GLM.ivec4_length()

class vec2(_object):
    """Proxy of C++ glm::vec2 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec2, name)
    __swig_setmethods__["x"] = _GLM.vec2_x_set
    __swig_getmethods__["x"] = _GLM.vec2_x_get
    if _newclass:
        x = _swig_property(_GLM.vec2_x_get, _GLM.vec2_x_set)
    __swig_setmethods__["y"] = _GLM.vec2_y_set
    __swig_getmethods__["y"] = _GLM.vec2_y_get
    if _newclass:
        y = _swig_property(_GLM.vec2_y_get, _GLM.vec2_y_set)

    def length():
        """length() -> glm::length_t"""
        return _GLM.vec2_length()

    length = staticmethod(length)

    def __init__(self, *args):
        """
        __init__(self) -> vec2
        __init__(self, v) -> vec2

        Parameters
        ----------
        v: glm::vec2 const &

        __init__(self, scalar) -> vec2

        Parameters
        ----------
        scalar: float

        __init__(self, s1, s2) -> vec2

        Parameters
        ----------
        s1: float
        s2: float

        __init__(self, v) -> vec2

        Parameters
        ----------
        v: glm::vec3 const &

        __init__(self, v) -> vec2

        Parameters
        ----------
        v: glm::vec4 const &

        """
        this = _GLM.new_vec2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, i):
        """
        __getitem__(self, i) -> float

        Parameters
        ----------
        i: int

        """
        return _GLM.vec2___getitem__(self, i)


    def __setitem__(self, i, f):
        """
        __setitem__(self, i, f)

        Parameters
        ----------
        i: int
        f: float

        """
        return _GLM.vec2___setitem__(self, i, f)


    def __tostring(self):
        """
        __tostring(self) -> std::string

        Parameters
        ----------
        self: glm::vec2 *

        """
        return _GLM.vec2___tostring(self)


    def __add__(self, *args):
        """
        __add__(self, v) -> vec2

        Parameters
        ----------
        v: glm::vec2 const &

        __add__(self, scalar) -> vec2

        Parameters
        ----------
        scalar: float

        """
        return _GLM.vec2___add__(self, *args)


    def __sub__(self, *args):
        """
        __sub__(self, v) -> vec2

        Parameters
        ----------
        v: glm::vec2 const &

        __sub__(self, scalar) -> vec2

        Parameters
        ----------
        scalar: float

        """
        return _GLM.vec2___sub__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(self, v) -> vec2

        Parameters
        ----------
        v: glm::vec2 const &

        __mul__(self, scalar) -> vec2

        Parameters
        ----------
        scalar: float

        """
        return _GLM.vec2___mul__(self, *args)


    def __truediv__(self, *args):
        return _GLM.vec2___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, v):
        """
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: glm::vec2 const &

        """
        return _GLM.vec2___eq__(self, v)


    def __ne__(self, v):
        """
        __ne__(self, v) -> bool

        Parameters
        ----------
        v: glm::vec2 const &

        """
        return _GLM.vec2___ne__(self, v)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: glm::vec2 *

        """
        return _GLM.vec2___repr__(self)

    __swig_destroy__ = _GLM.delete_vec2
    __del__ = lambda self: None
vec2_swigregister = _GLM.vec2_swigregister
vec2_swigregister(vec2)

def vec2_length():
    """vec2_length() -> glm::length_t"""
    return _GLM.vec2_length()

class vec3(_object):
    """Proxy of C++ glm::vec3 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec3, name)
    __swig_setmethods__["x"] = _GLM.vec3_x_set
    __swig_getmethods__["x"] = _GLM.vec3_x_get
    if _newclass:
        x = _swig_property(_GLM.vec3_x_get, _GLM.vec3_x_set)
    __swig_setmethods__["y"] = _GLM.vec3_y_set
    __swig_getmethods__["y"] = _GLM.vec3_y_get
    if _newclass:
        y = _swig_property(_GLM.vec3_y_get, _GLM.vec3_y_set)
    __swig_setmethods__["z"] = _GLM.vec3_z_set
    __swig_getmethods__["z"] = _GLM.vec3_z_get
    if _newclass:
        z = _swig_property(_GLM.vec3_z_get, _GLM.vec3_z_set)

    def length():
        """length() -> glm::length_t"""
        return _GLM.vec3_length()

    length = staticmethod(length)

    def __init__(self, *args):
        """
        __init__(self) -> vec3
        __init__(self, v) -> vec3

        Parameters
        ----------
        v: glm::vec3 const &

        __init__(self, scalar) -> vec3

        Parameters
        ----------
        scalar: float

        __init__(self, s1, s2, s3) -> vec3

        Parameters
        ----------
        s1: float
        s2: float
        s3: float

        __init__(self, a, b) -> vec3

        Parameters
        ----------
        a: glm::vec2 const &
        b: float

        __init__(self, a, b) -> vec3

        Parameters
        ----------
        a: float
        b: glm::vec2 const &

        __init__(self, v) -> vec3

        Parameters
        ----------
        v: glm::vec4 const &

        """
        this = _GLM.new_vec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, i):
        """
        __getitem__(self, i) -> float

        Parameters
        ----------
        i: int

        """
        return _GLM.vec3___getitem__(self, i)


    def __setitem__(self, i, f):
        """
        __setitem__(self, i, f)

        Parameters
        ----------
        i: int
        f: float

        """
        return _GLM.vec3___setitem__(self, i, f)


    def __tostring(self):
        """
        __tostring(self) -> std::string

        Parameters
        ----------
        self: glm::vec3 *

        """
        return _GLM.vec3___tostring(self)


    def __add__(self, *args):
        """
        __add__(self, v) -> vec3

        Parameters
        ----------
        v: glm::vec3 const &

        __add__(self, scalar) -> vec3

        Parameters
        ----------
        scalar: float

        """
        return _GLM.vec3___add__(self, *args)


    def __sub__(self, *args):
        """
        __sub__(self, v) -> vec3

        Parameters
        ----------
        v: glm::vec3 const &

        __sub__(self, scalar) -> vec3

        Parameters
        ----------
        scalar: float

        """
        return _GLM.vec3___sub__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(self, v) -> vec3

        Parameters
        ----------
        v: glm::vec3 const &

        __mul__(self, scalar) -> vec3

        Parameters
        ----------
        scalar: float

        """
        return _GLM.vec3___mul__(self, *args)


    def __truediv__(self, *args):
        return _GLM.vec3___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, v):
        """
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: glm::vec3 const &

        """
        return _GLM.vec3___eq__(self, v)


    def __ne__(self, v):
        """
        __ne__(self, v) -> bool

        Parameters
        ----------
        v: glm::vec3 const &

        """
        return _GLM.vec3___ne__(self, v)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: glm::vec3 *

        """
        return _GLM.vec3___repr__(self)

    __swig_destroy__ = _GLM.delete_vec3
    __del__ = lambda self: None
vec3_swigregister = _GLM.vec3_swigregister
vec3_swigregister(vec3)

def vec3_length():
    """vec3_length() -> glm::length_t"""
    return _GLM.vec3_length()

class vec4(_object):
    """Proxy of C++ glm::vec4 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec4, name)
    __swig_setmethods__["x"] = _GLM.vec4_x_set
    __swig_getmethods__["x"] = _GLM.vec4_x_get
    if _newclass:
        x = _swig_property(_GLM.vec4_x_get, _GLM.vec4_x_set)
    __swig_setmethods__["y"] = _GLM.vec4_y_set
    __swig_getmethods__["y"] = _GLM.vec4_y_get
    if _newclass:
        y = _swig_property(_GLM.vec4_y_get, _GLM.vec4_y_set)
    __swig_setmethods__["z"] = _GLM.vec4_z_set
    __swig_getmethods__["z"] = _GLM.vec4_z_get
    if _newclass:
        z = _swig_property(_GLM.vec4_z_get, _GLM.vec4_z_set)
    __swig_setmethods__["w"] = _GLM.vec4_w_set
    __swig_getmethods__["w"] = _GLM.vec4_w_get
    if _newclass:
        w = _swig_property(_GLM.vec4_w_get, _GLM.vec4_w_set)

    def length():
        """length() -> glm::length_t"""
        return _GLM.vec4_length()

    length = staticmethod(length)

    def __init__(self, *args):
        """
        __init__(self) -> vec4
        __init__(self, v) -> vec4

        Parameters
        ----------
        v: glm::vec4 const &

        __init__(self, scalar) -> vec4

        Parameters
        ----------
        scalar: float

        __init__(self, s1, s2, s3, s4) -> vec4

        Parameters
        ----------
        s1: float
        s2: float
        s3: float
        s4: float

        __init__(self, a, b) -> vec4

        Parameters
        ----------
        a: glm::vec2 const &
        b: glm::vec2 const &

        __init__(self, a, b, c) -> vec4

        Parameters
        ----------
        a: glm::vec2 const &
        b: float
        c: float

        __init__(self, a, b, c) -> vec4

        Parameters
        ----------
        a: float
        b: glm::vec2 const &
        c: float

        __init__(self, a, b, c) -> vec4

        Parameters
        ----------
        a: float
        b: float
        c: glm::vec2 const &

        __init__(self, a, b) -> vec4

        Parameters
        ----------
        a: glm::vec3 const &
        b: float

        __init__(self, a, b) -> vec4

        Parameters
        ----------
        a: float
        b: glm::vec3 const &

        """
        this = _GLM.new_vec4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, i):
        """
        __getitem__(self, i) -> float

        Parameters
        ----------
        i: int

        """
        return _GLM.vec4___getitem__(self, i)


    def __setitem__(self, i, f):
        """
        __setitem__(self, i, f)

        Parameters
        ----------
        i: int
        f: float

        """
        return _GLM.vec4___setitem__(self, i, f)


    def __tostring(self):
        """
        __tostring(self) -> std::string

        Parameters
        ----------
        self: glm::vec4 *

        """
        return _GLM.vec4___tostring(self)


    def __add__(self, *args):
        """
        __add__(self, v) -> vec4

        Parameters
        ----------
        v: glm::vec4 const &

        __add__(self, scalar) -> vec4

        Parameters
        ----------
        scalar: float

        """
        return _GLM.vec4___add__(self, *args)


    def __sub__(self, *args):
        """
        __sub__(self, v) -> vec4

        Parameters
        ----------
        v: glm::vec4 const &

        __sub__(self, scalar) -> vec4

        Parameters
        ----------
        scalar: float

        """
        return _GLM.vec4___sub__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(self, v) -> vec4

        Parameters
        ----------
        v: glm::vec4 const &

        __mul__(self, scalar) -> vec4

        Parameters
        ----------
        scalar: float

        """
        return _GLM.vec4___mul__(self, *args)


    def __truediv__(self, *args):
        return _GLM.vec4___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, v):
        """
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: glm::vec4 const &

        """
        return _GLM.vec4___eq__(self, v)


    def __ne__(self, v):
        """
        __ne__(self, v) -> bool

        Parameters
        ----------
        v: glm::vec4 const &

        """
        return _GLM.vec4___ne__(self, v)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: glm::vec4 *

        """
        return _GLM.vec4___repr__(self)

    __swig_destroy__ = _GLM.delete_vec4
    __del__ = lambda self: None
vec4_swigregister = _GLM.vec4_swigregister
vec4_swigregister(vec4)

def vec4_length():
    """vec4_length() -> glm::length_t"""
    return _GLM.vec4_length()

class mat3(_object):
    """Proxy of C++ glm::mat3 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mat3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mat3, name)

    def length():
        """length() -> glm::length_t"""
        return _GLM.mat3_length()

    length = staticmethod(length)

    def __init__(self, *args):
        """
        __init__(self) -> mat3
        __init__(self, v) -> mat3

        Parameters
        ----------
        v: glm::mat3 const &

        __init__(self, scalar) -> mat3

        Parameters
        ----------
        scalar: float

        __init__(self, x0, y0, z0, x1, y1, z1, x2, y2, z2) -> mat3

        Parameters
        ----------
        x0: float
        y0: float
        z0: float
        x1: float
        y1: float
        z1: float
        x2: float
        y2: float
        z2: float

        __init__(self, v1, v2, v3) -> mat3

        Parameters
        ----------
        v1: glm::vec3 const &
        v2: glm::vec3 const &
        v3: glm::vec3 const &

        __init__(self, m) -> mat3

        Parameters
        ----------
        m: glm::mat4 const &

        """
        this = _GLM.new_mat3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, i):
        """
        __getitem__(self, i) -> vec3

        Parameters
        ----------
        i: int

        """
        return _GLM.mat3___getitem__(self, i)


    def __setitem__(self, i, v):
        """
        __setitem__(self, i, v)

        Parameters
        ----------
        i: int
        v: glm::vec3

        """
        return _GLM.mat3___setitem__(self, i, v)


    def __tostring(self):
        """
        __tostring(self) -> std::string

        Parameters
        ----------
        self: glm::mat3 *

        """
        return _GLM.mat3___tostring(self)


    def __add__(self, *args):
        """
        __add__(self, scalar) -> mat3

        Parameters
        ----------
        scalar: float

        __add__(self, m) -> mat3

        Parameters
        ----------
        m: glm::mat3 const &

        """
        return _GLM.mat3___add__(self, *args)


    def __sub__(self, *args):
        """
        __sub__(self, scalar) -> mat3

        Parameters
        ----------
        scalar: float

        __sub__(self, m) -> mat3

        Parameters
        ----------
        m: glm::mat3 const &

        """
        return _GLM.mat3___sub__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(self, scalar) -> mat3

        Parameters
        ----------
        scalar: float

        __mul__(self, m) -> mat3

        Parameters
        ----------
        m: glm::mat3 const &

        __mul__(self, v) -> vec3

        Parameters
        ----------
        v: glm::vec3 const &

        """
        return _GLM.mat3___mul__(self, *args)


    def __truediv__(self, *args):
        return _GLM.mat3___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, m):
        """
        __eq__(self, m) -> bool

        Parameters
        ----------
        m: glm::mat3 const &

        """
        return _GLM.mat3___eq__(self, m)


    def __ne__(self, m):
        """
        __ne__(self, m) -> bool

        Parameters
        ----------
        m: glm::mat3 const &

        """
        return _GLM.mat3___ne__(self, m)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: glm::mat3 *

        """
        return _GLM.mat3___repr__(self)

    __swig_destroy__ = _GLM.delete_mat3
    __del__ = lambda self: None
mat3_swigregister = _GLM.mat3_swigregister
mat3_swigregister(mat3)

def mat3_length():
    """mat3_length() -> glm::length_t"""
    return _GLM.mat3_length()

class mat4(_object):
    """Proxy of C++ glm::mat4 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mat4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mat4, name)

    def length():
        """length() -> glm::length_t"""
        return _GLM.mat4_length()

    length = staticmethod(length)

    def __init__(self, *args):
        """
        __init__(self) -> mat4
        __init__(self, v) -> mat4

        Parameters
        ----------
        v: glm::mat4 const &

        __init__(self, scalar) -> mat4

        Parameters
        ----------
        scalar: float

        __init__(self, x0, y0, z0, w0, x1, y1, z1, w1, x2, y2, z2, w2, x3, y3, z3, w3) -> mat4

        Parameters
        ----------
        x0: float
        y0: float
        z0: float
        w0: float
        x1: float
        y1: float
        z1: float
        w1: float
        x2: float
        y2: float
        z2: float
        w2: float
        x3: float
        y3: float
        z3: float
        w3: float

        __init__(self, v1, v2, v3, v4) -> mat4

        Parameters
        ----------
        v1: glm::vec4 const &
        v2: glm::vec4 const &
        v3: glm::vec4 const &
        v4: glm::vec4 const &

        __init__(self, m) -> mat4

        Parameters
        ----------
        m: glm::mat3 const &

        """
        this = _GLM.new_mat4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, i):
        """
        __getitem__(self, i) -> vec4

        Parameters
        ----------
        i: int

        """
        return _GLM.mat4___getitem__(self, i)


    def __setitem__(self, i, v):
        """
        __setitem__(self, i, v)

        Parameters
        ----------
        i: int
        v: glm::vec4

        """
        return _GLM.mat4___setitem__(self, i, v)


    def __tostring(self):
        """
        __tostring(self) -> std::string

        Parameters
        ----------
        self: glm::mat4 *

        """
        return _GLM.mat4___tostring(self)


    def __add__(self, *args):
        """
        __add__(self, scalar) -> mat4

        Parameters
        ----------
        scalar: float

        __add__(self, m) -> mat4

        Parameters
        ----------
        m: glm::mat4 const &

        """
        return _GLM.mat4___add__(self, *args)


    def __sub__(self, *args):
        """
        __sub__(self, scalar) -> mat4

        Parameters
        ----------
        scalar: float

        __sub__(self, m) -> mat4

        Parameters
        ----------
        m: glm::mat4 const &

        """
        return _GLM.mat4___sub__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(self, scalar) -> mat4

        Parameters
        ----------
        scalar: float

        __mul__(self, m) -> mat4

        Parameters
        ----------
        m: glm::mat4 const &

        __mul__(self, v) -> vec4

        Parameters
        ----------
        v: glm::vec4 const &

        """
        return _GLM.mat4___mul__(self, *args)


    def __truediv__(self, *args):
        return _GLM.mat4___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, m):
        """
        __eq__(self, m) -> bool

        Parameters
        ----------
        m: glm::mat4 const &

        """
        return _GLM.mat4___eq__(self, m)


    def __ne__(self, m):
        """
        __ne__(self, m) -> bool

        Parameters
        ----------
        m: glm::mat4 const &

        """
        return _GLM.mat4___ne__(self, m)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: glm::mat4 *

        """
        return _GLM.mat4___repr__(self)

    __swig_destroy__ = _GLM.delete_mat4
    __del__ = lambda self: None
mat4_swigregister = _GLM.mat4_swigregister
mat4_swigregister(mat4)

def mat4_length():
    """mat4_length() -> glm::length_t"""
    return _GLM.mat4_length()


def __sub__(*args):
    """
    __sub__(v, scalar) -> ivec2

    Parameters
    ----------
    v: glm::ivec2 const &
    scalar: int

    __sub__(scalar, v) -> ivec2

    Parameters
    ----------
    scalar: int
    v: glm::ivec2 const &

    __sub__(v1, v2) -> ivec2

    Parameters
    ----------
    v1: glm::ivec2 const &
    v2: glm::ivec2 const &

    __sub__(v, scalar) -> ivec3

    Parameters
    ----------
    v: glm::ivec3 const &
    scalar: int

    __sub__(scalar, v) -> ivec3

    Parameters
    ----------
    scalar: int
    v: glm::ivec3 const &

    __sub__(v1, v2) -> ivec3

    Parameters
    ----------
    v1: glm::ivec3 const &
    v2: glm::ivec3 const &

    __sub__(v, scalar) -> ivec4

    Parameters
    ----------
    v: glm::ivec4 const &
    scalar: int

    __sub__(scalar, v) -> ivec4

    Parameters
    ----------
    scalar: int
    v: glm::ivec4 const &

    __sub__(v1, v2) -> ivec4

    Parameters
    ----------
    v1: glm::ivec4 const &
    v2: glm::ivec4 const &

    __sub__(v, scalar) -> vec2

    Parameters
    ----------
    v: glm::vec2 const &
    scalar: float

    __sub__(scalar, v) -> vec2

    Parameters
    ----------
    scalar: float
    v: glm::vec2 const &

    __sub__(v1, v2) -> vec2

    Parameters
    ----------
    v1: glm::vec2 const &
    v2: glm::vec2 const &

    __sub__(v, scalar) -> vec3

    Parameters
    ----------
    v: glm::vec3 const &
    scalar: float

    __sub__(scalar, v) -> vec3

    Parameters
    ----------
    scalar: float
    v: glm::vec3 const &

    __sub__(v1, v2) -> vec3

    Parameters
    ----------
    v1: glm::vec3 const &
    v2: glm::vec3 const &

    __sub__(v, scalar) -> vec4

    Parameters
    ----------
    v: glm::vec4 const &
    scalar: float

    __sub__(scalar, v) -> vec4

    Parameters
    ----------
    scalar: float
    v: glm::vec4 const &

    __sub__(v1, v2) -> vec4

    Parameters
    ----------
    v1: glm::vec4 const &
    v2: glm::vec4 const &

    __sub__(m, scalar) -> mat3

    Parameters
    ----------
    m: glm::mat3 const &
    scalar: float

    __sub__(scalar, m) -> mat3

    Parameters
    ----------
    scalar: float
    m: glm::mat3 const &

    __sub__(m1, m2) -> mat3

    Parameters
    ----------
    m1: glm::mat3 const &
    m2: glm::mat3 const &

    __sub__(m, scalar) -> mat4

    Parameters
    ----------
    m: glm::mat4 const &
    scalar: float

    __sub__(scalar, m) -> mat4

    Parameters
    ----------
    scalar: float
    m: glm::mat4 const &

    __sub__(m1, m2) -> mat4

    Parameters
    ----------
    m1: glm::mat4 const &
    m2: glm::mat4 const &

    """
    return _GLM.__sub__(*args)
class quat(_object):
    """Proxy of C++ glm::quat class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, quat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, quat, name)
    __swig_setmethods__["x"] = _GLM.quat_x_set
    __swig_getmethods__["x"] = _GLM.quat_x_get
    if _newclass:
        x = _swig_property(_GLM.quat_x_get, _GLM.quat_x_set)
    __swig_setmethods__["y"] = _GLM.quat_y_set
    __swig_getmethods__["y"] = _GLM.quat_y_get
    if _newclass:
        y = _swig_property(_GLM.quat_y_get, _GLM.quat_y_set)
    __swig_setmethods__["z"] = _GLM.quat_z_set
    __swig_getmethods__["z"] = _GLM.quat_z_get
    if _newclass:
        z = _swig_property(_GLM.quat_z_get, _GLM.quat_z_set)
    __swig_setmethods__["w"] = _GLM.quat_w_set
    __swig_getmethods__["w"] = _GLM.quat_w_get
    if _newclass:
        w = _swig_property(_GLM.quat_w_get, _GLM.quat_w_set)

    def length():
        """length() -> glm::length_t"""
        return _GLM.quat_length()

    length = staticmethod(length)

    def __init__(self, *args):
        """
        __init__(self) -> quat
        __init__(self, q) -> quat

        Parameters
        ----------
        q: glm::quat const &

        __init__(self, s, v) -> quat

        Parameters
        ----------
        s: float
        v: glm::vec3 const &

        __init__(self, w, x, y, z) -> quat

        Parameters
        ----------
        w: float
        x: float
        y: float
        z: float

        __init__(self, u, v) -> quat

        Parameters
        ----------
        u: glm::vec3 const &
        v: glm::vec3 const &

        __init__(self, eulerAngles) -> quat

        Parameters
        ----------
        eulerAngles: glm::vec3 const &

        __init__(self, m) -> quat

        Parameters
        ----------
        m: glm::mat3 const &

        __init__(self, m) -> quat

        Parameters
        ----------
        m: glm::mat4 const &

        """
        this = _GLM.new_quat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, i):
        """
        __getitem__(self, i) -> float

        Parameters
        ----------
        i: int

        """
        return _GLM.quat___getitem__(self, i)


    def __setitem__(self, i, f):
        """
        __setitem__(self, i, f)

        Parameters
        ----------
        i: int
        f: float

        """
        return _GLM.quat___setitem__(self, i, f)


    def __tostring(self):
        """
        __tostring(self) -> std::string

        Parameters
        ----------
        self: glm::quat *

        """
        return _GLM.quat___tostring(self)


    def __add__(self, q):
        """
        __add__(self, q) -> quat

        Parameters
        ----------
        q: glm::quat const &

        """
        return _GLM.quat___add__(self, q)


    def __mul__(self, *args):
        """
        __mul__(self, q) -> quat

        Parameters
        ----------
        q: glm::quat const &

        __mul__(self, v) -> vec3

        Parameters
        ----------
        v: glm::vec3 const &

        __mul__(self, v) -> vec4

        Parameters
        ----------
        v: glm::vec4 const &

        __mul__(self, s) -> quat

        Parameters
        ----------
        s: float const &

        """
        return _GLM.quat___mul__(self, *args)


    def __truediv__(self, *args):
        return _GLM.quat___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, q):
        """
        __eq__(self, q) -> bool

        Parameters
        ----------
        q: glm::quat const &

        """
        return _GLM.quat___eq__(self, q)


    def __ne__(self, q):
        """
        __ne__(self, q) -> bool

        Parameters
        ----------
        q: glm::quat const &

        """
        return _GLM.quat___ne__(self, q)


    def __repr__(self):
        """
        __repr__(self) -> std::string

        Parameters
        ----------
        self: glm::quat *

        """
        return _GLM.quat___repr__(self)

    __swig_destroy__ = _GLM.delete_quat
    __del__ = lambda self: None
quat_swigregister = _GLM.quat_swigregister
quat_swigregister(quat)

def quat_length():
    """quat_length() -> glm::length_t"""
    return _GLM.quat_length()


def __add__(*args):
    """
    __add__(v, scalar) -> ivec2

    Parameters
    ----------
    v: glm::ivec2 const &
    scalar: int

    __add__(scalar, v) -> ivec2

    Parameters
    ----------
    scalar: int
    v: glm::ivec2 const &

    __add__(v1, v2) -> ivec2

    Parameters
    ----------
    v1: glm::ivec2 const &
    v2: glm::ivec2 const &

    __add__(v, scalar) -> ivec3

    Parameters
    ----------
    v: glm::ivec3 const &
    scalar: int

    __add__(scalar, v) -> ivec3

    Parameters
    ----------
    scalar: int
    v: glm::ivec3 const &

    __add__(v1, v2) -> ivec3

    Parameters
    ----------
    v1: glm::ivec3 const &
    v2: glm::ivec3 const &

    __add__(v, scalar) -> ivec4

    Parameters
    ----------
    v: glm::ivec4 const &
    scalar: int

    __add__(scalar, v) -> ivec4

    Parameters
    ----------
    scalar: int
    v: glm::ivec4 const &

    __add__(v1, v2) -> ivec4

    Parameters
    ----------
    v1: glm::ivec4 const &
    v2: glm::ivec4 const &

    __add__(v, scalar) -> vec2

    Parameters
    ----------
    v: glm::vec2 const &
    scalar: float

    __add__(scalar, v) -> vec2

    Parameters
    ----------
    scalar: float
    v: glm::vec2 const &

    __add__(v1, v2) -> vec2

    Parameters
    ----------
    v1: glm::vec2 const &
    v2: glm::vec2 const &

    __add__(v, scalar) -> vec3

    Parameters
    ----------
    v: glm::vec3 const &
    scalar: float

    __add__(scalar, v) -> vec3

    Parameters
    ----------
    scalar: float
    v: glm::vec3 const &

    __add__(v1, v2) -> vec3

    Parameters
    ----------
    v1: glm::vec3 const &
    v2: glm::vec3 const &

    __add__(v, scalar) -> vec4

    Parameters
    ----------
    v: glm::vec4 const &
    scalar: float

    __add__(scalar, v) -> vec4

    Parameters
    ----------
    scalar: float
    v: glm::vec4 const &

    __add__(v1, v2) -> vec4

    Parameters
    ----------
    v1: glm::vec4 const &
    v2: glm::vec4 const &

    __add__(m, scalar) -> mat3

    Parameters
    ----------
    m: glm::mat3 const &
    scalar: float

    __add__(scalar, m) -> mat3

    Parameters
    ----------
    scalar: float
    m: glm::mat3 const &

    __add__(m1, m2) -> mat3

    Parameters
    ----------
    m1: glm::mat3 const &
    m2: glm::mat3 const &

    __add__(m, scalar) -> mat4

    Parameters
    ----------
    m: glm::mat4 const &
    scalar: float

    __add__(scalar, m) -> mat4

    Parameters
    ----------
    scalar: float
    m: glm::mat4 const &

    __add__(m1, m2) -> mat4

    Parameters
    ----------
    m1: glm::mat4 const &
    m2: glm::mat4 const &

    __add__(q, p) -> quat

    Parameters
    ----------
    q: glm::quat const &
    p: glm::quat const &

    """
    return _GLM.__add__(*args)

def __mul__(*args):
    """
    __mul__(v, scalar) -> ivec2

    Parameters
    ----------
    v: glm::ivec2 const &
    scalar: int

    __mul__(scalar, v) -> ivec2

    Parameters
    ----------
    scalar: int
    v: glm::ivec2 const &

    __mul__(v1, v2) -> ivec2

    Parameters
    ----------
    v1: glm::ivec2 const &
    v2: glm::ivec2 const &

    __mul__(v, scalar) -> ivec3

    Parameters
    ----------
    v: glm::ivec3 const &
    scalar: int

    __mul__(scalar, v) -> ivec3

    Parameters
    ----------
    scalar: int
    v: glm::ivec3 const &

    __mul__(v1, v2) -> ivec3

    Parameters
    ----------
    v1: glm::ivec3 const &
    v2: glm::ivec3 const &

    __mul__(v, scalar) -> ivec4

    Parameters
    ----------
    v: glm::ivec4 const &
    scalar: int

    __mul__(scalar, v) -> ivec4

    Parameters
    ----------
    scalar: int
    v: glm::ivec4 const &

    __mul__(v1, v2) -> ivec4

    Parameters
    ----------
    v1: glm::ivec4 const &
    v2: glm::ivec4 const &

    __mul__(v, scalar) -> vec2

    Parameters
    ----------
    v: glm::vec2 const &
    scalar: float

    __mul__(scalar, v) -> vec2

    Parameters
    ----------
    scalar: float
    v: glm::vec2 const &

    __mul__(v1, v2) -> vec2

    Parameters
    ----------
    v1: glm::vec2 const &
    v2: glm::vec2 const &

    __mul__(v, scalar) -> vec3

    Parameters
    ----------
    v: glm::vec3 const &
    scalar: float

    __mul__(scalar, v) -> vec3

    Parameters
    ----------
    scalar: float
    v: glm::vec3 const &

    __mul__(v1, v2) -> vec3

    Parameters
    ----------
    v1: glm::vec3 const &
    v2: glm::vec3 const &

    __mul__(v, scalar) -> vec4

    Parameters
    ----------
    v: glm::vec4 const &
    scalar: float

    __mul__(scalar, v) -> vec4

    Parameters
    ----------
    scalar: float
    v: glm::vec4 const &

    __mul__(v1, v2) -> vec4

    Parameters
    ----------
    v1: glm::vec4 const &
    v2: glm::vec4 const &

    __mul__(m, scalar) -> mat3

    Parameters
    ----------
    m: glm::mat3 const &
    scalar: float

    __mul__(scalar, m) -> mat3

    Parameters
    ----------
    scalar: float
    m: glm::mat3 const &

    __mul__(m1, m2) -> mat3

    Parameters
    ----------
    m1: glm::mat3 const &
    m2: glm::mat3 const &

    __mul__(v, m) -> vec3

    Parameters
    ----------
    v: glm::vec3 const &
    m: glm::mat3 const &

    __mul__(m, v) -> vec3

    Parameters
    ----------
    m: glm::mat3 const &
    v: glm::vec3 const &

    __mul__(m, scalar) -> mat4

    Parameters
    ----------
    m: glm::mat4 const &
    scalar: float

    __mul__(scalar, v) -> mat4

    Parameters
    ----------
    scalar: float
    v: glm::mat4 const &

    __mul__(m1, m2) -> mat4

    Parameters
    ----------
    m1: glm::mat4 const &
    m2: glm::mat4 const &

    __mul__(m, v) -> vec4

    Parameters
    ----------
    m: glm::mat4 const &
    v: glm::vec4 const &

    __mul__(v, m) -> vec4

    Parameters
    ----------
    v: glm::vec4 const &
    m: glm::mat4 const &

    __mul__(q, p) -> quat

    Parameters
    ----------
    q: glm::quat const &
    p: glm::quat const &

    __mul__(q, v) -> vec3

    Parameters
    ----------
    q: glm::quat const &
    v: glm::vec3 const &

    __mul__(v, q) -> vec3

    Parameters
    ----------
    v: glm::vec3 const &
    q: glm::quat const &

    __mul__(q, v) -> vec4

    Parameters
    ----------
    q: glm::quat const &
    v: glm::vec4 const &

    __mul__(v, q) -> vec4

    Parameters
    ----------
    v: glm::vec4 const &
    q: glm::quat const &

    __mul__(q, s) -> quat

    Parameters
    ----------
    q: glm::quat const &
    s: float const &

    __mul__(s, q) -> quat

    Parameters
    ----------
    s: float const &
    q: glm::quat const &

    """
    return _GLM.__mul__(*args)

def __truediv__(*args):
    """
    __truediv__(v, scalar) -> ivec2

    Parameters
    ----------
    v: glm::ivec2 const &
    scalar: int

    __truediv__(scalar, v) -> ivec2

    Parameters
    ----------
    scalar: int
    v: glm::ivec2 const &

    __truediv__(v1, v2) -> ivec2

    Parameters
    ----------
    v1: glm::ivec2 const &
    v2: glm::ivec2 const &

    __truediv__(v, scalar) -> ivec3

    Parameters
    ----------
    v: glm::ivec3 const &
    scalar: int

    __truediv__(scalar, v) -> ivec3

    Parameters
    ----------
    scalar: int
    v: glm::ivec3 const &

    __truediv__(v1, v2) -> ivec3

    Parameters
    ----------
    v1: glm::ivec3 const &
    v2: glm::ivec3 const &

    __truediv__(v, scalar) -> ivec4

    Parameters
    ----------
    v: glm::ivec4 const &
    scalar: int

    __truediv__(scalar, v) -> ivec4

    Parameters
    ----------
    scalar: int
    v: glm::ivec4 const &

    __truediv__(v1, v2) -> ivec4

    Parameters
    ----------
    v1: glm::ivec4 const &
    v2: glm::ivec4 const &

    __truediv__(v, scalar) -> vec2

    Parameters
    ----------
    v: glm::vec2 const &
    scalar: float

    __truediv__(scalar, v) -> vec2

    Parameters
    ----------
    scalar: float
    v: glm::vec2 const &

    __truediv__(v1, v2) -> vec2

    Parameters
    ----------
    v1: glm::vec2 const &
    v2: glm::vec2 const &

    __truediv__(v, scalar) -> vec3

    Parameters
    ----------
    v: glm::vec3 const &
    scalar: float

    __truediv__(scalar, v) -> vec3

    Parameters
    ----------
    scalar: float
    v: glm::vec3 const &

    __truediv__(v1, v2) -> vec3

    Parameters
    ----------
    v1: glm::vec3 const &
    v2: glm::vec3 const &

    __truediv__(v, scalar) -> vec4

    Parameters
    ----------
    v: glm::vec4 const &
    scalar: float

    __truediv__(scalar, v) -> vec4

    Parameters
    ----------
    scalar: float
    v: glm::vec4 const &

    __truediv__(v1, v2) -> vec4

    Parameters
    ----------
    v1: glm::vec4 const &
    v2: glm::vec4 const &

    __truediv__(m, scalar) -> mat3

    Parameters
    ----------
    m: glm::mat3 const &
    scalar: float

    __truediv__(scalar, m) -> mat3

    Parameters
    ----------
    scalar: float
    m: glm::mat3 const &

    __truediv__(m1, m2) -> mat3

    Parameters
    ----------
    m1: glm::mat3 const &
    m2: glm::mat3 const &

    __truediv__(m, v) -> vec3

    Parameters
    ----------
    m: glm::mat3 const &
    v: glm::vec3 const &

    __truediv__(v, m) -> vec3

    Parameters
    ----------
    v: glm::vec3 const &
    m: glm::mat3 const &

    __truediv__(m, scalar) -> mat4

    Parameters
    ----------
    m: glm::mat4 const &
    scalar: float

    __truediv__(scalar, m) -> mat4

    Parameters
    ----------
    scalar: float
    m: glm::mat4 const &

    __truediv__(m1, m2) -> mat4

    Parameters
    ----------
    m1: glm::mat4 const &
    m2: glm::mat4 const &

    __truediv__(m, v) -> vec4

    Parameters
    ----------
    m: glm::mat4 const &
    v: glm::vec4 const &

    __truediv__(v, m) -> vec4

    Parameters
    ----------
    v: glm::vec4 const &
    m: glm::mat4 const &

    __truediv__(q, s) -> quat

    Parameters
    ----------
    q: glm::quat const &
    s: float const &

    """
    return _GLM.__truediv__(*args)

def __eq__(*args):
    """
    __eq__(v1, v2) -> bool

    Parameters
    ----------
    v1: glm::ivec2 const &
    v2: glm::ivec2 const &

    __eq__(v1, v2) -> bool

    Parameters
    ----------
    v1: glm::ivec3 const &
    v2: glm::ivec3 const &

    __eq__(v1, v2) -> bool

    Parameters
    ----------
    v1: glm::ivec4 const &
    v2: glm::ivec4 const &

    __eq__(v1, v2) -> bool

    Parameters
    ----------
    v1: glm::vec2 const &
    v2: glm::vec2 const &

    __eq__(v1, v2) -> bool

    Parameters
    ----------
    v1: glm::vec3 const &
    v2: glm::vec3 const &

    __eq__(v1, v2) -> bool

    Parameters
    ----------
    v1: glm::vec4 const &
    v2: glm::vec4 const &

    __eq__(m1, m2) -> bool

    Parameters
    ----------
    m1: glm::mat3 const &
    m2: glm::mat3 const &

    __eq__(m1, m2) -> bool

    Parameters
    ----------
    m1: glm::mat4 const &
    m2: glm::mat4 const &

    __eq__(q1, q2) -> bool

    Parameters
    ----------
    q1: glm::quat const &
    q2: glm::quat const &

    """
    return _GLM.__eq__(*args)

def __ne__(*args):
    """
    __ne__(v1, v2) -> bool

    Parameters
    ----------
    v1: glm::ivec2 const &
    v2: glm::ivec2 const &

    __ne__(v1, v2) -> bool

    Parameters
    ----------
    v1: glm::ivec3 const &
    v2: glm::ivec3 const &

    __ne__(v1, v2) -> bool

    Parameters
    ----------
    v1: glm::ivec4 const &
    v2: glm::ivec4 const &

    __ne__(v1, v2) -> bool

    Parameters
    ----------
    v1: glm::vec2 const &
    v2: glm::vec2 const &

    __ne__(v1, v2) -> bool

    Parameters
    ----------
    v1: glm::vec3 const &
    v2: glm::vec3 const &

    __ne__(v1, v2) -> bool

    Parameters
    ----------
    v1: glm::vec4 const &
    v2: glm::vec4 const &

    __ne__(m1, m2) -> bool

    Parameters
    ----------
    m1: glm::mat3 const &
    m2: glm::mat3 const &

    __ne__(m1, m2) -> bool

    Parameters
    ----------
    m1: glm::mat4 const &
    m2: glm::mat4 const &

    __ne__(q1, q2) -> bool

    Parameters
    ----------
    q1: glm::quat const &
    q2: glm::quat const &

    """
    return _GLM.__ne__(*args)

def conjugate(q):
    """
    conjugate(q) -> quat

    Parameters
    ----------
    q: glm::quat const &

    """
    return _GLM.conjugate(q)

def eulerAngles(x):
    """
    eulerAngles(x) -> vec3

    Parameters
    ----------
    x: glm::quat const &

    """
    return _GLM.eulerAngles(x)

def roll(x):
    """
    roll(x) -> float

    Parameters
    ----------
    x: glm::quat const &

    """
    return _GLM.roll(x)

def pitch(x):
    """
    pitch(x) -> float

    Parameters
    ----------
    x: glm::quat const &

    """
    return _GLM.pitch(x)

def yaw(x):
    """
    yaw(x) -> float

    Parameters
    ----------
    x: glm::quat const &

    """
    return _GLM.yaw(x)

def mat3_cast(x):
    """
    mat3_cast(x) -> mat3

    Parameters
    ----------
    x: glm::quat const &

    """
    return _GLM.mat3_cast(x)

def mat4_cast(x):
    """
    mat4_cast(x) -> mat4

    Parameters
    ----------
    x: glm::quat const &

    """
    return _GLM.mat4_cast(x)

def quat_cast(*args):
    """
    quat_cast(x) -> quat

    Parameters
    ----------
    x: glm::mat3 const &

    quat_cast(x) -> quat

    Parameters
    ----------
    x: glm::mat4 const &

    """
    return _GLM.quat_cast(*args)

def axis(x):
    """
    axis(x) -> vec3

    Parameters
    ----------
    x: glm::quat const &

    """
    return _GLM.axis(x)

def angleAxis(angle, axis):
    """
    angleAxis(angle, axis) -> quat

    Parameters
    ----------
    angle: float const &
    axis: glm::vec3 const &

    """
    return _GLM.angleAxis(angle, axis)

def epsilon():
    """epsilon() -> float"""
    return _GLM.epsilon()

def zero():
    """zero() -> float"""
    return _GLM.zero()

def one():
    """one() -> float"""
    return _GLM.one()

def pi():
    """pi() -> float"""
    return _GLM.pi()

def root_pi():
    """root_pi() -> float"""
    return _GLM.root_pi()

def half_pi():
    """half_pi() -> float"""
    return _GLM.half_pi()

def quarter_pi():
    """quarter_pi() -> float"""
    return _GLM.quarter_pi()

def one_over_pi():
    """one_over_pi() -> float"""
    return _GLM.one_over_pi()

def two_over_pi():
    """two_over_pi() -> float"""
    return _GLM.two_over_pi()

def two_over_root_pi():
    """two_over_root_pi() -> float"""
    return _GLM.two_over_root_pi()

def one_over_root_two():
    """one_over_root_two() -> float"""
    return _GLM.one_over_root_two()

def root_half_pi():
    """root_half_pi() -> float"""
    return _GLM.root_half_pi()

def root_two_pi():
    """root_two_pi() -> float"""
    return _GLM.root_two_pi()

def root_ln_four():
    """root_ln_four() -> float"""
    return _GLM.root_ln_four()

def e():
    """e() -> float"""
    return _GLM.e()

def euler():
    """euler() -> float"""
    return _GLM.euler()

def root_two():
    """root_two() -> float"""
    return _GLM.root_two()

def root_three():
    """root_three() -> float"""
    return _GLM.root_three()

def root_five():
    """root_five() -> float"""
    return _GLM.root_five()

def ln_two():
    """ln_two() -> float"""
    return _GLM.ln_two()

def ln_ten():
    """ln_ten() -> float"""
    return _GLM.ln_ten()

def ln_ln_two():
    """ln_ln_two() -> float"""
    return _GLM.ln_ln_two()

def third():
    """third() -> float"""
    return _GLM.third()

def two_thirds():
    """two_thirds() -> float"""
    return _GLM.two_thirds()

def golden_ratio():
    """golden_ratio() -> float"""
    return _GLM.golden_ratio()

def abs(*args):
    """
    abs(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    abs(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    abs(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    abs(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.abs(*args)

def sign(*args):
    """
    sign(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    sign(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    sign(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    sign(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.sign(*args)

def floor(*args):
    """
    floor(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    floor(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    floor(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    floor(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.floor(*args)

def trunc(*args):
    """
    trunc(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    trunc(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    trunc(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    trunc(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.trunc(*args)

def round(*args):
    """
    round(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    round(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    round(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    round(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.round(*args)

def roundEven(*args):
    """
    roundEven(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    roundEven(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    roundEven(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    roundEven(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.roundEven(*args)

def ceil(*args):
    """
    ceil(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    ceil(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    ceil(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    ceil(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.ceil(*args)

def fract(*args):
    """
    fract(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    fract(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    fract(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    fract(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.fract(*args)

def mod(*args):
    """
    mod(arg1, arg2) -> float

    Parameters
    ----------
    arg1: float const &
    arg2: float const &

    mod(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    mod(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    mod(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &

    mod(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: float const &

    mod(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: float const &

    mod(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: float const &

    """
    return _GLM.mod(*args)

def modf(*args):
    """
    modf(arg1, arg2) -> float

    Parameters
    ----------
    arg1: float const &
    arg2: float &

    modf(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 &

    modf(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 &

    modf(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 &

    """
    return _GLM.modf(*args)

def min(*args):
    """
    min(arg1, arg2) -> float

    Parameters
    ----------
    arg1: float const &
    arg2: float const &

    min(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    min(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    min(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &

    min(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: float const &

    min(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: float const &

    min(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: float const &

    """
    return _GLM.min(*args)

def max(*args):
    """
    max(arg1, arg2) -> float

    Parameters
    ----------
    arg1: float const &
    arg2: float const &

    max(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    max(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    max(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &

    max(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: float const &

    max(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: float const &

    max(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: float const &

    """
    return _GLM.max(*args)

def clamp(*args):
    """
    clamp(arg1, arg2, arg3) -> float

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: float const &

    clamp(arg1, arg2, arg3) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: glm::vec2 const &

    clamp(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: glm::vec3 const &

    clamp(arg1, arg2, arg3) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &
    arg3: glm::vec4 const &

    clamp(arg1, arg2, arg3) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: float const &
    arg3: float const &

    clamp(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: float const &
    arg3: float const &

    clamp(arg1, arg2, arg3) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: float const &
    arg3: float const &

    """
    return _GLM.clamp(*args)

def mix(*args):
    """
    mix(x, y, a) -> quat

    Parameters
    ----------
    x: glm::quat const &
    y: glm::quat const &
    a: float

    mix(arg1, arg2, arg3) -> float

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: float const &

    mix(arg1, arg2, arg3) -> float

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: bool const &

    mix(arg1, arg2, arg3) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: glm::vec2 const &

    mix(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: glm::vec3 const &

    mix(arg1, arg2, arg3) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &
    arg3: glm::vec4 const &

    mix(arg1, arg2, arg3) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: bool const &

    mix(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: bool const &

    mix(arg1, arg2, arg3) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &
    arg3: bool const &

    """
    return _GLM.mix(*args)

def step(*args):
    """
    step(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    step(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    step(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &

    step(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: float const &
    arg2: glm::vec2 const &

    step(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: float const &
    arg2: glm::vec3 const &

    step(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: float const &
    arg2: glm::vec4 const &

    """
    return _GLM.step(*args)

def smoothstep(*args):
    """
    smoothstep(arg1, arg2, arg3) -> float

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: float const &

    smoothstep(arg1, arg2, arg3) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: glm::vec2 const &

    smoothstep(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: glm::vec3 const &

    smoothstep(arg1, arg2, arg3) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &
    arg3: glm::vec4 const &

    smoothstep(arg1, arg2, arg3) -> vec2

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: glm::vec2 const &

    smoothstep(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: glm::vec3 const &

    smoothstep(arg1, arg2, arg3) -> vec4

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: glm::vec4 const &

    """
    return _GLM.smoothstep(*args)

def isnan(arg1):
    """
    isnan(arg1) -> bool

    Parameters
    ----------
    arg1: float const &

    """
    return _GLM.isnan(arg1)

def isinf(arg1):
    """
    isinf(arg1) -> bool

    Parameters
    ----------
    arg1: float const &

    """
    return _GLM.isinf(arg1)

def fma(*args):
    """
    fma(arg1, arg2, arg3) -> float

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: float const &

    fma(arg1, arg2, arg3) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: glm::vec2 const &

    fma(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: glm::vec3 const &

    fma(arg1, arg2, arg3) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &
    arg3: glm::vec4 const &

    """
    return _GLM.fma(*args)

def pow(*args):
    """
    pow(arg1, arg2) -> float

    Parameters
    ----------
    arg1: float const &
    arg2: float const &

    pow(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    pow(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    pow(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &

    """
    return _GLM.pow(*args)

def exp(*args):
    """
    exp(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    exp(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    exp(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    exp(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.exp(*args)

def log(*args):
    """
    log(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    log(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    log(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    log(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.log(*args)

def exp2(*args):
    """
    exp2(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    exp2(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    exp2(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    exp2(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.exp2(*args)

def log2(*args):
    """
    log2(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    log2(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    log2(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    log2(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.log2(*args)

def sqrt(*args):
    """
    sqrt(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    sqrt(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    sqrt(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.sqrt(*args)

def inversesqrt(*args):
    """
    inversesqrt(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    inversesqrt(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    inversesqrt(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    inversesqrt(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.inversesqrt(*args)

def length(*args):
    """
    length(q) -> float

    Parameters
    ----------
    q: glm::quat const &

    length(arg1) -> float

    Parameters
    ----------
    arg1: glm::vec2 const &

    length(arg1) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &

    length(arg1) -> float

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.length(*args)

def distance(*args):
    """
    distance(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    distance(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    distance(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &

    """
    return _GLM.distance(*args)

def dot(*args):
    """
    dot(x, y) -> float

    Parameters
    ----------
    x: glm::quat const &
    y: glm::quat const &

    dot(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    dot(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    dot(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &

    """
    return _GLM.dot(*args)

def cross(arg1, arg2):
    """
    cross(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    """
    return _GLM.cross(arg1, arg2)

def normalize(*args):
    """
    normalize(q) -> quat

    Parameters
    ----------
    q: glm::quat const &

    normalize(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    normalize(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    normalize(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.normalize(*args)

def faceforward(*args):
    """
    faceforward(arg1, arg2, arg3) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: glm::vec2 const &

    faceforward(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: glm::vec3 const &

    faceforward(arg1, arg2, arg3) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &
    arg3: glm::vec4 const &

    """
    return _GLM.faceforward(*args)

def reflect(*args):
    """
    reflect(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    reflect(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    reflect(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &

    """
    return _GLM.reflect(*args)

def refract(*args):
    """
    refract(arg1, arg2, arg3) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: float const &

    refract(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: float const &

    refract(arg1, arg2, arg3) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &
    arg3: float const &

    """
    return _GLM.refract(*args)

def matrixCompMult(*args):
    """
    matrixCompMult(arg1, arg2) -> mat3

    Parameters
    ----------
    arg1: glm::mat3 const &
    arg2: glm::mat3 const &

    matrixCompMult(arg1, arg2) -> mat4

    Parameters
    ----------
    arg1: glm::mat4 const &
    arg2: glm::mat4 const &

    """
    return _GLM.matrixCompMult(*args)

def outerProduct(*args):
    """
    outerProduct(arg1, arg2) -> mat3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    outerProduct(arg1, arg2) -> mat4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &

    """
    return _GLM.outerProduct(*args)

def transpose(*args):
    """
    transpose(arg1) -> mat3

    Parameters
    ----------
    arg1: glm::mat3 const &

    transpose(arg1) -> mat4

    Parameters
    ----------
    arg1: glm::mat4 const &

    """
    return _GLM.transpose(*args)

def determinant(*args):
    """
    determinant(arg1) -> float

    Parameters
    ----------
    arg1: glm::mat3 const &

    determinant(arg1) -> float

    Parameters
    ----------
    arg1: glm::mat4 const &

    """
    return _GLM.determinant(*args)

def inverse(*args):
    """
    inverse(q) -> quat

    Parameters
    ----------
    q: glm::quat const &

    inverse(arg1) -> mat3

    Parameters
    ----------
    arg1: glm::mat3 const &

    inverse(arg1) -> mat4

    Parameters
    ----------
    arg1: glm::mat4 const &

    """
    return _GLM.inverse(*args)

def radians(*args):
    """
    radians(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    radians(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    radians(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    radians(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.radians(*args)

def degrees(*args):
    """
    degrees(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    degrees(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    degrees(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    degrees(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.degrees(*args)

def sin(*args):
    """
    sin(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    sin(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    sin(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    sin(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.sin(*args)

def cos(*args):
    """
    cos(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    cos(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    cos(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    cos(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.cos(*args)

def tan(*args):
    """
    tan(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    tan(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    tan(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    tan(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.tan(*args)

def asin(*args):
    """
    asin(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    asin(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    asin(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    asin(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.asin(*args)

def acos(*args):
    """
    acos(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    acos(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    acos(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    acos(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.acos(*args)

def atan(*args):
    """
    atan(arg1, arg2) -> float

    Parameters
    ----------
    arg1: float const &
    arg2: float const &

    atan(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    atan(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    atan(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &

    atan(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    atan(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    atan(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    atan(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.atan(*args)

def sinh(*args):
    """
    sinh(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    sinh(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    sinh(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    sinh(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.sinh(*args)

def cosh(*args):
    """
    cosh(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    cosh(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    cosh(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    cosh(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.cosh(*args)

def tanh(*args):
    """
    tanh(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    tanh(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    tanh(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    tanh(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.tanh(*args)

def asinh(*args):
    """
    asinh(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    asinh(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    asinh(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    asinh(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.asinh(*args)

def acosh(*args):
    """
    acosh(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    acosh(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    acosh(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    acosh(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.acosh(*args)

def atanh(*args):
    """
    atanh(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    atanh(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    atanh(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    atanh(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.atanh(*args)

def epsilonEqual(*args):
    """
    epsilonEqual(arg1, arg2, arg3) -> bool

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: float const &

    epsilonEqual(arg1, arg2, arg3) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: float const &

    epsilonEqual(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: float const &

    """
    return _GLM.epsilonEqual(*args)

def epsilonNotEqual(*args):
    """
    epsilonNotEqual(arg1, arg2, arg3) -> bool

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: float const &

    epsilonNotEqual(arg1, arg2, arg3) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: float const &

    epsilonNotEqual(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: float const &

    """
    return _GLM.epsilonNotEqual(*args)

def row(*args):
    """
    row(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::mat3 const &
    arg2: glm::length_t const &

    row(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::mat4 const &
    arg2: glm::length_t const &

    row(arg1, arg2, arg3) -> mat3

    Parameters
    ----------
    arg1: glm::mat3 const &
    arg2: glm::length_t const &
    arg3: glm::vec3 const &

    row(arg1, arg2, arg3) -> mat4

    Parameters
    ----------
    arg1: glm::mat4 const &
    arg2: glm::length_t const &
    arg3: glm::vec4 const &

    """
    return _GLM.row(*args)

def column(*args):
    """
    column(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::mat3 const &
    arg2: glm::length_t const &

    column(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::mat4 const &
    arg2: glm::length_t const &

    column(arg1, arg2, arg3) -> mat3

    Parameters
    ----------
    arg1: glm::mat3 const &
    arg2: glm::length_t const &
    arg3: glm::vec3 const &

    column(arg1, arg2, arg3) -> mat4

    Parameters
    ----------
    arg1: glm::mat4 const &
    arg2: glm::length_t const &
    arg3: glm::vec4 const &

    """
    return _GLM.column(*args)

def affineInverse(*args):
    """
    affineInverse(arg1) -> mat3

    Parameters
    ----------
    arg1: glm::mat3 const &

    affineInverse(arg1) -> mat4

    Parameters
    ----------
    arg1: glm::mat4 const &

    """
    return _GLM.affineInverse(*args)

def inverseTranspose(*args):
    """
    inverseTranspose(arg1) -> mat3

    Parameters
    ----------
    arg1: glm::mat3 const &

    inverseTranspose(arg1) -> mat4

    Parameters
    ----------
    arg1: glm::mat4 const &

    """
    return _GLM.inverseTranspose(*args)

def ortho(*args):
    """
    ortho(arg1, arg2, arg3, arg4) -> mat4

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: float const &
    arg4: float const &

    ortho(arg1, arg2, arg3, arg4, arg5, arg6) -> mat4

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: float const &
    arg4: float const &
    arg5: float const &
    arg6: float const &

    """
    return _GLM.ortho(*args)

def frustum(arg1, arg2, arg3, arg4, arg5, arg6):
    """
    frustum(arg1, arg2, arg3, arg4, arg5, arg6) -> mat4

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: float const &
    arg4: float const &
    arg5: float const &
    arg6: float const &

    """
    return _GLM.frustum(arg1, arg2, arg3, arg4, arg5, arg6)

def perspective(arg1, arg2, arg3, arg4):
    """
    perspective(arg1, arg2, arg3, arg4) -> mat4

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: float const &
    arg4: float const &

    """
    return _GLM.perspective(arg1, arg2, arg3, arg4)

def perspectiveFov(arg1, arg2, arg3, arg4, arg5):
    """
    perspectiveFov(arg1, arg2, arg3, arg4, arg5) -> mat4

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: float const &
    arg4: float const &
    arg5: float const &

    """
    return _GLM.perspectiveFov(arg1, arg2, arg3, arg4, arg5)

def infinitePerspective(arg1, arg2, arg3):
    """
    infinitePerspective(arg1, arg2, arg3) -> mat4

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: float const &

    """
    return _GLM.infinitePerspective(arg1, arg2, arg3)

def tweakedInfinitePerspective(arg1, arg2, arg3):
    """
    tweakedInfinitePerspective(arg1, arg2, arg3) -> mat4

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: float const &

    """
    return _GLM.tweakedInfinitePerspective(arg1, arg2, arg3)

def project(arg1, arg2, arg3, arg4):
    """
    project(arg1, arg2, arg3, arg4) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::mat4 const &
    arg3: glm::mat4 const &
    arg4: glm::vec4 const &

    """
    return _GLM.project(arg1, arg2, arg3, arg4)

def unProject(arg1, arg2, arg3, arg4):
    """
    unProject(arg1, arg2, arg3, arg4) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::mat4 const &
    arg3: glm::mat4 const &
    arg4: glm::vec4 const &

    """
    return _GLM.unProject(arg1, arg2, arg3, arg4)

def pickMatrix(arg1, arg2, arg3):
    """
    pickMatrix(arg1, arg2, arg3) -> mat4

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: glm::vec4 const &

    """
    return _GLM.pickMatrix(arg1, arg2, arg3)

def lookAt(arg1, arg2, arg3):
    """
    lookAt(arg1, arg2, arg3) -> mat4

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: glm::vec3 const &

    """
    return _GLM.lookAt(arg1, arg2, arg3)

def atan2(*args):
    """
    atan2(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    atan2(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    atan2(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &

    """
    return _GLM.atan2(*args)

def isfinite(*args):
    """
    isfinite(arg1) -> bool

    Parameters
    ----------
    arg1: float &

    isfinite(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 &

    isfinite(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 &

    isfinite(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 &

    """
    return _GLM.isfinite(*args)

def lerp(*args):
    """
    lerp(x, y, a) -> quat

    Parameters
    ----------
    x: glm::quat const &
    y: glm::quat const &
    a: float

    lerp(arg1, arg2, arg3) -> float

    Parameters
    ----------
    arg1: float const &
    arg2: float const &
    arg3: float const &

    lerp(arg1, arg2, arg3) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: glm::vec2 const &

    lerp(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: glm::vec3 const &

    lerp(arg1, arg2, arg3) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &
    arg3: glm::vec4 const &

    lerp(arg1, arg2, arg3) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: float const &

    lerp(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: float const &

    lerp(arg1, arg2, arg3) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &
    arg3: float const &

    """
    return _GLM.lerp(*args)

def saturate(*args):
    """
    saturate(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    saturate(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    saturate(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.saturate(*args)

def fastSqrt(*args):
    """
    fastSqrt(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    fastSqrt(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    fastSqrt(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.fastSqrt(*args)

def fastInverseSqrt(*args):
    """
    fastInverseSqrt(arg1) -> float

    Parameters
    ----------
    arg1: float const &

    fastInverseSqrt(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    fastInverseSqrt(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    fastInverseSqrt(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.fastInverseSqrt(*args)

def fastLength(*args):
    """
    fastLength(arg1) -> float

    Parameters
    ----------
    arg1: glm::vec2 const &

    fastLength(arg1) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &

    fastLength(arg1) -> float

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.fastLength(*args)

def fastDistance(*args):
    """
    fastDistance(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    fastDistance(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    fastDistance(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &

    """
    return _GLM.fastDistance(*args)

def fastNormalize(*args):
    """
    fastNormalize(arg1) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &

    fastNormalize(arg1) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &

    fastNormalize(arg1) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.fastNormalize(*args)

def length2(*args):
    """
    length2(arg1) -> float

    Parameters
    ----------
    arg1: glm::vec2 const &

    length2(arg1) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &

    length2(arg1) -> float

    Parameters
    ----------
    arg1: glm::vec4 const &

    """
    return _GLM.length2(*args)

def distance2(*args):
    """
    distance2(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    distance2(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    distance2(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &

    """
    return _GLM.distance2(*args)

def l1Norm(*args):
    """
    l1Norm(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    l1Norm(arg1) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &

    """
    return _GLM.l1Norm(*args)

def l2Norm(*args):
    """
    l2Norm(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    l2Norm(arg1) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &

    """
    return _GLM.l2Norm(*args)

def lxNorm(*args):
    """
    lxNorm(arg1, arg2, arg3) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: unsigned int

    lxNorm(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: unsigned int

    """
    return _GLM.lxNorm(*args)

def perp(*args):
    """
    perp(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    perp(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    """
    return _GLM.perp(*args)

def orientation(arg1, arg2):
    """
    orientation(arg1, arg2) -> mat4

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    """
    return _GLM.orientation(arg1, arg2)

def rotateX(*args):
    """
    rotateX(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: float const &

    rotateX(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: float const &

    """
    return _GLM.rotateX(*args)

def rotateY(*args):
    """
    rotateY(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: float const &

    rotateY(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: float const &

    """
    return _GLM.rotateY(*args)

def rotateZ(*args):
    """
    rotateZ(arg1, arg2) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: float const &

    rotateZ(arg1, arg2) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: float const &

    """
    return _GLM.rotateZ(*args)

def slerp(*args):
    """
    slerp(x, y, a) -> quat

    Parameters
    ----------
    x: glm::quat const &
    y: glm::quat const &
    a: float

    slerp(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: float const &

    """
    return _GLM.slerp(*args)

def catmullRom(*args):
    """
    catmullRom(arg1, arg2, arg3, arg4, arg5) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: glm::vec2 const &
    arg4: glm::vec2 const &
    arg5: float const &

    catmullRom(arg1, arg2, arg3, arg4, arg5) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: glm::vec3 const &
    arg4: glm::vec3 const &
    arg5: float const &

    """
    return _GLM.catmullRom(*args)

def cubic(*args):
    """
    cubic(arg1, arg2, arg3, arg4, arg5) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: glm::vec2 const &
    arg4: glm::vec2 const &
    arg5: float const &

    cubic(arg1, arg2, arg3, arg4, arg5) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: glm::vec3 const &
    arg4: glm::vec3 const &
    arg5: float const &

    """
    return _GLM.cubic(*args)

def hermite(*args):
    """
    hermite(arg1, arg2, arg3, arg4, arg5) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &
    arg3: glm::vec2 const &
    arg4: glm::vec2 const &
    arg5: float const &

    hermite(arg1, arg2, arg3, arg4, arg5) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: glm::vec3 const &
    arg4: glm::vec3 const &
    arg5: float const &

    """
    return _GLM.hermite(*args)

def rotate(*args):
    """
    rotate(q, angle, axis) -> quat

    Parameters
    ----------
    q: glm::quat const &
    angle: float const &
    axis: glm::vec3 const &

    rotate(arg1, arg2, arg3) -> mat4

    Parameters
    ----------
    arg1: glm::mat4 const &
    arg2: float const &
    arg3: glm::vec3 const &

    rotate(arg1, arg2) -> vec2

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: float const &

    rotate(arg1, arg2, arg3) -> vec3

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: float const &
    arg3: glm::vec3 const &

    rotate(arg1, arg2, arg3) -> vec4

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: float const &
    arg3: glm::vec3 const &

    rotate(angle, arg2) -> mat4

    Parameters
    ----------
    angle: float
    arg2: glm::vec3 const &

    """
    return _GLM.rotate(*args)

def scale(*args):
    """
    scale(arg1, arg2) -> mat4

    Parameters
    ----------
    arg1: glm::mat4 const &
    arg2: glm::vec3 const &

    scale(arg1) -> mat4

    Parameters
    ----------
    arg1: glm::vec3 const &

    """
    return _GLM.scale(*args)

def translate(*args):
    """
    translate(arg1, arg2) -> mat4

    Parameters
    ----------
    arg1: glm::mat4 const &
    arg2: glm::vec3 const &

    translate(arg1) -> mat4

    Parameters
    ----------
    arg1: glm::vec3 const &

    """
    return _GLM.translate(*args)

def angle(*args):
    """
    angle(x) -> float

    Parameters
    ----------
    x: glm::quat const &

    angle(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    angle(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &

    angle(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec4 const &
    arg2: glm::vec4 const &

    """
    return _GLM.angle(*args)

def orientedAngle(*args):
    """
    orientedAngle(arg1, arg2) -> float

    Parameters
    ----------
    arg1: glm::vec2 const &
    arg2: glm::vec2 const &

    orientedAngle(arg1, arg2, arg3) -> float

    Parameters
    ----------
    arg1: glm::vec3 const &
    arg2: glm::vec3 const &
    arg3: glm::vec3 const &

    """
    return _GLM.orientedAngle(*args)
class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GLM.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """
        value(self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _GLM.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(self, n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        incr(self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _GLM.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(self, n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        decr(self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _GLM.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(self, x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _GLM.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _GLM.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _GLM.SwigPyIterator_copy(self)


    def next(self):
        """
        next(self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _GLM.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _GLM.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _GLM.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _GLM.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _GLM.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _GLM.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _GLM.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _GLM.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _GLM.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(self, x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _GLM.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GLM.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Vec2Vector(_object):
    """Proxy of C++ std::vector<(glm::vec2)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< glm::vec2 > *

        """
        return _GLM.Vec2Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::vec2 > const *

        """
        return _GLM.Vec2Vector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::vec2 > const *

        """
        return _GLM.Vec2Vector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< glm::vec2 >::size_type

        Parameters
        ----------
        self: std::vector< glm::vec2 > const *

        """
        return _GLM.Vec2Vector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> Vec2Vector

        Parameters
        ----------
        i: std::vector< glm::vec2 >::difference_type
        j: std::vector< glm::vec2 >::difference_type

        """
        return _GLM.Vec2Vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< glm::vec2 >::difference_type
        j: std::vector< glm::vec2 >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< glm::vec2 >::difference_type
        j: std::vector< glm::vec2 >::difference_type
        v: std::vector< glm::vec2,std::allocator< glm::vec2 > > const &

        """
        return _GLM.Vec2Vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< glm::vec2 >::difference_type
        j: std::vector< glm::vec2 >::difference_type

        """
        return _GLM.Vec2Vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< glm::vec2 >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _GLM.Vec2Vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> Vec2Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> vec2

        Parameters
        ----------
        i: std::vector< glm::vec2 >::difference_type

        """
        return _GLM.Vec2Vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< glm::vec2,std::allocator< glm::vec2 > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< glm::vec2 >::difference_type
        x: std::vector< glm::vec2 >::value_type const &

        """
        return _GLM.Vec2Vector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> vec2

        Parameters
        ----------
        self: std::vector< glm::vec2 > *

        """
        return _GLM.Vec2Vector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< glm::vec2 >::value_type const &

        """
        return _GLM.Vec2Vector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::vec2 > const *

        """
        return _GLM.Vec2Vector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< glm::vec2 >::size_type

        Parameters
        ----------
        self: std::vector< glm::vec2 > const *

        """
        return _GLM.Vec2Vector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< glm::vec2 > &

        """
        return _GLM.Vec2Vector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< glm::vec2 >::iterator

        Parameters
        ----------
        self: std::vector< glm::vec2 > *

        """
        return _GLM.Vec2Vector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< glm::vec2 >::iterator

        Parameters
        ----------
        self: std::vector< glm::vec2 > *

        """
        return _GLM.Vec2Vector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< glm::vec2 >::reverse_iterator

        Parameters
        ----------
        self: std::vector< glm::vec2 > *

        """
        return _GLM.Vec2Vector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< glm::vec2 >::reverse_iterator

        Parameters
        ----------
        self: std::vector< glm::vec2 > *

        """
        return _GLM.Vec2Vector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< glm::vec2 > *

        """
        return _GLM.Vec2Vector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< glm::vec2 >::allocator_type

        Parameters
        ----------
        self: std::vector< glm::vec2 > const *

        """
        return _GLM.Vec2Vector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< glm::vec2 > *

        """
        return _GLM.Vec2Vector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< glm::vec2 >::iterator

        Parameters
        ----------
        pos: std::vector< glm::vec2 >::iterator

        erase(self, first, last) -> std::vector< glm::vec2 >::iterator

        Parameters
        ----------
        first: std::vector< glm::vec2 >::iterator
        last: std::vector< glm::vec2 >::iterator

        """
        return _GLM.Vec2Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> Vec2Vector
        __init__(self, arg2) -> Vec2Vector

        Parameters
        ----------
        arg2: std::vector< glm::vec2 > const &

        __init__(self, size) -> Vec2Vector

        Parameters
        ----------
        size: std::vector< glm::vec2 >::size_type

        __init__(self, size, value) -> Vec2Vector

        Parameters
        ----------
        size: std::vector< glm::vec2 >::size_type
        value: std::vector< glm::vec2 >::value_type const &

        """
        this = _GLM.new_Vec2Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< glm::vec2 >::value_type const &

        """
        return _GLM.Vec2Vector_push_back(self, x)


    def front(self):
        """
        front(self) -> vec2

        Parameters
        ----------
        self: std::vector< glm::vec2 > const *

        """
        return _GLM.Vec2Vector_front(self)


    def back(self):
        """
        back(self) -> vec2

        Parameters
        ----------
        self: std::vector< glm::vec2 > const *

        """
        return _GLM.Vec2Vector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< glm::vec2 >::size_type
        x: std::vector< glm::vec2 >::value_type const &

        """
        return _GLM.Vec2Vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< glm::vec2 >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< glm::vec2 >::size_type
        x: std::vector< glm::vec2 >::value_type const &

        """
        return _GLM.Vec2Vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< glm::vec2 >::iterator

        Parameters
        ----------
        pos: std::vector< glm::vec2 >::iterator
        x: std::vector< glm::vec2 >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< glm::vec2 >::iterator
        n: std::vector< glm::vec2 >::size_type
        x: std::vector< glm::vec2 >::value_type const &

        """
        return _GLM.Vec2Vector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< glm::vec2 >::size_type

        """
        return _GLM.Vec2Vector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< glm::vec2 >::size_type

        Parameters
        ----------
        self: std::vector< glm::vec2 > const *

        """
        return _GLM.Vec2Vector_capacity(self)

    __swig_destroy__ = _GLM.delete_Vec2Vector
    __del__ = lambda self: None
Vec2Vector_swigregister = _GLM.Vec2Vector_swigregister
Vec2Vector_swigregister(Vec2Vector)

class Vec3Vector(_object):
    """Proxy of C++ std::vector<(glm::vec3)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< glm::vec3 > *

        """
        return _GLM.Vec3Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::vec3 > const *

        """
        return _GLM.Vec3Vector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::vec3 > const *

        """
        return _GLM.Vec3Vector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< glm::vec3 >::size_type

        Parameters
        ----------
        self: std::vector< glm::vec3 > const *

        """
        return _GLM.Vec3Vector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> Vec3Vector

        Parameters
        ----------
        i: std::vector< glm::vec3 >::difference_type
        j: std::vector< glm::vec3 >::difference_type

        """
        return _GLM.Vec3Vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< glm::vec3 >::difference_type
        j: std::vector< glm::vec3 >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< glm::vec3 >::difference_type
        j: std::vector< glm::vec3 >::difference_type
        v: std::vector< glm::vec3,std::allocator< glm::vec3 > > const &

        """
        return _GLM.Vec3Vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< glm::vec3 >::difference_type
        j: std::vector< glm::vec3 >::difference_type

        """
        return _GLM.Vec3Vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< glm::vec3 >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _GLM.Vec3Vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> Vec3Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> vec3

        Parameters
        ----------
        i: std::vector< glm::vec3 >::difference_type

        """
        return _GLM.Vec3Vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< glm::vec3,std::allocator< glm::vec3 > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< glm::vec3 >::difference_type
        x: std::vector< glm::vec3 >::value_type const &

        """
        return _GLM.Vec3Vector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> vec3

        Parameters
        ----------
        self: std::vector< glm::vec3 > *

        """
        return _GLM.Vec3Vector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< glm::vec3 >::value_type const &

        """
        return _GLM.Vec3Vector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::vec3 > const *

        """
        return _GLM.Vec3Vector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< glm::vec3 >::size_type

        Parameters
        ----------
        self: std::vector< glm::vec3 > const *

        """
        return _GLM.Vec3Vector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< glm::vec3 > &

        """
        return _GLM.Vec3Vector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< glm::vec3 >::iterator

        Parameters
        ----------
        self: std::vector< glm::vec3 > *

        """
        return _GLM.Vec3Vector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< glm::vec3 >::iterator

        Parameters
        ----------
        self: std::vector< glm::vec3 > *

        """
        return _GLM.Vec3Vector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< glm::vec3 >::reverse_iterator

        Parameters
        ----------
        self: std::vector< glm::vec3 > *

        """
        return _GLM.Vec3Vector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< glm::vec3 >::reverse_iterator

        Parameters
        ----------
        self: std::vector< glm::vec3 > *

        """
        return _GLM.Vec3Vector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< glm::vec3 > *

        """
        return _GLM.Vec3Vector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< glm::vec3 >::allocator_type

        Parameters
        ----------
        self: std::vector< glm::vec3 > const *

        """
        return _GLM.Vec3Vector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< glm::vec3 > *

        """
        return _GLM.Vec3Vector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< glm::vec3 >::iterator

        Parameters
        ----------
        pos: std::vector< glm::vec3 >::iterator

        erase(self, first, last) -> std::vector< glm::vec3 >::iterator

        Parameters
        ----------
        first: std::vector< glm::vec3 >::iterator
        last: std::vector< glm::vec3 >::iterator

        """
        return _GLM.Vec3Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> Vec3Vector
        __init__(self, arg2) -> Vec3Vector

        Parameters
        ----------
        arg2: std::vector< glm::vec3 > const &

        __init__(self, size) -> Vec3Vector

        Parameters
        ----------
        size: std::vector< glm::vec3 >::size_type

        __init__(self, size, value) -> Vec3Vector

        Parameters
        ----------
        size: std::vector< glm::vec3 >::size_type
        value: std::vector< glm::vec3 >::value_type const &

        """
        this = _GLM.new_Vec3Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< glm::vec3 >::value_type const &

        """
        return _GLM.Vec3Vector_push_back(self, x)


    def front(self):
        """
        front(self) -> vec3

        Parameters
        ----------
        self: std::vector< glm::vec3 > const *

        """
        return _GLM.Vec3Vector_front(self)


    def back(self):
        """
        back(self) -> vec3

        Parameters
        ----------
        self: std::vector< glm::vec3 > const *

        """
        return _GLM.Vec3Vector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< glm::vec3 >::size_type
        x: std::vector< glm::vec3 >::value_type const &

        """
        return _GLM.Vec3Vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< glm::vec3 >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< glm::vec3 >::size_type
        x: std::vector< glm::vec3 >::value_type const &

        """
        return _GLM.Vec3Vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< glm::vec3 >::iterator

        Parameters
        ----------
        pos: std::vector< glm::vec3 >::iterator
        x: std::vector< glm::vec3 >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< glm::vec3 >::iterator
        n: std::vector< glm::vec3 >::size_type
        x: std::vector< glm::vec3 >::value_type const &

        """
        return _GLM.Vec3Vector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< glm::vec3 >::size_type

        """
        return _GLM.Vec3Vector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< glm::vec3 >::size_type

        Parameters
        ----------
        self: std::vector< glm::vec3 > const *

        """
        return _GLM.Vec3Vector_capacity(self)

    __swig_destroy__ = _GLM.delete_Vec3Vector
    __del__ = lambda self: None
Vec3Vector_swigregister = _GLM.Vec3Vector_swigregister
Vec3Vector_swigregister(Vec3Vector)

class Vec4Vector(_object):
    """Proxy of C++ std::vector<(glm::vec4)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< glm::vec4 > *

        """
        return _GLM.Vec4Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::vec4 > const *

        """
        return _GLM.Vec4Vector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::vec4 > const *

        """
        return _GLM.Vec4Vector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< glm::vec4 >::size_type

        Parameters
        ----------
        self: std::vector< glm::vec4 > const *

        """
        return _GLM.Vec4Vector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> Vec4Vector

        Parameters
        ----------
        i: std::vector< glm::vec4 >::difference_type
        j: std::vector< glm::vec4 >::difference_type

        """
        return _GLM.Vec4Vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< glm::vec4 >::difference_type
        j: std::vector< glm::vec4 >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< glm::vec4 >::difference_type
        j: std::vector< glm::vec4 >::difference_type
        v: std::vector< glm::vec4,std::allocator< glm::vec4 > > const &

        """
        return _GLM.Vec4Vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< glm::vec4 >::difference_type
        j: std::vector< glm::vec4 >::difference_type

        """
        return _GLM.Vec4Vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< glm::vec4 >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _GLM.Vec4Vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> Vec4Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> vec4

        Parameters
        ----------
        i: std::vector< glm::vec4 >::difference_type

        """
        return _GLM.Vec4Vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< glm::vec4,std::allocator< glm::vec4 > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< glm::vec4 >::difference_type
        x: std::vector< glm::vec4 >::value_type const &

        """
        return _GLM.Vec4Vector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> vec4

        Parameters
        ----------
        self: std::vector< glm::vec4 > *

        """
        return _GLM.Vec4Vector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< glm::vec4 >::value_type const &

        """
        return _GLM.Vec4Vector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::vec4 > const *

        """
        return _GLM.Vec4Vector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< glm::vec4 >::size_type

        Parameters
        ----------
        self: std::vector< glm::vec4 > const *

        """
        return _GLM.Vec4Vector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< glm::vec4 > &

        """
        return _GLM.Vec4Vector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< glm::vec4 >::iterator

        Parameters
        ----------
        self: std::vector< glm::vec4 > *

        """
        return _GLM.Vec4Vector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< glm::vec4 >::iterator

        Parameters
        ----------
        self: std::vector< glm::vec4 > *

        """
        return _GLM.Vec4Vector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< glm::vec4 >::reverse_iterator

        Parameters
        ----------
        self: std::vector< glm::vec4 > *

        """
        return _GLM.Vec4Vector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< glm::vec4 >::reverse_iterator

        Parameters
        ----------
        self: std::vector< glm::vec4 > *

        """
        return _GLM.Vec4Vector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< glm::vec4 > *

        """
        return _GLM.Vec4Vector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< glm::vec4 >::allocator_type

        Parameters
        ----------
        self: std::vector< glm::vec4 > const *

        """
        return _GLM.Vec4Vector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< glm::vec4 > *

        """
        return _GLM.Vec4Vector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< glm::vec4 >::iterator

        Parameters
        ----------
        pos: std::vector< glm::vec4 >::iterator

        erase(self, first, last) -> std::vector< glm::vec4 >::iterator

        Parameters
        ----------
        first: std::vector< glm::vec4 >::iterator
        last: std::vector< glm::vec4 >::iterator

        """
        return _GLM.Vec4Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> Vec4Vector
        __init__(self, arg2) -> Vec4Vector

        Parameters
        ----------
        arg2: std::vector< glm::vec4 > const &

        __init__(self, size) -> Vec4Vector

        Parameters
        ----------
        size: std::vector< glm::vec4 >::size_type

        __init__(self, size, value) -> Vec4Vector

        Parameters
        ----------
        size: std::vector< glm::vec4 >::size_type
        value: std::vector< glm::vec4 >::value_type const &

        """
        this = _GLM.new_Vec4Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< glm::vec4 >::value_type const &

        """
        return _GLM.Vec4Vector_push_back(self, x)


    def front(self):
        """
        front(self) -> vec4

        Parameters
        ----------
        self: std::vector< glm::vec4 > const *

        """
        return _GLM.Vec4Vector_front(self)


    def back(self):
        """
        back(self) -> vec4

        Parameters
        ----------
        self: std::vector< glm::vec4 > const *

        """
        return _GLM.Vec4Vector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< glm::vec4 >::size_type
        x: std::vector< glm::vec4 >::value_type const &

        """
        return _GLM.Vec4Vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< glm::vec4 >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< glm::vec4 >::size_type
        x: std::vector< glm::vec4 >::value_type const &

        """
        return _GLM.Vec4Vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< glm::vec4 >::iterator

        Parameters
        ----------
        pos: std::vector< glm::vec4 >::iterator
        x: std::vector< glm::vec4 >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< glm::vec4 >::iterator
        n: std::vector< glm::vec4 >::size_type
        x: std::vector< glm::vec4 >::value_type const &

        """
        return _GLM.Vec4Vector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< glm::vec4 >::size_type

        """
        return _GLM.Vec4Vector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< glm::vec4 >::size_type

        Parameters
        ----------
        self: std::vector< glm::vec4 > const *

        """
        return _GLM.Vec4Vector_capacity(self)

    __swig_destroy__ = _GLM.delete_Vec4Vector
    __del__ = lambda self: None
Vec4Vector_swigregister = _GLM.Vec4Vector_swigregister
Vec4Vector_swigregister(Vec4Vector)

class IVec2Vector(_object):
    """Proxy of C++ std::vector<(glm::ivec2)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IVec2Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IVec2Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< glm::ivec2 > *

        """
        return _GLM.IVec2Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::ivec2 > const *

        """
        return _GLM.IVec2Vector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::ivec2 > const *

        """
        return _GLM.IVec2Vector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< glm::ivec2 >::size_type

        Parameters
        ----------
        self: std::vector< glm::ivec2 > const *

        """
        return _GLM.IVec2Vector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> IVec2Vector

        Parameters
        ----------
        i: std::vector< glm::ivec2 >::difference_type
        j: std::vector< glm::ivec2 >::difference_type

        """
        return _GLM.IVec2Vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< glm::ivec2 >::difference_type
        j: std::vector< glm::ivec2 >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< glm::ivec2 >::difference_type
        j: std::vector< glm::ivec2 >::difference_type
        v: std::vector< glm::ivec2,std::allocator< glm::ivec2 > > const &

        """
        return _GLM.IVec2Vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< glm::ivec2 >::difference_type
        j: std::vector< glm::ivec2 >::difference_type

        """
        return _GLM.IVec2Vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< glm::ivec2 >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _GLM.IVec2Vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> IVec2Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> ivec2

        Parameters
        ----------
        i: std::vector< glm::ivec2 >::difference_type

        """
        return _GLM.IVec2Vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< glm::ivec2,std::allocator< glm::ivec2 > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< glm::ivec2 >::difference_type
        x: std::vector< glm::ivec2 >::value_type const &

        """
        return _GLM.IVec2Vector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> ivec2

        Parameters
        ----------
        self: std::vector< glm::ivec2 > *

        """
        return _GLM.IVec2Vector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< glm::ivec2 >::value_type const &

        """
        return _GLM.IVec2Vector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::ivec2 > const *

        """
        return _GLM.IVec2Vector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< glm::ivec2 >::size_type

        Parameters
        ----------
        self: std::vector< glm::ivec2 > const *

        """
        return _GLM.IVec2Vector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< glm::ivec2 > &

        """
        return _GLM.IVec2Vector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< glm::ivec2 >::iterator

        Parameters
        ----------
        self: std::vector< glm::ivec2 > *

        """
        return _GLM.IVec2Vector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< glm::ivec2 >::iterator

        Parameters
        ----------
        self: std::vector< glm::ivec2 > *

        """
        return _GLM.IVec2Vector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< glm::ivec2 >::reverse_iterator

        Parameters
        ----------
        self: std::vector< glm::ivec2 > *

        """
        return _GLM.IVec2Vector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< glm::ivec2 >::reverse_iterator

        Parameters
        ----------
        self: std::vector< glm::ivec2 > *

        """
        return _GLM.IVec2Vector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< glm::ivec2 > *

        """
        return _GLM.IVec2Vector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< glm::ivec2 >::allocator_type

        Parameters
        ----------
        self: std::vector< glm::ivec2 > const *

        """
        return _GLM.IVec2Vector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< glm::ivec2 > *

        """
        return _GLM.IVec2Vector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< glm::ivec2 >::iterator

        Parameters
        ----------
        pos: std::vector< glm::ivec2 >::iterator

        erase(self, first, last) -> std::vector< glm::ivec2 >::iterator

        Parameters
        ----------
        first: std::vector< glm::ivec2 >::iterator
        last: std::vector< glm::ivec2 >::iterator

        """
        return _GLM.IVec2Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> IVec2Vector
        __init__(self, arg2) -> IVec2Vector

        Parameters
        ----------
        arg2: std::vector< glm::ivec2 > const &

        __init__(self, size) -> IVec2Vector

        Parameters
        ----------
        size: std::vector< glm::ivec2 >::size_type

        __init__(self, size, value) -> IVec2Vector

        Parameters
        ----------
        size: std::vector< glm::ivec2 >::size_type
        value: std::vector< glm::ivec2 >::value_type const &

        """
        this = _GLM.new_IVec2Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< glm::ivec2 >::value_type const &

        """
        return _GLM.IVec2Vector_push_back(self, x)


    def front(self):
        """
        front(self) -> ivec2

        Parameters
        ----------
        self: std::vector< glm::ivec2 > const *

        """
        return _GLM.IVec2Vector_front(self)


    def back(self):
        """
        back(self) -> ivec2

        Parameters
        ----------
        self: std::vector< glm::ivec2 > const *

        """
        return _GLM.IVec2Vector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< glm::ivec2 >::size_type
        x: std::vector< glm::ivec2 >::value_type const &

        """
        return _GLM.IVec2Vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< glm::ivec2 >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< glm::ivec2 >::size_type
        x: std::vector< glm::ivec2 >::value_type const &

        """
        return _GLM.IVec2Vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< glm::ivec2 >::iterator

        Parameters
        ----------
        pos: std::vector< glm::ivec2 >::iterator
        x: std::vector< glm::ivec2 >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< glm::ivec2 >::iterator
        n: std::vector< glm::ivec2 >::size_type
        x: std::vector< glm::ivec2 >::value_type const &

        """
        return _GLM.IVec2Vector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< glm::ivec2 >::size_type

        """
        return _GLM.IVec2Vector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< glm::ivec2 >::size_type

        Parameters
        ----------
        self: std::vector< glm::ivec2 > const *

        """
        return _GLM.IVec2Vector_capacity(self)

    __swig_destroy__ = _GLM.delete_IVec2Vector
    __del__ = lambda self: None
IVec2Vector_swigregister = _GLM.IVec2Vector_swigregister
IVec2Vector_swigregister(IVec2Vector)

class IVec3Vector(_object):
    """Proxy of C++ std::vector<(glm::ivec3)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IVec3Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IVec3Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< glm::ivec3 > *

        """
        return _GLM.IVec3Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::ivec3 > const *

        """
        return _GLM.IVec3Vector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::ivec3 > const *

        """
        return _GLM.IVec3Vector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< glm::ivec3 >::size_type

        Parameters
        ----------
        self: std::vector< glm::ivec3 > const *

        """
        return _GLM.IVec3Vector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> IVec3Vector

        Parameters
        ----------
        i: std::vector< glm::ivec3 >::difference_type
        j: std::vector< glm::ivec3 >::difference_type

        """
        return _GLM.IVec3Vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< glm::ivec3 >::difference_type
        j: std::vector< glm::ivec3 >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< glm::ivec3 >::difference_type
        j: std::vector< glm::ivec3 >::difference_type
        v: std::vector< glm::ivec3,std::allocator< glm::ivec3 > > const &

        """
        return _GLM.IVec3Vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< glm::ivec3 >::difference_type
        j: std::vector< glm::ivec3 >::difference_type

        """
        return _GLM.IVec3Vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< glm::ivec3 >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _GLM.IVec3Vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> IVec3Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> ivec3

        Parameters
        ----------
        i: std::vector< glm::ivec3 >::difference_type

        """
        return _GLM.IVec3Vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< glm::ivec3,std::allocator< glm::ivec3 > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< glm::ivec3 >::difference_type
        x: std::vector< glm::ivec3 >::value_type const &

        """
        return _GLM.IVec3Vector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> ivec3

        Parameters
        ----------
        self: std::vector< glm::ivec3 > *

        """
        return _GLM.IVec3Vector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< glm::ivec3 >::value_type const &

        """
        return _GLM.IVec3Vector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::ivec3 > const *

        """
        return _GLM.IVec3Vector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< glm::ivec3 >::size_type

        Parameters
        ----------
        self: std::vector< glm::ivec3 > const *

        """
        return _GLM.IVec3Vector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< glm::ivec3 > &

        """
        return _GLM.IVec3Vector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< glm::ivec3 >::iterator

        Parameters
        ----------
        self: std::vector< glm::ivec3 > *

        """
        return _GLM.IVec3Vector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< glm::ivec3 >::iterator

        Parameters
        ----------
        self: std::vector< glm::ivec3 > *

        """
        return _GLM.IVec3Vector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< glm::ivec3 >::reverse_iterator

        Parameters
        ----------
        self: std::vector< glm::ivec3 > *

        """
        return _GLM.IVec3Vector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< glm::ivec3 >::reverse_iterator

        Parameters
        ----------
        self: std::vector< glm::ivec3 > *

        """
        return _GLM.IVec3Vector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< glm::ivec3 > *

        """
        return _GLM.IVec3Vector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< glm::ivec3 >::allocator_type

        Parameters
        ----------
        self: std::vector< glm::ivec3 > const *

        """
        return _GLM.IVec3Vector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< glm::ivec3 > *

        """
        return _GLM.IVec3Vector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< glm::ivec3 >::iterator

        Parameters
        ----------
        pos: std::vector< glm::ivec3 >::iterator

        erase(self, first, last) -> std::vector< glm::ivec3 >::iterator

        Parameters
        ----------
        first: std::vector< glm::ivec3 >::iterator
        last: std::vector< glm::ivec3 >::iterator

        """
        return _GLM.IVec3Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> IVec3Vector
        __init__(self, arg2) -> IVec3Vector

        Parameters
        ----------
        arg2: std::vector< glm::ivec3 > const &

        __init__(self, size) -> IVec3Vector

        Parameters
        ----------
        size: std::vector< glm::ivec3 >::size_type

        __init__(self, size, value) -> IVec3Vector

        Parameters
        ----------
        size: std::vector< glm::ivec3 >::size_type
        value: std::vector< glm::ivec3 >::value_type const &

        """
        this = _GLM.new_IVec3Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< glm::ivec3 >::value_type const &

        """
        return _GLM.IVec3Vector_push_back(self, x)


    def front(self):
        """
        front(self) -> ivec3

        Parameters
        ----------
        self: std::vector< glm::ivec3 > const *

        """
        return _GLM.IVec3Vector_front(self)


    def back(self):
        """
        back(self) -> ivec3

        Parameters
        ----------
        self: std::vector< glm::ivec3 > const *

        """
        return _GLM.IVec3Vector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< glm::ivec3 >::size_type
        x: std::vector< glm::ivec3 >::value_type const &

        """
        return _GLM.IVec3Vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< glm::ivec3 >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< glm::ivec3 >::size_type
        x: std::vector< glm::ivec3 >::value_type const &

        """
        return _GLM.IVec3Vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< glm::ivec3 >::iterator

        Parameters
        ----------
        pos: std::vector< glm::ivec3 >::iterator
        x: std::vector< glm::ivec3 >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< glm::ivec3 >::iterator
        n: std::vector< glm::ivec3 >::size_type
        x: std::vector< glm::ivec3 >::value_type const &

        """
        return _GLM.IVec3Vector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< glm::ivec3 >::size_type

        """
        return _GLM.IVec3Vector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< glm::ivec3 >::size_type

        Parameters
        ----------
        self: std::vector< glm::ivec3 > const *

        """
        return _GLM.IVec3Vector_capacity(self)

    __swig_destroy__ = _GLM.delete_IVec3Vector
    __del__ = lambda self: None
IVec3Vector_swigregister = _GLM.IVec3Vector_swigregister
IVec3Vector_swigregister(IVec3Vector)

class IVec4Vector(_object):
    """Proxy of C++ std::vector<(glm::ivec4)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IVec4Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IVec4Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< glm::ivec4 > *

        """
        return _GLM.IVec4Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::ivec4 > const *

        """
        return _GLM.IVec4Vector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::ivec4 > const *

        """
        return _GLM.IVec4Vector___bool__(self)


    def __len__(self):
        """
        __len__(self) -> std::vector< glm::ivec4 >::size_type

        Parameters
        ----------
        self: std::vector< glm::ivec4 > const *

        """
        return _GLM.IVec4Vector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(self, i, j) -> IVec4Vector

        Parameters
        ----------
        i: std::vector< glm::ivec4 >::difference_type
        j: std::vector< glm::ivec4 >::difference_type

        """
        return _GLM.IVec4Vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< glm::ivec4 >::difference_type
        j: std::vector< glm::ivec4 >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< glm::ivec4 >::difference_type
        j: std::vector< glm::ivec4 >::difference_type
        v: std::vector< glm::ivec4,std::allocator< glm::ivec4 > > const &

        """
        return _GLM.IVec4Vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< glm::ivec4 >::difference_type
        j: std::vector< glm::ivec4 >::difference_type

        """
        return _GLM.IVec4Vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< glm::ivec4 >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _GLM.IVec4Vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> IVec4Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> ivec4

        Parameters
        ----------
        i: std::vector< glm::ivec4 >::difference_type

        """
        return _GLM.IVec4Vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< glm::ivec4,std::allocator< glm::ivec4 > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< glm::ivec4 >::difference_type
        x: std::vector< glm::ivec4 >::value_type const &

        """
        return _GLM.IVec4Vector___setitem__(self, *args)


    def pop(self):
        """
        pop(self) -> ivec4

        Parameters
        ----------
        self: std::vector< glm::ivec4 > *

        """
        return _GLM.IVec4Vector_pop(self)


    def append(self, x):
        """
        append(self, x)

        Parameters
        ----------
        x: std::vector< glm::ivec4 >::value_type const &

        """
        return _GLM.IVec4Vector_append(self, x)


    def empty(self):
        """
        empty(self) -> bool

        Parameters
        ----------
        self: std::vector< glm::ivec4 > const *

        """
        return _GLM.IVec4Vector_empty(self)


    def size(self):
        """
        size(self) -> std::vector< glm::ivec4 >::size_type

        Parameters
        ----------
        self: std::vector< glm::ivec4 > const *

        """
        return _GLM.IVec4Vector_size(self)


    def swap(self, v):
        """
        swap(self, v)

        Parameters
        ----------
        v: std::vector< glm::ivec4 > &

        """
        return _GLM.IVec4Vector_swap(self, v)


    def begin(self):
        """
        begin(self) -> std::vector< glm::ivec4 >::iterator

        Parameters
        ----------
        self: std::vector< glm::ivec4 > *

        """
        return _GLM.IVec4Vector_begin(self)


    def end(self):
        """
        end(self) -> std::vector< glm::ivec4 >::iterator

        Parameters
        ----------
        self: std::vector< glm::ivec4 > *

        """
        return _GLM.IVec4Vector_end(self)


    def rbegin(self):
        """
        rbegin(self) -> std::vector< glm::ivec4 >::reverse_iterator

        Parameters
        ----------
        self: std::vector< glm::ivec4 > *

        """
        return _GLM.IVec4Vector_rbegin(self)


    def rend(self):
        """
        rend(self) -> std::vector< glm::ivec4 >::reverse_iterator

        Parameters
        ----------
        self: std::vector< glm::ivec4 > *

        """
        return _GLM.IVec4Vector_rend(self)


    def clear(self):
        """
        clear(self)

        Parameters
        ----------
        self: std::vector< glm::ivec4 > *

        """
        return _GLM.IVec4Vector_clear(self)


    def get_allocator(self):
        """
        get_allocator(self) -> std::vector< glm::ivec4 >::allocator_type

        Parameters
        ----------
        self: std::vector< glm::ivec4 > const *

        """
        return _GLM.IVec4Vector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(self)

        Parameters
        ----------
        self: std::vector< glm::ivec4 > *

        """
        return _GLM.IVec4Vector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< glm::ivec4 >::iterator

        Parameters
        ----------
        pos: std::vector< glm::ivec4 >::iterator

        erase(self, first, last) -> std::vector< glm::ivec4 >::iterator

        Parameters
        ----------
        first: std::vector< glm::ivec4 >::iterator
        last: std::vector< glm::ivec4 >::iterator

        """
        return _GLM.IVec4Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> IVec4Vector
        __init__(self, arg2) -> IVec4Vector

        Parameters
        ----------
        arg2: std::vector< glm::ivec4 > const &

        __init__(self, size) -> IVec4Vector

        Parameters
        ----------
        size: std::vector< glm::ivec4 >::size_type

        __init__(self, size, value) -> IVec4Vector

        Parameters
        ----------
        size: std::vector< glm::ivec4 >::size_type
        value: std::vector< glm::ivec4 >::value_type const &

        """
        this = _GLM.new_IVec4Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< glm::ivec4 >::value_type const &

        """
        return _GLM.IVec4Vector_push_back(self, x)


    def front(self):
        """
        front(self) -> ivec4

        Parameters
        ----------
        self: std::vector< glm::ivec4 > const *

        """
        return _GLM.IVec4Vector_front(self)


    def back(self):
        """
        back(self) -> ivec4

        Parameters
        ----------
        self: std::vector< glm::ivec4 > const *

        """
        return _GLM.IVec4Vector_back(self)


    def assign(self, n, x):
        """
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< glm::ivec4 >::size_type
        x: std::vector< glm::ivec4 >::value_type const &

        """
        return _GLM.IVec4Vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< glm::ivec4 >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< glm::ivec4 >::size_type
        x: std::vector< glm::ivec4 >::value_type const &

        """
        return _GLM.IVec4Vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< glm::ivec4 >::iterator

        Parameters
        ----------
        pos: std::vector< glm::ivec4 >::iterator
        x: std::vector< glm::ivec4 >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< glm::ivec4 >::iterator
        n: std::vector< glm::ivec4 >::size_type
        x: std::vector< glm::ivec4 >::value_type const &

        """
        return _GLM.IVec4Vector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< glm::ivec4 >::size_type

        """
        return _GLM.IVec4Vector_reserve(self, n)


    def capacity(self):
        """
        capacity(self) -> std::vector< glm::ivec4 >::size_type

        Parameters
        ----------
        self: std::vector< glm::ivec4 > const *

        """
        return _GLM.IVec4Vector_capacity(self)

    __swig_destroy__ = _GLM.delete_IVec4Vector
    __del__ = lambda self: None
IVec4Vector_swigregister = _GLM.IVec4Vector_swigregister
IVec4Vector_swigregister(IVec4Vector)

# This file is compatible with both classic and new-style classes.


