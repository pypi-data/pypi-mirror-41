# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Libraries')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Libraries')
    _Libraries = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Libraries', [dirname(__file__)])
        except ImportError:
            import _Libraries
            return _Libraries
        try:
            _mod = imp.load_module('_Libraries', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Libraries = swig_import_helper()
    del swig_import_helper
else:
    import _Libraries
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Libraries.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _Libraries.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Libraries.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Libraries.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Libraries.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Libraries.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Libraries.SwigPyIterator_copy(self)

    def next(self):
        return _Libraries.SwigPyIterator_next(self)

    def __next__(self):
        return _Libraries.SwigPyIterator___next__(self)

    def previous(self):
        return _Libraries.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Libraries.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Libraries.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Libraries.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Libraries.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Libraries.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Libraries.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Libraries.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Libraries.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _Libraries.SHARED_PTR_DISOWN
class UInt32Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt32Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt32Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Libraries.UInt32Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Libraries.UInt32Vector___nonzero__(self)

    def __bool__(self):
        return _Libraries.UInt32Vector___bool__(self)

    def __len__(self):
        return _Libraries.UInt32Vector___len__(self)

    def __getslice__(self, i, j):
        return _Libraries.UInt32Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Libraries.UInt32Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Libraries.UInt32Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Libraries.UInt32Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Libraries.UInt32Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Libraries.UInt32Vector___setitem__(self, *args)

    def pop(self):
        return _Libraries.UInt32Vector_pop(self)

    def append(self, x):
        return _Libraries.UInt32Vector_append(self, x)

    def empty(self):
        return _Libraries.UInt32Vector_empty(self)

    def size(self):
        return _Libraries.UInt32Vector_size(self)

    def swap(self, v):
        return _Libraries.UInt32Vector_swap(self, v)

    def begin(self):
        return _Libraries.UInt32Vector_begin(self)

    def end(self):
        return _Libraries.UInt32Vector_end(self)

    def rbegin(self):
        return _Libraries.UInt32Vector_rbegin(self)

    def rend(self):
        return _Libraries.UInt32Vector_rend(self)

    def clear(self):
        return _Libraries.UInt32Vector_clear(self)

    def get_allocator(self):
        return _Libraries.UInt32Vector_get_allocator(self)

    def pop_back(self):
        return _Libraries.UInt32Vector_pop_back(self)

    def erase(self, *args):
        return _Libraries.UInt32Vector_erase(self, *args)

    def __init__(self, *args):
        this = _Libraries.new_UInt32Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Libraries.UInt32Vector_push_back(self, x)

    def front(self):
        return _Libraries.UInt32Vector_front(self)

    def back(self):
        return _Libraries.UInt32Vector_back(self)

    def assign(self, n, x):
        return _Libraries.UInt32Vector_assign(self, n, x)

    def resize(self, *args):
        return _Libraries.UInt32Vector_resize(self, *args)

    def insert(self, *args):
        return _Libraries.UInt32Vector_insert(self, *args)

    def reserve(self, n):
        return _Libraries.UInt32Vector_reserve(self, n)

    def capacity(self):
        return _Libraries.UInt32Vector_capacity(self)
    __swig_destroy__ = _Libraries.delete_UInt32Vector
    __del__ = lambda self: None
UInt32Vector_swigregister = _Libraries.UInt32Vector_swigregister
UInt32Vector_swigregister(UInt32Vector)

class UInt16Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt16Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt16Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Libraries.UInt16Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Libraries.UInt16Vector___nonzero__(self)

    def __bool__(self):
        return _Libraries.UInt16Vector___bool__(self)

    def __len__(self):
        return _Libraries.UInt16Vector___len__(self)

    def __getslice__(self, i, j):
        return _Libraries.UInt16Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Libraries.UInt16Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Libraries.UInt16Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Libraries.UInt16Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Libraries.UInt16Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Libraries.UInt16Vector___setitem__(self, *args)

    def pop(self):
        return _Libraries.UInt16Vector_pop(self)

    def append(self, x):
        return _Libraries.UInt16Vector_append(self, x)

    def empty(self):
        return _Libraries.UInt16Vector_empty(self)

    def size(self):
        return _Libraries.UInt16Vector_size(self)

    def swap(self, v):
        return _Libraries.UInt16Vector_swap(self, v)

    def begin(self):
        return _Libraries.UInt16Vector_begin(self)

    def end(self):
        return _Libraries.UInt16Vector_end(self)

    def rbegin(self):
        return _Libraries.UInt16Vector_rbegin(self)

    def rend(self):
        return _Libraries.UInt16Vector_rend(self)

    def clear(self):
        return _Libraries.UInt16Vector_clear(self)

    def get_allocator(self):
        return _Libraries.UInt16Vector_get_allocator(self)

    def pop_back(self):
        return _Libraries.UInt16Vector_pop_back(self)

    def erase(self, *args):
        return _Libraries.UInt16Vector_erase(self, *args)

    def __init__(self, *args):
        this = _Libraries.new_UInt16Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Libraries.UInt16Vector_push_back(self, x)

    def front(self):
        return _Libraries.UInt16Vector_front(self)

    def back(self):
        return _Libraries.UInt16Vector_back(self)

    def assign(self, n, x):
        return _Libraries.UInt16Vector_assign(self, n, x)

    def resize(self, *args):
        return _Libraries.UInt16Vector_resize(self, *args)

    def insert(self, *args):
        return _Libraries.UInt16Vector_insert(self, *args)

    def reserve(self, n):
        return _Libraries.UInt16Vector_reserve(self, n)

    def capacity(self):
        return _Libraries.UInt16Vector_capacity(self)
    __swig_destroy__ = _Libraries.delete_UInt16Vector
    __del__ = lambda self: None
UInt16Vector_swigregister = _Libraries.UInt16Vector_swigregister
UInt16Vector_swigregister(UInt16Vector)

class UInt8Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt8Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt8Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Libraries.UInt8Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Libraries.UInt8Vector___nonzero__(self)

    def __bool__(self):
        return _Libraries.UInt8Vector___bool__(self)

    def __len__(self):
        return _Libraries.UInt8Vector___len__(self)

    def __getslice__(self, i, j):
        return _Libraries.UInt8Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Libraries.UInt8Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Libraries.UInt8Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Libraries.UInt8Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Libraries.UInt8Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Libraries.UInt8Vector___setitem__(self, *args)

    def pop(self):
        return _Libraries.UInt8Vector_pop(self)

    def append(self, x):
        return _Libraries.UInt8Vector_append(self, x)

    def empty(self):
        return _Libraries.UInt8Vector_empty(self)

    def size(self):
        return _Libraries.UInt8Vector_size(self)

    def swap(self, v):
        return _Libraries.UInt8Vector_swap(self, v)

    def begin(self):
        return _Libraries.UInt8Vector_begin(self)

    def end(self):
        return _Libraries.UInt8Vector_end(self)

    def rbegin(self):
        return _Libraries.UInt8Vector_rbegin(self)

    def rend(self):
        return _Libraries.UInt8Vector_rend(self)

    def clear(self):
        return _Libraries.UInt8Vector_clear(self)

    def get_allocator(self):
        return _Libraries.UInt8Vector_get_allocator(self)

    def pop_back(self):
        return _Libraries.UInt8Vector_pop_back(self)

    def erase(self, *args):
        return _Libraries.UInt8Vector_erase(self, *args)

    def __init__(self, *args):
        this = _Libraries.new_UInt8Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Libraries.UInt8Vector_push_back(self, x)

    def front(self):
        return _Libraries.UInt8Vector_front(self)

    def back(self):
        return _Libraries.UInt8Vector_back(self)

    def assign(self, n, x):
        return _Libraries.UInt8Vector_assign(self, n, x)

    def resize(self, *args):
        return _Libraries.UInt8Vector_resize(self, *args)

    def insert(self, *args):
        return _Libraries.UInt8Vector_insert(self, *args)

    def reserve(self, n):
        return _Libraries.UInt8Vector_reserve(self, n)

    def capacity(self):
        return _Libraries.UInt8Vector_capacity(self)
    __swig_destroy__ = _Libraries.delete_UInt8Vector
    __del__ = lambda self: None
UInt8Vector_swigregister = _Libraries.UInt8Vector_swigregister
UInt8Vector_swigregister(UInt8Vector)

class Int32Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int32Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int32Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Libraries.Int32Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Libraries.Int32Vector___nonzero__(self)

    def __bool__(self):
        return _Libraries.Int32Vector___bool__(self)

    def __len__(self):
        return _Libraries.Int32Vector___len__(self)

    def __getslice__(self, i, j):
        return _Libraries.Int32Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Libraries.Int32Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Libraries.Int32Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Libraries.Int32Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Libraries.Int32Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Libraries.Int32Vector___setitem__(self, *args)

    def pop(self):
        return _Libraries.Int32Vector_pop(self)

    def append(self, x):
        return _Libraries.Int32Vector_append(self, x)

    def empty(self):
        return _Libraries.Int32Vector_empty(self)

    def size(self):
        return _Libraries.Int32Vector_size(self)

    def swap(self, v):
        return _Libraries.Int32Vector_swap(self, v)

    def begin(self):
        return _Libraries.Int32Vector_begin(self)

    def end(self):
        return _Libraries.Int32Vector_end(self)

    def rbegin(self):
        return _Libraries.Int32Vector_rbegin(self)

    def rend(self):
        return _Libraries.Int32Vector_rend(self)

    def clear(self):
        return _Libraries.Int32Vector_clear(self)

    def get_allocator(self):
        return _Libraries.Int32Vector_get_allocator(self)

    def pop_back(self):
        return _Libraries.Int32Vector_pop_back(self)

    def erase(self, *args):
        return _Libraries.Int32Vector_erase(self, *args)

    def __init__(self, *args):
        this = _Libraries.new_Int32Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Libraries.Int32Vector_push_back(self, x)

    def front(self):
        return _Libraries.Int32Vector_front(self)

    def back(self):
        return _Libraries.Int32Vector_back(self)

    def assign(self, n, x):
        return _Libraries.Int32Vector_assign(self, n, x)

    def resize(self, *args):
        return _Libraries.Int32Vector_resize(self, *args)

    def insert(self, *args):
        return _Libraries.Int32Vector_insert(self, *args)

    def reserve(self, n):
        return _Libraries.Int32Vector_reserve(self, n)

    def capacity(self):
        return _Libraries.Int32Vector_capacity(self)
    __swig_destroy__ = _Libraries.delete_Int32Vector
    __del__ = lambda self: None
Int32Vector_swigregister = _Libraries.Int32Vector_swigregister
Int32Vector_swigregister(Int32Vector)

class Int16Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int16Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int16Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Libraries.Int16Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Libraries.Int16Vector___nonzero__(self)

    def __bool__(self):
        return _Libraries.Int16Vector___bool__(self)

    def __len__(self):
        return _Libraries.Int16Vector___len__(self)

    def __getslice__(self, i, j):
        return _Libraries.Int16Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Libraries.Int16Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Libraries.Int16Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Libraries.Int16Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Libraries.Int16Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Libraries.Int16Vector___setitem__(self, *args)

    def pop(self):
        return _Libraries.Int16Vector_pop(self)

    def append(self, x):
        return _Libraries.Int16Vector_append(self, x)

    def empty(self):
        return _Libraries.Int16Vector_empty(self)

    def size(self):
        return _Libraries.Int16Vector_size(self)

    def swap(self, v):
        return _Libraries.Int16Vector_swap(self, v)

    def begin(self):
        return _Libraries.Int16Vector_begin(self)

    def end(self):
        return _Libraries.Int16Vector_end(self)

    def rbegin(self):
        return _Libraries.Int16Vector_rbegin(self)

    def rend(self):
        return _Libraries.Int16Vector_rend(self)

    def clear(self):
        return _Libraries.Int16Vector_clear(self)

    def get_allocator(self):
        return _Libraries.Int16Vector_get_allocator(self)

    def pop_back(self):
        return _Libraries.Int16Vector_pop_back(self)

    def erase(self, *args):
        return _Libraries.Int16Vector_erase(self, *args)

    def __init__(self, *args):
        this = _Libraries.new_Int16Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Libraries.Int16Vector_push_back(self, x)

    def front(self):
        return _Libraries.Int16Vector_front(self)

    def back(self):
        return _Libraries.Int16Vector_back(self)

    def assign(self, n, x):
        return _Libraries.Int16Vector_assign(self, n, x)

    def resize(self, *args):
        return _Libraries.Int16Vector_resize(self, *args)

    def insert(self, *args):
        return _Libraries.Int16Vector_insert(self, *args)

    def reserve(self, n):
        return _Libraries.Int16Vector_reserve(self, n)

    def capacity(self):
        return _Libraries.Int16Vector_capacity(self)
    __swig_destroy__ = _Libraries.delete_Int16Vector
    __del__ = lambda self: None
Int16Vector_swigregister = _Libraries.Int16Vector_swigregister
Int16Vector_swigregister(Int16Vector)

class Int8Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int8Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int8Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Libraries.Int8Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Libraries.Int8Vector___nonzero__(self)

    def __bool__(self):
        return _Libraries.Int8Vector___bool__(self)

    def __len__(self):
        return _Libraries.Int8Vector___len__(self)

    def __getslice__(self, i, j):
        return _Libraries.Int8Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Libraries.Int8Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Libraries.Int8Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Libraries.Int8Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Libraries.Int8Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Libraries.Int8Vector___setitem__(self, *args)

    def pop(self):
        return _Libraries.Int8Vector_pop(self)

    def append(self, x):
        return _Libraries.Int8Vector_append(self, x)

    def empty(self):
        return _Libraries.Int8Vector_empty(self)

    def size(self):
        return _Libraries.Int8Vector_size(self)

    def swap(self, v):
        return _Libraries.Int8Vector_swap(self, v)

    def begin(self):
        return _Libraries.Int8Vector_begin(self)

    def end(self):
        return _Libraries.Int8Vector_end(self)

    def rbegin(self):
        return _Libraries.Int8Vector_rbegin(self)

    def rend(self):
        return _Libraries.Int8Vector_rend(self)

    def clear(self):
        return _Libraries.Int8Vector_clear(self)

    def get_allocator(self):
        return _Libraries.Int8Vector_get_allocator(self)

    def pop_back(self):
        return _Libraries.Int8Vector_pop_back(self)

    def erase(self, *args):
        return _Libraries.Int8Vector_erase(self, *args)

    def __init__(self, *args):
        this = _Libraries.new_Int8Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Libraries.Int8Vector_push_back(self, x)

    def front(self):
        return _Libraries.Int8Vector_front(self)

    def back(self):
        return _Libraries.Int8Vector_back(self)

    def assign(self, n, x):
        return _Libraries.Int8Vector_assign(self, n, x)

    def resize(self, *args):
        return _Libraries.Int8Vector_resize(self, *args)

    def insert(self, *args):
        return _Libraries.Int8Vector_insert(self, *args)

    def reserve(self, n):
        return _Libraries.Int8Vector_reserve(self, n)

    def capacity(self):
        return _Libraries.Int8Vector_capacity(self)
    __swig_destroy__ = _Libraries.delete_Int8Vector
    __del__ = lambda self: None
Int8Vector_swigregister = _Libraries.Int8Vector_swigregister
Int8Vector_swigregister(Int8Vector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Libraries.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Libraries.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _Libraries.DoubleVector___bool__(self)

    def __len__(self):
        return _Libraries.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _Libraries.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Libraries.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Libraries.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Libraries.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Libraries.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Libraries.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _Libraries.DoubleVector_pop(self)

    def append(self, x):
        return _Libraries.DoubleVector_append(self, x)

    def empty(self):
        return _Libraries.DoubleVector_empty(self)

    def size(self):
        return _Libraries.DoubleVector_size(self)

    def swap(self, v):
        return _Libraries.DoubleVector_swap(self, v)

    def begin(self):
        return _Libraries.DoubleVector_begin(self)

    def end(self):
        return _Libraries.DoubleVector_end(self)

    def rbegin(self):
        return _Libraries.DoubleVector_rbegin(self)

    def rend(self):
        return _Libraries.DoubleVector_rend(self)

    def clear(self):
        return _Libraries.DoubleVector_clear(self)

    def get_allocator(self):
        return _Libraries.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _Libraries.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _Libraries.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _Libraries.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Libraries.DoubleVector_push_back(self, x)

    def front(self):
        return _Libraries.DoubleVector_front(self)

    def back(self):
        return _Libraries.DoubleVector_back(self)

    def assign(self, n, x):
        return _Libraries.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _Libraries.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _Libraries.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _Libraries.DoubleVector_reserve(self, n)

    def capacity(self):
        return _Libraries.DoubleVector_capacity(self)
    __swig_destroy__ = _Libraries.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _Libraries.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Libraries.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Libraries.FloatVector___nonzero__(self)

    def __bool__(self):
        return _Libraries.FloatVector___bool__(self)

    def __len__(self):
        return _Libraries.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _Libraries.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Libraries.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Libraries.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Libraries.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Libraries.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Libraries.FloatVector___setitem__(self, *args)

    def pop(self):
        return _Libraries.FloatVector_pop(self)

    def append(self, x):
        return _Libraries.FloatVector_append(self, x)

    def empty(self):
        return _Libraries.FloatVector_empty(self)

    def size(self):
        return _Libraries.FloatVector_size(self)

    def swap(self, v):
        return _Libraries.FloatVector_swap(self, v)

    def begin(self):
        return _Libraries.FloatVector_begin(self)

    def end(self):
        return _Libraries.FloatVector_end(self)

    def rbegin(self):
        return _Libraries.FloatVector_rbegin(self)

    def rend(self):
        return _Libraries.FloatVector_rend(self)

    def clear(self):
        return _Libraries.FloatVector_clear(self)

    def get_allocator(self):
        return _Libraries.FloatVector_get_allocator(self)

    def pop_back(self):
        return _Libraries.FloatVector_pop_back(self)

    def erase(self, *args):
        return _Libraries.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _Libraries.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Libraries.FloatVector_push_back(self, x)

    def front(self):
        return _Libraries.FloatVector_front(self)

    def back(self):
        return _Libraries.FloatVector_back(self)

    def assign(self, n, x):
        return _Libraries.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _Libraries.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _Libraries.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _Libraries.FloatVector_reserve(self, n)

    def capacity(self):
        return _Libraries.FloatVector_capacity(self)
    __swig_destroy__ = _Libraries.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _Libraries.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Libraries.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Libraries.StringVector___nonzero__(self)

    def __bool__(self):
        return _Libraries.StringVector___bool__(self)

    def __len__(self):
        return _Libraries.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _Libraries.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Libraries.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Libraries.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Libraries.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Libraries.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Libraries.StringVector___setitem__(self, *args)

    def pop(self):
        return _Libraries.StringVector_pop(self)

    def append(self, x):
        return _Libraries.StringVector_append(self, x)

    def empty(self):
        return _Libraries.StringVector_empty(self)

    def size(self):
        return _Libraries.StringVector_size(self)

    def swap(self, v):
        return _Libraries.StringVector_swap(self, v)

    def begin(self):
        return _Libraries.StringVector_begin(self)

    def end(self):
        return _Libraries.StringVector_end(self)

    def rbegin(self):
        return _Libraries.StringVector_rbegin(self)

    def rend(self):
        return _Libraries.StringVector_rend(self)

    def clear(self):
        return _Libraries.StringVector_clear(self)

    def get_allocator(self):
        return _Libraries.StringVector_get_allocator(self)

    def pop_back(self):
        return _Libraries.StringVector_pop_back(self)

    def erase(self, *args):
        return _Libraries.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _Libraries.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Libraries.StringVector_push_back(self, x)

    def front(self):
        return _Libraries.StringVector_front(self)

    def back(self):
        return _Libraries.StringVector_back(self)

    def assign(self, n, x):
        return _Libraries.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _Libraries.StringVector_resize(self, *args)

    def insert(self, *args):
        return _Libraries.StringVector_insert(self, *args)

    def reserve(self, n):
        return _Libraries.StringVector_reserve(self, n)

    def capacity(self):
        return _Libraries.StringVector_capacity(self)
    __swig_destroy__ = _Libraries.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _Libraries.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Libraries.IntSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Libraries.IntSet___nonzero__(self)

    def __bool__(self):
        return _Libraries.IntSet___bool__(self)

    def __len__(self):
        return _Libraries.IntSet___len__(self)

    def append(self, x):
        return _Libraries.IntSet_append(self, x)

    def __contains__(self, x):
        return _Libraries.IntSet___contains__(self, x)

    def __getitem__(self, i):
        return _Libraries.IntSet___getitem__(self, i)

    def add(self, x):
        return _Libraries.IntSet_add(self, x)

    def discard(self, x):
        return _Libraries.IntSet_discard(self, x)

    def __init__(self, *args):
        this = _Libraries.new_IntSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _Libraries.IntSet_empty(self)

    def size(self):
        return _Libraries.IntSet_size(self)

    def clear(self):
        return _Libraries.IntSet_clear(self)

    def swap(self, v):
        return _Libraries.IntSet_swap(self, v)

    def count(self, x):
        return _Libraries.IntSet_count(self, x)

    def begin(self):
        return _Libraries.IntSet_begin(self)

    def end(self):
        return _Libraries.IntSet_end(self)

    def rbegin(self):
        return _Libraries.IntSet_rbegin(self)

    def rend(self):
        return _Libraries.IntSet_rend(self)

    def erase(self, *args):
        return _Libraries.IntSet_erase(self, *args)

    def find(self, x):
        return _Libraries.IntSet_find(self, x)

    def lower_bound(self, x):
        return _Libraries.IntSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _Libraries.IntSet_upper_bound(self, x)

    def equal_range(self, x):
        return _Libraries.IntSet_equal_range(self, x)

    def insert(self, __x):
        return _Libraries.IntSet_insert(self, __x)
    __swig_destroy__ = _Libraries.delete_IntSet
    __del__ = lambda self: None
IntSet_swigregister = _Libraries.IntSet_swigregister
IntSet_swigregister(IntSet)

class DoubleSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Libraries.DoubleSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Libraries.DoubleSet___nonzero__(self)

    def __bool__(self):
        return _Libraries.DoubleSet___bool__(self)

    def __len__(self):
        return _Libraries.DoubleSet___len__(self)

    def append(self, x):
        return _Libraries.DoubleSet_append(self, x)

    def __contains__(self, x):
        return _Libraries.DoubleSet___contains__(self, x)

    def __getitem__(self, i):
        return _Libraries.DoubleSet___getitem__(self, i)

    def add(self, x):
        return _Libraries.DoubleSet_add(self, x)

    def discard(self, x):
        return _Libraries.DoubleSet_discard(self, x)

    def __init__(self, *args):
        this = _Libraries.new_DoubleSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _Libraries.DoubleSet_empty(self)

    def size(self):
        return _Libraries.DoubleSet_size(self)

    def clear(self):
        return _Libraries.DoubleSet_clear(self)

    def swap(self, v):
        return _Libraries.DoubleSet_swap(self, v)

    def count(self, x):
        return _Libraries.DoubleSet_count(self, x)

    def begin(self):
        return _Libraries.DoubleSet_begin(self)

    def end(self):
        return _Libraries.DoubleSet_end(self)

    def rbegin(self):
        return _Libraries.DoubleSet_rbegin(self)

    def rend(self):
        return _Libraries.DoubleSet_rend(self)

    def erase(self, *args):
        return _Libraries.DoubleSet_erase(self, *args)

    def find(self, x):
        return _Libraries.DoubleSet_find(self, x)

    def lower_bound(self, x):
        return _Libraries.DoubleSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _Libraries.DoubleSet_upper_bound(self, x)

    def equal_range(self, x):
        return _Libraries.DoubleSet_equal_range(self, x)

    def insert(self, __x):
        return _Libraries.DoubleSet_insert(self, __x)
    __swig_destroy__ = _Libraries.delete_DoubleSet
    __del__ = lambda self: None
DoubleSet_swigregister = _Libraries.DoubleSet_swigregister
DoubleSet_swigregister(DoubleSet)

class FloatSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Libraries.FloatSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Libraries.FloatSet___nonzero__(self)

    def __bool__(self):
        return _Libraries.FloatSet___bool__(self)

    def __len__(self):
        return _Libraries.FloatSet___len__(self)

    def append(self, x):
        return _Libraries.FloatSet_append(self, x)

    def __contains__(self, x):
        return _Libraries.FloatSet___contains__(self, x)

    def __getitem__(self, i):
        return _Libraries.FloatSet___getitem__(self, i)

    def add(self, x):
        return _Libraries.FloatSet_add(self, x)

    def discard(self, x):
        return _Libraries.FloatSet_discard(self, x)

    def __init__(self, *args):
        this = _Libraries.new_FloatSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _Libraries.FloatSet_empty(self)

    def size(self):
        return _Libraries.FloatSet_size(self)

    def clear(self):
        return _Libraries.FloatSet_clear(self)

    def swap(self, v):
        return _Libraries.FloatSet_swap(self, v)

    def count(self, x):
        return _Libraries.FloatSet_count(self, x)

    def begin(self):
        return _Libraries.FloatSet_begin(self)

    def end(self):
        return _Libraries.FloatSet_end(self)

    def rbegin(self):
        return _Libraries.FloatSet_rbegin(self)

    def rend(self):
        return _Libraries.FloatSet_rend(self)

    def erase(self, *args):
        return _Libraries.FloatSet_erase(self, *args)

    def find(self, x):
        return _Libraries.FloatSet_find(self, x)

    def lower_bound(self, x):
        return _Libraries.FloatSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _Libraries.FloatSet_upper_bound(self, x)

    def equal_range(self, x):
        return _Libraries.FloatSet_equal_range(self, x)

    def insert(self, __x):
        return _Libraries.FloatSet_insert(self, __x)
    __swig_destroy__ = _Libraries.delete_FloatSet
    __del__ = lambda self: None
FloatSet_swigregister = _Libraries.FloatSet_swigregister
FloatSet_swigregister(FloatSet)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Libraries.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Libraries.StringSet___nonzero__(self)

    def __bool__(self):
        return _Libraries.StringSet___bool__(self)

    def __len__(self):
        return _Libraries.StringSet___len__(self)

    def append(self, x):
        return _Libraries.StringSet_append(self, x)

    def __contains__(self, x):
        return _Libraries.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _Libraries.StringSet___getitem__(self, i)

    def add(self, x):
        return _Libraries.StringSet_add(self, x)

    def discard(self, x):
        return _Libraries.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _Libraries.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _Libraries.StringSet_empty(self)

    def size(self):
        return _Libraries.StringSet_size(self)

    def clear(self):
        return _Libraries.StringSet_clear(self)

    def swap(self, v):
        return _Libraries.StringSet_swap(self, v)

    def count(self, x):
        return _Libraries.StringSet_count(self, x)

    def begin(self):
        return _Libraries.StringSet_begin(self)

    def end(self):
        return _Libraries.StringSet_end(self)

    def rbegin(self):
        return _Libraries.StringSet_rbegin(self)

    def rend(self):
        return _Libraries.StringSet_rend(self)

    def erase(self, *args):
        return _Libraries.StringSet_erase(self, *args)

    def find(self, x):
        return _Libraries.StringSet_find(self, x)

    def lower_bound(self, x):
        return _Libraries.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _Libraries.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _Libraries.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _Libraries.StringSet_insert(self, __x)
    __swig_destroy__ = _Libraries.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _Libraries.StringSet_swigregister
StringSet_swigregister(StringSet)

class Singleton(_object):
    """Proxy of C++ Singleton class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def is_initialized(self):
        """
        is_initialized(self) -> bool

        Parameters
        ----------
        self: Singleton const *

        """
        return _Libraries.Singleton_is_initialized(self)

Singleton_swigregister = _Libraries.Singleton_swigregister
Singleton_swigregister(Singleton)

class GLFW(Singleton):
    """Proxy of C++ Libraries::GLFW class."""

    __swig_setmethods__ = {}
    for _s in [Singleton]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLFW, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLFW, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Get():
        """Get() -> GLFW"""
        return _Libraries.GLFW_Get()

    Get = staticmethod(Get)

    def initialize(self):
        """
        initialize(self) -> bool

        Parameters
        ----------
        self: Libraries::GLFW *

        """
        return _Libraries.GLFW_initialize(self)


    def create_window(self, key, width=512, height=512, floating=True, resizable=True, decorated=True):
        """
        create_window(self, key, width=512, height=512, floating=True, resizable=True, decorated=True) -> bool

        Parameters
        ----------
        key: std::string
        width: uint32_t
        height: uint32_t
        floating: bool
        resizable: bool
        decorated: bool

        create_window(self, key, width=512, height=512, floating=True, resizable=True) -> bool

        Parameters
        ----------
        key: std::string
        width: uint32_t
        height: uint32_t
        floating: bool
        resizable: bool

        create_window(self, key, width=512, height=512, floating=True) -> bool

        Parameters
        ----------
        key: std::string
        width: uint32_t
        height: uint32_t
        floating: bool

        create_window(self, key, width=512, height=512) -> bool

        Parameters
        ----------
        key: std::string
        width: uint32_t
        height: uint32_t

        create_window(self, key, width=512) -> bool

        Parameters
        ----------
        key: std::string
        width: uint32_t

        create_window(self, key) -> bool

        Parameters
        ----------
        key: std::string

        """
        return _Libraries.GLFW_create_window(self, key, width, height, floating, resizable, decorated)


    def resize_window(self, key, width, height):
        """
        resize_window(self, key, width, height) -> bool

        Parameters
        ----------
        key: std::string
        width: uint32_t
        height: uint32_t

        """
        return _Libraries.GLFW_resize_window(self, key, width, height)


    def set_window_visibility(self, key, visible):
        """
        set_window_visibility(self, key, visible) -> bool

        Parameters
        ----------
        key: std::string
        visible: bool

        """
        return _Libraries.GLFW_set_window_visibility(self, key, visible)


    def toggle_fullscreen(self, key):
        """
        toggle_fullscreen(self, key) -> bool

        Parameters
        ----------
        key: std::string

        """
        return _Libraries.GLFW_toggle_fullscreen(self, key)


    def set_window_pos(self, key, x, y):
        """
        set_window_pos(self, key, x, y) -> bool

        Parameters
        ----------
        key: std::string
        x: uint32_t
        y: uint32_t

        """
        return _Libraries.GLFW_set_window_pos(self, key, x, y)


    def destroy_window(self, key):
        """
        destroy_window(self, key) -> bool

        Parameters
        ----------
        key: std::string

        """
        return _Libraries.GLFW_destroy_window(self, key)


    def get_window_keys(self):
        """
        get_window_keys(self) -> StringVector

        Parameters
        ----------
        self: Libraries::GLFW *

        """
        return _Libraries.GLFW_get_window_keys(self)


    def poll_events(self):
        """
        poll_events(self) -> bool

        Parameters
        ----------
        self: Libraries::GLFW *

        """
        return _Libraries.GLFW_poll_events(self)


    def wait_events(self):
        """
        wait_events(self) -> bool

        Parameters
        ----------
        self: Libraries::GLFW *

        """
        return _Libraries.GLFW_wait_events(self)


    def does_window_exist(self, key):
        """
        does_window_exist(self, key) -> bool

        Parameters
        ----------
        key: std::string

        """
        return _Libraries.GLFW_does_window_exist(self, key)


    def post_empty_event(self):
        """
        post_empty_event(self) -> bool

        Parameters
        ----------
        self: Libraries::GLFW *

        """
        return _Libraries.GLFW_post_empty_event(self)


    def should_close(self):
        """
        should_close(self) -> bool

        Parameters
        ----------
        self: Libraries::GLFW *

        """
        return _Libraries.GLFW_should_close(self)


    def get_swapchain(self, key):
        """
        get_swapchain(self, key) -> vk::SwapchainKHR

        Parameters
        ----------
        key: std::string

        """
        return _Libraries.GLFW_get_swapchain(self, key)


    def create_vulkan_surface(self, vulkan, key):
        """
        create_vulkan_surface(self, vulkan, key) -> vk::SurfaceKHR

        Parameters
        ----------
        vulkan: Libraries::Vulkan const *
        key: std::string

        """
        return _Libraries.GLFW_create_vulkan_surface(self, vulkan, key)


    def create_vulkan_swapchain(self, key):
        """
        create_vulkan_swapchain(self, key) -> bool

        Parameters
        ----------
        key: std::string

        """
        return _Libraries.GLFW_create_vulkan_swapchain(self, key)


    def get_texture(self, key):
        """
        get_texture(self, key) -> Texture *

        Parameters
        ----------
        key: std::string

        """
        return _Libraries.GLFW_get_texture(self, key)


    def get_key_from_ptr(self, ptr):
        """
        get_key_from_ptr(self, ptr) -> std::string

        Parameters
        ----------
        ptr: GLFWwindow *

        """
        return _Libraries.GLFW_get_key_from_ptr(self, ptr)


    def set_swapchain_out_of_date(self, key):
        """
        set_swapchain_out_of_date(self, key)

        Parameters
        ----------
        key: std::string

        """
        return _Libraries.GLFW_set_swapchain_out_of_date(self, key)


    def is_swapchain_out_of_date(self, key):
        """
        is_swapchain_out_of_date(self, key) -> bool

        Parameters
        ----------
        key: std::string

        """
        return _Libraries.GLFW_is_swapchain_out_of_date(self, key)


    def update_swapchains(self):
        """
        update_swapchains(self)

        Parameters
        ----------
        self: Libraries::GLFW *

        """
        return _Libraries.GLFW_update_swapchains(self)


    def set_cursor_pos(self, key, xpos, ypos):
        """
        set_cursor_pos(self, key, xpos, ypos) -> bool

        Parameters
        ----------
        key: std::string
        xpos: double
        ypos: double

        """
        return _Libraries.GLFW_set_cursor_pos(self, key, xpos, ypos)


    def get_cursor_pos(self, key):
        """
        get_cursor_pos(self, key) -> DoubleVector

        Parameters
        ----------
        key: std::string

        """
        return _Libraries.GLFW_get_cursor_pos(self, key)


    def set_button_data(self, key, button, action, mods):
        """
        set_button_data(self, key, button, action, mods) -> bool

        Parameters
        ----------
        key: std::string
        button: int
        action: int
        mods: int

        """
        return _Libraries.GLFW_set_button_data(self, key, button, action, mods)


    def get_button_action(self, key, button):
        """
        get_button_action(self, key, button) -> int

        Parameters
        ----------
        key: std::string
        button: int

        """
        return _Libraries.GLFW_get_button_action(self, key, button)


    def get_button_mods(self, key, button):
        """
        get_button_mods(self, key, button) -> int

        Parameters
        ----------
        key: std::string
        button: int

        """
        return _Libraries.GLFW_get_button_mods(self, key, button)


    def set_key_data(self, window_key, key, scancode, action, mods):
        """
        set_key_data(self, window_key, key, scancode, action, mods) -> bool

        Parameters
        ----------
        window_key: std::string
        key: int
        scancode: int
        action: int
        mods: int

        """
        return _Libraries.GLFW_set_key_data(self, window_key, key, scancode, action, mods)


    def get_key_scancode(self, window_key, key):
        """
        get_key_scancode(self, window_key, key) -> int

        Parameters
        ----------
        window_key: std::string
        key: int

        """
        return _Libraries.GLFW_get_key_scancode(self, window_key, key)


    def get_key_action(self, window_key, key):
        """
        get_key_action(self, window_key, key) -> int

        Parameters
        ----------
        window_key: std::string
        key: int

        """
        return _Libraries.GLFW_get_key_action(self, window_key, key)


    def get_key_mods(self, window_key, key):
        """
        get_key_mods(self, window_key, key) -> int

        Parameters
        ----------
        window_key: std::string
        key: int

        """
        return _Libraries.GLFW_get_key_mods(self, window_key, key)


    def get_key_code(key):
        """
        get_key_code(key) -> int

        Parameters
        ----------
        key: std::string

        """
        return _Libraries.GLFW_get_key_code(key)

    get_key_code = staticmethod(get_key_code)

    def get_ptr(self, key):
        """
        get_ptr(self, key) -> GLFWwindow *

        Parameters
        ----------
        key: std::string

        """
        return _Libraries.GLFW_get_ptr(self, key)


    def get_mutex(self):
        """
        get_mutex(self) -> std::shared_ptr< std::mutex >

        Parameters
        ----------
        self: Libraries::GLFW *

        """
        return _Libraries.GLFW_get_mutex(self)


    def get_time(self):
        """
        get_time(self) -> double

        Parameters
        ----------
        self: Libraries::GLFW *

        """
        return _Libraries.GLFW_get_time(self)


    def acquire_swapchain_images(self, current_frame):
        """
        acquire_swapchain_images(self, current_frame)

        Parameters
        ----------
        current_frame: uint32_t

        """
        return _Libraries.GLFW_acquire_swapchain_images(self, current_frame)


    def get_image_available_semaphores(self, current_frame):
        """
        get_image_available_semaphores(self, current_frame) -> std::vector< vk::Semaphore,std::allocator< vk::Semaphore > >

        Parameters
        ----------
        current_frame: uint32_t

        """
        return _Libraries.GLFW_get_image_available_semaphores(self, current_frame)


    def present_glfw_frames(self, semaphores):
        """
        present_glfw_frames(self, semaphores)

        Parameters
        ----------
        semaphores: std::vector< vk::Semaphore,std::allocator< vk::Semaphore > >

        """
        return _Libraries.GLFW_present_glfw_frames(self, semaphores)

GLFW_swigregister = _Libraries.GLFW_swigregister
GLFW_swigregister(GLFW)

def GLFW_Get():
    """GLFW_Get() -> GLFW"""
    return _Libraries.GLFW_Get()

def GLFW_get_key_code(key):
    """
    GLFW_get_key_code(key) -> int

    Parameters
    ----------
    key: std::string

    """
    return _Libraries.GLFW_get_key_code(key)

class Vulkan(Singleton):
    """Proxy of C++ Libraries::Vulkan class."""

    __swig_setmethods__ = {}
    for _s in [Singleton]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vulkan, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vulkan, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Get():
        """Get() -> Vulkan"""
        return _Libraries.Vulkan_Get()

    Get = staticmethod(Get)

    def get_validation_layers(self):
        """
        get_validation_layers(self) -> StringVector

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_get_validation_layers(self)


    def create_instance(self, *args):
        """
        create_instance(self, enable_validation_layers=True, validation_layers, instance_extensions, use_openvr=False) -> bool

        Parameters
        ----------
        enable_validation_layers: bool
        validation_layers: std::set< std::string >
        instance_extensions: std::set< std::string >
        use_openvr: bool

        create_instance(self, enable_validation_layers=True, validation_layers, instance_extensions) -> bool

        Parameters
        ----------
        enable_validation_layers: bool
        validation_layers: std::set< std::string >
        instance_extensions: std::set< std::string >

        create_instance(self, enable_validation_layers=True, validation_layers) -> bool

        Parameters
        ----------
        enable_validation_layers: bool
        validation_layers: std::set< std::string >

        create_instance(self, enable_validation_layers=True) -> bool

        Parameters
        ----------
        enable_validation_layers: bool

        create_instance(self) -> bool

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_create_instance(self, *args)


    def destroy_instance(self):
        """
        destroy_instance(self) -> bool

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_destroy_instance(self)


    def create_device(self, *args):
        """
        create_device(self, device_extensions, device_features, num_command_pools=8, surface, use_openvr=False) -> bool

        Parameters
        ----------
        device_extensions: std::set< std::string >
        device_features: std::set< std::string >
        num_command_pools: uint32_t
        surface: vk::SurfaceKHR
        use_openvr: bool

        create_device(self, device_extensions, device_features, num_command_pools=8, surface) -> bool

        Parameters
        ----------
        device_extensions: std::set< std::string >
        device_features: std::set< std::string >
        num_command_pools: uint32_t
        surface: vk::SurfaceKHR

        create_device(self, device_extensions, device_features, num_command_pools=8) -> bool

        Parameters
        ----------
        device_extensions: std::set< std::string >
        device_features: std::set< std::string >
        num_command_pools: uint32_t

        create_device(self, device_extensions, device_features) -> bool

        Parameters
        ----------
        device_extensions: std::set< std::string >
        device_features: std::set< std::string >

        create_device(self, device_extensions) -> bool

        Parameters
        ----------
        device_extensions: std::set< std::string >

        create_device(self) -> bool

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_create_device(self, *args)


    def destroy_device(self):
        """
        destroy_device(self) -> bool

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_destroy_device(self)


    def get_instance(self):
        """
        get_instance(self) -> vk::Instance

        Parameters
        ----------
        self: Libraries::Vulkan const *

        """
        return _Libraries.Vulkan_get_instance(self)


    def get_physical_device(self):
        """
        get_physical_device(self) -> vk::PhysicalDevice

        Parameters
        ----------
        self: Libraries::Vulkan const *

        """
        return _Libraries.Vulkan_get_physical_device(self)


    def get_physical_device_properties(self):
        """
        get_physical_device_properties(self) -> vk::PhysicalDeviceProperties

        Parameters
        ----------
        self: Libraries::Vulkan const *

        """
        return _Libraries.Vulkan_get_physical_device_properties(self)


    def get_physical_device_ray_tracing_properties(self):
        """
        get_physical_device_ray_tracing_properties(self) -> vk::PhysicalDeviceRayTracingPropertiesNV

        Parameters
        ----------
        self: Libraries::Vulkan const *

        """
        return _Libraries.Vulkan_get_physical_device_ray_tracing_properties(self)


    def get_device(self):
        """
        get_device(self) -> vk::Device

        Parameters
        ----------
        self: Libraries::Vulkan const *

        """
        return _Libraries.Vulkan_get_device(self)


    def get_graphics_family(self):
        """
        get_graphics_family(self) -> uint32_t

        Parameters
        ----------
        self: Libraries::Vulkan const *

        """
        return _Libraries.Vulkan_get_graphics_family(self)


    def get_present_family(self):
        """
        get_present_family(self) -> uint32_t

        Parameters
        ----------
        self: Libraries::Vulkan const *

        """
        return _Libraries.Vulkan_get_present_family(self)


    def get_command_pool(self, index=0):
        """
        get_command_pool(self, index=0) -> vk::CommandPool

        Parameters
        ----------
        index: uint32_t

        get_command_pool(self) -> vk::CommandPool

        Parameters
        ----------
        self: Libraries::Vulkan const *

        """
        return _Libraries.Vulkan_get_command_pool(self, index)


    def get_graphics_queue(self, index=0):
        """
        get_graphics_queue(self, index=0) -> vk::Queue

        Parameters
        ----------
        index: uint32_t

        get_graphics_queue(self) -> vk::Queue

        Parameters
        ----------
        self: Libraries::Vulkan const *

        """
        return _Libraries.Vulkan_get_graphics_queue(self, index)


    def get_present_queue(self, index=0):
        """
        get_present_queue(self, index=0) -> vk::Queue

        Parameters
        ----------
        index: uint32_t

        get_present_queue(self) -> vk::Queue

        Parameters
        ----------
        self: Libraries::Vulkan const *

        """
        return _Libraries.Vulkan_get_present_queue(self, index)


    def get_dispatch_loader_dynamic(self):
        """
        get_dispatch_loader_dynamic(self) -> vk::DispatchLoaderDynamic

        Parameters
        ----------
        self: Libraries::Vulkan const *

        """
        return _Libraries.Vulkan_get_dispatch_loader_dynamic(self)


    def find_memory_type(self, typeFilter, properties):
        """
        find_memory_type(self, typeFilter, properties) -> uint32_t

        Parameters
        ----------
        typeFilter: uint32_t
        properties: vk::MemoryPropertyFlags

        """
        return _Libraries.Vulkan_find_memory_type(self, typeFilter, properties)


    def submit_graphics_commands(self):
        """
        submit_graphics_commands(self) -> bool

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_submit_graphics_commands(self)


    def submit_present_commands(self):
        """
        submit_present_commands(self) -> bool

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_submit_present_commands(self)


    def flush_queues(self):
        """
        flush_queues(self) -> bool

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_flush_queues(self)


    def is_ray_tracing_enabled(self):
        """
        is_ray_tracing_enabled(self) -> bool

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_is_ray_tracing_enabled(self)


    def is_ASTC_supported(self):
        """
        is_ASTC_supported(self) -> bool

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_is_ASTC_supported(self)


    def is_ETC2_supported(self):
        """
        is_ETC2_supported(self) -> bool

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_is_ETC2_supported(self)


    def is_BC_supported(self):
        """
        is_BC_supported(self) -> bool

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_is_BC_supported(self)


    def min(self, A, B):
        """
        min(self, A, B) -> vk::SampleCountFlags

        Parameters
        ----------
        A: vk::SampleCountFlags
        B: vk::SampleCountFlags

        """
        return _Libraries.Vulkan_min(self, A, B)


    def highest(self, flags):
        """
        highest(self, flags) -> vk::SampleCountFlagBits

        Parameters
        ----------
        flags: vk::SampleCountFlags

        """
        return _Libraries.Vulkan_highest(self, flags)


    def get_closest_sample_count_flag(self, samples):
        """
        get_closest_sample_count_flag(self, samples) -> vk::SampleCountFlagBits

        Parameters
        ----------
        samples: uint32_t

        """
        return _Libraries.Vulkan_get_closest_sample_count_flag(self, samples)


    def get_msaa_sample_flags(self):
        """
        get_msaa_sample_flags(self) -> vk::SampleCountFlags

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_get_msaa_sample_flags(self)


    def get_max_anisotropy(self):
        """
        get_max_anisotropy(self) -> float

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_get_max_anisotropy(self)


    def begin_one_time_graphics_command(self):
        """
        begin_one_time_graphics_command(self) -> vk::CommandBuffer

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_begin_one_time_graphics_command(self)


    def end_one_time_graphics_command(self, command_buffer, hint, free_after_use=True, submit_immediately=False):
        """
        end_one_time_graphics_command(self, command_buffer, hint, free_after_use=True, submit_immediately=False) -> bool

        Parameters
        ----------
        command_buffer: vk::CommandBuffer
        hint: std::string
        free_after_use: bool
        submit_immediately: bool

        end_one_time_graphics_command(self, command_buffer, hint, free_after_use=True) -> bool

        Parameters
        ----------
        command_buffer: vk::CommandBuffer
        hint: std::string
        free_after_use: bool

        end_one_time_graphics_command(self, command_buffer, hint) -> bool

        Parameters
        ----------
        command_buffer: vk::CommandBuffer
        hint: std::string

        """
        return _Libraries.Vulkan_end_one_time_graphics_command(self, command_buffer, hint, free_after_use, submit_immediately)


    def get_dldi(self):
        """
        get_dldi(self) -> vk::DispatchLoaderDynamic

        Parameters
        ----------
        self: Libraries::Vulkan *

        """
        return _Libraries.Vulkan_get_dldi(self)

Vulkan_swigregister = _Libraries.Vulkan_swigregister
Vulkan_swigregister(Vulkan)

def Vulkan_Get():
    """Vulkan_Get() -> Vulkan"""
    return _Libraries.Vulkan_Get()

class OpenVR(Singleton):
    """Proxy of C++ Libraries::OpenVR class."""

    __swig_setmethods__ = {}
    for _s in [Singleton]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenVR, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpenVR, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Get():
        """Get() -> OpenVR"""
        return _Libraries.OpenVR_Get()

    Get = staticmethod(Get)

    def get_required_vulkan_instance_extensions(self, outInstanceExtensionList):
        """
        get_required_vulkan_instance_extensions(self, outInstanceExtensionList) -> bool

        Parameters
        ----------
        outInstanceExtensionList: std::vector< std::string,std::allocator< std::string > > &

        """
        return _Libraries.OpenVR_get_required_vulkan_instance_extensions(self, outInstanceExtensionList)


    def get_required_vulkan_device_extensions(self, physicalDevice, outDeviceExtensionList):
        """
        get_required_vulkan_device_extensions(self, physicalDevice, outDeviceExtensionList) -> bool

        Parameters
        ----------
        physicalDevice: vk::PhysicalDevice &
        outDeviceExtensionList: std::vector< std::string,std::allocator< std::string > > &

        """
        return _Libraries.OpenVR_get_required_vulkan_device_extensions(self, physicalDevice, outDeviceExtensionList)


    def is_hmd_present(self):
        """
        is_hmd_present(self) -> bool

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_is_hmd_present(self)


    def is_runtime_installed(self):
        """
        is_runtime_installed(self) -> bool

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_is_runtime_installed(self)


    def vr_runtime_path(self):
        """
        vr_runtime_path(self) -> std::string

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_vr_runtime_path(self)


    def get_recommended_render_target_size(self):
        """
        get_recommended_render_target_size(self) -> glm::ivec2

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_get_recommended_render_target_size(self)


    def get_left_projection_matrix(self, near):
        """
        get_left_projection_matrix(self, near) -> glm::mat4

        Parameters
        ----------
        near: float

        """
        return _Libraries.OpenVR_get_left_projection_matrix(self, near)


    def get_right_projection_matrix(self, near):
        """
        get_right_projection_matrix(self, near) -> glm::mat4

        Parameters
        ----------
        near: float

        """
        return _Libraries.OpenVR_get_right_projection_matrix(self, near)


    def get_right_controller_transform(self):
        """
        get_right_controller_transform(self) -> glm::mat4

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_get_right_controller_transform(self)


    def get_left_controller_transform(self):
        """
        get_left_controller_transform(self) -> glm::mat4

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_get_left_controller_transform(self)


    def get_left_view_matrix(self):
        """
        get_left_view_matrix(self) -> glm::mat4

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_get_left_view_matrix(self)


    def get_right_view_matrix(self):
        """
        get_right_view_matrix(self) -> glm::mat4

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_get_right_view_matrix(self)


    def is_left_controller_connected(self):
        """
        is_left_controller_connected(self) -> bool

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_is_left_controller_connected(self)


    def is_right_controller_connected(self):
        """
        is_right_controller_connected(self) -> bool

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_is_right_controller_connected(self)


    def is_headset_connected(self):
        """
        is_headset_connected(self) -> bool

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_is_headset_connected(self)


    def is_left_controller_pose_valid(self):
        """
        is_left_controller_pose_valid(self) -> bool

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_is_left_controller_pose_valid(self)


    def is_right_controller_pose_valid(self):
        """
        is_right_controller_pose_valid(self) -> bool

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_is_right_controller_pose_valid(self)


    def is_headset_pose_valid(self):
        """
        is_headset_pose_valid(self) -> bool

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_is_headset_pose_valid(self)


    def get_time_since_last_vsync(self):
        """
        get_time_since_last_vsync(self) -> float

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_get_time_since_last_vsync(self)


    def poll_event(self):
        """
        poll_event(self) -> bool

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_poll_event(self)


    def trigger_left_haptic_pulse(self, axis_id, duration_in_microseconds):
        """
        trigger_left_haptic_pulse(self, axis_id, duration_in_microseconds) -> bool

        Parameters
        ----------
        axis_id: uint32_t
        duration_in_microseconds: uint32_t

        """
        return _Libraries.OpenVR_trigger_left_haptic_pulse(self, axis_id, duration_in_microseconds)


    def trigger_right_haptic_pulse(self, axis_id, duration_in_microseconds):
        """
        trigger_right_haptic_pulse(self, axis_id, duration_in_microseconds) -> bool

        Parameters
        ----------
        axis_id: uint32_t
        duration_in_microseconds: uint32_t

        """
        return _Libraries.OpenVR_trigger_right_haptic_pulse(self, axis_id, duration_in_microseconds)


    def get_button_id(self, key):
        """
        get_button_id(self, key) -> vr::EVRButtonId

        Parameters
        ----------
        key: std::string

        """
        return _Libraries.OpenVR_get_button_id(self, key)


    def get_axis_id(self, key):
        """
        get_axis_id(self, key) -> vr::EVRControllerAxisType

        Parameters
        ----------
        key: std::string

        """
        return _Libraries.OpenVR_get_axis_id(self, key)


    def get_right_button_action(self, button):
        """
        get_right_button_action(self, button) -> uint32_t

        Parameters
        ----------
        button: std::string

        """
        return _Libraries.OpenVR_get_right_button_action(self, button)


    def get_left_button_action(self, button):
        """
        get_left_button_action(self, button) -> uint32_t

        Parameters
        ----------
        button: std::string

        """
        return _Libraries.OpenVR_get_left_button_action(self, button)


    def get_right_analog_value(self, button):
        """
        get_right_analog_value(self, button) -> glm::vec2

        Parameters
        ----------
        button: std::string

        """
        return _Libraries.OpenVR_get_right_analog_value(self, button)


    def get_left_analog_value(self, button):
        """
        get_left_analog_value(self, button) -> glm::vec2

        Parameters
        ----------
        button: std::string

        """
        return _Libraries.OpenVR_get_left_analog_value(self, button)


    def create_eye_textures(self):
        """
        create_eye_textures(self) -> bool

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_create_eye_textures(self)


    def get_right_eye_texture(self):
        """
        get_right_eye_texture(self) -> Texture *

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_get_right_eye_texture(self)


    def get_left_eye_texture(self):
        """
        get_left_eye_texture(self) -> Texture *

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_get_left_eye_texture(self)


    def submit_textures(self):
        """
        submit_textures(self) -> bool

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_submit_textures(self)


    def wait_get_poses(self):
        """
        wait_get_poses(self) -> bool

        Parameters
        ----------
        self: Libraries::OpenVR *

        """
        return _Libraries.OpenVR_wait_get_poses(self)


    def get_output_device(self, instance):
        """
        get_output_device(self, instance) -> vk::PhysicalDevice

        Parameters
        ----------
        instance: vk::Instance

        """
        return _Libraries.OpenVR_get_output_device(self, instance)


    def get_left_knuckles_mesh(self, name):
        """
        get_left_knuckles_mesh(self, name) -> int32_t

        Parameters
        ----------
        name: std::string

        """
        return _Libraries.OpenVR_get_left_knuckles_mesh(self, name)


    def get_left_knuckles_basecolor_texture(self, name):
        """
        get_left_knuckles_basecolor_texture(self, name) -> int32_t

        Parameters
        ----------
        name: std::string

        """
        return _Libraries.OpenVR_get_left_knuckles_basecolor_texture(self, name)


    def get_left_knuckles_roughness_texture(self, name):
        """
        get_left_knuckles_roughness_texture(self, name) -> int32_t

        Parameters
        ----------
        name: std::string

        """
        return _Libraries.OpenVR_get_left_knuckles_roughness_texture(self, name)


    def get_right_knuckles_mesh(self, name):
        """
        get_right_knuckles_mesh(self, name) -> int32_t

        Parameters
        ----------
        name: std::string

        """
        return _Libraries.OpenVR_get_right_knuckles_mesh(self, name)


    def get_right_knuckles_basecolor_texture(self, name):
        """
        get_right_knuckles_basecolor_texture(self, name) -> int32_t

        Parameters
        ----------
        name: std::string

        """
        return _Libraries.OpenVR_get_right_knuckles_basecolor_texture(self, name)


    def get_right_knuckles_roughness_texture(self, name):
        """
        get_right_knuckles_roughness_texture(self, name) -> int32_t

        Parameters
        ----------
        name: std::string

        """
        return _Libraries.OpenVR_get_right_knuckles_roughness_texture(self, name)


    def get_vive_controller_mesh(self, name):
        """
        get_vive_controller_mesh(self, name) -> int32_t

        Parameters
        ----------
        name: std::string

        """
        return _Libraries.OpenVR_get_vive_controller_mesh(self, name)


    def get_vive_controller_basecolor_texture(self, name):
        """
        get_vive_controller_basecolor_texture(self, name) -> int32_t

        Parameters
        ----------
        name: std::string

        """
        return _Libraries.OpenVR_get_vive_controller_basecolor_texture(self, name)


    def get_vive_controller_roughness_texture(self, name):
        """
        get_vive_controller_roughness_texture(self, name) -> int32_t

        Parameters
        ----------
        name: std::string

        """
        return _Libraries.OpenVR_get_vive_controller_roughness_texture(self, name)

OpenVR_swigregister = _Libraries.OpenVR_swigregister
OpenVR_swigregister(OpenVR)

def OpenVR_Get():
    """OpenVR_Get() -> OpenVR"""
    return _Libraries.OpenVR_Get()

# This file is compatible with both classic and new-style classes.


