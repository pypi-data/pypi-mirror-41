# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Systems')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Systems')
    _Systems = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Systems', [dirname(__file__)])
        except ImportError:
            import _Systems
            return _Systems
        try:
            _mod = imp.load_module('_Systems', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Systems = swig_import_helper()
    del swig_import_helper
else:
    import _Systems
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Systems.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _Systems.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Systems.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Systems.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Systems.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Systems.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Systems.SwigPyIterator_copy(self)

    def next(self):
        return _Systems.SwigPyIterator_next(self)

    def __next__(self):
        return _Systems.SwigPyIterator___next__(self)

    def previous(self):
        return _Systems.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Systems.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Systems.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Systems.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Systems.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Systems.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Systems.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Systems.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Systems.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _Systems.SHARED_PTR_DISOWN
class UInt32Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt32Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt32Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Systems.UInt32Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Systems.UInt32Vector___nonzero__(self)

    def __bool__(self):
        return _Systems.UInt32Vector___bool__(self)

    def __len__(self):
        return _Systems.UInt32Vector___len__(self)

    def __getslice__(self, i, j):
        return _Systems.UInt32Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Systems.UInt32Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Systems.UInt32Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Systems.UInt32Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Systems.UInt32Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Systems.UInt32Vector___setitem__(self, *args)

    def pop(self):
        return _Systems.UInt32Vector_pop(self)

    def append(self, x):
        return _Systems.UInt32Vector_append(self, x)

    def empty(self):
        return _Systems.UInt32Vector_empty(self)

    def size(self):
        return _Systems.UInt32Vector_size(self)

    def swap(self, v):
        return _Systems.UInt32Vector_swap(self, v)

    def begin(self):
        return _Systems.UInt32Vector_begin(self)

    def end(self):
        return _Systems.UInt32Vector_end(self)

    def rbegin(self):
        return _Systems.UInt32Vector_rbegin(self)

    def rend(self):
        return _Systems.UInt32Vector_rend(self)

    def clear(self):
        return _Systems.UInt32Vector_clear(self)

    def get_allocator(self):
        return _Systems.UInt32Vector_get_allocator(self)

    def pop_back(self):
        return _Systems.UInt32Vector_pop_back(self)

    def erase(self, *args):
        return _Systems.UInt32Vector_erase(self, *args)

    def __init__(self, *args):
        this = _Systems.new_UInt32Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Systems.UInt32Vector_push_back(self, x)

    def front(self):
        return _Systems.UInt32Vector_front(self)

    def back(self):
        return _Systems.UInt32Vector_back(self)

    def assign(self, n, x):
        return _Systems.UInt32Vector_assign(self, n, x)

    def resize(self, *args):
        return _Systems.UInt32Vector_resize(self, *args)

    def insert(self, *args):
        return _Systems.UInt32Vector_insert(self, *args)

    def reserve(self, n):
        return _Systems.UInt32Vector_reserve(self, n)

    def capacity(self):
        return _Systems.UInt32Vector_capacity(self)
    __swig_destroy__ = _Systems.delete_UInt32Vector
    __del__ = lambda self: None
UInt32Vector_swigregister = _Systems.UInt32Vector_swigregister
UInt32Vector_swigregister(UInt32Vector)

class UInt16Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt16Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt16Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Systems.UInt16Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Systems.UInt16Vector___nonzero__(self)

    def __bool__(self):
        return _Systems.UInt16Vector___bool__(self)

    def __len__(self):
        return _Systems.UInt16Vector___len__(self)

    def __getslice__(self, i, j):
        return _Systems.UInt16Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Systems.UInt16Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Systems.UInt16Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Systems.UInt16Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Systems.UInt16Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Systems.UInt16Vector___setitem__(self, *args)

    def pop(self):
        return _Systems.UInt16Vector_pop(self)

    def append(self, x):
        return _Systems.UInt16Vector_append(self, x)

    def empty(self):
        return _Systems.UInt16Vector_empty(self)

    def size(self):
        return _Systems.UInt16Vector_size(self)

    def swap(self, v):
        return _Systems.UInt16Vector_swap(self, v)

    def begin(self):
        return _Systems.UInt16Vector_begin(self)

    def end(self):
        return _Systems.UInt16Vector_end(self)

    def rbegin(self):
        return _Systems.UInt16Vector_rbegin(self)

    def rend(self):
        return _Systems.UInt16Vector_rend(self)

    def clear(self):
        return _Systems.UInt16Vector_clear(self)

    def get_allocator(self):
        return _Systems.UInt16Vector_get_allocator(self)

    def pop_back(self):
        return _Systems.UInt16Vector_pop_back(self)

    def erase(self, *args):
        return _Systems.UInt16Vector_erase(self, *args)

    def __init__(self, *args):
        this = _Systems.new_UInt16Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Systems.UInt16Vector_push_back(self, x)

    def front(self):
        return _Systems.UInt16Vector_front(self)

    def back(self):
        return _Systems.UInt16Vector_back(self)

    def assign(self, n, x):
        return _Systems.UInt16Vector_assign(self, n, x)

    def resize(self, *args):
        return _Systems.UInt16Vector_resize(self, *args)

    def insert(self, *args):
        return _Systems.UInt16Vector_insert(self, *args)

    def reserve(self, n):
        return _Systems.UInt16Vector_reserve(self, n)

    def capacity(self):
        return _Systems.UInt16Vector_capacity(self)
    __swig_destroy__ = _Systems.delete_UInt16Vector
    __del__ = lambda self: None
UInt16Vector_swigregister = _Systems.UInt16Vector_swigregister
UInt16Vector_swigregister(UInt16Vector)

class UInt8Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt8Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt8Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Systems.UInt8Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Systems.UInt8Vector___nonzero__(self)

    def __bool__(self):
        return _Systems.UInt8Vector___bool__(self)

    def __len__(self):
        return _Systems.UInt8Vector___len__(self)

    def __getslice__(self, i, j):
        return _Systems.UInt8Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Systems.UInt8Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Systems.UInt8Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Systems.UInt8Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Systems.UInt8Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Systems.UInt8Vector___setitem__(self, *args)

    def pop(self):
        return _Systems.UInt8Vector_pop(self)

    def append(self, x):
        return _Systems.UInt8Vector_append(self, x)

    def empty(self):
        return _Systems.UInt8Vector_empty(self)

    def size(self):
        return _Systems.UInt8Vector_size(self)

    def swap(self, v):
        return _Systems.UInt8Vector_swap(self, v)

    def begin(self):
        return _Systems.UInt8Vector_begin(self)

    def end(self):
        return _Systems.UInt8Vector_end(self)

    def rbegin(self):
        return _Systems.UInt8Vector_rbegin(self)

    def rend(self):
        return _Systems.UInt8Vector_rend(self)

    def clear(self):
        return _Systems.UInt8Vector_clear(self)

    def get_allocator(self):
        return _Systems.UInt8Vector_get_allocator(self)

    def pop_back(self):
        return _Systems.UInt8Vector_pop_back(self)

    def erase(self, *args):
        return _Systems.UInt8Vector_erase(self, *args)

    def __init__(self, *args):
        this = _Systems.new_UInt8Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Systems.UInt8Vector_push_back(self, x)

    def front(self):
        return _Systems.UInt8Vector_front(self)

    def back(self):
        return _Systems.UInt8Vector_back(self)

    def assign(self, n, x):
        return _Systems.UInt8Vector_assign(self, n, x)

    def resize(self, *args):
        return _Systems.UInt8Vector_resize(self, *args)

    def insert(self, *args):
        return _Systems.UInt8Vector_insert(self, *args)

    def reserve(self, n):
        return _Systems.UInt8Vector_reserve(self, n)

    def capacity(self):
        return _Systems.UInt8Vector_capacity(self)
    __swig_destroy__ = _Systems.delete_UInt8Vector
    __del__ = lambda self: None
UInt8Vector_swigregister = _Systems.UInt8Vector_swigregister
UInt8Vector_swigregister(UInt8Vector)

class Int32Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int32Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int32Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Systems.Int32Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Systems.Int32Vector___nonzero__(self)

    def __bool__(self):
        return _Systems.Int32Vector___bool__(self)

    def __len__(self):
        return _Systems.Int32Vector___len__(self)

    def __getslice__(self, i, j):
        return _Systems.Int32Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Systems.Int32Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Systems.Int32Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Systems.Int32Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Systems.Int32Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Systems.Int32Vector___setitem__(self, *args)

    def pop(self):
        return _Systems.Int32Vector_pop(self)

    def append(self, x):
        return _Systems.Int32Vector_append(self, x)

    def empty(self):
        return _Systems.Int32Vector_empty(self)

    def size(self):
        return _Systems.Int32Vector_size(self)

    def swap(self, v):
        return _Systems.Int32Vector_swap(self, v)

    def begin(self):
        return _Systems.Int32Vector_begin(self)

    def end(self):
        return _Systems.Int32Vector_end(self)

    def rbegin(self):
        return _Systems.Int32Vector_rbegin(self)

    def rend(self):
        return _Systems.Int32Vector_rend(self)

    def clear(self):
        return _Systems.Int32Vector_clear(self)

    def get_allocator(self):
        return _Systems.Int32Vector_get_allocator(self)

    def pop_back(self):
        return _Systems.Int32Vector_pop_back(self)

    def erase(self, *args):
        return _Systems.Int32Vector_erase(self, *args)

    def __init__(self, *args):
        this = _Systems.new_Int32Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Systems.Int32Vector_push_back(self, x)

    def front(self):
        return _Systems.Int32Vector_front(self)

    def back(self):
        return _Systems.Int32Vector_back(self)

    def assign(self, n, x):
        return _Systems.Int32Vector_assign(self, n, x)

    def resize(self, *args):
        return _Systems.Int32Vector_resize(self, *args)

    def insert(self, *args):
        return _Systems.Int32Vector_insert(self, *args)

    def reserve(self, n):
        return _Systems.Int32Vector_reserve(self, n)

    def capacity(self):
        return _Systems.Int32Vector_capacity(self)
    __swig_destroy__ = _Systems.delete_Int32Vector
    __del__ = lambda self: None
Int32Vector_swigregister = _Systems.Int32Vector_swigregister
Int32Vector_swigregister(Int32Vector)

class Int16Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int16Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int16Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Systems.Int16Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Systems.Int16Vector___nonzero__(self)

    def __bool__(self):
        return _Systems.Int16Vector___bool__(self)

    def __len__(self):
        return _Systems.Int16Vector___len__(self)

    def __getslice__(self, i, j):
        return _Systems.Int16Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Systems.Int16Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Systems.Int16Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Systems.Int16Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Systems.Int16Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Systems.Int16Vector___setitem__(self, *args)

    def pop(self):
        return _Systems.Int16Vector_pop(self)

    def append(self, x):
        return _Systems.Int16Vector_append(self, x)

    def empty(self):
        return _Systems.Int16Vector_empty(self)

    def size(self):
        return _Systems.Int16Vector_size(self)

    def swap(self, v):
        return _Systems.Int16Vector_swap(self, v)

    def begin(self):
        return _Systems.Int16Vector_begin(self)

    def end(self):
        return _Systems.Int16Vector_end(self)

    def rbegin(self):
        return _Systems.Int16Vector_rbegin(self)

    def rend(self):
        return _Systems.Int16Vector_rend(self)

    def clear(self):
        return _Systems.Int16Vector_clear(self)

    def get_allocator(self):
        return _Systems.Int16Vector_get_allocator(self)

    def pop_back(self):
        return _Systems.Int16Vector_pop_back(self)

    def erase(self, *args):
        return _Systems.Int16Vector_erase(self, *args)

    def __init__(self, *args):
        this = _Systems.new_Int16Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Systems.Int16Vector_push_back(self, x)

    def front(self):
        return _Systems.Int16Vector_front(self)

    def back(self):
        return _Systems.Int16Vector_back(self)

    def assign(self, n, x):
        return _Systems.Int16Vector_assign(self, n, x)

    def resize(self, *args):
        return _Systems.Int16Vector_resize(self, *args)

    def insert(self, *args):
        return _Systems.Int16Vector_insert(self, *args)

    def reserve(self, n):
        return _Systems.Int16Vector_reserve(self, n)

    def capacity(self):
        return _Systems.Int16Vector_capacity(self)
    __swig_destroy__ = _Systems.delete_Int16Vector
    __del__ = lambda self: None
Int16Vector_swigregister = _Systems.Int16Vector_swigregister
Int16Vector_swigregister(Int16Vector)

class Int8Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int8Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int8Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Systems.Int8Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Systems.Int8Vector___nonzero__(self)

    def __bool__(self):
        return _Systems.Int8Vector___bool__(self)

    def __len__(self):
        return _Systems.Int8Vector___len__(self)

    def __getslice__(self, i, j):
        return _Systems.Int8Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Systems.Int8Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Systems.Int8Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Systems.Int8Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Systems.Int8Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Systems.Int8Vector___setitem__(self, *args)

    def pop(self):
        return _Systems.Int8Vector_pop(self)

    def append(self, x):
        return _Systems.Int8Vector_append(self, x)

    def empty(self):
        return _Systems.Int8Vector_empty(self)

    def size(self):
        return _Systems.Int8Vector_size(self)

    def swap(self, v):
        return _Systems.Int8Vector_swap(self, v)

    def begin(self):
        return _Systems.Int8Vector_begin(self)

    def end(self):
        return _Systems.Int8Vector_end(self)

    def rbegin(self):
        return _Systems.Int8Vector_rbegin(self)

    def rend(self):
        return _Systems.Int8Vector_rend(self)

    def clear(self):
        return _Systems.Int8Vector_clear(self)

    def get_allocator(self):
        return _Systems.Int8Vector_get_allocator(self)

    def pop_back(self):
        return _Systems.Int8Vector_pop_back(self)

    def erase(self, *args):
        return _Systems.Int8Vector_erase(self, *args)

    def __init__(self, *args):
        this = _Systems.new_Int8Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Systems.Int8Vector_push_back(self, x)

    def front(self):
        return _Systems.Int8Vector_front(self)

    def back(self):
        return _Systems.Int8Vector_back(self)

    def assign(self, n, x):
        return _Systems.Int8Vector_assign(self, n, x)

    def resize(self, *args):
        return _Systems.Int8Vector_resize(self, *args)

    def insert(self, *args):
        return _Systems.Int8Vector_insert(self, *args)

    def reserve(self, n):
        return _Systems.Int8Vector_reserve(self, n)

    def capacity(self):
        return _Systems.Int8Vector_capacity(self)
    __swig_destroy__ = _Systems.delete_Int8Vector
    __del__ = lambda self: None
Int8Vector_swigregister = _Systems.Int8Vector_swigregister
Int8Vector_swigregister(Int8Vector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Systems.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Systems.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _Systems.DoubleVector___bool__(self)

    def __len__(self):
        return _Systems.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _Systems.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Systems.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Systems.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Systems.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Systems.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Systems.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _Systems.DoubleVector_pop(self)

    def append(self, x):
        return _Systems.DoubleVector_append(self, x)

    def empty(self):
        return _Systems.DoubleVector_empty(self)

    def size(self):
        return _Systems.DoubleVector_size(self)

    def swap(self, v):
        return _Systems.DoubleVector_swap(self, v)

    def begin(self):
        return _Systems.DoubleVector_begin(self)

    def end(self):
        return _Systems.DoubleVector_end(self)

    def rbegin(self):
        return _Systems.DoubleVector_rbegin(self)

    def rend(self):
        return _Systems.DoubleVector_rend(self)

    def clear(self):
        return _Systems.DoubleVector_clear(self)

    def get_allocator(self):
        return _Systems.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _Systems.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _Systems.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _Systems.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Systems.DoubleVector_push_back(self, x)

    def front(self):
        return _Systems.DoubleVector_front(self)

    def back(self):
        return _Systems.DoubleVector_back(self)

    def assign(self, n, x):
        return _Systems.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _Systems.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _Systems.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _Systems.DoubleVector_reserve(self, n)

    def capacity(self):
        return _Systems.DoubleVector_capacity(self)
    __swig_destroy__ = _Systems.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _Systems.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Systems.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Systems.FloatVector___nonzero__(self)

    def __bool__(self):
        return _Systems.FloatVector___bool__(self)

    def __len__(self):
        return _Systems.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _Systems.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Systems.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Systems.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Systems.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Systems.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Systems.FloatVector___setitem__(self, *args)

    def pop(self):
        return _Systems.FloatVector_pop(self)

    def append(self, x):
        return _Systems.FloatVector_append(self, x)

    def empty(self):
        return _Systems.FloatVector_empty(self)

    def size(self):
        return _Systems.FloatVector_size(self)

    def swap(self, v):
        return _Systems.FloatVector_swap(self, v)

    def begin(self):
        return _Systems.FloatVector_begin(self)

    def end(self):
        return _Systems.FloatVector_end(self)

    def rbegin(self):
        return _Systems.FloatVector_rbegin(self)

    def rend(self):
        return _Systems.FloatVector_rend(self)

    def clear(self):
        return _Systems.FloatVector_clear(self)

    def get_allocator(self):
        return _Systems.FloatVector_get_allocator(self)

    def pop_back(self):
        return _Systems.FloatVector_pop_back(self)

    def erase(self, *args):
        return _Systems.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _Systems.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Systems.FloatVector_push_back(self, x)

    def front(self):
        return _Systems.FloatVector_front(self)

    def back(self):
        return _Systems.FloatVector_back(self)

    def assign(self, n, x):
        return _Systems.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _Systems.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _Systems.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _Systems.FloatVector_reserve(self, n)

    def capacity(self):
        return _Systems.FloatVector_capacity(self)
    __swig_destroy__ = _Systems.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _Systems.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Systems.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Systems.StringVector___nonzero__(self)

    def __bool__(self):
        return _Systems.StringVector___bool__(self)

    def __len__(self):
        return _Systems.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _Systems.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Systems.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Systems.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Systems.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Systems.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Systems.StringVector___setitem__(self, *args)

    def pop(self):
        return _Systems.StringVector_pop(self)

    def append(self, x):
        return _Systems.StringVector_append(self, x)

    def empty(self):
        return _Systems.StringVector_empty(self)

    def size(self):
        return _Systems.StringVector_size(self)

    def swap(self, v):
        return _Systems.StringVector_swap(self, v)

    def begin(self):
        return _Systems.StringVector_begin(self)

    def end(self):
        return _Systems.StringVector_end(self)

    def rbegin(self):
        return _Systems.StringVector_rbegin(self)

    def rend(self):
        return _Systems.StringVector_rend(self)

    def clear(self):
        return _Systems.StringVector_clear(self)

    def get_allocator(self):
        return _Systems.StringVector_get_allocator(self)

    def pop_back(self):
        return _Systems.StringVector_pop_back(self)

    def erase(self, *args):
        return _Systems.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _Systems.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Systems.StringVector_push_back(self, x)

    def front(self):
        return _Systems.StringVector_front(self)

    def back(self):
        return _Systems.StringVector_back(self)

    def assign(self, n, x):
        return _Systems.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _Systems.StringVector_resize(self, *args)

    def insert(self, *args):
        return _Systems.StringVector_insert(self, *args)

    def reserve(self, n):
        return _Systems.StringVector_reserve(self, n)

    def capacity(self):
        return _Systems.StringVector_capacity(self)
    __swig_destroy__ = _Systems.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _Systems.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Systems.IntSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Systems.IntSet___nonzero__(self)

    def __bool__(self):
        return _Systems.IntSet___bool__(self)

    def __len__(self):
        return _Systems.IntSet___len__(self)

    def append(self, x):
        return _Systems.IntSet_append(self, x)

    def __contains__(self, x):
        return _Systems.IntSet___contains__(self, x)

    def __getitem__(self, i):
        return _Systems.IntSet___getitem__(self, i)

    def add(self, x):
        return _Systems.IntSet_add(self, x)

    def discard(self, x):
        return _Systems.IntSet_discard(self, x)

    def __init__(self, *args):
        this = _Systems.new_IntSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _Systems.IntSet_empty(self)

    def size(self):
        return _Systems.IntSet_size(self)

    def clear(self):
        return _Systems.IntSet_clear(self)

    def swap(self, v):
        return _Systems.IntSet_swap(self, v)

    def count(self, x):
        return _Systems.IntSet_count(self, x)

    def begin(self):
        return _Systems.IntSet_begin(self)

    def end(self):
        return _Systems.IntSet_end(self)

    def rbegin(self):
        return _Systems.IntSet_rbegin(self)

    def rend(self):
        return _Systems.IntSet_rend(self)

    def erase(self, *args):
        return _Systems.IntSet_erase(self, *args)

    def find(self, x):
        return _Systems.IntSet_find(self, x)

    def lower_bound(self, x):
        return _Systems.IntSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _Systems.IntSet_upper_bound(self, x)

    def equal_range(self, x):
        return _Systems.IntSet_equal_range(self, x)

    def insert(self, __x):
        return _Systems.IntSet_insert(self, __x)
    __swig_destroy__ = _Systems.delete_IntSet
    __del__ = lambda self: None
IntSet_swigregister = _Systems.IntSet_swigregister
IntSet_swigregister(IntSet)

class DoubleSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Systems.DoubleSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Systems.DoubleSet___nonzero__(self)

    def __bool__(self):
        return _Systems.DoubleSet___bool__(self)

    def __len__(self):
        return _Systems.DoubleSet___len__(self)

    def append(self, x):
        return _Systems.DoubleSet_append(self, x)

    def __contains__(self, x):
        return _Systems.DoubleSet___contains__(self, x)

    def __getitem__(self, i):
        return _Systems.DoubleSet___getitem__(self, i)

    def add(self, x):
        return _Systems.DoubleSet_add(self, x)

    def discard(self, x):
        return _Systems.DoubleSet_discard(self, x)

    def __init__(self, *args):
        this = _Systems.new_DoubleSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _Systems.DoubleSet_empty(self)

    def size(self):
        return _Systems.DoubleSet_size(self)

    def clear(self):
        return _Systems.DoubleSet_clear(self)

    def swap(self, v):
        return _Systems.DoubleSet_swap(self, v)

    def count(self, x):
        return _Systems.DoubleSet_count(self, x)

    def begin(self):
        return _Systems.DoubleSet_begin(self)

    def end(self):
        return _Systems.DoubleSet_end(self)

    def rbegin(self):
        return _Systems.DoubleSet_rbegin(self)

    def rend(self):
        return _Systems.DoubleSet_rend(self)

    def erase(self, *args):
        return _Systems.DoubleSet_erase(self, *args)

    def find(self, x):
        return _Systems.DoubleSet_find(self, x)

    def lower_bound(self, x):
        return _Systems.DoubleSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _Systems.DoubleSet_upper_bound(self, x)

    def equal_range(self, x):
        return _Systems.DoubleSet_equal_range(self, x)

    def insert(self, __x):
        return _Systems.DoubleSet_insert(self, __x)
    __swig_destroy__ = _Systems.delete_DoubleSet
    __del__ = lambda self: None
DoubleSet_swigregister = _Systems.DoubleSet_swigregister
DoubleSet_swigregister(DoubleSet)

class FloatSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Systems.FloatSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Systems.FloatSet___nonzero__(self)

    def __bool__(self):
        return _Systems.FloatSet___bool__(self)

    def __len__(self):
        return _Systems.FloatSet___len__(self)

    def append(self, x):
        return _Systems.FloatSet_append(self, x)

    def __contains__(self, x):
        return _Systems.FloatSet___contains__(self, x)

    def __getitem__(self, i):
        return _Systems.FloatSet___getitem__(self, i)

    def add(self, x):
        return _Systems.FloatSet_add(self, x)

    def discard(self, x):
        return _Systems.FloatSet_discard(self, x)

    def __init__(self, *args):
        this = _Systems.new_FloatSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _Systems.FloatSet_empty(self)

    def size(self):
        return _Systems.FloatSet_size(self)

    def clear(self):
        return _Systems.FloatSet_clear(self)

    def swap(self, v):
        return _Systems.FloatSet_swap(self, v)

    def count(self, x):
        return _Systems.FloatSet_count(self, x)

    def begin(self):
        return _Systems.FloatSet_begin(self)

    def end(self):
        return _Systems.FloatSet_end(self)

    def rbegin(self):
        return _Systems.FloatSet_rbegin(self)

    def rend(self):
        return _Systems.FloatSet_rend(self)

    def erase(self, *args):
        return _Systems.FloatSet_erase(self, *args)

    def find(self, x):
        return _Systems.FloatSet_find(self, x)

    def lower_bound(self, x):
        return _Systems.FloatSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _Systems.FloatSet_upper_bound(self, x)

    def equal_range(self, x):
        return _Systems.FloatSet_equal_range(self, x)

    def insert(self, __x):
        return _Systems.FloatSet_insert(self, __x)
    __swig_destroy__ = _Systems.delete_FloatSet
    __del__ = lambda self: None
FloatSet_swigregister = _Systems.FloatSet_swigregister
FloatSet_swigregister(FloatSet)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Systems.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Systems.StringSet___nonzero__(self)

    def __bool__(self):
        return _Systems.StringSet___bool__(self)

    def __len__(self):
        return _Systems.StringSet___len__(self)

    def append(self, x):
        return _Systems.StringSet_append(self, x)

    def __contains__(self, x):
        return _Systems.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _Systems.StringSet___getitem__(self, i)

    def add(self, x):
        return _Systems.StringSet_add(self, x)

    def discard(self, x):
        return _Systems.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _Systems.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _Systems.StringSet_empty(self)

    def size(self):
        return _Systems.StringSet_size(self)

    def clear(self):
        return _Systems.StringSet_clear(self)

    def swap(self, v):
        return _Systems.StringSet_swap(self, v)

    def count(self, x):
        return _Systems.StringSet_count(self, x)

    def begin(self):
        return _Systems.StringSet_begin(self)

    def end(self):
        return _Systems.StringSet_end(self)

    def rbegin(self):
        return _Systems.StringSet_rbegin(self)

    def rend(self):
        return _Systems.StringSet_rend(self)

    def erase(self, *args):
        return _Systems.StringSet_erase(self, *args)

    def find(self, x):
        return _Systems.StringSet_find(self, x)

    def lower_bound(self, x):
        return _Systems.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _Systems.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _Systems.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _Systems.StringSet_insert(self, __x)
    __swig_destroy__ = _Systems.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _Systems.StringSet_swigregister
StringSet_swigregister(StringSet)

class Singleton(_object):
    """Proxy of C++ Singleton class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Singleton, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def is_initialized(self):
        """
        is_initialized(self) -> bool

        Parameters
        ----------
        self: Singleton const *

        """
        return _Systems.Singleton_is_initialized(self)

Singleton_swigregister = _Systems.Singleton_swigregister
Singleton_swigregister(Singleton)

class System(Singleton):
    """Proxy of C++ Systems::System class."""

    __swig_setmethods__ = {}
    for _s in [Singleton]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, System, name, value)
    __swig_getmethods__ = {}
    for _s in [Singleton]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, System, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["running"] = _Systems.System_running_set
    __swig_getmethods__["running"] = _Systems.System_running_get
    if _newclass:
        running = _swig_property(_Systems.System_running_get, _Systems.System_running_set)

    def start(self):
        """
        start(self) -> bool

        Parameters
        ----------
        self: Systems::System *

        """
        return _Systems.System_start(self)


    def stop(self):
        """
        stop(self) -> bool

        Parameters
        ----------
        self: Systems::System *

        """
        return _Systems.System_stop(self)

System_swigregister = _Systems.System_swigregister
System_swigregister(System)

class RenderSystem(System):
    """Proxy of C++ Systems::RenderSystem class."""

    __swig_setmethods__ = {}
    for _s in [System]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [System]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RenderSystem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Get():
        """Get() -> RenderSystem"""
        return _Systems.RenderSystem_Get()

    Get = staticmethod(Get)

    def initialize(self):
        """
        initialize(self) -> bool

        Parameters
        ----------
        self: Systems::RenderSystem *

        """
        return _Systems.RenderSystem_initialize(self)


    def start(self):
        """
        start(self) -> bool

        Parameters
        ----------
        self: Systems::RenderSystem *

        """
        return _Systems.RenderSystem_start(self)


    def stop(self):
        """
        stop(self) -> bool

        Parameters
        ----------
        self: Systems::RenderSystem *

        """
        return _Systems.RenderSystem_stop(self)

    __swig_setmethods__["socket"] = _Systems.RenderSystem_socket_set
    __swig_getmethods__["socket"] = _Systems.RenderSystem_socket_get
    if _newclass:
        socket = _swig_property(_Systems.RenderSystem_socket_get, _Systems.RenderSystem_socket_set)
    __swig_setmethods__["ip"] = _Systems.RenderSystem_ip_set
    __swig_getmethods__["ip"] = _Systems.RenderSystem_ip_get
    if _newclass:
        ip = _swig_property(_Systems.RenderSystem_ip_get, _Systems.RenderSystem_ip_set)

    def set_gamma(self, gamma):
        """
        set_gamma(self, gamma)

        Parameters
        ----------
        gamma: float

        """
        return _Systems.RenderSystem_set_gamma(self, gamma)


    def set_exposure(self, exposure):
        """
        set_exposure(self, exposure)

        Parameters
        ----------
        exposure: float

        """
        return _Systems.RenderSystem_set_exposure(self, exposure)


    def set_environment_map(self, *args):
        """
        set_environment_map(self, id)

        Parameters
        ----------
        id: int32_t

        set_environment_map(self, texture)

        Parameters
        ----------
        texture: Texture *

        """
        return _Systems.RenderSystem_set_environment_map(self, *args)


    def set_environment_roughness(self, roughness):
        """
        set_environment_roughness(self, roughness)

        Parameters
        ----------
        roughness: float

        """
        return _Systems.RenderSystem_set_environment_roughness(self, roughness)


    def clear_environment_map(self):
        """
        clear_environment_map(self)

        Parameters
        ----------
        self: Systems::RenderSystem *

        """
        return _Systems.RenderSystem_clear_environment_map(self)


    def set_irradiance_map(self, *args):
        """
        set_irradiance_map(self, id)

        Parameters
        ----------
        id: int32_t

        set_irradiance_map(self, texture)

        Parameters
        ----------
        texture: Texture *

        """
        return _Systems.RenderSystem_set_irradiance_map(self, *args)


    def clear_irradiance_map(self):
        """
        clear_irradiance_map(self)

        Parameters
        ----------
        self: Systems::RenderSystem *

        """
        return _Systems.RenderSystem_clear_irradiance_map(self)


    def set_diffuse_map(self, *args):
        """
        set_diffuse_map(self, id)

        Parameters
        ----------
        id: int32_t

        set_diffuse_map(self, texture)

        Parameters
        ----------
        texture: Texture *

        """
        return _Systems.RenderSystem_set_diffuse_map(self, *args)


    def clear_diffuse_map(self):
        """
        clear_diffuse_map(self)

        Parameters
        ----------
        self: Systems::RenderSystem *

        """
        return _Systems.RenderSystem_clear_diffuse_map(self)


    def set_top_sky_color(self, color):
        """
        set_top_sky_color(self, color)

        Parameters
        ----------
        color: glm::vec3

        """
        return _Systems.RenderSystem_set_top_sky_color(self, color)


    def set_bottom_sky_color(self, color):
        """
        set_bottom_sky_color(self, color)

        Parameters
        ----------
        color: glm::vec3

        """
        return _Systems.RenderSystem_set_bottom_sky_color(self, color)


    def set_sky_transition(self, transition):
        """
        set_sky_transition(self, transition)

        Parameters
        ----------
        transition: float

        """
        return _Systems.RenderSystem_set_sky_transition(self, transition)


    def use_openvr(self, useOpenVR):
        """
        use_openvr(self, useOpenVR)

        Parameters
        ----------
        useOpenVR: bool

        """
        return _Systems.RenderSystem_use_openvr(self, useOpenVR)

RenderSystem_swigregister = _Systems.RenderSystem_swigregister
RenderSystem_swigregister(RenderSystem)

def RenderSystem_Get():
    """RenderSystem_Get() -> RenderSystem"""
    return _Systems.RenderSystem_Get()

class EventSystem(System):
    """Proxy of C++ Systems::EventSystem class."""

    __swig_setmethods__ = {}
    for _s in [System]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [System]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventSystem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Get():
        """Get() -> EventSystem"""
        return _Systems.EventSystem_Get()

    Get = staticmethod(Get)

    def initialize(self):
        """
        initialize(self) -> bool

        Parameters
        ----------
        self: Systems::EventSystem *

        """
        return _Systems.EventSystem_initialize(self)


    def start(self):
        """
        start(self) -> bool

        Parameters
        ----------
        self: Systems::EventSystem *

        """
        return _Systems.EventSystem_start(self)


    def stop(self):
        """
        stop(self) -> bool

        Parameters
        ----------
        self: Systems::EventSystem *

        """
        return _Systems.EventSystem_stop(self)


    def should_close(self):
        """
        should_close(self) -> bool

        Parameters
        ----------
        self: Systems::EventSystem *

        """
        return _Systems.EventSystem_should_close(self)


    def create_window(self, key, width=512, height=512, floating=True, resizable=True, decorated=True, create_vulkan_resources=True):
        """
        create_window(self, key, width=512, height=512, floating=True, resizable=True, decorated=True, create_vulkan_resources=True) -> bool

        Parameters
        ----------
        key: std::string
        width: uint32_t
        height: uint32_t
        floating: bool
        resizable: bool
        decorated: bool
        create_vulkan_resources: bool

        create_window(self, key, width=512, height=512, floating=True, resizable=True, decorated=True) -> bool

        Parameters
        ----------
        key: std::string
        width: uint32_t
        height: uint32_t
        floating: bool
        resizable: bool
        decorated: bool

        create_window(self, key, width=512, height=512, floating=True, resizable=True) -> bool

        Parameters
        ----------
        key: std::string
        width: uint32_t
        height: uint32_t
        floating: bool
        resizable: bool

        create_window(self, key, width=512, height=512, floating=True) -> bool

        Parameters
        ----------
        key: std::string
        width: uint32_t
        height: uint32_t
        floating: bool

        create_window(self, key, width=512, height=512) -> bool

        Parameters
        ----------
        key: std::string
        width: uint32_t
        height: uint32_t

        create_window(self, key, width=512) -> bool

        Parameters
        ----------
        key: std::string
        width: uint32_t

        create_window(self, key) -> bool

        Parameters
        ----------
        key: std::string

        """
        return _Systems.EventSystem_create_window(self, key, width, height, floating, resizable, decorated, create_vulkan_resources)


    def destroy_window(self, key):
        """
        destroy_window(self, key) -> bool

        Parameters
        ----------
        key: std::string

        """
        return _Systems.EventSystem_destroy_window(self, key)


    def resize_window(self, key, width, height):
        """
        resize_window(self, key, width, height) -> bool

        Parameters
        ----------
        key: std::string
        width: uint32_t
        height: uint32_t

        """
        return _Systems.EventSystem_resize_window(self, key, width, height)


    def set_window_pos(self, key, x, y):
        """
        set_window_pos(self, key, x, y) -> bool

        Parameters
        ----------
        key: std::string
        x: uint32_t
        y: uint32_t

        """
        return _Systems.EventSystem_set_window_pos(self, key, x, y)


    def set_window_visibility(self, key, visible):
        """
        set_window_visibility(self, key, visible) -> bool

        Parameters
        ----------
        key: std::string
        visible: bool

        """
        return _Systems.EventSystem_set_window_visibility(self, key, visible)


    def toggle_window_fullscreen(self, key):
        """
        toggle_window_fullscreen(self, key) -> bool

        Parameters
        ----------
        key: std::string

        """
        return _Systems.EventSystem_toggle_window_fullscreen(self, key)


    def use_openvr(self, useOpenVR):
        """
        use_openvr(self, useOpenVR)

        Parameters
        ----------
        useOpenVR: bool

        """
        return _Systems.EventSystem_use_openvr(self, useOpenVR)

EventSystem_swigregister = _Systems.EventSystem_swigregister
EventSystem_swigregister(EventSystem)

def EventSystem_Get():
    """EventSystem_Get() -> EventSystem"""
    return _Systems.EventSystem_Get()

# This file is compatible with both classic and new-style classes.


