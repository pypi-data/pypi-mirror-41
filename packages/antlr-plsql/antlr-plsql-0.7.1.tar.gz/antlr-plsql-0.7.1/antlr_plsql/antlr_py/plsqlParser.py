# Generated from antlr_plsql/plsql.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u020c")
        buf.write("\u1422\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d")
        buf.write("\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141")
        buf.write("\t\u0141\4\u0142\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144")
        buf.write("\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148")
        buf.write("\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b")
        buf.write("\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f")
        buf.write("\t\u014f\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152")
        buf.write("\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156")
        buf.write("\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159")
        buf.write("\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d")
        buf.write("\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160")
        buf.write("\4\u0161\t\u0161\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164")
        buf.write("\t\u0164\4\u0165\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167")
        buf.write("\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b")
        buf.write("\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e")
        buf.write("\4\u016f\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172")
        buf.write("\t\u0172\4\u0173\t\u0173\4\u0174\t\u0174\3\2\6\2\u02ea")
        buf.write("\n\2\r\2\16\2\u02eb\3\3\7\3\u02ef\n\3\f\3\16\3\u02f2\13")
        buf.write("\3\3\3\3\3\3\4\3\4\5\4\u02f8\n\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\7\4\u0302\n\4\f\4\16\4\u0305\13\4\3\4\5\4\u0308")
        buf.write("\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u031d\n\5\3\6\3\6\3\6\3")
        buf.write("\6\3\7\3\7\3\7\3\7\3\7\5\7\u0328\n\7\3\7\7\7\u032b\n\7")
        buf.write("\f\7\16\7\u032e\13\7\3\7\3\7\5\7\u0332\n\7\3\b\3\b\3\b")
        buf.write("\5\b\u0337\n\b\5\b\u0339\n\b\3\b\3\b\3\b\3\b\3\b\3\b\7")
        buf.write("\b\u0341\n\b\f\b\16\b\u0344\13\b\3\b\3\b\5\b\u0348\n\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0350\n\b\f\b\16\b\u0353")
        buf.write("\13\b\3\b\5\b\u0356\n\b\3\b\3\b\5\b\u035a\n\b\3\b\7\b")
        buf.write("\u035d\n\b\f\b\16\b\u0360\13\b\3\b\3\b\5\b\u0364\n\b\3")
        buf.write("\b\3\b\3\b\5\b\u0369\n\b\3\t\3\t\5\t\u036d\n\t\3\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\7\n\u0379\n\n\f\n\16")
        buf.write("\n\u037c\13\n\3\n\3\n\5\n\u0380\n\n\3\n\5\n\u0383\n\n")
        buf.write("\3\n\3\n\3\13\3\13\5\13\u0389\n\13\3\f\3\f\3\f\3\f\3\f")
        buf.write("\7\f\u0390\n\f\f\f\16\f\u0393\13\f\3\f\3\f\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\7\r\u039e\n\r\f\r\16\r\u03a1\13\r\3\r")
        buf.write("\3\r\3\16\3\16\3\16\5\16\u03a8\n\16\3\16\3\16\3\17\3\17")
        buf.write("\3\17\3\17\3\17\5\17\u03b1\n\17\3\17\5\17\u03b4\n\17\3")
        buf.write("\17\7\17\u03b7\n\17\f\17\16\17\u03ba\13\17\3\17\3\17\5")
        buf.write("\17\u03be\n\17\3\20\3\20\3\20\5\20\u03c3\n\20\3\20\3\20")
        buf.write("\3\20\5\20\u03c8\n\20\3\21\3\21\3\21\3\21\7\21\u03ce\n")
        buf.write("\21\f\21\16\21\u03d1\13\21\3\21\3\21\3\21\3\21\5\21\u03d7")
        buf.write("\n\21\5\21\u03d9\n\21\3\22\3\22\5\22\u03dd\n\22\3\22\3")
        buf.write("\22\7\22\u03e1\n\22\f\22\16\22\u03e4\13\22\3\22\3\22\5")
        buf.write("\22\u03e8\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\5\23\u03f3\n\23\3\24\3\24\3\24\3\24\3\24\3\24\7")
        buf.write("\24\u03fb\n\24\f\24\16\24\u03fe\13\24\3\24\3\24\5\24\u0402")
        buf.write("\n\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\7\25\u040c")
        buf.write("\n\25\f\25\16\25\u040f\13\25\3\25\3\25\5\25\u0413\n\25")
        buf.write("\3\25\3\25\3\25\5\25\u0418\n\25\3\25\5\25\u041b\n\25\3")
        buf.write("\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\5\26\u0429\n\26\3\27\3\27\3\27\3\27\3\30\3\30\3")
        buf.write("\30\3\30\3\30\5\30\u0434\n\30\3\30\7\30\u0437\n\30\f\30")
        buf.write("\16\30\u043a\13\30\3\30\3\30\5\30\u043e\n\30\3\31\3\31")
        buf.write("\3\31\5\31\u0443\n\31\5\31\u0445\n\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\7\31\u044d\n\31\f\31\16\31\u0450\13\31\3")
        buf.write("\31\3\31\5\31\u0454\n\31\3\31\5\31\u0457\n\31\3\31\3\31")
        buf.write("\5\31\u045b\n\31\3\31\7\31\u045e\n\31\f\31\16\31\u0461")
        buf.write("\13\31\3\31\3\31\3\31\5\31\u0466\n\31\3\32\3\32\3\32\3")
        buf.write("\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33")
        buf.write("\u0475\n\33\3\33\7\33\u0478\n\33\f\33\16\33\u047b\13\33")
        buf.write("\3\33\3\33\5\33\u047f\n\33\5\33\u0481\n\33\3\34\3\34\3")
        buf.write("\34\5\34\u0486\n\34\3\34\3\34\3\34\3\34\3\34\5\34\u048d")
        buf.write("\n\34\3\34\5\34\u0490\n\34\3\34\5\34\u0493\n\34\3\34\5")
        buf.write("\34\u0496\n\34\3\34\3\34\3\35\3\35\3\35\3\35\7\35\u049e")
        buf.write("\n\35\f\35\16\35\u04a1\13\35\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\37\3\37\3\37\3\37\5\37\u04ac\n\37\3\37\3\37\5\37\u04b0")
        buf.write("\n\37\3\37\5\37\u04b3\n\37\3 \3 \3 \3 \3!\3!\3!\5!\u04bc")
        buf.write("\n!\3\"\3\"\3\"\3\"\7\"\u04c2\n\"\f\"\16\"\u04c5\13\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\5\"\u04cc\n\"\3\"\5\"\u04cf\n\"\3")
        buf.write("#\3#\3#\3#\3#\5#\u04d6\n#\3$\3$\5$\u04da\n$\3%\3%\3%\7")
        buf.write("%\u04df\n%\f%\16%\u04e2\13%\3%\6%\u04e5\n%\r%\16%\u04e6")
        buf.write("\3%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\5&\u0510\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3\'\5\'\u052c\n\'\3(\3(\3(\7(\u0531\n(")
        buf.write("\f(\16(\u0534\13(\3(\3(\5(\u0538\n(\3(\3(\3)\3)\3)\3)")
        buf.write("\3)\7)\u0541\n)\f)\16)\u0544\13)\5)\u0546\n)\3*\3*\3*")
        buf.write("\3*\3*\3+\3+\6+\u054f\n+\r+\16+\u0550\3,\3,\3,\3-\3-\3")
        buf.write("-\5-\u0559\n-\3-\3-\5-\u055d\n-\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\5.\u0567\n.\3.\5.\u056a\n.\3/\3/\5/\u056e\n/\3/\5/\u0571")
        buf.write("\n/\3/\7/\u0574\n/\f/\16/\u0577\13/\3/\3/\5/\u057b\n/")
        buf.write("\3\60\3\60\5\60\u057f\n\60\3\60\3\60\3\60\3\60\3\60\3")
        buf.write("\60\7\60\u0587\n\60\f\60\16\60\u058a\13\60\3\60\3\60\3")
        buf.write("\61\3\61\3\61\7\61\u0591\n\61\f\61\16\61\u0594\13\61\3")
        buf.write("\62\3\62\3\62\5\62\u0599\n\62\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\7\63\u05a2\n\63\f\63\16\63\u05a5\13\63\3\63")
        buf.write("\3\63\5\63\u05a9\n\63\3\64\3\64\5\64\u05ad\n\64\3\65\3")
        buf.write("\65\3\65\3\65\3\65\3\65\5\65\u05b5\n\65\3\66\3\66\3\66")
        buf.write("\3\66\3\66\3\66\5\66\u05bd\n\66\3\66\3\66\3\66\5\66\u05c2")
        buf.write("\n\66\3\66\5\66\u05c5\n\66\5\66\u05c7\n\66\3\67\5\67\u05ca")
        buf.write("\n\67\3\67\3\67\3\67\3\67\38\38\38\58\u05d3\n8\38\38\3")
        buf.write("8\58\u05d8\n8\39\39\39\59\u05dd\n9\39\59\u05e0\n9\3:\5")
        buf.write(":\u05e3\n:\3:\3:\5:\u05e7\n:\3:\5:\u05ea\n:\3:\3:\3:\3")
        buf.write(":\7:\u05f0\n:\f:\16:\u05f3\13:\3:\3:\5:\u05f7\n:\3:\7")
        buf.write(":\u05fa\n:\f:\16:\u05fd\13:\3;\3;\3;\3;\5;\u0603\n;\3")
        buf.write("<\3<\3<\3=\3=\3=\3=\3=\5=\u060d\n=\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3?\3?\3?\3?\6?\u061b\n?\r?\16?\u061c\3?\3?\3@\3@")
        buf.write("\5@\u0623\n@\3A\3A\3A\3A\3B\3B\3B\3B\5B\u062d\nB\3C\3")
        buf.write("C\3C\3C\3C\3C\7C\u0635\nC\fC\16C\u0638\13C\3C\3C\3C\3")
        buf.write("C\5C\u063e\nC\3C\7C\u0641\nC\fC\16C\u0644\13C\3C\3C\3")
        buf.write("C\5C\u0649\nC\3D\3D\3D\3D\3D\3D\7D\u0651\nD\fD\16D\u0654")
        buf.write("\13D\3D\3D\5D\u0658\nD\3D\3D\3D\3D\3D\5D\u065f\nD\3D\7")
        buf.write("D\u0662\nD\fD\16D\u0665\13D\3D\3D\3D\5D\u066a\nD\3E\5")
        buf.write("E\u066d\nE\3E\5E\u0670\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\7E\u067f\nE\fE\16E\u0682\13E\3E\3E\5E\u0686")
        buf.write("\nE\3E\3E\3E\3E\3E\3E\3E\5E\u068f\nE\3E\7E\u0692\nE\f")
        buf.write("E\16E\u0695\13E\3E\3E\3E\5E\u069a\nE\3F\5F\u069d\nF\3")
        buf.write("F\3F\3G\3G\3G\5G\u06a4\nG\3G\5G\u06a7\nG\3H\3H\3H\3H\3")
        buf.write("I\5I\u06ae\nI\3I\6I\u06b1\nI\rI\16I\u06b2\3I\3I\5I\u06b7")
        buf.write("\nI\3J\3J\3J\5J\u06bc\nJ\3K\3K\3K\5K\u06c1\nK\3L\3L\3")
        buf.write("L\3L\3L\3L\7L\u06c9\nL\fL\16L\u06cc\13L\3L\3L\3L\5L\u06d1")
        buf.write("\nL\3M\3M\3M\3M\3M\3M\7M\u06d9\nM\fM\16M\u06dc\13M\3M")
        buf.write("\3M\5M\u06e0\nM\3M\3M\3M\3M\3M\5M\u06e7\nM\3M\3M\3M\3")
        buf.write("M\5M\u06ed\nM\3M\3M\5M\u06f1\nM\3N\5N\u06f4\nN\3N\5N\u06f7")
        buf.write("\nN\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\7N\u0706\n")
        buf.write("N\fN\16N\u0709\13N\3N\3N\5N\u070d\nN\3N\3N\3N\3N\3N\3")
        buf.write("N\5N\u0715\nN\3O\3O\3O\3O\3P\3P\3P\3P\3P\3P\7P\u0721\n")
        buf.write("P\fP\16P\u0724\13P\3P\3P\3Q\3Q\5Q\u072a\nQ\3R\3R\3R\3")
        buf.write("S\3S\3S\3S\3T\3T\3T\3T\6T\u0737\nT\rT\16T\u0738\3U\3U")
        buf.write("\3U\3U\3U\7U\u0740\nU\fU\16U\u0743\13U\3V\3V\3V\3V\3V")
        buf.write("\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u0755\nV\3W\3W\3")
        buf.write("W\3W\3X\3X\3X\3Y\3Y\3Y\3Y\3Z\3Z\3Z\5Z\u0765\nZ\3[\3[\3")
        buf.write("[\3[\3\\\3\\\3\\\5\\\u076e\n\\\3\\\3\\\3\\\5\\\u0773\n")
        buf.write("\\\3\\\3\\\5\\\u0777\n\\\3\\\5\\\u077a\n\\\3]\3]\3]\3")
        buf.write("]\3]\3]\7]\u0782\n]\f]\16]\u0785\13]\3]\3]\3^\3^\3^\3")
        buf.write("^\3^\7^\u078e\n^\f^\16^\u0791\13^\3^\3^\3^\5^\u0796\n")
        buf.write("^\3^\3^\3_\3_\7_\u079c\n_\f_\16_\u079f\13_\3_\5_\u07a2")
        buf.write("\n_\3_\5_\u07a5\n_\3`\3`\3`\3a\3a\3a\3a\3a\3a\3a\3a\3")
        buf.write("a\5a\u07b3\na\3b\3b\5b\u07b7\nb\3b\3b\3b\5b\u07bc\nb\3")
        buf.write("b\5b\u07bf\nb\3b\3b\3c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u07cc")
        buf.write("\nc\3c\3c\5c\u07d0\nc\3c\3c\3d\3d\3d\3d\3d\3d\7d\u07da")
        buf.write("\nd\fd\16d\u07dd\13d\3d\3d\5d\u07e1\nd\3d\3d\5d\u07e5")
        buf.write("\nd\3d\3d\5d\u07e9\nd\3d\3d\3e\3e\5e\u07ef\ne\3e\5e\u07f2")
        buf.write("\ne\3e\5e\u07f5\ne\3f\3f\3f\3f\3g\3g\3g\3g\3g\3g\3g\3")
        buf.write("g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\5g\u0810\ng\3")
        buf.write("g\3g\6g\u0814\ng\rg\16g\u0815\3g\3g\5g\u081a\ng\3g\3g")
        buf.write("\3h\3h\5h\u0820\nh\3i\3i\3i\3i\3i\3i\3i\3i\7i\u082a\n")
        buf.write("i\fi\16i\u082d\13i\3i\3i\3i\3i\3i\3i\5i\u0835\ni\5i\u0837")
        buf.write("\ni\3i\3i\3j\3j\5j\u083d\nj\3j\3j\5j\u0841\nj\3j\5j\u0844")
        buf.write("\nj\3k\3k\3k\3k\3k\3l\3l\5l\u084d\nl\3l\3l\3m\3m\3m\3")
        buf.write("m\3m\3m\3m\5m\u0858\nm\3m\3m\5m\u085c\nm\3m\5m\u085f\n")
        buf.write("m\3n\3n\5n\u0863\nn\3n\3n\3n\3o\3o\3o\5o\u086b\no\3o\3")
        buf.write("o\3o\3o\3o\3o\3o\5o\u0874\no\3p\3p\3p\3q\3q\3q\3q\6q\u087d")
        buf.write("\nq\rq\16q\u087e\3r\3r\3r\3r\3r\3r\3s\3s\3s\3s\3s\3s\5")
        buf.write("s\u088d\ns\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3")
        buf.write("s\3s\3s\3s\5s\u08a1\ns\3t\3t\5t\u08a5\nt\3t\3t\3t\3u\3")
        buf.write("u\5u\u08ac\nu\3u\3u\5u\u08b0\nu\3v\3v\5v\u08b4\nv\3v\3")
        buf.write("v\5v\u08b8\nv\3w\3w\3w\3x\3x\3x\3x\3x\7x\u08c2\nx\fx\16")
        buf.write("x\u08c5\13x\3x\5x\u08c8\nx\3x\3x\3x\3y\3y\3y\3y\3y\3z")
        buf.write("\3z\3z\3{\5{\u08d6\n{\3{\3{\3{\3{\5{\u08dc\n{\3{\3{\3")
        buf.write("{\3{\3{\5{\u08e3\n{\3|\3|\3|\5|\u08e8\n|\3|\3|\3|\3|\3")
        buf.write("|\3|\3|\3|\5|\u08f2\n|\3|\3|\3|\3|\5|\u08f8\n|\5|\u08fa")
        buf.write("\n|\3}\3}\3}\3}\3}\3}\3}\5}\u0903\n}\3~\3~\3~\3~\3~\3")
        buf.write("~\3~\3~\5~\u090d\n~\3~\3~\3~\5~\u0912\n~\3\177\3\177\3")
        buf.write("\177\3\177\3\177\3\u0080\3\u0080\3\u0081\3\u0081\3\u0082")
        buf.write("\3\u0082\3\u0083\3\u0083\5\u0083\u0921\n\u0083\3\u0084")
        buf.write("\3\u0084\5\u0084\u0925\n\u0084\3\u0085\5\u0085\u0928\n")
        buf.write("\u0085\3\u0085\3\u0085\5\u0085\u092c\n\u0085\3\u0086\3")
        buf.write("\u0086\3\u0086\3\u0086\6\u0086\u0932\n\u0086\r\u0086\16")
        buf.write("\u0086\u0933\5\u0086\u0936\n\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u093a\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087\7\u0087")
        buf.write("\u0940\n\u0087\f\u0087\16\u0087\u0943\13\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0088\5\u0088\u0949\n\u0088\3\u0088")
        buf.write("\6\u0088\u094c\n\u0088\r\u0088\16\u0088\u094d\5\u0088")
        buf.write("\u0950\n\u0088\3\u0088\3\u0088\3\u0089\5\u0089\u0955\n")
        buf.write("\u0089\3\u0089\6\u0089\u0958\n\u0089\r\u0089\16\u0089")
        buf.write("\u0959\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\5\u008a\u0962\n\u008a\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write("\3\u008b\5\u008b\u0969\n\u008b\3\u008b\3\u008b\5\u008b")
        buf.write("\u096d\n\u008b\3\u008b\5\u008b\u0970\n\u008b\3\u008c\3")
        buf.write("\u008c\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\5\u008d\u097c\n\u008d\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\5\u008e\u0982\n\u008e\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u0090\3\u0090\3\u0090\5\u0090\u098a\n\u0090")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091")
        buf.write("\u0992\n\u0091\f\u0091\16\u0091\u0995\13\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u099d")
        buf.write("\n\u0091\f\u0091\16\u0091\u09a0\13\u0091\5\u0091\u09a2")
        buf.write("\n\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092")
        buf.write("\u09a9\n\u0092\3\u0092\5\u0092\u09ac\n\u0092\3\u0093\3")
        buf.write("\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u09b3\n\u0093\3")
        buf.write("\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\5\u0094\u09be\n\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\5\u0094\u09c4\n\u0094\3\u0094\3\u0094")
        buf.write("\5\u0094\u09c8\n\u0094\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\7\u0095\u09d0\n\u0095\f\u0095\16\u0095")
        buf.write("\u09d3\13\u0095\5\u0095\u09d5\n\u0095\3\u0095\3\u0095")
        buf.write("\3\u0096\3\u0096\5\u0096\u09db\n\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\5\u0096\u09e6\n\u0096\5\u0096\u09e8\n\u0096\5\u0096\u09ea")
        buf.write("\n\u0096\3\u0096\5\u0096\u09ed\n\u0096\3\u0097\3\u0097")
        buf.write("\5\u0097\u09f1\n\u0097\3\u0097\5\u0097\u09f4\n\u0097\3")
        buf.write("\u0098\3\u0098\5\u0098\u09f8\n\u0098\3\u0098\3\u0098\5")
        buf.write("\u0098\u09fc\n\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0a01")
        buf.write("\n\u0098\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\5\u009a\u0a0c\n\u009a\3\u009a")
        buf.write("\3\u009a\5\u009a\u0a10\n\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\5\u009a\u0a18\n\u009a\3\u009b")
        buf.write("\5\u009b\u0a1b\n\u009b\3\u009b\3\u009b\3\u009c\3\u009c")
        buf.write("\3\u009c\3\u009c\7\u009c\u0a23\n\u009c\f\u009c\16\u009c")
        buf.write("\u0a26\13\u009c\3\u009d\3\u009d\5\u009d\u0a2a\n\u009d")
        buf.write("\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0a30\n\u009d")
        buf.write("\3\u009d\3\u009d\5\u009d\u0a34\n\u009d\3\u009d\5\u009d")
        buf.write("\u0a37\n\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\5\u009e\u0a3f\n\u009e\3\u009e\5\u009e\u0a42\n")
        buf.write("\u009e\3\u009e\3\u009e\5\u009e\u0a46\n\u009e\3\u009e\3")
        buf.write("\u009e\5\u009e\u0a4a\n\u009e\3\u009e\3\u009e\3\u009e\5")
        buf.write("\u009e\u0a4f\n\u009e\3\u009e\5\u009e\u0a52\n\u009e\3\u009e")
        buf.write("\3\u009e\5\u009e\u0a56\n\u009e\3\u009e\3\u009e\5\u009e")
        buf.write("\u0a5a\n\u009e\7\u009e\u0a5c\n\u009e\f\u009e\16\u009e")
        buf.write("\u0a5f\13\u009e\3\u009e\3\u009e\3\u009e\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\7\u009f\u0a68\n\u009f\f\u009f\16\u009f")
        buf.write("\u0a6b\13\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\5\u00a0\u0a7a\n\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\5\u00a0\u0a80\n\u00a0\7\u00a0\u0a82\n\u00a0\f")
        buf.write("\u00a0\16\u00a0\u0a85\13\u00a0\3\u00a1\3\u00a1\5\u00a1")
        buf.write("\u0a89\n\u00a1\3\u00a2\3\u00a2\5\u00a2\u0a8d\n\u00a2\3")
        buf.write("\u00a2\3\u00a2\3\u00a2\7\u00a2\u0a92\n\u00a2\f\u00a2\16")
        buf.write("\u00a2\u0a95\13\u00a2\3\u00a2\5\u00a2\u0a98\n\u00a2\3")
        buf.write("\u00a2\3\u00a2\5\u00a2\u0a9c\n\u00a2\3\u00a2\5\u00a2\u0a9f")
        buf.write("\n\u00a2\3\u00a2\3\u00a2\7\u00a2\u0aa3\n\u00a2\f\u00a2")
        buf.write("\16\u00a2\u0aa6\13\u00a2\3\u00a2\5\u00a2\u0aa9\n\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0aae\n\u00a2\f\u00a2")
        buf.write("\16\u00a2\u0ab1\13\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0abb\n\u00a3")
        buf.write("\5\u00a3\u0abd\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\7\u00a4\u0ac3\n\u00a4\f\u00a4\16\u00a4\u0ac6\13\u00a4")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0acb\n\u00a5\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\7\u00a6\u0ad0\n\u00a6\f\u00a6\16\u00a6")
        buf.write("\u0ad3\13\u00a6\3\u00a6\3\u00a6\7\u00a6\u0ad7\n\u00a6")
        buf.write("\f\u00a6\16\u00a6\u0ada\13\u00a6\3\u00a6\5\u00a6\u0add")
        buf.write("\n\u00a6\5\u00a6\u0adf\n\u00a6\3\u00a6\3\u00a6\7\u00a6")
        buf.write("\u0ae3\n\u00a6\f\u00a6\16\u00a6\u0ae6\13\u00a6\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\5\u00a7\u0aeb\n\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0af2\n\u00a7\3\u00a8")
        buf.write("\5\u00a8\u0af5\n\u00a8\3\u00a8\5\u00a8\u0af8\n\u00a8\3")
        buf.write("\u00a8\3\u00a8\3\u00a8\5\u00a8\u0afd\n\u00a8\3\u00a8\3")
        buf.write("\u00a8\5\u00a8\u0b01\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3")
        buf.write("\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\7\u00aa\u0b0b\n")
        buf.write("\u00aa\f\u00aa\16\u00aa\u0b0e\13\u00aa\3\u00aa\3\u00aa")
        buf.write("\3\u00ab\3\u00ab\5\u00ab\u0b14\n\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\5\u00ab\u0b19\n\u00ab\5\u00ab\u0b1b\n\u00ab\5")
        buf.write("\u00ab\u0b1d\n\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3")
        buf.write("\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\7\u00ac")
        buf.write("\u0b29\n\u00ac\f\u00ac\16\u00ac\u0b2c\13\u00ac\5\u00ac")
        buf.write("\u0b2e\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0b38\n\u00ad\3\u00ae")
        buf.write("\3\u00ae\5\u00ae\u0b3c\n\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\7\u00ae\u0b42\n\u00ae\f\u00ae\16\u00ae\u0b45")
        buf.write("\13\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\5\u00af\u0b50\n\u00af\3\u00b0")
        buf.write("\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0b58")
        buf.write("\n\u00b0\f\u00b0\16\u00b0\u0b5b\13\u00b0\3\u00b0\3\u00b0")
        buf.write("\5\u00b0\u0b5f\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\7\u00b1\u0b67\n\u00b1\f\u00b1\16\u00b1")
        buf.write("\u0b6a\13\u00b1\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u0b6f")
        buf.write("\n\u00b1\f\u00b1\16\u00b1\u0b72\13\u00b1\5\u00b1\u0b74")
        buf.write("\n\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\5\u00b2\u0b7a")
        buf.write("\n\u00b2\3\u00b3\3\u00b3\5\u00b3\u0b7e\n\u00b3\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\5\u00b4\u0b83\n\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u0b8b\n\u00b4")
        buf.write("\f\u00b4\16\u00b4\u0b8e\13\u00b4\3\u00b4\3\u00b4\5\u00b4")
        buf.write("\u0b92\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b5")
        buf.write("\3\u00b5\3\u00b5\3\u00b5\3\u00b5\7\u00b5\u0b9d\n\u00b5")
        buf.write("\f\u00b5\16\u00b5\u0ba0\13\u00b5\3\u00b5\3\u00b5\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b6\7\u00b6\u0ba9\n\u00b6")
        buf.write("\f\u00b6\16\u00b6\u0bac\13\u00b6\3\u00b6\3\u00b6\5\u00b6")
        buf.write("\u0bb0\n\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\7\u00b6\u0bb8\n\u00b6\f\u00b6\16\u00b6\u0bbb")
        buf.write("\13\u00b6\3\u00b6\3\u00b6\5\u00b6\u0bbf\n\u00b6\5\u00b6")
        buf.write("\u0bc1\n\u00b6\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0bc6\n")
        buf.write("\u00b7\3\u00b7\3\u00b7\5\u00b7\u0bca\n\u00b7\3\u00b7\3")
        buf.write("\u00b7\3\u00b7\3\u00b7\5\u00b7\u0bd0\n\u00b7\3\u00b7\3")
        buf.write("\u00b7\5\u00b7\u0bd4\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3")
        buf.write("\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\7\u00b9")
        buf.write("\u0bdf\n\u00b9\f\u00b9\16\u00b9\u0be2\13\u00b9\3\u00ba")
        buf.write("\3\u00ba\3\u00ba\5\u00ba\u0be7\n\u00ba\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u0bee\n\u00bb\f\u00bb")
        buf.write("\16\u00bb\u0bf1\13\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc")
        buf.write("\3\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u0bfb\n\u00bc")
        buf.write("\f\u00bc\16\u00bc\u0bfe\13\u00bc\3\u00bc\3\u00bc\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\5\u00bd\u0c05\n\u00bd\3\u00be\3\u00be")
        buf.write("\3\u00be\3\u00bf\3\u00bf\7\u00bf\u0c0c\n\u00bf\f\u00bf")
        buf.write("\16\u00bf\u0c0f\13\u00bf\3\u00bf\5\u00bf\u0c12\n\u00bf")
        buf.write("\3\u00bf\7\u00bf\u0c15\n\u00bf\f\u00bf\16\u00bf\u0c18")
        buf.write("\13\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0")
        buf.write("\3\u00c0\3\u00c0\5\u00c0\u0c22\n\u00c0\5\u00c0\u0c24\n")
        buf.write("\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2")
        buf.write("\u0c32\n\u00c2\f\u00c2\16\u00c2\u0c35\13\u00c2\3\u00c3")
        buf.write("\3\u00c3\5\u00c3\u0c39\n\u00c3\3\u00c3\3\u00c3\7\u00c3")
        buf.write("\u0c3d\n\u00c3\f\u00c3\16\u00c3\u0c40\13\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c4\5\u00c4\u0c45\n\u00c4\3\u00c4\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u0c55")
        buf.write("\n\u00c6\f\u00c6\16\u00c6\u0c58\13\u00c6\3\u00c6\3\u00c6")
        buf.write("\3\u00c7\3\u00c7\5\u00c7\u0c5e\n\u00c7\3\u00c8\5\u00c8")
        buf.write("\u0c61\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8")
        buf.write("\u0c67\n\u00c8\f\u00c8\16\u00c8\u0c6a\13\u00c8\3\u00c8")
        buf.write("\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u0c72")
        buf.write("\n\u00c9\5\u00c9\u0c74\n\u00c9\3\u00c9\3\u00c9\5\u00c9")
        buf.write("\u0c78\n\u00c9\3\u00c9\5\u00c9\u0c7b\n\u00c9\3\u00ca\3")
        buf.write("\u00ca\3\u00ca\5\u00ca\u0c80\n\u00ca\5\u00ca\u0c82\n\u00ca")
        buf.write("\3\u00ca\3\u00ca\5\u00ca\u0c86\n\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc")
        buf.write("\3\u00cc\5\u00cc\u0c92\n\u00cc\3\u00cd\3\u00cd\3\u00cd")
        buf.write("\3\u00cd\3\u00cd\3\u00ce\3\u00ce\5\u00ce\u0c9b\n\u00ce")
        buf.write("\3\u00ce\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u0ca1\n\u00ce")
        buf.write("\f\u00ce\16\u00ce\u0ca4\13\u00ce\3\u00cf\3\u00cf\5\u00cf")
        buf.write("\u0ca8\n\u00cf\3\u00cf\3\u00cf\5\u00cf\u0cac\n\u00cf\3")
        buf.write("\u00d0\3\u00d0\3\u00d0\5\u00d0\u0cb1\n\u00d0\3\u00d0\5")
        buf.write("\u00d0\u0cb4\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\7")
        buf.write("\u00d1\u0cba\n\u00d1\f\u00d1\16\u00d1\u0cbd\13\u00d1\3")
        buf.write("\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u0cc4\n")
        buf.write("\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\7\u00d4\u0ccd\n\u00d4\f\u00d4\16\u00d4\u0cd0")
        buf.write("\13\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5")
        buf.write("\5\u00d5\u0cd8\n\u00d5\3\u00d5\5\u00d5\u0cdb\n\u00d5\3")
        buf.write("\u00d5\5\u00d5\u0cde\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3")
        buf.write("\u00d6\7\u00d6\u0ce4\n\u00d6\f\u00d6\16\u00d6\u0ce7\13")
        buf.write("\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\5\u00d6\u0cf0\n\u00d6\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\7\u00d7\u0cfa")
        buf.write("\n\u00d7\f\u00d7\16\u00d7\u0cfd\13\u00d7\3\u00d7\3\u00d7")
        buf.write("\3\u00d7\3\u00d7\5\u00d7\u0d03\n\u00d7\3\u00d8\3\u00d8")
        buf.write("\5\u00d8\u0d07\n\u00d8\3\u00d8\3\u00d8\5\u00d8\u0d0b\n")
        buf.write("\u00d8\3\u00d8\5\u00d8\u0d0e\n\u00d8\3\u00d8\5\u00d8\u0d11")
        buf.write("\n\u00d8\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u0d16\n\u00d9")
        buf.write("\3\u00da\3\u00da\3\u00da\5\u00da\u0d1b\n\u00da\3\u00da")
        buf.write("\5\u00da\u0d1e\n\u00da\3\u00da\5\u00da\u0d21\n\u00da\3")
        buf.write("\u00db\3\u00db\6\u00db\u0d25\n\u00db\r\u00db\16\u00db")
        buf.write("\u0d26\3\u00db\5\u00db\u0d2a\n\u00db\3\u00db\3\u00db\3")
        buf.write("\u00dc\3\u00dc\5\u00dc\u0d30\n\u00dc\3\u00dc\5\u00dc\u0d33")
        buf.write("\n\u00dc\3\u00dd\5\u00dd\u0d36\n\u00dd\3\u00dd\6\u00dd")
        buf.write("\u0d39\n\u00dd\r\u00dd\16\u00dd\u0d3a\3\u00dd\5\u00dd")
        buf.write("\u0d3e\n\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\6\u00de")
        buf.write("\u0d44\n\u00de\r\u00de\16\u00de\u0d45\3\u00df\3\u00df")
        buf.write("\6\u00df\u0d4a\n\u00df\r\u00df\16\u00df\u0d4b\3\u00e0")
        buf.write("\3\u00e0\3\u00e0\5\u00e0\u0d51\n\u00e0\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0d5a")
        buf.write("\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2")
        buf.write("\3\u00e2\3\u00e2\5\u00e2\u0d64\n\u00e2\3\u00e2\3\u00e2")
        buf.write("\5\u00e2\u0d68\n\u00e2\5\u00e2\u0d6a\n\u00e2\3\u00e2\5")
        buf.write("\u00e2\u0d6d\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3")
        buf.write("\u00e3\3\u00e3\3\u00e3\3\u00e3\7\u00e3\u0d77\n\u00e3\f")
        buf.write("\u00e3\16\u00e3\u0d7a\13\u00e3\3\u00e3\5\u00e3\u0d7d\n")
        buf.write("\u00e3\3\u00e3\5\u00e3\u0d80\n\u00e3\3\u00e4\3\u00e4\3")
        buf.write("\u00e4\3\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0d8f\n\u00e6")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0d94\n\u00e6\3\u00e7")
        buf.write("\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0d9b\n\u00e7")
        buf.write("\3\u00e7\5\u00e7\u0d9e\n\u00e7\3\u00e8\3\u00e8\3\u00e8")
        buf.write("\3\u00e8\3\u00e8\7\u00e8\u0da5\n\u00e8\f\u00e8\16\u00e8")
        buf.write("\u0da8\13\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8")
        buf.write("\u0dae\n\u00e8\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u0db3\n")
        buf.write("\u00e9\3\u00ea\3\u00ea\5\u00ea\u0db7\n\u00ea\3\u00eb\3")
        buf.write("\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u0dbf\n")
        buf.write("\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u0dc5\n")
        buf.write("\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec")
        buf.write("\5\u00ec\u0dcd\n\u00ec\3\u00ec\5\u00ec\u0dd0\n\u00ec\3")
        buf.write("\u00ed\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u0dd6\n\u00ed\f")
        buf.write("\u00ed\16\u00ed\u0dd9\13\u00ed\3\u00ed\3\u00ed\3\u00ee")
        buf.write("\3\u00ee\3\u00ee\5\u00ee\u0de0\n\u00ee\3\u00ee\5\u00ee")
        buf.write("\u0de3\n\u00ee\3\u00ee\5\u00ee\u0de6\n\u00ee\3\u00ef\3")
        buf.write("\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0")
        buf.write("\u0def\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1")
        buf.write("\u0df5\n\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1")
        buf.write("\u0dfb\n\u00f1\5\u00f1\u0dfd\n\u00f1\3\u00f2\3\u00f2\3")
        buf.write("\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2")
        buf.write("\3\u00f2\3\u00f2\5\u00f2\u0e0a\n\u00f2\5\u00f2\u0e0c\n")
        buf.write("\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3")
        buf.write("\3\u00f3\5\u00f3\u0e15\n\u00f3\5\u00f3\u0e17\n\u00f3\3")
        buf.write("\u00f4\3\u00f4\5\u00f4\u0e1b\n\u00f4\3\u00f4\3\u00f4\3")
        buf.write("\u00f4\3\u00f4\5\u00f4\u0e21\n\u00f4\3\u00f4\3\u00f4\5")
        buf.write("\u00f4\u0e25\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3")
        buf.write("\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f7")
        buf.write("\3\u00f7\5\u00f7\u0e33\n\u00f7\3\u00f7\3\u00f7\7\u00f7")
        buf.write("\u0e37\n\u00f7\f\u00f7\16\u00f7\u0e3a\13\u00f7\3\u00f7")
        buf.write("\3\u00f7\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9")
        buf.write("\u0e4a\n\u00f9\3\u00f9\3\u00f9\5\u00f9\u0e4e\n\u00f9\3")
        buf.write("\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9")
        buf.write("\u0e64\n\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\5\u00f9\u0e6c\n\u00f9\3\u00f9\3\u00f9\5\u00f9")
        buf.write("\u0e70\n\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9")
        buf.write("\u0e76\n\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u0e7b\n")
        buf.write("\u00f9\3\u00f9\7\u00f9\u0e7e\n\u00f9\f\u00f9\16\u00f9")
        buf.write("\u0e81\13\u00f9\3\u00fa\5\u00fa\u0e84\n\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\5\u00fa\u0e8f\n\u00fa\3\u00fa\3\u00fa\5\u00fa")
        buf.write("\u0e93\n\u00fa\3\u00fa\3\u00fa\3\u00fa\7\u00fa\u0e98\n")
        buf.write("\u00fa\f\u00fa\16\u00fa\u0e9b\13\u00fa\3\u00fa\3\u00fa")
        buf.write("\5\u00fa\u0e9f\n\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb")
        buf.write("\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd")
        buf.write("\3\u00fd\5\u00fd\u0ead\n\u00fd\3\u00fe\3\u00fe\3\u00ff")
        buf.write("\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\3\u0101")
        buf.write("\3\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102")
        buf.write("\5\u0102\u0ec0\n\u0102\3\u0102\3\u0102\3\u0102\3\u0102")
        buf.write("\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102")
        buf.write("\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u0ed1\n\u0102")
        buf.write("\3\u0102\5\u0102\u0ed4\n\u0102\7\u0102\u0ed6\n\u0102\f")
        buf.write("\u0102\16\u0102\u0ed9\13\u0102\3\u0103\3\u0103\3\u0103")
        buf.write("\3\u0103\3\u0103\5\u0103\u0ee0\n\u0103\3\u0103\3\u0103")
        buf.write("\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u0ee8\n\u0103")
        buf.write("\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u0eef")
        buf.write("\n\u0103\3\u0103\3\u0103\5\u0103\u0ef3\n\u0103\3\u0104")
        buf.write("\3\u0104\3\u0104\3\u0104\3\u0104\3\u0105\3\u0105\5\u0105")
        buf.write("\u0efc\n\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u0f01\n")
        buf.write("\u0105\7\u0105\u0f03\n\u0105\f\u0105\16\u0105\u0f06\13")
        buf.write("\u0105\3\u0105\3\u0105\3\u0105\7\u0105\u0f0b\n\u0105\f")
        buf.write("\u0105\16\u0105\u0f0e\13\u0105\3\u0105\5\u0105\u0f11\n")
        buf.write("\u0105\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106")
        buf.write("\u0f18\n\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106")
        buf.write("\3\u0106\3\u0106\5\u0106\u0f21\n\u0106\3\u0107\3\u0107")
        buf.write("\3\u0107\3\u0108\3\u0108\3\u0109\3\u0109\3\u0109\3\u0109")
        buf.write("\3\u0109\7\u0109\u0f2d\n\u0109\f\u0109\16\u0109\u0f30")
        buf.write("\13\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109")
        buf.write("\3\u0109\3\u0109\7\u0109\u0f3a\n\u0109\f\u0109\16\u0109")
        buf.write("\u0f3d\13\u0109\3\u0109\3\u0109\5\u0109\u0f41\n\u0109")
        buf.write("\3\u0109\3\u0109\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a")
        buf.write("\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a")
        buf.write("\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u0f56")
        buf.write("\n\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\7\u010a")
        buf.write("\u0f5d\n\u010a\f\u010a\16\u010a\u0f60\13\u010a\3\u010b")
        buf.write("\3\u010b\5\u010b\u0f64\n\u010b\3\u010c\5\u010c\u0f67\n")
        buf.write("\u010c\3\u010c\3\u010c\3\u010c\6\u010c\u0f6c\n\u010c\r")
        buf.write("\u010c\16\u010c\u0f6d\3\u010c\5\u010c\u0f71\n\u010c\3")
        buf.write("\u010c\3\u010c\5\u010c\u0f75\n\u010c\3\u010c\5\u010c\u0f78")
        buf.write("\n\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d")
        buf.write("\u0f7f\n\u010d\3\u010e\5\u010e\u0f82\n\u010e\3\u010e\3")
        buf.write("\u010e\6\u010e\u0f86\n\u010e\r\u010e\16\u010e\u0f87\3")
        buf.write("\u010e\5\u010e\u0f8b\n\u010e\3\u010e\3\u010e\5\u010e\u0f8f")
        buf.write("\n\u010e\3\u010e\5\u010e\u0f92\n\u010e\3\u010f\3\u010f")
        buf.write("\3\u010f\3\u010f\3\u010f\5\u010f\u0f99\n\u010f\3\u0110")
        buf.write("\3\u0110\3\u0110\5\u0110\u0f9e\n\u0110\3\u0111\3\u0111")
        buf.write("\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111")
        buf.write("\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111")
        buf.write("\u0faf\n\u0111\5\u0111\u0fb1\n\u0111\3\u0112\3\u0112\5")
        buf.write("\u0112\u0fb5\n\u0112\3\u0113\3\u0113\3\u0113\3\u0113\7")
        buf.write("\u0113\u0fbb\n\u0113\f\u0113\16\u0113\u0fbe\13\u0113\3")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\5\u0114\u0fc9\n\u0114\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\5\u0115\u0fcf\n\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115")
        buf.write("\u0fd9\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\5\u0115\u0fe9\n\u0115\3\u0115\3\u0115")
        buf.write("\5\u0115\u0fed\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\6\u0115\u0ff4\n\u0115\r\u0115\16\u0115\u0ff5")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u0ffc\n\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u100a")
        buf.write("\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\7\u0115\u1013\n\u0115\f\u0115\16\u0115\u1016")
        buf.write("\13\u0115\3\u0115\5\u0115\u1019\n\u0115\3\u0115\5\u0115")
        buf.write("\u101c\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\5\u0115\u1025\n\u0115\3\u0115\3\u0115")
        buf.write("\7\u0115\u1029\n\u0115\f\u0115\16\u0115\u102c\13\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\5\u0115\u1035\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\5\u0115\u103d\n\u0115\3\u0115\5\u0115")
        buf.write("\u1040\n\u0115\3\u0115\5\u0115\u1043\n\u0115\3\u0115\3")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115")
        buf.write("\u104c\n\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1051\n")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\7\u0115")
        buf.write("\u1058\n\u0115\f\u0115\16\u0115\u105b\13\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\5\u0115\u1060\n\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\5\u0115\u1065\n\u0115\3\u0115\5\u0115\u1068\n")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u106d\n\u0115\3")
        buf.write("\u0115\3\u0115\3\u0115\5\u0115\u1072\n\u0115\7\u0115\u1074")
        buf.write("\n\u0115\f\u0115\16\u0115\u1077\13\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\5\u0115\u107c\n\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\5\u0115\u1082\n\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u108b\n\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\5\u0115\u1090\n\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1098")
        buf.write("\n\u0115\3\u0115\3\u0115\5\u0115\u109c\n\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\5\u0115\u10a1\n\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\5\u0115\u10a7\n\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\5\u0115\u10ae\n\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\5\u0115\u10b3\n\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\5\u0115\u10ba\n\u0115\3\u0115")
        buf.write("\3\u0115\5\u0115\u10be\n\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\5\u0115\u10c3\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\5\u0115\u10cb\n\u0115\3\u0115\5\u0115")
        buf.write("\u10ce\n\u0115\3\u0115\5\u0115\u10d1\n\u0115\3\u0115\5")
        buf.write("\u0115\u10d4\n\u0115\3\u0115\3\u0115\5\u0115\u10d8\n\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\5\u0115\u10dd\n\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\5\u0115\u10e2\n\u0115\3\u0115\3\u0115")
        buf.write("\5\u0115\u10e6\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\5\u0115\u10ed\n\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\5\u0115\u10f2\n\u0115\5\u0115\u10f4\n\u0115\3\u0116\3")
        buf.write("\u0116\3\u0116\5\u0116\u10f9\n\u0116\3\u0116\3\u0116\3")
        buf.write("\u0116\3\u0116\5\u0116\u10ff\n\u0116\3\u0116\5\u0116\u1102")
        buf.write("\n\u0116\3\u0116\3\u0116\5\u0116\u1106\n\u0116\5\u0116")
        buf.write("\u1108\n\u0116\3\u0117\3\u0117\3\u0118\3\u0118\3\u0119")
        buf.write("\3\u0119\3\u011a\3\u011a\3\u011a\5\u011a\u1113\n\u011a")
        buf.write("\3\u011a\3\u011a\5\u011a\u1117\n\u011a\5\u011a\u1119\n")
        buf.write("\u011a\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\3\u011b")
        buf.write("\3\u011b\3\u011b\3\u011b\5\u011b\u1124\n\u011b\3\u011c")
        buf.write("\3\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d")
        buf.write("\3\u011d\5\u011d\u112f\n\u011d\3\u011e\3\u011e\3\u011e")
        buf.write("\3\u011e\3\u011e\7\u011e\u1136\n\u011e\f\u011e\16\u011e")
        buf.write("\u1139\13\u011e\5\u011e\u113b\n\u011e\3\u011f\3\u011f")
        buf.write("\5\u011f\u113f\n\u011f\3\u011f\5\u011f\u1142\n\u011f\3")
        buf.write("\u011f\3\u011f\5\u011f\u1146\n\u011f\3\u0120\3\u0120\3")
        buf.write("\u0120\3\u0120\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121")
        buf.write("\3\u0121\3\u0121\5\u0121\u1153\n\u0121\3\u0122\3\u0122")
        buf.write("\3\u0122\5\u0122\u1158\n\u0122\3\u0122\3\u0122\3\u0122")
        buf.write("\3\u0122\7\u0122\u115e\n\u0122\f\u0122\16\u0122\u1161")
        buf.write("\13\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u1167")
        buf.write("\n\u0122\3\u0123\3\u0123\3\u0123\5\u0123\u116c\n\u0123")
        buf.write("\3\u0123\3\u0123\5\u0123\u1170\n\u0123\3\u0123\3\u0123")
        buf.write("\3\u0123\5\u0123\u1175\n\u0123\3\u0124\3\u0124\3\u0124")
        buf.write("\5\u0124\u117a\n\u0124\3\u0124\5\u0124\u117d\n\u0124\3")
        buf.write("\u0124\3\u0124\3\u0124\7\u0124\u1182\n\u0124\f\u0124\16")
        buf.write("\u0124\u1185\13\u0124\3\u0124\3\u0124\3\u0125\3\u0125")
        buf.write("\3\u0125\3\u0125\3\u0125\5\u0125\u118e\n\u0125\3\u0125")
        buf.write("\3\u0125\3\u0125\3\u0125\7\u0125\u1194\n\u0125\f\u0125")
        buf.write("\16\u0125\u1197\13\u0125\3\u0125\5\u0125\u119a\n\u0125")
        buf.write("\3\u0125\3\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126")
        buf.write("\3\u0126\5\u0126\u11a4\n\u0126\3\u0126\5\u0126\u11a7\n")
        buf.write("\u0126\5\u0126\u11a9\n\u0126\3\u0127\3\u0127\3\u0127\3")
        buf.write("\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u11b3\n")
        buf.write("\u0128\5\u0128\u11b5\n\u0128\3\u0129\3\u0129\3\u0129\3")
        buf.write("\u0129\5\u0129\u11bb\n\u0129\3\u012a\3\u012a\3\u012a\3")
        buf.write("\u012a\5\u012a\u11c1\n\u012a\5\u012a\u11c3\n\u012a\3\u012b")
        buf.write("\3\u012b\3\u012b\3\u012c\3\u012c\3\u012c\3\u012d\3\u012d")
        buf.write("\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u11d1\n\u012d")
        buf.write("\5\u012d\u11d3\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e")
        buf.write("\3\u012e\3\u012e\5\u012e\u11db\n\u012e\3\u012f\3\u012f")
        buf.write("\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u11e4")
        buf.write("\n\u012f\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write("\3\u0130\5\u0130\u11ed\n\u0130\3\u0131\3\u0131\3\u0132")
        buf.write("\3\u0132\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133\u11f7")
        buf.write("\n\u0133\3\u0134\3\u0134\5\u0134\u11fb\n\u0134\3\u0134")
        buf.write("\3\u0134\3\u0135\5\u0135\u1200\n\u0135\3\u0135\3\u0135")
        buf.write("\5\u0135\u1204\n\u0135\3\u0135\5\u0135\u1207\n\u0135\3")
        buf.write("\u0136\5\u0136\u120a\n\u0136\3\u0136\3\u0136\5\u0136\u120e")
        buf.write("\n\u0136\3\u0137\3\u0137\3\u0138\3\u0138\3\u0138\5\u0138")
        buf.write("\u1215\n\u0138\3\u0139\3\u0139\3\u0139\3\u0139\3\u013a")
        buf.write("\3\u013a\3\u013a\3\u013a\7\u013a\u121f\n\u013a\f\u013a")
        buf.write("\16\u013a\u1222\13\u013a\3\u013a\3\u013a\3\u013a\3\u013a")
        buf.write("\3\u013a\3\u013a\7\u013a\u122a\n\u013a\f\u013a\16\u013a")
        buf.write("\u122d\13\u013a\5\u013a\u122f\n\u013a\3\u013b\3\u013b")
        buf.write("\5\u013b\u1233\n\u013b\3\u013c\3\u013c\3\u013d\3\u013d")
        buf.write("\3\u013e\3\u013e\3\u013f\3\u013f\3\u0140\3\u0140\3\u0141")
        buf.write("\3\u0141\3\u0142\3\u0142\3\u0142\7\u0142\u1244\n\u0142")
        buf.write("\f\u0142\16\u0142\u1247\13\u0142\3\u0142\3\u0142\5\u0142")
        buf.write("\u124b\n\u0142\3\u0143\3\u0143\3\u0144\3\u0144\3\u0144")
        buf.write("\5\u0144\u1252\n\u0144\3\u0145\3\u0145\3\u0146\3\u0146")
        buf.write("\3\u0147\3\u0147\3\u0148\3\u0148\3\u0148\7\u0148\u125d")
        buf.write("\n\u0148\f\u0148\16\u0148\u1260\13\u0148\3\u0149\3\u0149")
        buf.write("\3\u014a\3\u014a\3\u014a\7\u014a\u1267\n\u014a\f\u014a")
        buf.write("\16\u014a\u126a\13\u014a\3\u014a\3\u014a\5\u014a\u126e")
        buf.write("\n\u014a\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c\7\u014c")
        buf.write("\u1275\n\u014c\f\u014c\16\u014c\u1278\13\u014c\3\u014d")
        buf.write("\3\u014d\3\u014d\7\u014d\u127d\n\u014d\f\u014d\16\u014d")
        buf.write("\u1280\13\u014d\3\u014e\3\u014e\3\u014e\7\u014e\u1285")
        buf.write("\n\u014e\f\u014e\16\u014e\u1288\13\u014e\3\u014f\3\u014f")
        buf.write("\3\u014f\5\u014f\u128d\n\u014f\3\u0150\3\u0150\3\u0150")
        buf.write("\5\u0150\u1292\n\u0150\3\u0151\3\u0151\3\u0151\5\u0151")
        buf.write("\u1297\n\u0151\3\u0152\3\u0152\5\u0152\u129b\n\u0152\3")
        buf.write("\u0153\3\u0153\3\u0154\3\u0154\5\u0154\u12a1\n\u0154\3")
        buf.write("\u0155\3\u0155\5\u0155\u12a5\n\u0155\3\u0156\3\u0156\3")
        buf.write("\u0156\5\u0156\u12aa\n\u0156\3\u0157\3\u0157\3\u0158\3")
        buf.write("\u0158\3\u0158\7\u0158\u12b1\n\u0158\f\u0158\16\u0158")
        buf.write("\u12b4\13\u0158\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159")
        buf.write("\u12ba\n\u0159\3\u015a\3\u015a\3\u015a\7\u015a\u12bf\n")
        buf.write("\u015a\f\u015a\16\u015a\u12c2\13\u015a\3\u015b\3\u015b")
        buf.write("\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c")
        buf.write("\5\u015c\u12cd\n\u015c\3\u015d\3\u015d\5\u015d\u12d1\n")
        buf.write("\u015d\3\u015d\3\u015d\7\u015d\u12d5\n\u015d\f\u015d\16")
        buf.write("\u015d\u12d8\13\u015d\3\u015d\3\u015d\5\u015d\u12dc\n")
        buf.write("\u015d\3\u015e\3\u015e\3\u015e\5\u015e\u12e1\n\u015e\5")
        buf.write("\u015e\u12e3\n\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u12e8")
        buf.write("\n\u015e\7\u015e\u12ea\n\u015e\f\u015e\16\u015e\u12ed")
        buf.write("\13\u015e\3\u015e\3\u015e\5\u015e\u12f1\n\u015e\3\u015f")
        buf.write("\3\u015f\3\u015f\3\u015f\3\u015f\5\u015f\u12f8\n\u015f")
        buf.write("\3\u015f\3\u015f\3\u015f\5\u015f\u12fd\n\u015f\5\u015f")
        buf.write("\u12ff\n\u015f\5\u015f\u1301\n\u015f\3\u015f\3\u015f\3")
        buf.write("\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\5\u015f")
        buf.write("\u130b\n\u015f\3\u015f\3\u015f\3\u015f\5\u015f\u1310\n")
        buf.write("\u015f\7\u015f\u1312\n\u015f\f\u015f\16\u015f\u1315\13")
        buf.write("\u015f\5\u015f\u1317\n\u015f\3\u015f\3\u015f\5\u015f\u131b")
        buf.write("\n\u015f\3\u0160\3\u0160\3\u0160\3\u0161\3\u0161\3\u0161")
        buf.write("\3\u0161\5\u0161\u1324\n\u0161\3\u0161\3\u0161\3\u0162")
        buf.write("\3\u0162\5\u0162\u132a\n\u0162\3\u0162\3\u0162\5\u0162")
        buf.write("\u132e\n\u0162\5\u0162\u1330\n\u0162\3\u0163\3\u0163\5")
        buf.write("\u0163\u1334\n\u0163\3\u0163\3\u0163\5\u0163\u1338\n\u0163")
        buf.write("\3\u0163\3\u0163\5\u0163\u133c\n\u0163\3\u0163\3\u0163")
        buf.write("\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u1344\n\u0163")
        buf.write("\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163")
        buf.write("\u134c\n\u0163\5\u0163\u134e\n\u0163\3\u0164\3\u0164\3")
        buf.write("\u0164\3\u0164\5\u0164\u1354\n\u0164\3\u0164\5\u0164\u1357")
        buf.write("\n\u0164\3\u0164\3\u0164\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\5\u0165\u136f\n\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\5\u0165\u1376\n\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\5\u0165\u1397\n\u0165\3\u0166\3\u0166")
        buf.write("\3\u0166\5\u0166\u139c\n\u0166\3\u0166\5\u0166\u139f\n")
        buf.write("\u0166\3\u0166\3\u0166\3\u0166\5\u0166\u13a4\n\u0166\5")
        buf.write("\u0166\u13a6\n\u0166\3\u0166\3\u0166\7\u0166\u13aa\n\u0166")
        buf.write("\f\u0166\16\u0166\u13ad\13\u0166\3\u0167\3\u0167\3\u0167")
        buf.write("\3\u0167\5\u0167\u13b3\n\u0167\3\u0168\3\u0168\3\u0169")
        buf.write("\3\u0169\3\u0169\5\u0169\u13ba\n\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\5\u0169\u13c0\n\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\5\u0169\u13c6\n\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\5\u0169\u13cc\n\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\5\u0169\u13d1\n\u0169\5\u0169\u13d3\n\u0169\3")
        buf.write("\u0169\5\u0169\u13d6\n\u0169\3\u0169\3\u0169\3\u0169\3")
        buf.write("\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u13e0\n")
        buf.write("\u0169\3\u0169\5\u0169\u13e3\n\u0169\5\u0169\u13e5\n\u0169")
        buf.write("\5\u0169\u13e7\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\5\u0169\u13f5\n\u0169\3\u016a\3\u016a\3\u016b")
        buf.write("\3\u016b\3\u016b\3\u016c\3\u016c\3\u016d\3\u016d\3\u016e")
        buf.write("\3\u016e\5\u016e\u1402\n\u016e\3\u016f\3\u016f\3\u016f")
        buf.write("\3\u016f\3\u016f\3\u016f\3\u016f\5\u016f\u140b\n\u016f")
        buf.write("\3\u0170\3\u0170\3\u0170\5\u0170\u1410\n\u0170\3\u0171")
        buf.write("\3\u0171\3\u0171\5\u0171\u1415\n\u0171\3\u0172\3\u0172")
        buf.write("\3\u0172\5\u0172\u141a\n\u0172\3\u0173\3\u0173\3\u0173")
        buf.write("\3\u0173\3\u0174\3\u0174\3\u0174\2\7\u013e\u014a\u01f0")
        buf.write("\u0202\u0212\u0175\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write("\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjln")
        buf.write("prtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write("\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4")
        buf.write("\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6")
        buf.write("\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8")
        buf.write("\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa")
        buf.write("\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c")
        buf.write("\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e")
        buf.write("\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130")
        buf.write("\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142")
        buf.write("\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154")
        buf.write("\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166")
        buf.write("\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178")
        buf.write("\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a")
        buf.write("\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c")
        buf.write("\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae")
        buf.write("\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0")
        buf.write("\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2")
        buf.write("\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4")
        buf.write("\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6")
        buf.write("\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208")
        buf.write("\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a")
        buf.write("\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c")
        buf.write("\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e")
        buf.write("\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250")
        buf.write("\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262")
        buf.write("\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274")
        buf.write("\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286")
        buf.write("\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298")
        buf.write("\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa")
        buf.write("\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc")
        buf.write("\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce")
        buf.write("\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0")
        buf.write("\u02e2\u02e4\u02e6\2R\3\2\u01f8\u01f8\4\2\17\17\u00bd")
        buf.write("\u00bd\4\2\b\b\u011e\u011e\4\2\u00a0\u00a0\u012b\u012b")
        buf.write("\4\288\u010e\u010e\5\2##\u0115\u0115\u0168\u0168\4\2m")
        buf.write("myy\4\2\6\6\32\32\5\2hh\u00b4\u00b4\u0196\u0196\5\2\u00f0")
        buf.write("\u00f0\u0107\u0107\u0118\u0118\4\2\u0098\u0098\u019c\u019c")
        buf.write("\4\2##\u0168\u0168\4\2\5\5rr\5\2\5\5rr\u00e4\u00e4\5\2")
        buf.write("UU\u010d\u010d\u0169\u0169\4\2\u00d8\u00d8\u010e\u010e")
        buf.write("\4\2\u00dc\u00dc\u0170\u0170\5\2\u0090\u0090\u00b5\u00b5")
        buf.write("\u0114\u0114\4\2SSgg\6\2\u00a7\u00a7\u00b3\u00b3\u00f4")
        buf.write("\u00f4\u0111\u0111\4\2dd\u01f5\u01f5\3\2\u011c\u011d\3")
        buf.write("\3\u01f8\u01f8\3\2\u013b\u013c\4\2\u0109\u0109\u01b0\u01b0")
        buf.write("\3\2DE\4\2ff\u00a6\u00a6\4\2\u00fd\u00fd\u01a6\u01a6\4")
        buf.write("\2\31\31\u00a6\u00a6\4\2&&ii\6\2\u0081\u0081\u00b9\u00b9")
        buf.write("\u00de\u00de\u0191\u0191\5\2\t\too\u0192\u0192\5\2\u009a")
        buf.write("\u009a\u00c7\u00c7\u0140\u0140\4\2\u014c\u014c\u017d\u017d")
        buf.write("\5\2\u014c\u014c\u0166\u0166\u017d\u017d\4\2\u0085\u0085")
        buf.write("\u00a8\u00a8\4\2QQ\u0142\u0142\4\2\u00a5\u00a5\u00c2\u00c2")
        buf.write("\4\2\t\t\u0197\u0197\4\2\27\27\u0154\u0154\4\2\20\20j")
        buf.write("j\4\2\u0091\u0091\u00c4\u00c4\4\2\t\t\u0091\u0091\3\2")
        buf.write("\u0179\u017a\4\2\u00dc\u00dc\u0173\u0173\3\2\u00ca\u00cd")
        buf.write("\5\2\u01ea\u01ea\u01ef\u01ef\u01f3\u01f3\3\2\u01f0\u01f1")
        buf.write("\4\2cc\u00aa\u00aa\6\2\t\t\r\r\u0088\u0088\u0167\u0167")
        buf.write("\4\2\60\60\u01b4\u01b4\4\2oo\u0192\u0192\4\2-->>\4\2\u0092")
        buf.write("\u0092\u00c5\u00c5\4\2\62\62\u00ed\u00ed\5\2%%\u00c6\u00c6")
        buf.write("\u0186\u0186\4\2\u01b5\u01b5\u01b8\u01b8\4\2||\u00f6\u00f6")
        buf.write("\4\2\u0080\u0080\u00e7\u00e7\4\2GGpp\4\2\u00a2\u00a2\u015d")
        buf.write("\u015d\3\2\u01d1\u01e0\3\2\u01ca\u01d0\3\2\u01c4\u01c9")
        buf.write("\4\2\u012b\u012b\u0145\u0145\4\2\u0094\u0094\u0125\u0125")
        buf.write("\4\2\u00fb\u00fb\u014b\u014b\4\2\u0110\u0110\u016a\u016a")
        buf.write("\5\2\u008d\u008d\u0177\u0177\u01a7\u01a7\4\2<<\u0141\u0141")
        buf.write("\5\2<<\u00f9\u00f9\u0141\u0141\4\2\u0119\u0119\u0174\u0174")
        buf.write("\4\2\u00a5\u00a5\u0137\u0137\4\2ZZ\u01c0\u01c0\4\2\u00e5")
        buf.write("\u00e5\u014e\u014e\4\2))\61\61\6\2ZZ\u00a3\u00a3\u00df")
        buf.write("\u00df\u014e\u014e\3\2\u01e6\u01e7\4\2\u01e1\u01e1\u01e8")
        buf.write("\u01e8F\2\4\b\13\13\16\16\21\32\35%\'\')*,.\60\63\65@")
        buf.write("CNPQS`bcegknpqsuxz|\u0080\u0082\u0085\u0087\u0087\u0089")
        buf.write("\u008d\u0090\u0095\u0097\u0098\u009a\u009b\u009f\u00a0")
        buf.write("\u00a2\u00a3\u00a5\u00a6\u00a8\u00ab\u00ad\u00b3\u00b5")
        buf.write("\u00b8\u00ba\u00ba\u00bc\u00bc\u00be\u00c9\u00cb\u00cf")
        buf.write("\u00d1\u00dd\u00df\u00e1\u00e3\u00f2\u00f4\u00f6\u00f9")
        buf.write("\u00f9\u00fb\u00fb\u00ff\u0103\u0105\u0107\u0109\u010a")
        buf.write("\u010d\u010d\u010f\u011b\u011e\u011e\u0120\u0127\u012a")
        buf.write("\u013e\u0140\u014c\u014e\u0150\u0152\u0152\u0154\u015b")
        buf.write("\u015d\u016b\u016d\u0178\u017c\u0184\u0186\u018b\u018d")
        buf.write("\u0190\u0193\u0193\u0195\u0195\u0197\u019a\u019c\u019d")
        buf.write("\u019f\u01a8\u01aa\u01aa\u01ac\u01ac\u01ae\u01e0\u020b")
        buf.write("\u020b\2\u166d\2\u02e9\3\2\2\2\4\u02f0\3\2\2\2\6\u0307")
        buf.write("\3\2\2\2\b\u031c\3\2\2\2\n\u031e\3\2\2\2\f\u0322\3\2\2")
        buf.write("\2\16\u0338\3\2\2\2\20\u036a\3\2\2\2\22\u036e\3\2\2\2")
        buf.write("\24\u0386\3\2\2\2\26\u038a\3\2\2\2\30\u0396\3\2\2\2\32")
        buf.write("\u03a4\3\2\2\2\34\u03ab\3\2\2\2\36\u03bf\3\2\2\2 \u03c9")
        buf.write("\3\2\2\2\"\u03da\3\2\2\2$\u03f2\3\2\2\2&\u03f4\3\2\2\2")
        buf.write("(\u0405\3\2\2\2*\u0428\3\2\2\2,\u042a\3\2\2\2.\u042e\3")
        buf.write("\2\2\2\60\u0444\3\2\2\2\62\u0467\3\2\2\2\64\u046b\3\2")
        buf.write("\2\2\66\u0482\3\2\2\28\u0499\3\2\2\2:\u04a2\3\2\2\2<\u04ab")
        buf.write("\3\2\2\2>\u04b4\3\2\2\2@\u04b8\3\2\2\2B\u04bd\3\2\2\2")
        buf.write("D\u04d5\3\2\2\2F\u04d7\3\2\2\2H\u04db\3\2\2\2J\u050f\3")
        buf.write("\2\2\2L\u052b\3\2\2\2N\u052d\3\2\2\2P\u053b\3\2\2\2R\u0547")
        buf.write("\3\2\2\2T\u054c\3\2\2\2V\u0552\3\2\2\2X\u0555\3\2\2\2")
        buf.write("Z\u055e\3\2\2\2\\\u056b\3\2\2\2^\u057c\3\2\2\2`\u058d")
        buf.write("\3\2\2\2b\u0595\3\2\2\2d\u059a\3\2\2\2f\u05aa\3\2\2\2")
        buf.write("h\u05ae\3\2\2\2j\u05c6\3\2\2\2l\u05c9\3\2\2\2n\u05cf\3")
        buf.write("\2\2\2p\u05d9\3\2\2\2r\u05e2\3\2\2\2t\u05fe\3\2\2\2v\u0604")
        buf.write("\3\2\2\2x\u0607\3\2\2\2z\u060e\3\2\2\2|\u0616\3\2\2\2")
        buf.write("~\u0622\3\2\2\2\u0080\u0624\3\2\2\2\u0082\u0628\3\2\2")
        buf.write("\2\u0084\u062e\3\2\2\2\u0086\u064a\3\2\2\2\u0088\u066c")
        buf.write("\3\2\2\2\u008a\u069c\3\2\2\2\u008c\u06a6\3\2\2\2\u008e")
        buf.write("\u06a8\3\2\2\2\u0090\u06ad\3\2\2\2\u0092\u06bb\3\2\2\2")
        buf.write("\u0094\u06bd\3\2\2\2\u0096\u06c2\3\2\2\2\u0098\u06d2\3")
        buf.write("\2\2\2\u009a\u06f3\3\2\2\2\u009c\u0716\3\2\2\2\u009e\u071a")
        buf.write("\3\2\2\2\u00a0\u0729\3\2\2\2\u00a2\u072b\3\2\2\2\u00a4")
        buf.write("\u072e\3\2\2\2\u00a6\u0732\3\2\2\2\u00a8\u073a\3\2\2\2")
        buf.write("\u00aa\u0754\3\2\2\2\u00ac\u0756\3\2\2\2\u00ae\u075a\3")
        buf.write("\2\2\2\u00b0\u075d\3\2\2\2\u00b2\u0761\3\2\2\2\u00b4\u0766")
        buf.write("\3\2\2\2\u00b6\u076a\3\2\2\2\u00b8\u077b\3\2\2\2\u00ba")
        buf.write("\u0788\3\2\2\2\u00bc\u0799\3\2\2\2\u00be\u07a6\3\2\2\2")
        buf.write("\u00c0\u07b2\3\2\2\2\u00c2\u07b4\3\2\2\2\u00c4\u07c2\3")
        buf.write("\2\2\2\u00c6\u07d3\3\2\2\2\u00c8\u07ec\3\2\2\2\u00ca\u07f6")
        buf.write("\3\2\2\2\u00cc\u07fa\3\2\2\2\u00ce\u081f\3\2\2\2\u00d0")
        buf.write("\u0821\3\2\2\2\u00d2\u083a\3\2\2\2\u00d4\u0845\3\2\2\2")
        buf.write("\u00d6\u084c\3\2\2\2\u00d8\u0850\3\2\2\2\u00da\u0862\3")
        buf.write("\2\2\2\u00dc\u086a\3\2\2\2\u00de\u0875\3\2\2\2\u00e0\u087c")
        buf.write("\3\2\2\2\u00e2\u0880\3\2\2\2\u00e4\u08a0\3\2\2\2\u00e6")
        buf.write("\u08a4\3\2\2\2\u00e8\u08a9\3\2\2\2\u00ea\u08b1\3\2\2\2")
        buf.write("\u00ec\u08b9\3\2\2\2\u00ee\u08bc\3\2\2\2\u00f0\u08cc\3")
        buf.write("\2\2\2\u00f2\u08d1\3\2\2\2\u00f4\u08d5\3\2\2\2\u00f6\u08f9")
        buf.write("\3\2\2\2\u00f8\u08fb\3\2\2\2\u00fa\u0911\3\2\2\2\u00fc")
        buf.write("\u0913\3\2\2\2\u00fe\u0918\3\2\2\2\u0100\u091a\3\2\2\2")
        buf.write("\u0102\u091c\3\2\2\2\u0104\u091e\3\2\2\2\u0106\u0922\3")
        buf.write("\2\2\2\u0108\u0927\3\2\2\2\u010a\u092d\3\2\2\2\u010c\u093b")
        buf.write("\3\2\2\2\u010e\u094f\3\2\2\2\u0110\u0954\3\2\2\2\u0112")
        buf.write("\u0961\3\2\2\2\u0114\u0963\3\2\2\2\u0116\u0971\3\2\2\2")
        buf.write("\u0118\u097b\3\2\2\2\u011a\u0981\3\2\2\2\u011c\u0983\3")
        buf.write("\2\2\2\u011e\u0986\3\2\2\2\u0120\u098b\3\2\2\2\u0122\u09a3")
        buf.write("\3\2\2\2\u0124\u09b2\3\2\2\2\u0126\u09b4\3\2\2\2\u0128")
        buf.write("\u09c9\3\2\2\2\u012a\u09d8\3\2\2\2\u012c\u09ee\3\2\2\2")
        buf.write("\u012e\u09f5\3\2\2\2\u0130\u0a02\3\2\2\2\u0132\u0a05\3")
        buf.write("\2\2\2\u0134\u0a1a\3\2\2\2\u0136\u0a1e\3\2\2\2\u0138\u0a27")
        buf.write("\3\2\2\2\u013a\u0a38\3\2\2\2\u013c\u0a63\3\2\2\2\u013e")
        buf.write("\u0a79\3\2\2\2\u0140\u0a86\3\2\2\2\u0142\u0a8a\3\2\2\2")
        buf.write("\u0144\u0abc\3\2\2\2\u0146\u0abe\3\2\2\2\u0148\u0ac7\3")
        buf.write("\2\2\2\u014a\u0ade\3\2\2\2\u014c\u0af1\3\2\2\2\u014e\u0af4")
        buf.write("\3\2\2\2\u0150\u0b02\3\2\2\2\u0152\u0b05\3\2\2\2\u0154")
        buf.write("\u0b1c\3\2\2\2\u0156\u0b1e\3\2\2\2\u0158\u0b37\3\2\2\2")
        buf.write("\u015a\u0b39\3\2\2\2\u015c\u0b4a\3\2\2\2\u015e\u0b51\3")
        buf.write("\2\2\2\u0160\u0b60\3\2\2\2\u0162\u0b77\3\2\2\2\u0164\u0b7d")
        buf.write("\3\2\2\2\u0166\u0b7f\3\2\2\2\u0168\u0b97\3\2\2\2\u016a")
        buf.write("\u0baf\3\2\2\2\u016c\u0bd3\3\2\2\2\u016e\u0bd5\3\2\2\2")
        buf.write("\u0170\u0bd9\3\2\2\2\u0172\u0be6\3\2\2\2\u0174\u0be8\3")
        buf.write("\2\2\2\u0176\u0bf4\3\2\2\2\u0178\u0c04\3\2\2\2\u017a\u0c06")
        buf.write("\3\2\2\2\u017c\u0c09\3\2\2\2\u017e\u0c23\3\2\2\2\u0180")
        buf.write("\u0c25\3\2\2\2\u0182\u0c29\3\2\2\2\u0184\u0c38\3\2\2\2")
        buf.write("\u0186\u0c44\3\2\2\2\u0188\u0c4c\3\2\2\2\u018a\u0c50\3")
        buf.write("\2\2\2\u018c\u0c5b\3\2\2\2\u018e\u0c60\3\2\2\2\u0190\u0c6d")
        buf.write("\3\2\2\2\u0192\u0c81\3\2\2\2\u0194\u0c8a\3\2\2\2\u0196")
        buf.write("\u0c8c\3\2\2\2\u0198\u0c93\3\2\2\2\u019a\u0c98\3\2\2\2")
        buf.write("\u019c\u0ca5\3\2\2\2\u019e\u0cad\3\2\2\2\u01a0\u0cb5\3")
        buf.write("\2\2\2\u01a2\u0cc3\3\2\2\2\u01a4\u0cc5\3\2\2\2\u01a6\u0cc8")
        buf.write("\3\2\2\2\u01a8\u0cd3\3\2\2\2\u01aa\u0cdf\3\2\2\2\u01ac")
        buf.write("\u0d02\3\2\2\2\u01ae\u0d04\3\2\2\2\u01b0\u0d12\3\2\2\2")
        buf.write("\u01b2\u0d17\3\2\2\2\u01b4\u0d29\3\2\2\2\u01b6\u0d2d\3")
        buf.write("\2\2\2\u01b8\u0d35\3\2\2\2\u01ba\u0d3f\3\2\2\2\u01bc\u0d47")
        buf.write("\3\2\2\2\u01be\u0d4d\3\2\2\2\u01c0\u0d52\3\2\2\2\u01c2")
        buf.write("\u0d55\3\2\2\2\u01c4\u0d6e\3\2\2\2\u01c6\u0d81\3\2\2\2")
        buf.write("\u01c8\u0d85\3\2\2\2\u01ca\u0d88\3\2\2\2\u01cc\u0d9a\3")
        buf.write("\2\2\2\u01ce\u0d9f\3\2\2\2\u01d0\u0db2\3\2\2\2\u01d2\u0db4")
        buf.write("\3\2\2\2\u01d4\u0dc4\3\2\2\2\u01d6\u0dcc\3\2\2\2\u01d8")
        buf.write("\u0dd1\3\2\2\2\u01da\u0ddc\3\2\2\2\u01dc\u0de7\3\2\2\2")
        buf.write("\u01de\u0dea\3\2\2\2\u01e0\u0dfc\3\2\2\2\u01e2\u0dfe\3")
        buf.write("\2\2\2\u01e4\u0e0d\3\2\2\2\u01e6\u0e18\3\2\2\2\u01e8\u0e26")
        buf.write("\3\2\2\2\u01ea\u0e2b\3\2\2\2\u01ec\u0e30\3\2\2\2\u01ee")
        buf.write("\u0e3d\3\2\2\2\u01f0\u0e49\3\2\2\2\u01f2\u0e83\3\2\2\2")
        buf.write("\u01f4\u0ea0\3\2\2\2\u01f6\u0ea4\3\2\2\2\u01f8\u0eac\3")
        buf.write("\2\2\2\u01fa\u0eae\3\2\2\2\u01fc\u0eb0\3\2\2\2\u01fe\u0eb3")
        buf.write("\3\2\2\2\u0200\u0eb7\3\2\2\2\u0202\u0ebf\3\2\2\2\u0204")
        buf.write("\u0ef2\3\2\2\2\u0206\u0ef4\3\2\2\2\u0208\u0f10\3\2\2\2")
        buf.write("\u020a\u0f12\3\2\2\2\u020c\u0f22\3\2\2\2\u020e\u0f25\3")
        buf.write("\2\2\2\u0210\u0f27\3\2\2\2\u0212\u0f55\3\2\2\2\u0214\u0f63")
        buf.write("\3\2\2\2\u0216\u0f66\3\2\2\2\u0218\u0f79\3\2\2\2\u021a")
        buf.write("\u0f81\3\2\2\2\u021c\u0f93\3\2\2\2\u021e\u0f9a\3\2\2\2")
        buf.write("\u0220\u0fb0\3\2\2\2\u0222\u0fb2\3\2\2\2\u0224\u0fb6\3")
        buf.write("\2\2\2\u0226\u0fbf\3\2\2\2\u0228\u10f3\3\2\2\2\u022a\u1107")
        buf.write("\3\2\2\2\u022c\u1109\3\2\2\2\u022e\u110b\3\2\2\2\u0230")
        buf.write("\u110d\3\2\2\2\u0232\u110f\3\2\2\2\u0234\u111c\3\2\2\2")
        buf.write("\u0236\u1125\3\2\2\2\u0238\u112e\3\2\2\2\u023a\u1130\3")
        buf.write("\2\2\2\u023c\u1141\3\2\2\2\u023e\u1147\3\2\2\2\u0240\u1152")
        buf.write("\3\2\2\2\u0242\u1154\3\2\2\2\u0244\u1168\3\2\2\2\u0246")
        buf.write("\u1176\3\2\2\2\u0248\u1188\3\2\2\2\u024a\u119d\3\2\2\2")
        buf.write("\u024c\u11aa\3\2\2\2\u024e\u11ad\3\2\2\2\u0250\u11b6\3")
        buf.write("\2\2\2\u0252\u11bc\3\2\2\2\u0254\u11c4\3\2\2\2\u0256\u11c7")
        buf.write("\3\2\2\2\u0258\u11d2\3\2\2\2\u025a\u11da\3\2\2\2\u025c")
        buf.write("\u11dc\3\2\2\2\u025e\u11e5\3\2\2\2\u0260\u11ee\3\2\2\2")
        buf.write("\u0262\u11f0\3\2\2\2\u0264\u11f6\3\2\2\2\u0266\u11f8\3")
        buf.write("\2\2\2\u0268\u1206\3\2\2\2\u026a\u1209\3\2\2\2\u026c\u120f")
        buf.write("\3\2\2\2\u026e\u1211\3\2\2\2\u0270\u1216\3\2\2\2\u0272")
        buf.write("\u122e\3\2\2\2\u0274\u1232\3\2\2\2\u0276\u1234\3\2\2\2")
        buf.write("\u0278\u1236\3\2\2\2\u027a\u1238\3\2\2\2\u027c\u123a\3")
        buf.write("\2\2\2\u027e\u123c\3\2\2\2\u0280\u123e\3\2\2\2\u0282\u1240")
        buf.write("\3\2\2\2\u0284\u124c\3\2\2\2\u0286\u124e\3\2\2\2\u0288")
        buf.write("\u1253\3\2\2\2\u028a\u1255\3\2\2\2\u028c\u1257\3\2\2\2")
        buf.write("\u028e\u1259\3\2\2\2\u0290\u1261\3\2\2\2\u0292\u1263\3")
        buf.write("\2\2\2\u0294\u126f\3\2\2\2\u0296\u1271\3\2\2\2\u0298\u1279")
        buf.write("\3\2\2\2\u029a\u1281\3\2\2\2\u029c\u1289\3\2\2\2\u029e")
        buf.write("\u128e\3\2\2\2\u02a0\u1293\3\2\2\2\u02a2\u129a\3\2\2\2")
        buf.write("\u02a4\u129c\3\2\2\2\u02a6\u12a0\3\2\2\2\u02a8\u12a4\3")
        buf.write("\2\2\2\u02aa\u12a6\3\2\2\2\u02ac\u12ab\3\2\2\2\u02ae\u12ad")
        buf.write("\3\2\2\2\u02b0\u12b5\3\2\2\2\u02b2\u12bb\3\2\2\2\u02b4")
        buf.write("\u12c3\3\2\2\2\u02b6\u12c5\3\2\2\2\u02b8\u12ce\3\2\2\2")
        buf.write("\u02ba\u12dd\3\2\2\2\u02bc\u12f2\3\2\2\2\u02be\u131c\3")
        buf.write("\2\2\2\u02c0\u1323\3\2\2\2\u02c2\u132f\3\2\2\2\u02c4\u134d")
        buf.write("\3\2\2\2\u02c6\u134f\3\2\2\2\u02c8\u1396\3\2\2\2\u02ca")
        buf.write("\u139b\3\2\2\2\u02cc\u13b2\3\2\2\2\u02ce\u13b4\3\2\2\2")
        buf.write("\u02d0\u13f4\3\2\2\2\u02d2\u13f6\3\2\2\2\u02d4\u13f8\3")
        buf.write("\2\2\2\u02d6\u13fb\3\2\2\2\u02d8\u13fd\3\2\2\2\u02da\u1401")
        buf.write("\3\2\2\2\u02dc\u140a\3\2\2\2\u02de\u140f\3\2\2\2\u02e0")
        buf.write("\u1414\3\2\2\2\u02e2\u1419\3\2\2\2\u02e4\u141b\3\2\2\2")
        buf.write("\u02e6\u141f\3\2\2\2\u02e8\u02ea\n\2\2\2\u02e9\u02e8\3")
        buf.write("\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02e9\3\2\2\2\u02eb\u02ec")
        buf.write("\3\2\2\2\u02ec\3\3\2\2\2\u02ed\u02ef\5\b\5\2\u02ee\u02ed")
        buf.write("\3\2\2\2\u02ef\u02f2\3\2\2\2\u02f0\u02ee\3\2\2\2\u02f0")
        buf.write("\u02f1\3\2\2\2\u02f1\u02f3\3\2\2\2\u02f2\u02f0\3\2\2\2")
        buf.write("\u02f3\u02f4\7\2\2\3\u02f4\5\3\2\2\2\u02f5\u02f8\5\b\5")
        buf.write("\2\u02f6\u02f8\5\u025a\u012e\2\u02f7\u02f5\3\2\2\2\u02f7")
        buf.write("\u02f6\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fa\7\2\2\3")
        buf.write("\u02fa\u0308\3\2\2\2\u02fb\u02fc\5\b\5\2\u02fc\u02fd\7")
        buf.write("\u01f8\2\2\u02fd\u0302\3\2\2\2\u02fe\u02ff\5\u025a\u012e")
        buf.write("\2\u02ff\u0300\7\u01f8\2\2\u0300\u0302\3\2\2\2\u0301\u02fb")
        buf.write("\3\2\2\2\u0301\u02fe\3\2\2\2\u0302\u0305\3\2\2\2\u0303")
        buf.write("\u0301\3\2\2\2\u0303\u0304\3\2\2\2\u0304\u0306\3\2\2\2")
        buf.write("\u0305\u0303\3\2\2\2\u0306\u0308\7\2\2\3\u0307\u02f7\3")
        buf.write("\2\2\2\u0307\u0303\3\2\2\2\u0308\7\3\2\2\2\u0309\u031d")
        buf.write("\5\f\7\2\u030a\u031d\5\34\17\2\u030b\u031d\5.\30\2\u030c")
        buf.write("\u031d\5\u00a6T\2\u030d\u031d\5\64\33\2\u030e\u031d\5")
        buf.write("Z.\2\u030f\u031d\5\16\b\2\u0310\u031d\5\60\31\2\u0311")
        buf.write("\u031d\5\36\20\2\u0312\u031d\5\u00a8U\2\u0313\u031d\5")
        buf.write("\66\34\2\u0314\u031d\5n8\2\u0315\u031d\5\n\6\2\u0316\u031d")
        buf.write("\5\32\16\2\u0317\u031d\5,\27\2\u0318\u031d\5\u00a4S\2")
        buf.write("\u0319\u031d\5\62\32\2\u031a\u031d\5X-\2\u031b\u031d\5")
        buf.write("\u0118\u008d\2\u031c\u0309\3\2\2\2\u031c\u030a\3\2\2\2")
        buf.write("\u031c\u030b\3\2\2\2\u031c\u030c\3\2\2\2\u031c\u030d\3")
        buf.write("\2\2\2\u031c\u030e\3\2\2\2\u031c\u030f\3\2\2\2\u031c\u0310")
        buf.write("\3\2\2\2\u031c\u0311\3\2\2\2\u031c\u0312\3\2\2\2\u031c")
        buf.write("\u0313\3\2\2\2\u031c\u0314\3\2\2\2\u031c\u0315\3\2\2\2")
        buf.write("\u031c\u0316\3\2\2\2\u031c\u0317\3\2\2\2\u031c\u0318\3")
        buf.write("\2\2\2\u031c\u0319\3\2\2\2\u031c\u031a\3\2\2\2\u031c\u031b")
        buf.write("\3\2\2\2\u031d\t\3\2\2\2\u031e\u031f\7r\2\2\u031f\u0320")
        buf.write("\7\u009b\2\2\u0320\u0321\5\u029c\u014f\2\u0321\13\3\2")
        buf.write("\2\2\u0322\u0323\7\n\2\2\u0323\u0324\7\u009b\2\2\u0324")
        buf.write("\u0325\5\u029c\u014f\2\u0325\u0327\7?\2\2\u0326\u0328")
        buf.write("\7^\2\2\u0327\u0326\3\2\2\2\u0327\u0328\3\2\2\2\u0328")
        buf.write("\u032c\3\2\2\2\u0329\u032b\5\u00b0Y\2\u032a\u0329\3\2")
        buf.write("\2\2\u032b\u032e\3\2\2\2\u032c\u032a\3\2\2\2\u032c\u032d")
        buf.write("\3\2\2\2\u032d\u0331\3\2\2\2\u032e\u032c\3\2\2\2\u032f")
        buf.write("\u0330\7\u013d\2\2\u0330\u0332\7\u015b\2\2\u0331\u032f")
        buf.write("\3\2\2\2\u0331\u0332\3\2\2\2\u0332\r\3\2\2\2\u0333\u0336")
        buf.write("\7O\2\2\u0334\u0335\7\u010c\2\2\u0335\u0337\7\u0136\2")
        buf.write("\2\u0336\u0334\3\2\2\2\u0336\u0337\3\2\2\2\u0337\u0339")
        buf.write("\3\2\2\2\u0338\u0333\3\2\2\2\u0338\u0339\3\2\2\2\u0339")
        buf.write("\u033a\3\2\2\2\u033a\u033b\7\u009b\2\2\u033b\u0347\5\u029c")
        buf.write("\u014f\2\u033c\u033d\7\u01ec\2\2\u033d\u0342\5\u00bc_")
        buf.write("\2\u033e\u033f\7\u01f2\2\2\u033f\u0341\5\u00bc_\2\u0340")
        buf.write("\u033e\3\2\2\2\u0341\u0344\3\2\2\2\u0342\u0340\3\2\2\2")
        buf.write("\u0342\u0343\3\2\2\2\u0343\u0345\3\2\2\2\u0344\u0342\3")
        buf.write("\2\2\2\u0345\u0346\7\u01ed\2\2\u0346\u0348\3\2\2\2\u0347")
        buf.write("\u033c\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u0349\3\2\2\2")
        buf.write("\u0349\u034a\7\u013b\2\2\u034a\u0351\5\u02c2\u0162\2\u034b")
        buf.write("\u0350\5\u00aeX\2\u034c\u0350\5\20\t\2\u034d\u0350\5\24")
        buf.write("\13\2\u034e\u0350\7k\2\2\u034f\u034b\3\2\2\2\u034f\u034c")
        buf.write("\3\2\2\2\u034f\u034d\3\2\2\2\u034f\u034e\3\2\2\2\u0350")
        buf.write("\u0353\3\2\2\2\u0351\u034f\3\2\2\2\u0351\u0352\3\2\2\2")
        buf.write("\u0352\u0368\3\2\2\2\u0353\u0351\3\2\2\2\u0354\u0356\7")
        buf.write("\u011e\2\2\u0355\u0354\3\2\2\2\u0355\u0356\3\2\2\2\u0356")
        buf.write("\u0357\3\2\2\2\u0357\u0363\t\3\2\2\u0358\u035a\7a\2\2")
        buf.write("\u0359\u0358\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035e\3")
        buf.write("\2\2\2\u035b\u035d\5\u00c0a\2\u035c\u035b\3\2\2\2\u035d")
        buf.write("\u0360\3\2\2\2\u035e\u035c\3\2\2\2\u035e\u035f\3\2\2\2")
        buf.write("\u035f\u0361\3\2\2\2\u0360\u035e\3\2\2\2\u0361\u0364\5")
        buf.write("\u010a\u0086\2\u0362\u0364\5\u00b2Z\2\u0363\u0359\3\2")
        buf.write("\2\2\u0363\u0362\3\2\2\2\u0364\u0369\3\2\2\2\u0365\u0366")
        buf.write("\t\4\2\2\u0366\u0367\7\u019b\2\2\u0367\u0369\5\u0286\u0144")
        buf.write("\2\u0368\u0355\3\2\2\2\u0368\u0365\3\2\2\2\u0369\17\3")
        buf.write("\2\2\2\u036a\u036c\7\u0116\2\2\u036b\u036d\5\22\n\2\u036c")
        buf.write("\u036b\3\2\2\2\u036c\u036d\3\2\2\2\u036d\21\3\2\2\2\u036e")
        buf.write("\u036f\7\u01ec\2\2\u036f\u0370\7\u0119\2\2\u0370\u0371")
        buf.write("\5\u01f0\u00f9\2\u0371\u037f\7(\2\2\u0372\u0380\7\r\2")
        buf.write("\2\u0373\u0374\t\5\2\2\u0374\u0375\7\u01ec\2\2\u0375\u037a")
        buf.write("\5\u02ae\u0158\2\u0376\u0377\7\u01f2\2\2\u0377\u0379\5")
        buf.write("\u02ae\u0158\2\u0378\u0376\3\2\2\2\u0379\u037c\3\2\2\2")
        buf.write("\u037a\u0378\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037d\3")
        buf.write("\2\2\2\u037c\u037a\3\2\2\2\u037d\u037e\7\u01ed\2\2\u037e")
        buf.write("\u0380\3\2\2\2\u037f\u0372\3\2\2\2\u037f\u0373\3\2\2\2")
        buf.write("\u0380\u0382\3\2\2\2\u0381\u0383\5\30\r\2\u0382\u0381")
        buf.write("\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0384\3\2\2\2\u0384")
        buf.write("\u0385\7\u01ed\2\2\u0385\23\3\2\2\2\u0386\u0388\7\u013a")
        buf.write("\2\2\u0387\u0389\5\26\f\2\u0388\u0387\3\2\2\2\u0388\u0389")
        buf.write("\3\2\2\2\u0389\25\3\2\2\2\u038a\u038b\7\u0134\2\2\u038b")
        buf.write("\u038c\7\u01ec\2\2\u038c\u0391\5\u02b0\u0159\2\u038d\u038e")
        buf.write("\7\u01f2\2\2\u038e\u0390\5\u02b0\u0159\2\u038f\u038d\3")
        buf.write("\2\2\2\u0390\u0393\3\2\2\2\u0391\u038f\3\2\2\2\u0391\u0392")
        buf.write("\3\2\2\2\u0392\u0394\3\2\2\2\u0393\u0391\3\2\2\2\u0394")
        buf.write("\u0395\7\u01ed\2\2\u0395\27\3\2\2\2\u0396\u0397\t\6\2")
        buf.write("\2\u0397\u0398\5\u01f0\u00f9\2\u0398\u0399\7(\2\2\u0399")
        buf.write("\u039a\7\u01ec\2\2\u039a\u039f\5\u02ae\u0158\2\u039b\u039c")
        buf.write("\7\u01f2\2\2\u039c\u039e\5\u02ae\u0158\2\u039d\u039b\3")
        buf.write("\2\2\2\u039e\u03a1\3\2\2\2\u039f\u039d\3\2\2\2\u039f\u03a0")
        buf.write("\3\2\2\2\u03a0\u03a2\3\2\2\2\u03a1\u039f\3\2\2\2\u03a2")
        buf.write("\u03a3\7\u01ed\2\2\u03a3\31\3\2\2\2\u03a4\u03a5\7r\2\2")
        buf.write("\u03a5\u03a7\7\u0115\2\2\u03a6\u03a8\7#\2\2\u03a7\u03a6")
        buf.write("\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9")
        buf.write("\u03aa\5\u0284\u0143\2\u03aa\33\3\2\2\2\u03ab\u03ac\7")
        buf.write("\n\2\2\u03ac\u03ad\7\u0115\2\2\u03ad\u03ae\5\u0284\u0143")
        buf.write("\2\u03ae\u03b0\7?\2\2\u03af\u03b1\7^\2\2\u03b0\u03af\3")
        buf.write("\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b3\3\2\2\2\u03b2\u03b4")
        buf.write("\t\7\2\2\u03b3\u03b2\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4")
        buf.write("\u03b8\3\2\2\2\u03b5\u03b7\5\u00b0Y\2\u03b6\u03b5\3\2")
        buf.write("\2\2\u03b7\u03ba\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b8\u03b9")
        buf.write("\3\2\2\2\u03b9\u03bd\3\2\2\2\u03ba\u03b8\3\2\2\2\u03bb")
        buf.write("\u03bc\7\u013d\2\2\u03bc\u03be\7\u015b\2\2\u03bd\u03bb")
        buf.write("\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\35\3\2\2\2\u03bf\u03c2")
        buf.write("\7O\2\2\u03c0\u03c1\7\u010c\2\2\u03c1\u03c3\7\u0136\2")
        buf.write("\2\u03c2\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03c4")
        buf.write("\3\2\2\2\u03c4\u03c7\7\u0115\2\2\u03c5\u03c8\5\"\22\2")
        buf.write("\u03c6\u03c8\5 \21\2\u03c7\u03c5\3\2\2\2\u03c7\u03c6\3")
        buf.write("\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\37\3\2\2\2\u03c9\u03ca")
        buf.write("\7#\2\2\u03ca\u03cb\5\u0284\u0143\2\u03cb\u03cf\t\3\2")
        buf.write("\2\u03cc\u03ce\5*\26\2\u03cd\u03cc\3\2\2\2\u03ce\u03d1")
        buf.write("\3\2\2\2\u03cf\u03cd\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0")
        buf.write("\u03d8\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d2\u03d3\7\33\2")
        buf.write("\2\u03d3\u03d9\5\u00e0q\2\u03d4\u03d6\7{\2\2\u03d5\u03d7")
        buf.write("\5\u0284\u0143\2\u03d6\u03d5\3\2\2\2\u03d6\u03d7\3\2\2")
        buf.write("\2\u03d7\u03d9\3\2\2\2\u03d8\u03d2\3\2\2\2\u03d8\u03d4")
        buf.write("\3\2\2\2\u03d9!\3\2\2\2\u03da\u03dc\5\u0284\u0143\2\u03db")
        buf.write("\u03dd\5\u00aeX\2\u03dc\u03db\3\2\2\2\u03dc\u03dd\3\2")
        buf.write("\2\2\u03dd\u03de\3\2\2\2\u03de\u03e2\t\3\2\2\u03df\u03e1")
        buf.write("\5$\23\2\u03e0\u03df\3\2\2\2\u03e1\u03e4\3\2\2\2\u03e2")
        buf.write("\u03e0\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e5\3\2\2\2")
        buf.write("\u03e4\u03e2\3\2\2\2\u03e5\u03e7\7{\2\2\u03e6\u03e8\5")
        buf.write("\u0284\u0143\2\u03e7\u03e6\3\2\2\2\u03e7\u03e8\3\2\2\2")
        buf.write("\u03e8#\3\2\2\2\u03e9\u03f3\5\u00c2b\2\u03ea\u03f3\5\u00c4")
        buf.write("c\2\u03eb\u03f3\5\u00c6d\2\u03ec\u03f3\5\u00caf\2\u03ed")
        buf.write("\u03f3\5\u00ccg\2\u03ee\u03f3\5\u00ceh\2\u03ef\u03f3\5")
        buf.write("\u00d6l\2\u03f0\u03f3\5&\24\2\u03f1\u03f3\5(\25\2\u03f2")
        buf.write("\u03e9\3\2\2\2\u03f2\u03ea\3\2\2\2\u03f2\u03eb\3\2\2\2")
        buf.write("\u03f2\u03ec\3\2\2\2\u03f2\u03ed\3\2\2\2\u03f2\u03ee\3")
        buf.write("\2\2\2\u03f2\u03ef\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f2\u03f1")
        buf.write("\3\2\2\2\u03f3%\3\2\2\2\u03f4\u03f5\7\u0129\2\2\u03f5")
        buf.write("\u0401\5\u029e\u0150\2\u03f6\u03f7\7\u01ec\2\2\u03f7\u03fc")
        buf.write("\5\u00bc_\2\u03f8\u03f9\7\u01f2\2\2\u03f9\u03fb\5\u00bc")
        buf.write("_\2\u03fa\u03f8\3\2\2\2\u03fb\u03fe\3\2\2\2\u03fc\u03fa")
        buf.write("\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03ff\3\2\2\2\u03fe")
        buf.write("\u03fc\3\2\2\2\u03ff\u0400\7\u01ed\2\2\u0400\u0402\3\2")
        buf.write("\2\2\u0401\u03f6\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0403")
        buf.write("\3\2\2\2\u0403\u0404\7\u01f8\2\2\u0404\'\3\2\2\2\u0405")
        buf.write("\u0406\7\u009b\2\2\u0406\u0412\5\u029c\u014f\2\u0407\u0408")
        buf.write("\7\u01ec\2\2\u0408\u040d\5\u00bc_\2\u0409\u040a\7\u01f2")
        buf.write("\2\2\u040a\u040c\5\u00bc_\2\u040b\u0409\3\2\2\2\u040c")
        buf.write("\u040f\3\2\2\2\u040d\u040b\3\2\2\2\u040d\u040e\3\2\2\2")
        buf.write("\u040e\u0410\3\2\2\2\u040f\u040d\3\2\2\2\u0410\u0411\7")
        buf.write("\u01ed\2\2\u0411\u0413\3\2\2\2\u0412\u0407\3\2\2\2\u0412")
        buf.write("\u0413\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u0415\7\u013b")
        buf.write("\2\2\u0415\u0417\5\u02c2\u0162\2\u0416\u0418\7k\2\2\u0417")
        buf.write("\u0416\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u041a\3\2\2\2")
        buf.write("\u0419\u041b\7\u013a\2\2\u041a\u0419\3\2\2\2\u041a\u041b")
        buf.write("\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041d\7\u01f8\2\2\u041d")
        buf.write(")\3\2\2\2\u041e\u0429\5\u00c2b\2\u041f\u0429\5\u00c4c")
        buf.write("\2\u0420\u0429\5\u00c6d\2\u0421\u0429\5\u00caf\2\u0422")
        buf.write("\u0429\5\u00ceh\2\u0423\u0429\5\u00d6l\2\u0424\u0429\5")
        buf.write("\60\31\2\u0425\u0429\5\16\b\2\u0426\u0429\5&\24\2\u0427")
        buf.write("\u0429\5(\25\2\u0428\u041e\3\2\2\2\u0428\u041f\3\2\2\2")
        buf.write("\u0428\u0420\3\2\2\2\u0428\u0421\3\2\2\2\u0428\u0422\3")
        buf.write("\2\2\2\u0428\u0423\3\2\2\2\u0428\u0424\3\2\2\2\u0428\u0425")
        buf.write("\3\2\2\2\u0428\u0426\3\2\2\2\u0428\u0427\3\2\2\2\u0429")
        buf.write("+\3\2\2\2\u042a\u042b\7r\2\2\u042b\u042c\7\u0129\2\2\u042c")
        buf.write("\u042d\5\u029e\u0150\2\u042d-\3\2\2\2\u042e\u042f\7\n")
        buf.write("\2\2\u042f\u0430\7\u0129\2\2\u0430\u0431\5\u029e\u0150")
        buf.write("\2\u0431\u0433\7?\2\2\u0432\u0434\7^\2\2\u0433\u0432\3")
        buf.write("\2\2\2\u0433\u0434\3\2\2\2\u0434\u0438\3\2\2\2\u0435\u0437")
        buf.write("\5\u00b0Y\2\u0436\u0435\3\2\2\2\u0437\u043a\3\2\2\2\u0438")
        buf.write("\u0436\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043d\3\2\2\2")
        buf.write("\u043a\u0438\3\2\2\2\u043b\u043c\7\u013d\2\2\u043c\u043e")
        buf.write("\7\u015b\2\2\u043d\u043b\3\2\2\2\u043d\u043e\3\2\2\2\u043e")
        buf.write("/\3\2\2\2\u043f\u0442\7O\2\2\u0440\u0441\7\u010c\2\2\u0441")
        buf.write("\u0443\7\u0136\2\2\u0442\u0440\3\2\2\2\u0442\u0443\3\2")
        buf.write("\2\2\u0443\u0445\3\2\2\2\u0444\u043f\3\2\2\2\u0444\u0445")
        buf.write("\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u0447\7\u0129\2\2\u0447")
        buf.write("\u0453\5\u029e\u0150\2\u0448\u0449\7\u01ec\2\2\u0449\u044e")
        buf.write("\5\u00bc_\2\u044a\u044b\7\u01f2\2\2\u044b\u044d\5\u00bc")
        buf.write("_\2\u044c\u044a\3\2\2\2\u044d\u0450\3\2\2\2\u044e\u044c")
        buf.write("\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0451\3\2\2\2\u0450")
        buf.write("\u044e\3\2\2\2\u0451\u0452\7\u01ed\2\2\u0452\u0454\3\2")
        buf.write("\2\2\u0453\u0448\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0456")
        buf.write("\3\2\2\2\u0455\u0457\5\u00aeX\2\u0456\u0455\3\2\2\2\u0456")
        buf.write("\u0457\3\2\2\2\u0457\u0458\3\2\2\2\u0458\u0465\t\3\2\2")
        buf.write("\u0459\u045b\7a\2\2\u045a\u0459\3\2\2\2\u045a\u045b\3")
        buf.write("\2\2\2\u045b\u045f\3\2\2\2\u045c\u045e\5\u00c0a\2\u045d")
        buf.write("\u045c\3\2\2\2\u045e\u0461\3\2\2\2\u045f\u045d\3\2\2\2")
        buf.write("\u045f\u0460\3\2\2\2\u0460\u0462\3\2\2\2\u0461\u045f\3")
        buf.write("\2\2\2\u0462\u0466\5\u010a\u0086\2\u0463\u0466\5\u00b2")
        buf.write("Z\2\u0464\u0466\7\u008b\2\2\u0465\u045a\3\2\2\2\u0465")
        buf.write("\u0463\3\2\2\2\u0465\u0464\3\2\2\2\u0466\61\3\2\2\2\u0467")
        buf.write("\u0468\7r\2\2\u0468\u0469\7\u018a\2\2\u0469\u046a\5\u02a0")
        buf.write("\u0151\2\u046a\63\3\2\2\2\u046b\u046c\7\n\2\2\u046c\u046d")
        buf.write("\7\u018a\2\2\u046d\u0480\5\u02a0\u0151\2\u046e\u0481\t")
        buf.write("\b\2\2\u046f\u0470\7\u0135\2\2\u0470\u0471\7\u0185\2\2")
        buf.write("\u0471\u0481\5\u02a0\u0151\2\u0472\u0474\7?\2\2\u0473")
        buf.write("\u0475\7^\2\2\u0474\u0473\3\2\2\2\u0474\u0475\3\2\2\2")
        buf.write("\u0475\u0479\3\2\2\2\u0476\u0478\5\u00b0Y\2\u0477\u0476")
        buf.write("\3\2\2\2\u0478\u047b\3\2\2\2\u0479\u0477\3\2\2\2\u0479")
        buf.write("\u047a\3\2\2\2\u047a\u047e\3\2\2\2\u047b\u0479\3\2\2\2")
        buf.write("\u047c\u047d\7\u013d\2\2\u047d\u047f\7\u015b\2\2\u047e")
        buf.write("\u047c\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0481\3\2\2\2")
        buf.write("\u0480\u046e\3\2\2\2\u0480\u046f\3\2\2\2\u0480\u0472\3")
        buf.write("\2\2\2\u0481\65\3\2\2\2\u0482\u0485\7O\2\2\u0483\u0484")
        buf.write("\7\u010c\2\2\u0484\u0486\7\u0136\2\2\u0485\u0483\3\2\2")
        buf.write("\2\u0485\u0486\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0488")
        buf.write("\7\u018a\2\2\u0488\u048c\5\u02a0\u0151\2\u0489\u048d\5")
        buf.write("<\37\2\u048a\u048d\5@!\2\u048b\u048d\5B\"\2\u048c\u0489")
        buf.write("\3\2\2\2\u048c\u048a\3\2\2\2\u048c\u048b\3\2\2\2\u048d")
        buf.write("\u048f\3\2\2\2\u048e\u0490\58\35\2\u048f\u048e\3\2\2\2")
        buf.write("\u048f\u0490\3\2\2\2\u0490\u0492\3\2\2\2\u0491\u0493\t")
        buf.write("\b\2\2\u0492\u0491\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0495")
        buf.write("\3\2\2\2\u0494\u0496\5:\36\2\u0495\u0494\3\2\2\2\u0495")
        buf.write("\u0496\3\2\2\2\u0496\u0497\3\2\2\2\u0497\u0498\5D#\2\u0498")
        buf.write("\67\3\2\2\2\u0499\u049a\7\u0095\2\2\u049a\u049f\5\u02a0")
        buf.write("\u0151\2\u049b\u049c\7\u01f2\2\2\u049c\u049e\5\u02a0\u0151")
        buf.write("\2\u049d\u049b\3\2\2\2\u049e\u04a1\3\2\2\2\u049f\u049d")
        buf.write("\3\2\2\2\u049f\u04a0\3\2\2\2\u04a09\3\2\2\2\u04a1\u049f")
        buf.write("\3\2\2\2\u04a2\u04a3\7\u01a9\2\2\u04a3\u04a4\7\u01ec\2")
        buf.write("\2\u04a4\u04a5\5\u01ee\u00f8\2\u04a5\u04a6\7\u01ed\2\2")
        buf.write("\u04a6;\3\2\2\2\u04a7\u04ac\7\32\2\2\u04a8\u04ac\7\6\2")
        buf.write("\2\u04a9\u04aa\7\u00b6\2\2\u04aa\u04ac\7\u0104\2\2\u04ab")
        buf.write("\u04a7\3\2\2\2\u04ab\u04a8\3\2\2\2\u04ab\u04a9\3\2\2\2")
        buf.write("\u04ac\u04ad\3\2\2\2\u04ad\u04af\5N(\2\u04ae\u04b0\5T")
        buf.write("+\2\u04af\u04ae\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b2")
        buf.write("\3\2\2\2\u04b1\u04b3\5> \2\u04b2\u04b1\3\2\2\2\u04b2\u04b3")
        buf.write("\3\2\2\2\u04b3=\3\2\2\2\u04b4\u04b5\7\u0096\2\2\u04b5")
        buf.write("\u04b6\7t\2\2\u04b6\u04b7\7\u0143\2\2\u04b7?\3\2\2\2\u04b8")
        buf.write("\u04b9\7\u0096\2\2\u04b9\u04bb\5N(\2\u04ba\u04bc\5T+\2")
        buf.write("\u04bb\u04ba\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bcA\3\2\2")
        buf.write("\2\u04bd\u04be\t\t\2\2\u04be\u04c3\5L\'\2\u04bf\u04c0")
        buf.write("\7\u010c\2\2\u04c0\u04c2\5L\'\2\u04c1\u04bf\3\2\2\2\u04c2")
        buf.write("\u04c5\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c3\u04c4\3\2\2\2")
        buf.write("\u04c4\u04c6\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c6\u04ce\7")
        buf.write("\u0108\2\2\u04c7\u04cf\7X\2\2\u04c8\u04c9\5\u0280\u0141")
        buf.write("\2\u04c9\u04ca\7\u01e5\2\2\u04ca\u04cc\3\2\2\2\u04cb\u04c8")
        buf.write("\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04cd\3\2\2\2\u04cd")
        buf.write("\u04cf\7\u014a\2\2\u04ce\u04c7\3\2\2\2\u04ce\u04cb\3\2")
        buf.write("\2\2\u04cfC\3\2\2\2\u04d0\u04d1\7@\2\2\u04d1\u04d6\7\u018a")
        buf.write("\2\2\u04d2\u04d3\7,\2\2\u04d3\u04d6\5\u02d8\u016d\2\u04d4")
        buf.write("\u04d6\5\u010e\u0088\2\u04d5\u04d0\3\2\2\2\u04d5\u04d2")
        buf.write("\3\2\2\2\u04d5\u04d4\3\2\2\2\u04d6E\3\2\2\2\u04d7\u04d9")
        buf.write("\5\u0282\u0142\2\u04d8\u04da\5\u02b8\u015d\2\u04d9\u04d8")
        buf.write("\3\2\2\2\u04d9\u04da\3\2\2\2\u04daG\3\2\2\2\u04db\u04dc")
        buf.write("\7@\2\2\u04dc\u04e0\7\u018a\2\2\u04dd\u04df\5\u00c0a\2")
        buf.write("\u04de\u04dd\3\2\2\2\u04df\u04e2\3\2\2\2\u04e0\u04de\3")
        buf.write("\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e4\3\2\2\2\u04e2\u04e0")
        buf.write("\3\2\2\2\u04e3\u04e5\5J&\2\u04e4\u04e3\3\2\2\2\u04e5\u04e6")
        buf.write("\3\2\2\2\u04e6\u04e4\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7")
        buf.write("\u04e8\3\2\2\2\u04e8\u04e9\7{\2\2\u04e9\u04ea\5\u02a0")
        buf.write("\u0151\2\u04eaI\3\2\2\2\u04eb\u04ec\7\32\2\2\u04ec\u04ed")
        buf.write("\7\u016e\2\2\u04ed\u04ee\7\u00bd\2\2\u04ee\u04ef\5\u010e")
        buf.write("\u0088\2\u04ef\u04f0\7\32\2\2\u04f0\u04f1\7\u016e\2\2")
        buf.write("\u04f1\u04f2\7\u01f8\2\2\u04f2\u0510\3\2\2\2\u04f3\u04f4")
        buf.write("\7\32\2\2\u04f4\u04f5\7t\2\2\u04f5\u04f6\7\u0143\2\2\u04f6")
        buf.write("\u04f7\7\u00bd\2\2\u04f7\u04f8\5\u010e\u0088\2\u04f8\u04f9")
        buf.write("\7\32\2\2\u04f9\u04fa\7t\2\2\u04fa\u04fb\7\u0143\2\2\u04fb")
        buf.write("\u04fc\7\u01f8\2\2\u04fc\u0510\3\2\2\2\u04fd\u04fe\7\6")
        buf.write("\2\2\u04fe\u04ff\7\u016e\2\2\u04ff\u0500\7\u00bd\2\2\u0500")
        buf.write("\u0501\5\u010e\u0088\2\u0501\u0502\7\6\2\2\u0502\u0503")
        buf.write("\7\u016e\2\2\u0503\u0504\7\u01f8\2\2\u0504\u0510\3\2\2")
        buf.write("\2\u0505\u0506\7\6\2\2\u0506\u0507\7t\2\2\u0507\u0508")
        buf.write("\7\u0143\2\2\u0508\u0509\7\u00bd\2\2\u0509\u050a\5\u010e")
        buf.write("\u0088\2\u050a\u050b\7\6\2\2\u050b\u050c\7t\2\2\u050c")
        buf.write("\u050d\7\u0143\2\2\u050d\u050e\7\u01f8\2\2\u050e\u0510")
        buf.write("\3\2\2\2\u050f\u04eb\3\2\2\2\u050f\u04f3\3\2\2\2\u050f")
        buf.write("\u04fd\3\2\2\2\u050f\u0505\3\2\2\2\u0510K\3\2\2\2\u0511")
        buf.write("\u052c\7\n\2\2\u0512\u052c\7\13\2\2\u0513\u0514\7\21\2")
        buf.write("\2\u0514\u052c\7\u0171\2\2\u0515\u052c\7\24\2\2\u0516")
        buf.write("\u052c\7;\2\2\u0517\u052c\7O\2\2\u0518\u0519\7n\2\2\u0519")
        buf.write("\u052c\7\u0171\2\2\u051a\u052c\7r\2\2\u051b\u052c\7\u009d")
        buf.write("\2\2\u051c\u052c\7\u00f2\2\2\u051d\u052c\7\u0135\2\2\u051e")
        buf.write("\u052c\7\u013f\2\2\u051f\u052c\7\u018d\2\2\u0520\u052c")
        buf.write("\7]\2\2\u0521\u052c\7\u016d\2\2\u0522\u052c\7\u015e\2")
        buf.write("\2\u0523\u052c\7[\2\2\u0524\u052c\7\u00d4\2\2\u0525\u052c")
        buf.write("\7\u00d3\2\2\u0526\u052c\7\u0157\2\2\u0527\u052c\7\u0178")
        buf.write("\2\2\u0528\u052c\7X\2\2\u0529\u052c\7\u014a\2\2\u052a")
        buf.write("\u052c\7\u0095\2\2\u052b\u0511\3\2\2\2\u052b\u0512\3\2")
        buf.write("\2\2\u052b\u0513\3\2\2\2\u052b\u0515\3\2\2\2\u052b\u0516")
        buf.write("\3\2\2\2\u052b\u0517\3\2\2\2\u052b\u0518\3\2\2\2\u052b")
        buf.write("\u051a\3\2\2\2\u052b\u051b\3\2\2\2\u052b\u051c\3\2\2\2")
        buf.write("\u052b\u051d\3\2\2\2\u052b\u051e\3\2\2\2\u052b\u051f\3")
        buf.write("\2\2\2\u052b\u0520\3\2\2\2\u052b\u0521\3\2\2\2\u052b\u0522")
        buf.write("\3\2\2\2\u052b\u0523\3\2\2\2\u052b\u0524\3\2\2\2\u052b")
        buf.write("\u0525\3\2\2\2\u052b\u0526\3\2\2\2\u052b\u0527\3\2\2\2")
        buf.write("\u052b\u0528\3\2\2\2\u052b\u0529\3\2\2\2\u052b\u052a\3")
        buf.write("\2\2\2\u052cM\3\2\2\2\u052d\u0532\5P)\2\u052e\u052f\7")
        buf.write("\u010c\2\2\u052f\u0531\5P)\2\u0530\u052e\3\2\2\2\u0531")
        buf.write("\u0534\3\2\2\2\u0532\u0530\3\2\2\2\u0532\u0533\3\2\2\2")
        buf.write("\u0533\u0535\3\2\2\2\u0534\u0532\3\2\2\2\u0535\u0537\7")
        buf.write("\u0108\2\2\u0536\u0538\5R*\2\u0537\u0536\3\2\2\2\u0537")
        buf.write("\u0538\3\2\2\2\u0538\u0539\3\2\2\2\u0539\u053a\5\u02b0")
        buf.write("\u0159\2\u053aO\3\2\2\2\u053b\u0545\t\n\2\2\u053c\u053d")
        buf.write("\7\u0104\2\2\u053d\u0542\5\u02ae\u0158\2\u053e\u053f\7")
        buf.write("\u01f2\2\2\u053f\u0541\5\u02ae\u0158\2\u0540\u053e\3\2")
        buf.write("\2\2\u0541\u0544\3\2\2\2\u0542\u0540\3\2\2\2\u0542\u0543")
        buf.write("\3\2\2\2\u0543\u0546\3\2\2\2\u0544\u0542\3\2\2\2\u0545")
        buf.write("\u053c\3\2\2\2\u0545\u0546\3\2\2\2\u0546Q\3\2\2\2\u0547")
        buf.write("\u0548\7\u00ef\2\2\u0548\u0549\7\u0179\2\2\u0549\u054a")
        buf.write("\5\u02b0\u0159\2\u054a\u054b\7\u0104\2\2\u054bS\3\2\2")
        buf.write("\2\u054c\u054e\7\u0132\2\2\u054d\u054f\5V,\2\u054e\u054d")
        buf.write("\3\2\2\2\u054f\u0550\3\2\2\2\u0550\u054e\3\2\2\2\u0550")
        buf.write("\u0551\3\2\2\2\u0551U\3\2\2\2\u0552\u0553\t\13\2\2\u0553")
        buf.write("\u0554\5\u0268\u0135\2\u0554W\3\2\2\2\u0555\u0556\7r\2")
        buf.write("\2\u0556\u0558\7\u018e\2\2\u0557\u0559\7#\2\2\u0558\u0557")
        buf.write("\3\2\2\2\u0558\u0559\3\2\2\2\u0559\u055a\3\2\2\2\u055a")
        buf.write("\u055c\5\u0296\u014c\2\u055b\u055d\t\f\2\2\u055c\u055b")
        buf.write("\3\2\2\2\u055c\u055d\3\2\2\2\u055dY\3\2\2\2\u055e\u055f")
        buf.write("\7\n\2\2\u055f\u0560\7\u018e\2\2\u0560\u0566\5\u0296\u014c")
        buf.write("\2\u0561\u0567\5\\/\2\u0562\u0567\5^\60\2\u0563\u0567")
        buf.write("\5`\61\2\u0564\u0567\5h\65\2\u0565\u0567\5\u008aF\2\u0566")
        buf.write("\u0561\3\2\2\2\u0566\u0562\3\2\2\2\u0566\u0563\3\2\2\2")
        buf.write("\u0566\u0564\3\2\2\2\u0566\u0565\3\2\2\2\u0567\u0569\3")
        buf.write("\2\2\2\u0568\u056a\5j\66\2\u0569\u0568\3\2\2\2\u0569\u056a")
        buf.write("\3\2\2\2\u056a[\3\2\2\2\u056b\u056d\7?\2\2\u056c\u056e")
        buf.write("\7^\2\2\u056d\u056c\3\2\2\2\u056d\u056e\3\2\2\2\u056e")
        buf.write("\u0570\3\2\2\2\u056f\u0571\t\r\2\2\u0570\u056f\3\2\2\2")
        buf.write("\u0570\u0571\3\2\2\2\u0571\u0575\3\2\2\2\u0572\u0574\5")
        buf.write("\u00b0Y\2\u0573\u0572\3\2\2\2\u0574\u0577\3\2\2\2\u0575")
        buf.write("\u0573\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u057a\3\2\2\2")
        buf.write("\u0577\u0575\3\2\2\2\u0578\u0579\7\u013d\2\2\u0579\u057b")
        buf.write("\7\u015b\2\2\u057a\u0578\3\2\2\2\u057a\u057b\3\2\2\2\u057b")
        buf.write("]\3\2\2\2\u057c\u057e\7\u0136\2\2\u057d\u057f\5\u00ae")
        buf.write("X\2\u057e\u057d\3\2\2\2\u057e\u057f\3\2\2\2\u057f\u0580")
        buf.write("\3\2\2\2\u0580\u0581\7\17\2\2\u0581\u0582\7\u0103\2\2")
        buf.write("\u0582\u0583\7\u01ec\2\2\u0583\u0588\5\u008cG\2\u0584")
        buf.write("\u0585\7\u01f2\2\2\u0585\u0587\5\u008cG\2\u0586\u0584")
        buf.write("\3\2\2\2\u0587\u058a\3\2\2\2\u0588\u0586\3\2\2\2\u0588")
        buf.write("\u0589\3\2\2\2\u0589\u058b\3\2\2\2\u058a\u0588\3\2\2\2")
        buf.write("\u058b\u058c\7\u01ed\2\2\u058c_\3\2\2\2\u058d\u0592\5")
        buf.write("b\62\2\u058e\u058f\7\u01f2\2\2\u058f\u0591\5b\62\2\u0590")
        buf.write("\u058e\3\2\2\2\u0591\u0594\3\2\2\2\u0592\u0590\3\2\2\2")
        buf.write("\u0592\u0593\3\2\2\2\u0593a\3\2\2\2\u0594\u0592\3\2\2")
        buf.write("\2\u0595\u0598\t\16\2\2\u0596\u0599\5\u009cO\2\u0597\u0599")
        buf.write("\5\u0094K\2\u0598\u0596\3\2\2\2\u0598\u0597\3\2\2\2\u0599")
        buf.write("c\3\2\2\2\u059a\u059b\t\17\2\2\u059b\u05a8\7\23\2\2\u059c")
        buf.write("\u05a9\5f\64\2\u059d\u059e\7\u01ec\2\2\u059e\u05a3\5f")
        buf.write("\64\2\u059f\u05a0\7\u01f2\2\2\u05a0\u05a2\5f\64\2\u05a1")
        buf.write("\u059f\3\2\2\2\u05a2\u05a5\3\2\2\2\u05a3\u05a1\3\2\2\2")
        buf.write("\u05a3\u05a4\3\2\2\2\u05a4\u05a6\3\2\2\2\u05a5\u05a3\3")
        buf.write("\2\2\2\u05a6\u05a7\7\u01ed\2\2\u05a7\u05a9\3\2\2\2\u05a8")
        buf.write("\u059c\3\2\2\2\u05a8\u059d\3\2\2\2\u05a9e\3\2\2\2\u05aa")
        buf.write("\u05ac\5\u0278\u013d\2\u05ab\u05ad\5\u02c2\u0162\2\u05ac")
        buf.write("\u05ab\3\2\2\2\u05ac\u05ad\3\2\2\2\u05adg\3\2\2\2\u05ae")
        buf.write("\u05b4\7\u00e4\2\2\u05af\u05b0\7\u00ce\2\2\u05b0\u05b5")
        buf.write("\5\u01f0\u00f9\2\u05b1\u05b2\7u\2\2\u05b2\u05b3\7\u018e")
        buf.write("\2\2\u05b3\u05b5\5\u02c2\u0162\2\u05b4\u05af\3\2\2\2\u05b4")
        buf.write("\u05b1\3\2\2\2\u05b5i\3\2\2\2\u05b6\u05c7\7\u00bc\2\2")
        buf.write("\u05b7\u05c1\7.\2\2\u05b8\u05b9\7J\2\2\u05b9\u05ba\7\u0185")
        buf.write("\2\2\u05ba\u05c2\7\u0175\2\2\u05bb\u05bd\7\u00fc\2\2\u05bc")
        buf.write("\u05bb\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05be\3\2\2\2")
        buf.write("\u05be\u05bf\7\u00a9\2\2\u05bf\u05c0\7\u0179\2\2\u05c0")
        buf.write("\u05c2\7W\2\2\u05c1\u05b8\3\2\2\2\u05c1\u05bc\3\2\2\2")
        buf.write("\u05c1\u05c2\3\2\2\2\u05c2\u05c4\3\2\2\2\u05c3\u05c5\5")
        buf.write("l\67\2\u05c4\u05c3\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5\u05c7")
        buf.write("\3\2\2\2\u05c6\u05b6\3\2\2\2\u05c6\u05b7\3\2\2\2\u05c7")
        buf.write("k\3\2\2\2\u05c8\u05ca\7\u0098\2\2\u05c9\u05c8\3\2\2\2")
        buf.write("\u05c9\u05ca\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cc\7")
        buf.write("\u0084\2\2\u05cc\u05cd\7\u00bb\2\2\u05cd\u05ce\5\u02b0")
        buf.write("\u0159\2\u05cem\3\2\2\2\u05cf\u05d2\7O\2\2\u05d0\u05d1")
        buf.write("\7\u010c\2\2\u05d1\u05d3\7\u0136\2\2\u05d2\u05d0\3\2\2")
        buf.write("\2\u05d2\u05d3\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4\u05d7")
        buf.write("\7\u018e\2\2\u05d5\u05d8\5p9\2\u05d6\u05d8\5|?\2\u05d7")
        buf.write("\u05d5\3\2\2\2\u05d7\u05d6\3\2\2\2\u05d8o\3\2\2\2\u05d9")
        buf.write("\u05dc\5\u0296\u014c\2\u05da\u05db\7\u0106\2\2\u05db\u05dd")
        buf.write("\7\u01e8\2\2\u05dc\u05da\3\2\2\2\u05dc\u05dd\3\2\2\2\u05dd")
        buf.write("\u05df\3\2\2\2\u05de\u05e0\5r:\2\u05df\u05de\3\2\2\2\u05df")
        buf.write("\u05e0\3\2\2\2\u05e0q\3\2\2\2\u05e1\u05e3\5\u00aeX\2\u05e2")
        buf.write("\u05e1\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e6\3\2\2\2")
        buf.write("\u05e4\u05e7\5t;\2\u05e5\u05e7\5v<\2\u05e6\u05e4\3\2\2")
        buf.write("\2\u05e6\u05e5\3\2\2\2\u05e7\u05e9\3\2\2\2\u05e8\u05ea")
        buf.write("\5z>\2\u05e9\u05e8\3\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05f6")
        buf.write("\3\2\2\2\u05eb\u05ec\7\u01ec\2\2\u05ec\u05f1\5\u008cG")
        buf.write("\2\u05ed\u05ee\7\u01f2\2\2\u05ee\u05f0\5\u008cG\2\u05ef")
        buf.write("\u05ed\3\2\2\2\u05f0\u05f3\3\2\2\2\u05f1\u05ef\3\2\2\2")
        buf.write("\u05f1\u05f2\3\2\2\2\u05f2\u05f4\3\2\2\2\u05f3\u05f1\3")
        buf.write("\2\2\2\u05f4\u05f5\7\u01ed\2\2\u05f5\u05f7\3\2\2\2\u05f6")
        buf.write("\u05eb\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7\u05fb\3\2\2\2")
        buf.write("\u05f8\u05fa\5\u008aF\2\u05f9\u05f8\3\2\2\2\u05fa\u05fd")
        buf.write("\3\2\2\2\u05fb\u05f9\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fc")
        buf.write("s\3\2\2\2\u05fd\u05fb\3\2\2\2\u05fe\u0602\t\3\2\2\u05ff")
        buf.write("\u0603\7\u0103\2\2\u0600\u0603\5\u00dco\2\u0601\u0603")
        buf.write("\5x=\2\u0602\u05ff\3\2\2\2\u0602\u0600\3\2\2\2\u0602\u0601")
        buf.write("\3\2\2\2\u0603u\3\2\2\2\u0604\u0605\7\u0190\2\2\u0605")
        buf.write("\u0606\5\u02c2\u0162\2\u0606w\3\2\2\2\u0607\u0608\7\u0179")
        buf.write("\2\2\u0608\u0609\7\u0104\2\2\u0609\u060c\5\u02c2\u0162")
        buf.write("\2\u060a\u060b\7\u00fc\2\2\u060b\u060d\7\u00fe\2\2\u060c")
        buf.write("\u060a\3\2\2\2\u060c\u060d\3\2\2\2\u060dy\3\2\2\2\u060e")
        buf.write("\u060f\7\u008b\2\2\u060f\u0610\7\u00e7\2\2\u0610\u0611")
        buf.write("\5\u01f0\u00f9\2\u0611\u0612\7\u00c3\2\2\u0612\u0613\7")
        buf.write("\u00c0\2\2\u0613\u0614\7\u019b\2\2\u0614\u0615\t\20\2")
        buf.write("\2\u0615{\3\2\2\2\u0616\u0617\7#\2\2\u0617\u0618\5\u0296")
        buf.write("\u014c\2\u0618\u061a\t\3\2\2\u0619\u061b\5~@\2\u061a\u0619")
        buf.write("\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u061a\3\2\2\2\u061c")
        buf.write("\u061d\3\2\2\2\u061d\u061e\3\2\2\2\u061e\u061f\7{\2\2")
        buf.write("\u061f}\3\2\2\2\u0620\u0623\5\u0080A\2\u0621\u0623\5\u0082")
        buf.write("B\2\u0622\u0620\3\2\2\2\u0622\u0621\3\2\2\2\u0623\177")
        buf.write("\3\2\2\2\u0624\u0625\t\21\2\2\u0625\u0626\7\u00dc\2\2")
        buf.write("\u0626\u0627\5\u0086D\2\u0627\u0081\3\2\2\2\u0628\u062c")
        buf.write("\t\22\2\2\u0629\u062d\5\u0084C\2\u062a\u062d\5\u0086D")
        buf.write("\2\u062b\u062d\5\u0088E\2\u062c\u0629\3\2\2\2\u062c\u062a")
        buf.write("\3\2\2\2\u062c\u062b\3\2\2\2\u062d\u0083\3\2\2\2\u062e")
        buf.write("\u062f\7\u0129\2\2\u062f\u0630\5\u029e\u0150\2\u0630\u0631")
        buf.write("\7\u01ec\2\2\u0631\u0636\5\u00a2R\2\u0632\u0633\7\u01f2")
        buf.write("\2\2\u0633\u0635\5\u00a2R\2\u0634\u0632\3\2\2\2\u0635")
        buf.write("\u0638\3\2\2\2\u0636\u0634\3\2\2\2\u0636\u0637\3\2\2\2")
        buf.write("\u0637\u0639\3\2\2\2\u0638\u0636\3\2\2\2\u0639\u063a\7")
        buf.write("\u01ed\2\2\u063a\u0648\t\3\2\2\u063b\u0649\5\u00b2Z\2")
        buf.write("\u063c\u063e\7a\2\2\u063d\u063c\3\2\2\2\u063d\u063e\3")
        buf.write("\2\2\2\u063e\u0642\3\2\2\2\u063f\u0641\5\u00c0a\2\u0640")
        buf.write("\u063f\3\2\2\2\u0641\u0644\3\2\2\2\u0642\u0640\3\2\2\2")
        buf.write("\u0642\u0643\3\2\2\2\u0643\u0645\3\2\2\2\u0644\u0642\3")
        buf.write("\2\2\2\u0645\u0646\5\u010a\u0086\2\u0646\u0647\7\u01f8")
        buf.write("\2\2\u0647\u0649\3\2\2\2\u0648\u063b\3\2\2\2\u0648\u063d")
        buf.write("\3\2\2\2\u0649\u0085\3\2\2\2\u064a\u064b\7\u009b\2\2\u064b")
        buf.write("\u0657\5\u029c\u014f\2\u064c\u064d\7\u01ec\2\2\u064d\u0652")
        buf.write("\5\u00a2R\2\u064e\u064f\7\u01f2\2\2\u064f\u0651\5\u00a2")
        buf.write("R\2\u0650\u064e\3\2\2\2\u0651\u0654\3\2\2\2\u0652\u0650")
        buf.write("\3\2\2\2\u0652\u0653\3\2\2\2\u0653\u0655\3\2\2\2\u0654")
        buf.write("\u0652\3\2\2\2\u0655\u0656\7\u01ed\2\2\u0656\u0658\3\2")
        buf.write("\2\2\u0657\u064c\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u0659")
        buf.write("\3\2\2\2\u0659\u065a\7\u013b\2\2\u065a\u065b\5\u02c2\u0162")
        buf.write("\2\u065b\u0669\t\3\2\2\u065c\u066a\5\u00b2Z\2\u065d\u065f")
        buf.write("\7a\2\2\u065e\u065d\3\2\2\2\u065e\u065f\3\2\2\2\u065f")
        buf.write("\u0663\3\2\2\2\u0660\u0662\5\u00c0a\2\u0661\u0660\3\2")
        buf.write("\2\2\u0662\u0665\3\2\2\2\u0663\u0661\3\2\2\2\u0663\u0664")
        buf.write("\3\2\2\2\u0664\u0666\3\2\2\2\u0665\u0663\3\2\2\2\u0666")
        buf.write("\u0667\5\u010a\u0086\2\u0667\u0668\7\u01f8\2\2\u0668\u066a")
        buf.write("\3\2\2\2\u0669\u065c\3\2\2\2\u0669\u065e\3\2\2\2\u066a")
        buf.write("\u0087\3\2\2\2\u066b\u066d\7\u0090\2\2\u066c\u066b\3\2")
        buf.write("\2\2\u066c\u066d\3\2\2\2\u066d\u066f\3\2\2\2\u066e\u0670")
        buf.write("\7\u00b5\2\2\u066f\u066e\3\2\2\2\u066f\u0670\3\2\2\2\u0670")
        buf.write("\u0671\3\2\2\2\u0671\u0672\7F\2\2\u0672\u0673\7\u009b")
        buf.write("\2\2\u0673\u0685\5\u02c2\u0162\2\u0674\u0675\7\u01ec\2")
        buf.write("\2\u0675\u0676\7\u0152\2\2\u0676\u0677\7\u00a7\2\2\u0677")
        buf.write("\u0678\7\u0111\2\2\u0678\u0679\5\u02c2\u0162\2\u0679\u067a")
        buf.write("\7\u01f2\2\2\u067a\u067b\3\2\2\2\u067b\u0680\5\u00a2R")
        buf.write("\2\u067c\u067d\7\u01f2\2\2\u067d\u067f\5\u00a2R\2\u067e")
        buf.write("\u067c\3\2\2\2\u067f\u0682\3\2\2\2\u0680\u067e\3\2\2\2")
        buf.write("\u0680\u0681\3\2\2\2\u0681\u0683\3\2\2\2\u0682\u0680\3")
        buf.write("\2\2\2\u0683\u0684\7\u01ed\2\2\u0684\u0686\3\2\2\2\u0685")
        buf.write("\u0674\3\2\2\2\u0685\u0686\3\2\2\2\u0686\u0687\3\2\2\2")
        buf.write("\u0687\u0688\7\u013b\2\2\u0688\u0689\7\u0152\2\2\u0689")
        buf.write("\u068a\7\17\2\2\u068a\u068b\7\u0139\2\2\u068b\u0699\t")
        buf.write("\3\2\2\u068c\u069a\5\u00b2Z\2\u068d\u068f\7a\2\2\u068e")
        buf.write("\u068d\3\2\2\2\u068e\u068f\3\2\2\2\u068f\u0693\3\2\2\2")
        buf.write("\u0690\u0692\5\u00c0a\2\u0691\u0690\3\2\2\2\u0692\u0695")
        buf.write("\3\2\2\2\u0693\u0691\3\2\2\2\u0693\u0694\3\2\2\2\u0694")
        buf.write("\u0696\3\2\2\2\u0695\u0693\3\2\2\2\u0696\u0697\5\u010a")
        buf.write("\u0086\2\u0697\u0698\7\u01f8\2\2\u0698\u069a\3\2\2\2\u0699")
        buf.write("\u068c\3\2\2\2\u0699\u068e\3\2\2\2\u069a\u0089\3\2\2\2")
        buf.write("\u069b\u069d\7\u00fc\2\2\u069c\u069b\3\2\2\2\u069c\u069d")
        buf.write("\3\2\2\2\u069d\u069e\3\2\2\2\u069e\u069f\t\23\2\2\u069f")
        buf.write("\u008b\3\2\2\2\u06a0\u06a1\5\u02d8\u016d\2\u06a1\u06a3")
        buf.write("\5\u02c2\u0162\2\u06a2\u06a4\5\u008eH\2\u06a3\u06a2\3")
        buf.write("\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a7\3\2\2\2\u06a5\u06a7")
        buf.write("\5\u0090I\2\u06a6\u06a0\3\2\2\2\u06a6\u06a5\3\2\2\2\u06a7")
        buf.write("\u008d\3\2\2\2\u06a8\u06a9\7\u008b\2\2\u06a9\u06aa\7\u00e7")
        buf.write("\2\2\u06aa\u06ab\5\u01f0\u00f9\2\u06ab\u008f\3\2\2\2\u06ac")
        buf.write("\u06ae\5\u008aF\2\u06ad\u06ac\3\2\2\2\u06ad\u06ae\3\2")
        buf.write("\2\2\u06ae\u06b0\3\2\2\2\u06af\u06b1\5\u0092J\2\u06b0")
        buf.write("\u06af\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06b0\3\2\2\2")
        buf.write("\u06b2\u06b3\3\2\2\2\u06b3\u06b6\3\2\2\2\u06b4\u06b5\7")
        buf.write("\u01f2\2\2\u06b5\u06b7\5\u009eP\2\u06b6\u06b4\3\2\2\2")
        buf.write("\u06b6\u06b7\3\2\2\2\u06b7\u0091\3\2\2\2\u06b8\u06bc\5")
        buf.write("\u0094K\2\u06b9\u06bc\5\u009aN\2\u06ba\u06bc\5\u009cO")
        buf.write("\2\u06bb\u06b8\3\2\2\2\u06bb\u06b9\3\2\2\2\u06bb\u06ba")
        buf.write("\3\2\2\2\u06bc\u0093\3\2\2\2\u06bd\u06c0\t\22\2\2\u06be")
        buf.write("\u06c1\5\u0096L\2\u06bf\u06c1\5\u0098M\2\u06c0\u06be\3")
        buf.write("\2\2\2\u06c0\u06bf\3\2\2\2\u06c1\u0095\3\2\2\2\u06c2\u06c3")
        buf.write("\7\u0129\2\2\u06c3\u06c4\5\u029e\u0150\2\u06c4\u06c5\7")
        buf.write("\u01ec\2\2\u06c5\u06ca\5\u00a2R\2\u06c6\u06c7\7\u01f2")
        buf.write("\2\2\u06c7\u06c9\5\u00a2R\2\u06c8\u06c6\3\2\2\2\u06c9")
        buf.write("\u06cc\3\2\2\2\u06ca\u06c8\3\2\2\2\u06ca\u06cb\3\2\2\2")
        buf.write("\u06cb\u06cd\3\2\2\2\u06cc\u06ca\3\2\2\2\u06cd\u06d0\7")
        buf.write("\u01ed\2\2\u06ce\u06cf\t\3\2\2\u06cf\u06d1\5\u00b2Z\2")
        buf.write("\u06d0\u06ce\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u0097\3")
        buf.write("\2\2\2\u06d2\u06d3\7\u009b\2\2\u06d3\u06df\5\u029c\u014f")
        buf.write("\2\u06d4\u06d5\7\u01ec\2\2\u06d5\u06da\5\u00a2R\2\u06d6")
        buf.write("\u06d7\7\u01f2\2\2\u06d7\u06d9\5\u00a2R\2\u06d8\u06d6")
        buf.write("\3\2\2\2\u06d9\u06dc\3\2\2\2\u06da\u06d8\3\2\2\2\u06da")
        buf.write("\u06db\3\2\2\2\u06db\u06dd\3\2\2\2\u06dc\u06da\3\2\2\2")
        buf.write("\u06dd\u06de\7\u01ed\2\2\u06de\u06e0\3\2\2\2\u06df\u06d4")
        buf.write("\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1")
        buf.write("\u06e6\7\u013b\2\2\u06e2\u06e7\5\u02c2\u0162\2\u06e3\u06e4")
        buf.write("\7\u0152\2\2\u06e4\u06e5\7\17\2\2\u06e5\u06e7\7\u0139")
        buf.write("\2\2\u06e6\u06e2\3\2\2\2\u06e6\u06e3\3\2\2\2\u06e7\u06f0")
        buf.write("\3\2\2\2\u06e8\u06e9\t\3\2\2\u06e9\u06f1\5\u00b2Z\2\u06ea")
        buf.write("\u06ec\7\u008b\2\2\u06eb\u06ed\7\u01a1\2\2\u06ec\u06eb")
        buf.write("\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee")
        buf.write("\u06ef\7\u00e7\2\2\u06ef\u06f1\5\u01f0\u00f9\2\u06f0\u06e8")
        buf.write("\3\2\2\2\u06f0\u06ea\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1")
        buf.write("\u0099\3\2\2\2\u06f2\u06f4\7\u0090\2\2\u06f3\u06f2\3\2")
        buf.write("\2\2\u06f3\u06f4\3\2\2\2\u06f4\u06f6\3\2\2\2\u06f5\u06f7")
        buf.write("\7\u00b5\2\2\u06f6\u06f5\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7")
        buf.write("\u06f8\3\2\2\2\u06f8\u06f9\7F\2\2\u06f9\u06fa\7\u009b")
        buf.write("\2\2\u06fa\u070c\5\u02c2\u0162\2\u06fb\u06fc\7\u01ec\2")
        buf.write("\2\u06fc\u06fd\7\u0152\2\2\u06fd\u06fe\7\u00a7\2\2\u06fe")
        buf.write("\u06ff\7\u0111\2\2\u06ff\u0700\5\u02c2\u0162\2\u0700\u0701")
        buf.write("\7\u01f2\2\2\u0701\u0702\3\2\2\2\u0702\u0707\5\u00a2R")
        buf.write("\2\u0703\u0704\7\u01f2\2\2\u0704\u0706\5\u00a2R\2\u0705")
        buf.write("\u0703\3\2\2\2\u0706\u0709\3\2\2\2\u0707\u0705\3\2\2\2")
        buf.write("\u0707\u0708\3\2\2\2\u0708\u070a\3\2\2\2\u0709\u0707\3")
        buf.write("\2\2\2\u070a\u070b\7\u01ed\2\2\u070b\u070d\3\2\2\2\u070c")
        buf.write("\u06fb\3\2\2\2\u070c\u070d\3\2\2\2\u070d\u070e\3\2\2\2")
        buf.write("\u070e\u070f\7\u013b\2\2\u070f\u0710\7\u0152\2\2\u0710")
        buf.write("\u0711\7\17\2\2\u0711\u0714\7\u0139\2\2\u0712\u0713\t")
        buf.write("\3\2\2\u0713\u0715\5\u00b2Z\2\u0714\u0712\3\2\2\2\u0714")
        buf.write("\u0715\3\2\2\2\u0715\u009b\3\2\2\2\u0716\u0717\t\21\2")
        buf.write("\2\u0717\u0718\7\u00dc\2\2\u0718\u0719\5\u0098M\2\u0719")
        buf.write("\u009d\3\2\2\2\u071a\u071b\7\u0124\2\2\u071b\u071c\7\u0138")
        buf.write("\2\2\u071c\u071d\7\u01ec\2\2\u071d\u0722\5\u00a0Q\2\u071e")
        buf.write("\u071f\7\u01f2\2\2\u071f\u0721\5\u00a0Q\2\u0720\u071e")
        buf.write("\3\2\2\2\u0721\u0724\3\2\2\2\u0722\u0720\3\2\2\2\u0722")
        buf.write("\u0723\3\2\2\2\u0723\u0725\3\2\2\2\u0724\u0722\3\2\2\2")
        buf.write("\u0725\u0726\7\u01ed\2\2\u0726\u009f\3\2\2\2\u0727\u072a")
        buf.write("\5\u02d8\u016d\2\u0728\u072a\7d\2\2\u0729\u0727\3\2\2")
        buf.write("\2\u0729\u0728\3\2\2\2\u072a\u00a1\3\2\2\2\u072b\u072c")
        buf.write("\5\u0288\u0145\2\u072c\u072d\5\u02c2\u0162\2\u072d\u00a3")
        buf.write("\3\2\2\2\u072e\u072f\7r\2\2\u072f\u0730\7\u0153\2\2\u0730")
        buf.write("\u0731\5\u0298\u014d\2\u0731\u00a5\3\2\2\2\u0732\u0733")
        buf.write("\7\n\2\2\u0733\u0734\7\u0153\2\2\u0734\u0736\5\u0298\u014d")
        buf.write("\2\u0735\u0737\5\u00aaV\2\u0736\u0735\3\2\2\2\u0737\u0738")
        buf.write("\3\2\2\2\u0738\u0736\3\2\2\2\u0738\u0739\3\2\2\2\u0739")
        buf.write("\u00a7\3\2\2\2\u073a\u073b\7O\2\2\u073b\u073c\7\u0153")
        buf.write("\2\2\u073c\u0741\5\u0298\u014d\2\u073d\u0740\5\u00acW")
        buf.write("\2\u073e\u0740\5\u00aaV\2\u073f\u073d\3\2\2\2\u073f\u073e")
        buf.write("\3\2\2\2\u0740\u0743\3\2\2\2\u0741\u073f\3\2\2\2\u0741")
        buf.write("\u0742\3\2\2\2\u0742\u00a9\3\2\2\2\u0743\u0741\3\2\2\2")
        buf.write("\u0744\u0745\7\u00aa\2\2\u0745\u0746\7(\2\2\u0746\u0755")
        buf.write("\7\u01e6\2\2\u0747\u0748\7\u00da\2\2\u0748\u0755\7\u01e6")
        buf.write("\2\2\u0749\u0755\7\u00f7\2\2\u074a\u074b\7\u00e0\2\2\u074b")
        buf.write("\u0755\7\u01e6\2\2\u074c\u0755\7\u00f8\2\2\u074d\u0755")
        buf.write("\7V\2\2\u074e\u0755\7\u00f5\2\2\u074f\u0750\7+\2\2\u0750")
        buf.write("\u0755\7\u01e6\2\2\u0751\u0755\7\u00f3\2\2\u0752\u0755")
        buf.write("\7\u010e\2\2\u0753\u0755\7\u00fa\2\2\u0754\u0744\3\2\2")
        buf.write("\2\u0754\u0747\3\2\2\2\u0754\u0749\3\2\2\2\u0754\u074a")
        buf.write("\3\2\2\2\u0754\u074c\3\2\2\2\u0754\u074d\3\2\2\2\u0754")
        buf.write("\u074e\3\2\2\2\u0754\u074f\3\2\2\2\u0754\u0751\3\2\2\2")
        buf.write("\u0754\u0752\3\2\2\2\u0754\u0753\3\2\2\2\u0755\u00ab\3")
        buf.write("\2\2\2\u0756\u0757\7\u016c\2\2\u0757\u0758\7\u01ad\2\2")
        buf.write("\u0758\u0759\7\u01e6\2\2\u0759\u00ad\3\2\2\2\u075a\u075b")
        buf.write("\7\25\2\2\u075b\u075c\t\24\2\2\u075c\u00af\3\2\2\2\u075d")
        buf.write("\u075e\5\u02d8\u016d\2\u075e\u075f\7\u0203\2\2\u075f\u0760")
        buf.write("\5\u01f0\u00f9\2\u0760\u00b1\3\2\2\2\u0761\u0764\7\u00c3")
        buf.write("\2\2\u0762\u0765\5\u00b4[\2\u0763\u0765\5\u00b6\\\2\u0764")
        buf.write("\u0762\3\2\2\2\u0764\u0763\3\2\2\2\u0765\u00b3\3\2\2\2")
        buf.write("\u0766\u0767\7\u00c0\2\2\u0767\u0768\7\u00e7\2\2\u0768")
        buf.write("\u0769\7\u01e8\2\2\u0769\u00b5\3\2\2\2\u076a\u076d\7*")
        buf.write("\2\2\u076b\u076c\7\u00e7\2\2\u076c\u076e\7\u01e8\2\2\u076d")
        buf.write("\u076b\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u076f\3\2\2\2")
        buf.write("\u076f\u0770\7\u00c9\2\2\u0770\u0772\5\u02d8\u016d\2\u0771")
        buf.write("\u0773\5\u00b8]\2\u0772\u0771\3\2\2\2\u0772\u0773\3\2")
        buf.write("\2\2\u0773\u0776\3\2\2\2\u0774\u0775\7\u01ad\2\2\u0775")
        buf.write("\u0777\7H\2\2\u0776\u0774\3\2\2\2\u0776\u0777\3\2\2\2")
        buf.write("\u0777\u0779\3\2\2\2\u0778\u077a\5\u00ba^\2\u0779\u0778")
        buf.write("\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u00b7\3\2\2\2\u077b")
        buf.write("\u077c\7\7\2\2\u077c\u077d\7\u00a7\2\2\u077d\u077e\7\u01ec")
        buf.write("\2\2\u077e\u0783\5\u01f0\u00f9\2\u077f\u0780\7\u01f2\2")
        buf.write("\2\u0780\u0782\5\u01f0\u00f9\2\u0781\u077f\3\2\2\2\u0782")
        buf.write("\u0785\3\2\2\2\u0783\u0781\3\2\2\2\u0783\u0784\3\2\2\2")
        buf.write("\u0784\u0786\3\2\2\2\u0785\u0783\3\2\2\2\u0786\u0787\7")
        buf.write("\u01ed\2\2\u0787\u00b9\3\2\2\2\u0788\u0789\7\u0117\2\2")
        buf.write("\u0789\u0795\7\u01ec\2\2\u078a\u078f\5\u01f0\u00f9\2\u078b")
        buf.write("\u078c\7\u01f2\2\2\u078c\u078e\5\u01f0\u00f9\2\u078d\u078b")
        buf.write("\3\2\2\2\u078e\u0791\3\2\2\2\u078f\u078d\3\2\2\2\u078f")
        buf.write("\u0790\3\2\2\2\u0790\u0796\3\2\2\2\u0791\u078f\3\2\2\2")
        buf.write("\u0792\u0793\7\u01e5\2\2\u0793\u0794\7\u01e5\2\2\u0794")
        buf.write("\u0796\7\u01e5\2\2\u0795\u078a\3\2\2\2\u0795\u0792\3\2")
        buf.write("\2\2\u0796\u0797\3\2\2\2\u0797\u0798\7\u01ed\2\2\u0798")
        buf.write("\u00bb\3\2\2\2\u0799\u079d\5\u0288\u0145\2\u079a\u079c")
        buf.write("\t\25\2\2\u079b\u079a\3\2\2\2\u079c\u079f\3\2\2\2\u079d")
        buf.write("\u079b\3\2\2\2\u079d\u079e\3\2\2\2\u079e\u07a1\3\2\2\2")
        buf.write("\u079f\u079d\3\2\2\2\u07a0\u07a2\5\u02c2\u0162\2\u07a1")
        buf.write("\u07a0\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2\u07a4\3\2\2\2")
        buf.write("\u07a3\u07a5\5\u00be`\2\u07a4\u07a3\3\2\2\2\u07a4\u07a5")
        buf.write("\3\2\2\2\u07a5\u00bd\3\2\2\2\u07a6\u07a7\t\26\2\2\u07a7")
        buf.write("\u07a8\5\u01f0\u00f9\2\u07a8\u00bf\3\2\2\2\u07a9\u07b3")
        buf.write("\5\u00c2b\2\u07aa\u07b3\5\u00c4c\2\u07ab\u07b3\5\u00c6")
        buf.write("d\2\u07ac\u07b3\5\u00caf\2\u07ad\u07b3\5\u00ccg\2\u07ae")
        buf.write("\u07b3\5\u00ceh\2\u07af\u07b3\5\u00d6l\2\u07b0\u07b3\5")
        buf.write("\60\31\2\u07b1\u07b3\5\16\b\2\u07b2\u07a9\3\2\2\2\u07b2")
        buf.write("\u07aa\3\2\2\2\u07b2\u07ab\3\2\2\2\u07b2\u07ac\3\2\2\2")
        buf.write("\u07b2\u07ad\3\2\2\2\u07b2\u07ae\3\2\2\2\u07b2\u07af\3")
        buf.write("\2\2\2\u07b2\u07b0\3\2\2\2\u07b2\u07b1\3\2\2\2\u07b3\u00c1")
        buf.write("\3\2\2\2\u07b4\u07b6\5\u02a2\u0152\2\u07b5\u07b7\7C\2")
        buf.write("\2\u07b6\u07b5\3\2\2\2\u07b6\u07b7\3\2\2\2\u07b7\u07b8")
        buf.write("\3\2\2\2\u07b8\u07bb\5\u02c2\u0162\2\u07b9\u07ba\7\u00fc")
        buf.write("\2\2\u07ba\u07bc\7\u00fe\2\2\u07bb\u07b9\3\2\2\2\u07bb")
        buf.write("\u07bc\3\2\2\2\u07bc\u07be\3\2\2\2\u07bd\u07bf\5\u00be")
        buf.write("`\2\u07be\u07bd\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u07c0")
        buf.write("\3\2\2\2\u07c0\u07c1\7\u01f8\2\2\u07c1\u00c3\3\2\2\2\u07c2")
        buf.write("\u07c3\7\u0176\2\2\u07c3\u07c4\5\u0296\u014c\2\u07c4\u07c5")
        buf.write("\7\u00bd\2\2\u07c5\u07cb\5\u02c2\u0162\2\u07c6\u07c7\7")
        buf.write("\u012b\2\2\u07c7\u07c8\5\u01f0\u00f9\2\u07c8\u07c9\7\3")
        buf.write("\2\2\u07c9\u07ca\5\u01f0\u00f9\2\u07ca\u07cc\3\2\2\2\u07cb")
        buf.write("\u07c6\3\2\2\2\u07cb\u07cc\3\2\2\2\u07cc\u07cf\3\2\2\2")
        buf.write("\u07cd\u07ce\7\u00fc\2\2\u07ce\u07d0\7\u00fe\2\2\u07cf")
        buf.write("\u07cd\3\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u07d1\3\2\2\2")
        buf.write("\u07d1\u07d2\7\u01f8\2\2\u07d2\u00c5\3\2\2\2\u07d3\u07d4")
        buf.write("\7T\2\2\u07d4\u07e0\5\u02a6\u0154\2\u07d5\u07d6\7\u01ec")
        buf.write("\2\2\u07d6\u07db\5\u00c8e\2\u07d7\u07d8\7\u01f2\2\2\u07d8")
        buf.write("\u07da\5\u00c8e\2\u07d9\u07d7\3\2\2\2\u07da\u07dd\3\2")
        buf.write("\2\2\u07db\u07d9\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u07de")
        buf.write("\3\2\2\2\u07dd\u07db\3\2\2\2\u07de\u07df\7\u01ed\2\2\u07df")
        buf.write("\u07e1\3\2\2\2\u07e0\u07d5\3\2\2\2\u07e0\u07e1\3\2\2\2")
        buf.write("\u07e1\u07e4\3\2\2\2\u07e2\u07e3\7\u013b\2\2\u07e3\u07e5")
        buf.write("\5\u02c2\u0162\2\u07e4\u07e2\3\2\2\2\u07e4\u07e5\3\2\2")
        buf.write("\2\u07e5\u07e8\3\2\2\2\u07e6\u07e7\7\u00bd\2\2\u07e7\u07e9")
        buf.write("\5\u0134\u009b\2\u07e8\u07e6\3\2\2\2\u07e8\u07e9\3\2\2")
        buf.write("\2\u07e9\u07ea\3\2\2\2\u07ea\u07eb\7\u01f8\2\2\u07eb\u00c7")
        buf.write("\3\2\2\2\u07ec\u07f1\5\u0288\u0145\2\u07ed\u07ef\7\u00a7")
        buf.write("\2\2\u07ee\u07ed\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef\u07f0")
        buf.write("\3\2\2\2\u07f0\u07f2\5\u02c2\u0162\2\u07f1\u07ee\3\2\2")
        buf.write("\2\u07f1\u07f2\3\2\2\2\u07f2\u07f4\3\2\2\2\u07f3\u07f5")
        buf.write("\5\u00be`\2\u07f4\u07f3\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5")
        buf.write("\u00c9\3\2\2\2\u07f6\u07f7\5\u029a\u014e\2\u07f7\u07f8")
        buf.write("\7\u0082\2\2\u07f8\u07f9\7\u01f8\2\2\u07f9\u00cb\3\2\2")
        buf.write("\2\u07fa\u0819\7\u0124\2\2\u07fb\u081a\7\u0156\2\2\u07fc")
        buf.write("\u081a\7\30\2\2\u07fd\u07fe\7\u0083\2\2\u07fe\u07ff\7")
        buf.write("\u01ec\2\2\u07ff\u0800\5\u029a\u014e\2\u0800\u0801\7\u01f2")
        buf.write("\2\2\u0801\u0802\5\u02d4\u016b\2\u0802\u0803\7\u01ed\2")
        buf.write("\2\u0803\u081a\3\2\2\2\u0804\u0805\7\u00b1\2\2\u0805\u0806")
        buf.write("\7\u01ec\2\2\u0806\u0807\5\u02d8\u016d\2\u0807\u0808\7")
        buf.write("\u01f2\2\2\u0808\u0809\5\u01f0\u00f9\2\u0809\u080a\7\u01ed")
        buf.write("\2\2\u080a\u081a\3\2\2\2\u080b\u080c\7\u0138\2\2\u080c")
        buf.write("\u080f\7\u01ec\2\2\u080d\u0810\5\u02d8\u016d\2\u080e\u0810")
        buf.write("\7d\2\2\u080f\u080d\3\2\2\2\u080f\u080e\3\2\2\2\u0810")
        buf.write("\u0813\3\2\2\2\u0811\u0812\7\u01f2\2\2\u0812\u0814\5\u02d8")
        buf.write("\u016d\2\u0813\u0811\3\2\2\2\u0814\u0815\3\2\2\2\u0815")
        buf.write("\u0813\3\2\2\2\u0815\u0816\3\2\2\2\u0816\u0817\3\2\2\2")
        buf.write("\u0817\u0818\7\u01ed\2\2\u0818\u081a\3\2\2\2\u0819\u07fb")
        buf.write("\3\2\2\2\u0819\u07fc\3\2\2\2\u0819\u07fd\3\2\2\2\u0819")
        buf.write("\u0804\3\2\2\2\u0819\u080b\3\2\2\2\u081a\u081b\3\2\2\2")
        buf.write("\u081b\u081c\7\u01f8\2\2\u081c\u00cd\3\2\2\2\u081d\u0820")
        buf.write("\5\u00d0i\2\u081e\u0820\5\u00d4k\2\u081f\u081d\3\2\2\2")
        buf.write("\u081f\u081e\3\2\2\2\u0820\u00cf\3\2\2\2\u0821\u0822\7")
        buf.write("\u018e\2\2\u0822\u0823\5\u0296\u014c\2\u0823\u0836\7\u00bd")
        buf.write("\2\2\u0824\u0825\7\u012f\2\2\u0825\u0826\7\u01ec\2\2\u0826")
        buf.write("\u082b\5\u00d2j\2\u0827\u0828\7\u01f2\2\2\u0828\u082a")
        buf.write("\5\u00d2j\2\u0829\u0827\3\2\2\2\u082a\u082d\3\2\2\2\u082b")
        buf.write("\u0829\3\2\2\2\u082b\u082c\3\2\2\2\u082c\u082e\3\2\2\2")
        buf.write("\u082d\u082b\3\2\2\2\u082e\u082f\7\u01ed\2\2\u082f\u0837")
        buf.write("\3\2\2\2\u0830\u0831\7\u0130\2\2\u0831\u0834\7T\2\2\u0832")
        buf.write("\u0833\7\u013b\2\2\u0833\u0835\5\u02c2\u0162\2\u0834\u0832")
        buf.write("\3\2\2\2\u0834\u0835\3\2\2\2\u0835\u0837\3\2\2\2\u0836")
        buf.write("\u0824\3\2\2\2\u0836\u0830\3\2\2\2\u0837\u0838\3\2\2\2")
        buf.write("\u0838\u0839\7\u01f8\2\2\u0839\u00d1\3\2\2\2\u083a\u083c")
        buf.write("\5\u02ae\u0158\2\u083b\u083d\5\u02c2\u0162\2\u083c\u083b")
        buf.write("\3\2\2\2\u083c\u083d\3\2\2\2\u083d\u0840\3\2\2\2\u083e")
        buf.write("\u083f\7\u00fc\2\2\u083f\u0841\7\u00fe\2\2\u0840\u083e")
        buf.write("\3\2\2\2\u0840\u0841\3\2\2\2\u0841\u0843\3\2\2\2\u0842")
        buf.write("\u0844\5\u00be`\2\u0843\u0842\3\2\2\2\u0843\u0844\3\2")
        buf.write("\2\2\u0844\u00d3\3\2\2\2\u0845\u0846\5\u02a8\u0155\2\u0846")
        buf.write("\u0847\5\u0296\u014c\2\u0847\u0848\t\27\2\2\u0848\u0849")
        buf.write("\7\u01f8\2\2\u0849\u00d5\3\2\2\2\u084a\u084d\5\u00d8m")
        buf.write("\2\u084b\u084d\5\u00dep\2\u084c\u084a\3\2\2\2\u084c\u084b")
        buf.write("\3\2\2\2\u084d\u084e\3\2\2\2\u084e\u084f\7\u01f8\2\2\u084f")
        buf.write("\u00d7\3\2\2\2\u0850\u0851\7\u018e\2\2\u0851\u0852\5\u0296")
        buf.write("\u014c\2\u0852\u085e\7\u00bd\2\2\u0853\u0854\7\u0179\2")
        buf.write("\2\u0854\u0855\7\u0104\2\2\u0855\u0857\5\u02c2\u0162\2")
        buf.write("\u0856\u0858\5\u00dan\2\u0857\u0856\3\2\2\2\u0857\u0858")
        buf.write("\3\2\2\2\u0858\u085b\3\2\2\2\u0859\u085a\7\u00fc\2\2\u085a")
        buf.write("\u085c\7\u00fe\2\2\u085b\u0859\3\2\2\2\u085b\u085c\3\2")
        buf.write("\2\2\u085c\u085f\3\2\2\2\u085d\u085f\5\u00dco\2\u085e")
        buf.write("\u0853\3\2\2\2\u085e\u085d\3\2\2\2\u085f\u00d9\3\2\2\2")
        buf.write("\u0860\u0863\7\u00ad\2\2\u0861\u0863\7\u00ac\2\2\u0862")
        buf.write("\u0860\3\2\2\2\u0862\u0861\3\2\2\2\u0863\u0864\3\2\2\2")
        buf.write("\u0864\u0865\7(\2\2\u0865\u0866\5\u02c2\u0162\2\u0866")
        buf.write("\u00db\3\2\2\2\u0867\u086b\7\u01a2\2\2\u0868\u0869\7\u01a3")
        buf.write("\2\2\u0869\u086b\7\16\2\2\u086a\u0867\3\2\2\2\u086a\u0868")
        buf.write("\3\2\2\2\u086b\u086c\3\2\2\2\u086c\u086d\7\u01ec\2\2\u086d")
        buf.write("\u086e\5\u01f0\u00f9\2\u086e\u086f\7\u01ed\2\2\u086f\u0870")
        buf.write("\7\u0104\2\2\u0870\u0873\5\u02c2\u0162\2\u0871\u0872\7")
        buf.write("\u00fc\2\2\u0872\u0874\7\u00fe\2\2\u0873\u0871\3\2\2\2")
        buf.write("\u0873\u0874\3\2\2\2\u0874\u00dd\3\2\2\2\u0875\u0876\5")
        buf.write("\u027e\u0140\2\u0876\u0877\5\u02c2\u0162\2\u0877\u00df")
        buf.write("\3\2\2\2\u0878\u0879\5\u00e4s\2\u0879\u087a\t\30\2\2\u087a")
        buf.write("\u087d\3\2\2\2\u087b\u087d\5\u00e2r\2\u087c\u0878\3\2")
        buf.write("\2\2\u087c\u087b\3\2\2\2\u087d\u087e\3\2\2\2\u087e\u087c")
        buf.write("\3\2\2\2\u087e\u087f\3\2\2\2\u087f\u00e1\3\2\2\2\u0880")
        buf.write("\u0881\7\u01fa\2\2\u0881\u0882\7\u01fa\2\2\u0882\u0883")
        buf.write("\5\u0294\u014b\2\u0883\u0884\7\u0200\2\2\u0884\u0885\7")
        buf.write("\u0200\2\2\u0885\u00e3\3\2\2\2\u0886\u0887\7O\2\2\u0887")
        buf.write("\u08a1\5\2\2\2\u0888\u0889\7\n\2\2\u0889\u08a1\5\2\2\2")
        buf.write("\u088a\u088c\7\u009d\2\2\u088b\u088d\7\t\2\2\u088c\u088b")
        buf.write("\3\2\2\2\u088c\u088d\3\2\2\2\u088d\u088e\3\2\2\2\u088e")
        buf.write("\u08a1\5\2\2\2\u088f\u0890\7\u018d\2\2\u0890\u08a1\5\2")
        buf.write("\2\2\u0891\u08a1\5\u010a\u0086\2\u0892\u08a1\5\u0110\u0089")
        buf.write("\2\u0893\u08a1\5\u00e6t\2\u0894\u08a1\5\u00e8u\2\u0895")
        buf.write("\u08a1\5\u00eav\2\u0896\u08a1\5\u00ecw\2\u0897\u08a1\5")
        buf.write("\u00eex\2\u0898\u08a1\5\u00f4{\2\u0899\u08a1\5\u00f8}")
        buf.write("\2\u089a\u08a1\5\u0102\u0082\2\u089b\u08a1\5\u0104\u0083")
        buf.write("\2\u089c\u08a1\5\u0106\u0084\2\u089d\u08a1\5\u0214\u010b")
        buf.write("\2\u089e\u08a1\5\u0112\u008a\2\u089f\u08a1\5\u0108\u0085")
        buf.write("\2\u08a0\u0886\3\2\2\2\u08a0\u0888\3\2\2\2\u08a0\u088a")
        buf.write("\3\2\2\2\u08a0\u088f\3\2\2\2\u08a0\u0891\3\2\2\2\u08a0")
        buf.write("\u0892\3\2\2\2\u08a0\u0893\3\2\2\2\u08a0\u0894\3\2\2\2")
        buf.write("\u08a0\u0895\3\2\2\2\u08a0\u0896\3\2\2\2\u08a0\u0897\3")
        buf.write("\2\2\2\u08a0\u0898\3\2\2\2\u08a0\u0899\3\2\2\2\u08a0\u089a")
        buf.write("\3\2\2\2\u08a0\u089b\3\2\2\2\u08a0\u089c\3\2\2\2\u08a0")
        buf.write("\u089d\3\2\2\2\u08a0\u089e\3\2\2\2\u08a0\u089f\3\2\2\2")
        buf.write("\u08a1\u00e5\3\2\2\2\u08a2\u08a5\5\u02cc\u0167\2\u08a3")
        buf.write("\u08a5\5\u02ca\u0166\2\u08a4\u08a2\3\2\2\2\u08a4\u08a3")
        buf.write("\3\2\2\2\u08a5\u08a6\3\2\2\2\u08a6\u08a7\7\u01f5\2\2\u08a7")
        buf.write("\u08a8\5\u01f0\u00f9\2\u08a8\u00e7\3\2\2\2\u08a9\u08ab")
        buf.write("\7I\2\2\u08aa\u08ac\5\u0294\u014b\2\u08ab\u08aa\3\2\2")
        buf.write("\2\u08ab\u08ac\3\2\2\2\u08ac\u08af\3\2\2\2\u08ad\u08ae")
        buf.write("\7\u01a9\2\2\u08ae\u08b0\5\u01ee\u00f8\2\u08af\u08ad\3")
        buf.write("\2\2\2\u08af\u08b0\3\2\2\2\u08b0\u00e9\3\2\2\2\u08b1\u08b3")
        buf.write("\7\u0089\2\2\u08b2\u08b4\5\u0294\u014b\2\u08b3\u08b2\3")
        buf.write("\2\2\2\u08b3\u08b4\3\2\2\2\u08b4\u08b7\3\2\2\2\u08b5\u08b6")
        buf.write("\7\u01a9\2\2\u08b6\u08b8\5\u01ee\u00f8\2\u08b7\u08b5\3")
        buf.write("\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u00eb\3\2\2\2\u08b9\u08ba")
        buf.write("\7\u009c\2\2\u08ba\u08bb\5\u0294\u014b\2\u08bb\u00ed\3")
        buf.write("\2\2\2\u08bc\u08bd\7\u00a4\2\2\u08bd\u08be\5\u01ee\u00f8")
        buf.write("\2\u08be\u08bf\7\u017b\2\2\u08bf\u08c3\5\u00e0q\2\u08c0")
        buf.write("\u08c2\5\u00f0y\2\u08c1\u08c0\3\2\2\2\u08c2\u08c5\3\2")
        buf.write("\2\2\u08c3\u08c1\3\2\2\2\u08c3\u08c4\3\2\2\2\u08c4\u08c7")
        buf.write("\3\2\2\2\u08c5\u08c3\3\2\2\2\u08c6\u08c8\5\u00f2z\2\u08c7")
        buf.write("\u08c6\3\2\2\2\u08c7\u08c8\3\2\2\2\u08c8\u08c9\3\2\2\2")
        buf.write("\u08c9\u08ca\7{\2\2\u08ca\u08cb\7\u00a4\2\2\u08cb\u00ef")
        buf.write("\3\2\2\2\u08cc\u08cd\7w\2\2\u08cd\u08ce\5\u01ee\u00f8")
        buf.write("\2\u08ce\u08cf\7\u017b\2\2\u08cf\u08d0\5\u00e0q\2\u08d0")
        buf.write("\u00f1\3\2\2\2\u08d1\u08d2\7v\2\2\u08d2\u08d3\5\u00e0")
        buf.write("q\2\u08d3\u00f3\3\2\2\2\u08d4\u08d6\5\u0294\u014b\2\u08d5")
        buf.write("\u08d4\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u08db\3\2\2\2")
        buf.write("\u08d7\u08d8\7\u01ac\2\2\u08d8\u08dc\5\u01ee\u00f8\2\u08d9")
        buf.write("\u08da\7\u0096\2\2\u08da\u08dc\5\u00f6|\2\u08db\u08d7")
        buf.write("\3\2\2\2\u08db\u08d9\3\2\2\2\u08db\u08dc\3\2\2\2\u08dc")
        buf.write("\u08dd\3\2\2\2\u08dd\u08de\7\u00d6\2\2\u08de\u08df\5\u00e0")
        buf.write("q\2\u08df\u08e0\7{\2\2\u08e0\u08e2\7\u00d6\2\2\u08e1\u08e3")
        buf.write("\5\u0294\u014b\2\u08e2\u08e1\3\2\2\2\u08e2\u08e3\3\2\2")
        buf.write("\2\u08e3\u00f5\3\2\2\2\u08e4\u08e5\5\u02a4\u0153\2\u08e5")
        buf.write("\u08e7\7\u00a7\2\2\u08e6\u08e8\7\u013e\2\2\u08e7\u08e6")
        buf.write("\3\2\2\2\u08e7\u08e8\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9")
        buf.write("\u08ea\5\u00fe\u0080\2\u08ea\u08eb\7\3\2\2\u08eb\u08ec")
        buf.write("\5\u0100\u0081\2\u08ec\u08fa\3\2\2\2\u08ed\u08ee\5\u02a8")
        buf.write("\u0155\2\u08ee\u08f7\7\u00a7\2\2\u08ef\u08f1\5\u02a6\u0154")
        buf.write("\2\u08f0\u08f2\5\u01ec\u00f7\2\u08f1\u08f0\3\2\2\2\u08f1")
        buf.write("\u08f2\3\2\2\2\u08f2\u08f8\3\2\2\2\u08f3\u08f4\7\u01ec")
        buf.write("\2\2\u08f4\u08f5\5\u0134\u009b\2\u08f5\u08f6\7\u01ed\2")
        buf.write("\2\u08f6\u08f8\3\2\2\2\u08f7\u08ef\3\2\2\2\u08f7\u08f3")
        buf.write("\3\2\2\2\u08f8\u08fa\3\2\2\2\u08f9\u08e4\3\2\2\2\u08f9")
        buf.write("\u08ed\3\2\2\2\u08fa\u00f7\3\2\2\2\u08fb\u08fc\7\u0097")
        buf.write("\2\2\u08fc\u08fd\5\u02a4\u0153\2\u08fd\u08fe\7\u00a7\2")
        buf.write("\2\u08fe\u08ff\5\u00fa~\2\u08ff\u0902\5\u0112\u008a\2")
        buf.write("\u0900\u0901\7\u0148\2\2\u0901\u0903\7\u0084\2\2\u0902")
        buf.write("\u0900\3\2\2\2\u0902\u0903\3\2\2\2\u0903\u00f9\3\2\2\2")
        buf.write("\u0904\u0905\5\u00fe\u0080\2\u0905\u0906\7\3\2\2\u0906")
        buf.write("\u0907\5\u0100\u0081\2\u0907\u0912\3\2\2\2\u0908\u0909")
        buf.write("\7\u00af\2\2\u0909\u090a\7\u0104\2\2\u090a\u090c\5\u02aa")
        buf.write("\u0156\2\u090b\u090d\5\u00fc\177\2\u090c\u090b\3\2\2\2")
        buf.write("\u090c\u090d\3\2\2\2\u090d\u0912\3\2\2\2\u090e\u090f\7")
        buf.write("\u019e\2\2\u090f\u0910\7\u0104\2\2\u0910\u0912\5\u02a4")
        buf.write("\u0153\2\u0911\u0904\3\2\2\2\u0911\u0908\3\2\2\2\u0911")
        buf.write("\u090e\3\2\2\2\u0912\u00fb\3\2\2\2\u0913\u0914\7\34\2")
        buf.write("\2\u0914\u0915\5\u00fe\u0080\2\u0915\u0916\7\f\2\2\u0916")
        buf.write("\u0917\5\u0100\u0081\2\u0917\u00fd\3\2\2\2\u0918\u0919")
        buf.write("\5\u0200\u0101\2\u0919\u00ff\3\2\2\2\u091a\u091b\5\u0200")
        buf.write("\u0101\2\u091b\u0101\3\2\2\2\u091c\u091d\7\u00fe\2\2\u091d")
        buf.write("\u0103\3\2\2\2\u091e\u0920\7\u012a\2\2\u091f\u0921\5\u029a")
        buf.write("\u014e\2\u0920\u091f\3\2\2\2\u0920\u0921\3\2\2\2\u0921")
        buf.write("\u0105\3\2\2\2\u0922\u0924\7\u013b\2\2\u0923\u0925\5\u01ee")
        buf.write("\u00f8\2\u0924\u0923\3\2\2\2\u0924\u0925\3\2\2\2\u0925")
        buf.write("\u0107\3\2\2\2\u0926\u0928\7,\2\2\u0927\u0926\3\2\2\2")
        buf.write("\u0927\u0928\3\2\2\2\u0928\u0929\3\2\2\2\u0929\u092b\5")
        buf.write("\u0282\u0142\2\u092a\u092c\5\u02b8\u015d\2\u092b\u092a")
        buf.write("\3\2\2\2\u092b\u092c\3\2\2\2\u092c\u0109\3\2\2\2\u092d")
        buf.write("\u092e\7\33\2\2\u092e\u0935\5\u00e0q\2\u092f\u0931\7\u0082")
        buf.write("\2\2\u0930\u0932\5\u010c\u0087\2\u0931\u0930\3\2\2\2\u0932")
        buf.write("\u0933\3\2\2\2\u0933\u0931\3\2\2\2\u0933\u0934\3\2\2\2")
        buf.write("\u0934\u0936\3\2\2\2\u0935\u092f\3\2\2\2\u0935\u0936\3")
        buf.write("\2\2\2\u0936\u0937\3\2\2\2\u0937\u0939\7{\2\2\u0938\u093a")
        buf.write("\5\u0294\u014b\2\u0939\u0938\3\2\2\2\u0939\u093a\3\2\2")
        buf.write("\2\u093a\u010b\3\2\2\2\u093b\u093c\7\u01a9\2\2\u093c\u0941")
        buf.write("\5\u029a\u014e\2\u093d\u093e\7\u010c\2\2\u093e\u0940\5")
        buf.write("\u029a\u014e\2\u093f\u093d\3\2\2\2\u0940\u0943\3\2\2\2")
        buf.write("\u0941\u093f\3\2\2\2\u0941\u0942\3\2\2\2\u0942\u0944\3")
        buf.write("\2\2\2\u0943\u0941\3\2\2\2\u0944\u0945\7\u017b\2\2\u0945")
        buf.write("\u0946\5\u00e0q\2\u0946\u010d\3\2\2\2\u0947\u0949\7a\2")
        buf.write("\2\u0948\u0947\3\2\2\2\u0948\u0949\3\2\2\2\u0949\u094b")
        buf.write("\3\2\2\2\u094a\u094c\5\u00c0a\2\u094b\u094a\3\2\2\2\u094c")
        buf.write("\u094d\3\2\2\2\u094d\u094b\3\2\2\2\u094d\u094e\3\2\2\2")
        buf.write("\u094e\u0950\3\2\2\2\u094f\u0948\3\2\2\2\u094f\u0950\3")
        buf.write("\2\2\2\u0950\u0951\3\2\2\2\u0951\u0952\5\u010a\u0086\2")
        buf.write("\u0952\u010f\3\2\2\2\u0953\u0955\7a\2\2\u0954\u0953\3")
        buf.write("\2\2\2\u0954\u0955\3\2\2\2\u0955\u0957\3\2\2\2\u0956\u0958")
        buf.write("\5\u00c0a\2\u0957\u0956\3\2\2\2\u0958\u0959\3\2\2\2\u0959")
        buf.write("\u0957\3\2\2\2\u0959\u095a\3\2\2\2\u095a\u095b\3\2\2\2")
        buf.write("\u095b\u095c\5\u010a\u0086\2\u095c\u0111\3\2\2\2\u095d")
        buf.write("\u0962\5\u0114\u008b\2\u095e\u0962\5\u0118\u008d\2\u095f")
        buf.write("\u0962\5\u011a\u008e\2\u0960\u0962\5\u0124\u0093\2\u0961")
        buf.write("\u095d\3\2\2\2\u0961\u095e\3\2\2\2\u0961\u095f\3\2\2\2")
        buf.write("\u0961\u0960\3\2\2\2\u0962\u0113\3\2\2\2\u0963\u0964\7")
        buf.write("\u0087\2\2\u0964\u0965\7\u00a6\2\2\u0965\u096f\5\u01f0")
        buf.write("\u00f9\2\u0966\u0968\5\u0272\u013a\2\u0967\u0969\5\u023a")
        buf.write("\u011e\2\u0968\u0967\3\2\2\2\u0968\u0969\3\2\2\2\u0969")
        buf.write("\u0970\3\2\2\2\u096a\u096c\5\u023a\u011e\2\u096b\u096d")
        buf.write("\5\u0116\u008c\2\u096c\u096b\3\2\2\2\u096c\u096d\3\2\2")
        buf.write("\2\u096d\u0970\3\2\2\2\u096e\u0970\5\u0116\u008c\2\u096f")
        buf.write("\u0966\3\2\2\2\u096f\u096a\3\2\2\2\u096f\u096e\3\2\2\2")
        buf.write("\u096f\u0970\3\2\2\2\u0970\u0115\3\2\2\2\u0971\u0972\t")
        buf.write("\31\2\2\u0972\u0973\5\u0272\u013a\2\u0973\u0117\3\2\2")
        buf.write("\2\u0974\u097c\5\u01c2\u00e2\2\u0975\u097c\5\u01ce\u00e8")
        buf.write("\2\u0976\u097c\5\u0134\u009b\2\u0977\u097c\5\u01a8\u00d5")
        buf.write("\2\u0978\u097c\5\u01ae\u00d8\2\u0979\u097c\5\u01b0\u00d9")
        buf.write("\2\u097a\u097c\5\u0132\u009a\2\u097b\u0974\3\2\2\2\u097b")
        buf.write("\u0975\3\2\2\2\u097b\u0976\3\2\2\2\u097b\u0977\3\2\2\2")
        buf.write("\u097b\u0978\3\2\2\2\u097b\u0979\3\2\2\2\u097b\u097a\3")
        buf.write("\2\2\2\u097c\u0119\3\2\2\2\u097d\u0982\5\u011c\u008f\2")
        buf.write("\u097e\u0982\5\u011e\u0090\2\u097f\u0982\5\u0120\u0091")
        buf.write("\2\u0980\u0982\5\u0122\u0092\2\u0981\u097d\3\2\2\2\u0981")
        buf.write("\u097e\3\2\2\2\u0981\u097f\3\2\2\2\u0981\u0980\3\2\2\2")
        buf.write("\u0982\u011b\3\2\2\2\u0983\u0984\7\67\2\2\u0984\u0985")
        buf.write("\5\u02a6\u0154\2\u0985\u011d\3\2\2\2\u0986\u0987\7\u010a")
        buf.write("\2\2\u0987\u0989\5\u02a6\u0154\2\u0988\u098a\5\u01ec\u00f7")
        buf.write("\2\u0989\u0988\3\2\2\2\u0989\u098a\3\2\2\2\u098a\u011f")
        buf.write("\3\2\2\2\u098b\u098c\7\u008f\2\2\u098c\u09a1\5\u02a6\u0154")
        buf.write("\2\u098d\u098e\7\u00bb\2\2\u098e\u0993\5\u02a2\u0152\2")
        buf.write("\u098f\u0990\7\u01f2\2\2\u0990\u0992\5\u02a2\u0152\2\u0991")
        buf.write("\u098f\3\2\2\2\u0992\u0995\3\2\2\2\u0993\u0991\3\2\2\2")
        buf.write("\u0993\u0994\3\2\2\2\u0994\u09a2\3\2\2\2\u0995\u0993\3")
        buf.write("\2\2\2\u0996\u0997\7\'\2\2\u0997\u0998\79\2\2\u0998\u0999")
        buf.write("\7\u00bb\2\2\u0999\u099e\5\u02a2\u0152\2\u099a\u099b\7")
        buf.write("\u01f2\2\2\u099b\u099d\5\u02a2\u0152\2\u099c\u099a\3\2")
        buf.write("\2\2\u099d\u09a0\3\2\2\2\u099e\u099c\3\2\2\2\u099e\u099f")
        buf.write("\3\2\2\2\u099f\u09a2\3\2\2\2\u09a0\u099e\3\2\2\2\u09a1")
        buf.write("\u098d\3\2\2\2\u09a1\u0996\3\2\2\2\u09a2\u0121\3\2\2\2")
        buf.write("\u09a3\u09a4\7\u010a\2\2\u09a4\u09a5\5\u02a2\u0152\2\u09a5")
        buf.write("\u09a8\7\u0096\2\2\u09a6\u09a9\5\u0134\u009b\2\u09a7\u09a9")
        buf.write("\5\u01f0\u00f9\2\u09a8\u09a6\3\2\2\2\u09a8\u09a7\3\2\2")
        buf.write("\2\u09a9\u09ab\3\2\2\2\u09aa\u09ac\5\u023a\u011e\2\u09ab")
        buf.write("\u09aa\3\2\2\2\u09ab\u09ac\3\2\2\2\u09ac\u0123\3\2\2\2")
        buf.write("\u09ad\u09b3\5\u0126\u0094\2\u09ae\u09b3\5\u0128\u0095")
        buf.write("\2\u09af\u09b3\5\u012a\u0096\2\u09b0\u09b3\5\u012e\u0098")
        buf.write("\2\u09b1\u09b3\5\u0130\u0099\2\u09b2\u09ad\3\2\2\2\u09b2")
        buf.write("\u09ae\3\2\2\2\u09b2\u09af\3\2\2\2\u09b2\u09b0\3\2\2\2")
        buf.write("\u09b2\u09b1\3\2\2\2\u09b3\u0125\3\2\2\2\u09b4\u09b5\7")
        buf.write("\u0159\2\2\u09b5\u09c3\7\u0187\2\2\u09b6\u09b7\7\u012d")
        buf.write("\2\2\u09b7\u09c4\t\32\2\2\u09b8\u09b9\7\u00be\2\2\u09b9")
        buf.write("\u09bd\7\u00c8\2\2\u09ba\u09be\7\u0155\2\2\u09bb\u09bc")
        buf.write("\7\u012d\2\2\u09bc\u09be\7=\2\2\u09bd\u09ba\3\2\2\2\u09bd")
        buf.write("\u09bb\3\2\2\2\u09be\u09c4\3\2\2\2\u09bf\u09c0\7\u019a")
        buf.write("\2\2\u09c0\u09c1\7\u0141\2\2\u09c1\u09c2\7\u0150\2\2\u09c2")
        buf.write("\u09c4\5\u027c\u013f\2\u09c3\u09b6\3\2\2\2\u09c3\u09b8")
        buf.write("\3\2\2\2\u09c3\u09bf\3\2\2\2\u09c3\u09c4\3\2\2\2\u09c4")
        buf.write("\u09c7\3\2\2\2\u09c5\u09c6\7\u00e7\2\2\u09c6\u09c8\5\u02d6")
        buf.write("\u016c\2\u09c7\u09c5\3\2\2\2\u09c7\u09c8\3\2\2\2\u09c8")
        buf.write("\u0127\3\2\2\2\u09c9\u09ca\7\u0159\2\2\u09ca\u09d4\t\33")
        buf.write("\2\2\u09cb\u09d5\7\t\2\2\u09cc\u09d1\5\u0292\u014a\2\u09cd")
        buf.write("\u09ce\7\u01f2\2\2\u09ce\u09d0\5\u0292\u014a\2\u09cf\u09cd")
        buf.write("\3\2\2\2\u09d0\u09d3\3\2\2\2\u09d1\u09cf\3\2\2\2\u09d1")
        buf.write("\u09d2\3\2\2\2\u09d2\u09d5\3\2\2\2\u09d3\u09d1\3\2\2\2")
        buf.write("\u09d4\u09cb\3\2\2\2\u09d4\u09cc\3\2\2\2\u09d5\u09d6\3")
        buf.write("\2\2\2\u09d6\u09d7\t\34\2\2\u09d7\u0129\3\2\2\2\u09d8")
        buf.write("\u09da\7<\2\2\u09d9\u09db\7\u01af\2\2\u09da\u09d9\3\2")
        buf.write("\2\2\u09da\u09db\3\2\2\2\u09db\u09e9\3\2\2\2\u09dc\u09dd")
        buf.write("\7;\2\2\u09dd\u09ea\5\u01f0\u00f9\2\u09de\u09e7\7\u0098")
        buf.write("\2\2\u09df\u09e0\7K\2\2\u09e0\u09e8\5\u01f0\u00f9\2\u09e1")
        buf.write("\u09e8\7L\2\2\u09e2\u09e5\5\u01f0\u00f9\2\u09e3\u09e4")
        buf.write("\7\u01f2\2\2\u09e4\u09e6\5\u01f0\u00f9\2\u09e5\u09e3\3")
        buf.write("\2\2\2\u09e5\u09e6\3\2\2\2\u09e6\u09e8\3\2\2\2\u09e7\u09df")
        buf.write("\3\2\2\2\u09e7\u09e1\3\2\2\2\u09e7\u09e2\3\2\2\2\u09e8")
        buf.write("\u09ea\3\2\2\2\u09e9\u09dc\3\2\2\2\u09e9\u09de\3\2\2\2")
        buf.write("\u09e9\u09ea\3\2\2\2\u09ea\u09ec\3\2\2\2\u09eb\u09ed\5")
        buf.write("\u012c\u0097\2\u09ec\u09eb\3\2\2\2\u09ec\u09ed\3\2\2\2")
        buf.write("\u09ed\u012b\3\2\2\2\u09ee\u09f0\7\u01b0\2\2\u09ef\u09f1")
        buf.write("\t\35\2\2\u09f0\u09ef\3\2\2\2\u09f0\u09f1\3\2\2\2\u09f1")
        buf.write("\u09f3\3\2\2\2\u09f2\u09f4\t\36\2\2\u09f3\u09f2\3\2\2")
        buf.write("\2\u09f3\u09f4\3\2\2\2\u09f4\u012d\3\2\2\2\u09f5\u09f7")
        buf.write("\7\u0141\2\2\u09f6\u09f8\7\u01af\2\2\u09f7\u09f6\3\2\2")
        buf.write("\2\u09f7\u09f8\3\2\2\2\u09f8\u0a00\3\2\2\2\u09f9\u09fb")
        buf.write("\7\u0185\2\2\u09fa\u09fc\7\u0149\2\2\u09fb\u09fa\3\2\2")
        buf.write("\2\u09fb\u09fc\3\2\2\2\u09fc\u09fd\3\2\2\2\u09fd\u0a01")
        buf.write("\5\u027a\u013e\2\u09fe\u09ff\7\u0098\2\2\u09ff\u0a01\5")
        buf.write("\u02d6\u016c\2\u0a00\u09f9\3\2\2\2\u0a00\u09fe\3\2\2\2")
        buf.write("\u0a00\u0a01\3\2\2\2\u0a01\u012f\3\2\2\2\u0a02\u0a03\7")
        buf.write("\u0149\2\2\u0a03\u0a04\5\u027a\u013e\2\u0a04\u0131\3\2")
        buf.write("\2\2\u0a05\u0a06\7\u008a\2\2\u0a06\u0a0b\7\u0120\2\2\u0a07")
        buf.write("\u0a08\7\u0159\2\2\u0a08\u0a09\7\u016f\2\2\u0a09\u0a0a")
        buf.write("\7\u0203\2\2\u0a0a\u0a0c\5\u02d6\u016c\2\u0a0b\u0a07\3")
        buf.write("\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c\u0a0f\3\2\2\2\u0a0d\u0a0e")
        buf.write("\7\u00bb\2\2\u0a0e\u0a10\5\u02b0\u0159\2\u0a0f\u0a0d\3")
        buf.write("\2\2\2\u0a0f\u0a10\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11\u0a17")
        buf.write("\7\u0096\2\2\u0a12\u0a18\5\u0134\u009b\2\u0a13\u0a18\5")
        buf.write("\u01a8\u00d5\2\u0a14\u0a18\5\u01ae\u00d8\2\u0a15\u0a18")
        buf.write("\5\u01b0\u00d9\2\u0a16\u0a18\5\u01c2\u00e2\2\u0a17\u0a12")
        buf.write("\3\2\2\2\u0a17\u0a13\3\2\2\2\u0a17\u0a14\3\2\2\2\u0a17")
        buf.write("\u0a15\3\2\2\2\u0a17\u0a16\3\2\2\2\u0a18\u0133\3\2\2\2")
        buf.write("\u0a19\u0a1b\5\u0136\u009c\2\u0a1a\u0a19\3\2\2\2\u0a1a")
        buf.write("\u0a1b\3\2\2\2\u0a1b\u0a1c\3\2\2\2\u0a1c\u0a1d\5\u013e")
        buf.write("\u00a0\2\u0a1d\u0135\3\2\2\2\u0a1e\u0a1f\7\u01ad\2\2\u0a1f")
        buf.write("\u0a24\5\u0138\u009d\2\u0a20\u0a21\7\u01f2\2\2\u0a21\u0a23")
        buf.write("\5\u0138\u009d\2\u0a22\u0a20\3\2\2\2\u0a23\u0a26\3\2\2")
        buf.write("\2\u0a24\u0a22\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0137")
        buf.write("\3\2\2\2\u0a26\u0a24\3\2\2\2\u0a27\u0a29\5\u0290\u0149")
        buf.write("\2\u0a28\u0a2a\5\u01a6\u00d4\2\u0a29\u0a28\3\2\2\2\u0a29")
        buf.write("\u0a2a\3\2\2\2\u0a2a\u0a2b\3\2\2\2\u0a2b\u0a2c\7\17\2")
        buf.write("\2\u0a2c\u0a2d\7\u01ec\2\2\u0a2d\u0a2f\5\u013e\u00a0\2")
        buf.write("\u0a2e\u0a30\5\u019a\u00ce\2\u0a2f\u0a2e\3\2\2\2\u0a2f")
        buf.write("\u0a30\3\2\2\2\u0a30\u0a31\3\2\2\2\u0a31\u0a33\7\u01ed")
        buf.write("\2\2\u0a32\u0a34\5\u013a\u009e\2\u0a33\u0a32\3\2\2\2\u0a33")
        buf.write("\u0a34\3\2\2\2\u0a34\u0a36\3\2\2\2\u0a35\u0a37\5\u013c")
        buf.write("\u009f\2\u0a36\u0a35\3\2\2\2\u0a36\u0a37\3\2\2\2\u0a37")
        buf.write("\u0139\3\2\2\2\u0a38\u0a39\7\u014d\2\2\u0a39\u0a3a\t\37")
        buf.write("\2\2\u0a3a\u0a3b\7\u0091\2\2\u0a3b\u0a3c\7(\2\2\u0a3c")
        buf.write("\u0a3e\5\u02ae\u0158\2\u0a3d\u0a3f\7\20\2\2\u0a3e\u0a3d")
        buf.write("\3\2\2\2\u0a3e\u0a3f\3\2\2\2\u0a3f\u0a41\3\2\2\2\u0a40")
        buf.write("\u0a42\7j\2\2\u0a41\u0a40\3\2\2\2\u0a41\u0a42\3\2\2\2")
        buf.write("\u0a42\u0a45\3\2\2\2\u0a43\u0a44\7\u00ff\2\2\u0a44\u0a46")
        buf.write("\7\u0091\2\2\u0a45\u0a43\3\2\2\2\u0a45\u0a46\3\2\2\2\u0a46")
        buf.write("\u0a49\3\2\2\2\u0a47\u0a48\7\u00ff\2\2\u0a48\u0a4a\7\u00c4")
        buf.write("\2\2\u0a49\u0a47\3\2\2\2\u0a49\u0a4a\3\2\2\2\u0a4a\u0a5d")
        buf.write("\3\2\2\2\u0a4b\u0a4c\7\u01f2\2\2\u0a4c\u0a4e\5\u02ae\u0158")
        buf.write("\2\u0a4d\u0a4f\7\20\2\2\u0a4e\u0a4d\3\2\2\2\u0a4e\u0a4f")
        buf.write("\3\2\2\2\u0a4f\u0a51\3\2\2\2\u0a50\u0a52\7j\2\2\u0a51")
        buf.write("\u0a50\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52\u0a55\3\2\2\2")
        buf.write("\u0a53\u0a54\7\u00ff\2\2\u0a54\u0a56\7\u0091\2\2\u0a55")
        buf.write("\u0a53\3\2\2\2\u0a55\u0a56\3\2\2\2\u0a56\u0a59\3\2\2\2")
        buf.write("\u0a57\u0a58\7\u00ff\2\2\u0a58\u0a5a\7\u00c4\2\2\u0a59")
        buf.write("\u0a57\3\2\2\2\u0a59\u0a5a\3\2\2\2\u0a5a\u0a5c\3\2\2\2")
        buf.write("\u0a5b\u0a4b\3\2\2\2\u0a5c\u0a5f\3\2\2\2\u0a5d\u0a5b\3")
        buf.write("\2\2\2\u0a5d\u0a5e\3\2\2\2\u0a5e\u0a60\3\2\2\2\u0a5f\u0a5d")
        buf.write("\3\2\2\2\u0a60\u0a61\7\u0159\2\2\u0a61\u0a62\5\u02ae\u0158")
        buf.write("\2\u0a62\u013b\3\2\2\2\u0a63\u0a64\7V\2\2\u0a64\u0a69")
        buf.write("\5\u02ae\u0158\2\u0a65\u0a66\7\u01f2\2\2\u0a66\u0a68\5")
        buf.write("\u02ae\u0158\2\u0a67\u0a65\3\2\2\2\u0a68\u0a6b\3\2\2\2")
        buf.write("\u0a69\u0a67\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6a\u0a6c\3")
        buf.write("\2\2\2\u0a6b\u0a69\3\2\2\2\u0a6c\u0a6d\7\u0159\2\2\u0a6d")
        buf.write("\u0a6e\5\u02ae\u0158\2\u0a6e\u0a6f\7\u0185\2\2\u0a6f\u0a70")
        buf.write("\5\u01f0\u00f9\2\u0a70\u0a71\7d\2\2\u0a71\u0a72\5\u01f0")
        buf.write("\u00f9\2\u0a72\u013d\3\2\2\2\u0a73\u0a74\b\u00a0\1\2\u0a74")
        buf.write("\u0a75\7\u01ec\2\2\u0a75\u0a76\5\u013e\u00a0\2\u0a76\u0a77")
        buf.write("\7\u01ed\2\2\u0a77\u0a7a\3\2\2\2\u0a78\u0a7a\5\u0142\u00a2")
        buf.write("\2\u0a79\u0a73\3\2\2\2\u0a79\u0a78\3\2\2\2\u0a7a\u0a83")
        buf.write("\3\2\2\2\u0a7b\u0a7c\f\4\2\2\u0a7c\u0a7d\5\u0140\u00a1")
        buf.write("\2\u0a7d\u0a7f\5\u013e\u00a0\2\u0a7e\u0a80\5\u019a\u00ce")
        buf.write("\2\u0a7f\u0a7e\3\2\2\2\u0a7f\u0a80\3\2\2\2\u0a80\u0a82")
        buf.write("\3\2\2\2\u0a81\u0a7b\3\2\2\2\u0a82\u0a85\3\2\2\2\u0a83")
        buf.write("\u0a81\3\2\2\2\u0a83\u0a84\3\2\2\2\u0a84\u013f\3\2\2\2")
        buf.write("\u0a85\u0a83\3\2\2\2\u0a86\u0a88\t \2\2\u0a87\u0a89\7")
        buf.write("\t\2\2\u0a88\u0a87\3\2\2\2\u0a88\u0a89\3\2\2\2\u0a89\u0141")
        buf.write("\3\2\2\2\u0a8a\u0a8c\7\u0151\2\2\u0a8b\u0a8d\t!\2\2\u0a8c")
        buf.write("\u0a8b\3\2\2\2\u0a8c\u0a8d\3\2\2\2\u0a8d\u0a8e\3\2\2\2")
        buf.write("\u0a8e\u0a93\5\u0144\u00a3\2\u0a8f\u0a90\7\u01f2\2\2\u0a90")
        buf.write("\u0a92\5\u0144\u00a3\2\u0a91\u0a8f\3\2\2\2\u0a92\u0a95")
        buf.write("\3\2\2\2\u0a93\u0a91\3\2\2\2\u0a93\u0a94\3\2\2\2\u0a94")
        buf.write("\u0a97\3\2\2\2\u0a95\u0a93\3\2\2\2\u0a96\u0a98\5\u0272")
        buf.write("\u013a\2\u0a97\u0a96\3\2\2\2\u0a97\u0a98\3\2\2\2\u0a98")
        buf.write("\u0a99\3\2\2\2\u0a99\u0a9b\5\u0146\u00a4\2\u0a9a\u0a9c")
        buf.write("\5\u026e\u0138\2\u0a9b\u0a9a\3\2\2\2\u0a9b\u0a9c\3\2\2")
        buf.write("\2\u0a9c\u0a9e\3\2\2\2\u0a9d\u0a9f\5\u016c\u00b7\2\u0a9e")
        buf.write("\u0a9d\3\2\2\2\u0a9e\u0a9f\3\2\2\2\u0a9f\u0aa4\3\2\2\2")
        buf.write("\u0aa0\u0aa3\5\u0170\u00b9\2\u0aa1\u0aa3\5\u017a\u00be")
        buf.write("\2\u0aa2\u0aa0\3\2\2\2\u0aa2\u0aa1\3\2\2\2\u0aa3\u0aa6")
        buf.write("\3\2\2\2\u0aa4\u0aa2\3\2\2\2\u0aa4\u0aa5\3\2\2\2\u0aa5")
        buf.write("\u0aa8\3\2\2\2\u0aa6\u0aa4\3\2\2\2\u0aa7\u0aa9\5\u017c")
        buf.write("\u00bf\2\u0aa8\u0aa7\3\2\2\2\u0aa8\u0aa9\3\2\2\2\u0aa9")
        buf.write("\u0aaf\3\2\2\2\u0aaa\u0aae\5\u019e\u00d0\2\u0aab\u0aae")
        buf.write("\5\u019a\u00ce\2\u0aac\u0aae\5\u01a4\u00d3\2\u0aad\u0aaa")
        buf.write("\3\2\2\2\u0aad\u0aab\3\2\2\2\u0aad\u0aac\3\2\2\2\u0aae")
        buf.write("\u0ab1\3\2\2\2\u0aaf\u0aad\3\2\2\2\u0aaf\u0ab0\3\2\2\2")
        buf.write("\u0ab0\u0143\3\2\2\2\u0ab1\u0aaf\3\2\2\2\u0ab2\u0abd\5")
        buf.write("\u02b4\u015b\2\u0ab3\u0ab4\5\u02b2\u015a\2\u0ab4\u0ab5")
        buf.write("\7\u01e5\2\2\u0ab5\u0ab6\5\u02b4\u015b\2\u0ab6\u0abd\3")
        buf.write("\2\2\2\u0ab7\u0abd\5\u02b0\u0159\2\u0ab8\u0aba\5\u01f0")
        buf.write("\u00f9\2\u0ab9\u0abb\5\u0268\u0135\2\u0aba\u0ab9\3\2\2")
        buf.write("\2\u0aba\u0abb\3\2\2\2\u0abb\u0abd\3\2\2\2\u0abc\u0ab2")
        buf.write("\3\2\2\2\u0abc\u0ab3\3\2\2\2\u0abc\u0ab7\3\2\2\2\u0abc")
        buf.write("\u0ab8\3\2\2\2\u0abd\u0145\3\2\2\2\u0abe\u0abf\7\u0099")
        buf.write("\2\2\u0abf\u0ac4\5\u014a\u00a6\2\u0ac0\u0ac1\7\u01f2\2")
        buf.write("\2\u0ac1\u0ac3\5\u014a\u00a6\2\u0ac2\u0ac0\3\2\2\2\u0ac3")
        buf.write("\u0ac6\3\2\2\2\u0ac4\u0ac2\3\2\2\2\u0ac4\u0ac5\3\2\2\2")
        buf.write("\u0ac5\u0147\3\2\2\2\u0ac6\u0ac4\3\2\2\2\u0ac7\u0aca\5")
        buf.write("\u014a\u00a6\2\u0ac8\u0acb\5\u015a\u00ae\2\u0ac9\u0acb")
        buf.write("\5\u0166\u00b4\2\u0aca\u0ac8\3\2\2\2\u0aca\u0ac9\3\2\2")
        buf.write("\2\u0aca\u0acb\3\2\2\2\u0acb\u0149\3\2\2\2\u0acc\u0acd")
        buf.write("\b\u00a6\1\2\u0acd\u0ad1\5\u014c\u00a7\2\u0ace\u0ad0\5")
        buf.write("\u0158\u00ad\2\u0acf\u0ace\3\2\2\2\u0ad0\u0ad3\3\2\2\2")
        buf.write("\u0ad1\u0acf\3\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2\u0adf\3")
        buf.write("\2\2\2\u0ad3\u0ad1\3\2\2\2\u0ad4\u0ad8\5\u014c\u00a7\2")
        buf.write("\u0ad5\u0ad7\5\u0158\u00ad\2\u0ad6\u0ad5\3\2\2\2\u0ad7")
        buf.write("\u0ada\3\2\2\2\u0ad8\u0ad6\3\2\2\2\u0ad8\u0ad9\3\2\2\2")
        buf.write("\u0ad9\u0adc\3\2\2\2\u0ada\u0ad8\3\2\2\2\u0adb\u0add\5")
        buf.write("\u026a\u0136\2\u0adc\u0adb\3\2\2\2\u0adc\u0add\3\2\2\2")
        buf.write("\u0add\u0adf\3\2\2\2\u0ade\u0acc\3\2\2\2\u0ade\u0ad4\3")
        buf.write("\2\2\2\u0adf\u0ae4\3\2\2\2\u0ae0\u0ae1\f\5\2\2\u0ae1\u0ae3")
        buf.write("\5\u014e\u00a8\2\u0ae2\u0ae0\3\2\2\2\u0ae3\u0ae6\3\2\2")
        buf.write("\2\u0ae4\u0ae2\3\2\2\2\u0ae4\u0ae5\3\2\2\2\u0ae5\u014b")
        buf.write("\3\2\2\2\u0ae6\u0ae4\3\2\2\2\u0ae7\u0aea\5\u01e0\u00f1")
        buf.write("\2\u0ae8\u0aeb\5\u015a\u00ae\2\u0ae9\u0aeb\5\u0166\u00b4")
        buf.write("\2\u0aea\u0ae8\3\2\2\2\u0aea\u0ae9\3\2\2\2\u0aea\u0aeb")
        buf.write("\3\2\2\2\u0aeb\u0af2\3\2\2\2\u0aec\u0aed\7\u0109\2\2\u0aed")
        buf.write("\u0aee\7\u01ec\2\2\u0aee\u0aef\5\u01e0\u00f1\2\u0aef\u0af0")
        buf.write("\7\u01ed\2\2\u0af0\u0af2\3\2\2\2\u0af1\u0ae7\3\2\2\2\u0af1")
        buf.write("\u0aec\3\2\2\2\u0af2\u014d\3\2\2\2\u0af3\u0af5\5\u0156")
        buf.write("\u00ac\2\u0af4\u0af3\3\2\2\2\u0af4\u0af5\3\2\2\2\u0af5")
        buf.write("\u0af7\3\2\2\2\u0af6\u0af8\5\u0154\u00ab\2\u0af7\u0af6")
        buf.write("\3\2\2\2\u0af7\u0af8\3\2\2\2\u0af8\u0af9\3\2\2\2\u0af9")
        buf.write("\u0afa\7\u00c1\2\2\u0afa\u0afc\5\u014a\u00a6\2\u0afb\u0afd")
        buf.write("\5\u0156\u00ac\2\u0afc\u0afb\3\2\2\2\u0afc\u0afd\3\2\2")
        buf.write("\2\u0afd\u0b00\3\2\2\2\u0afe\u0b01\5\u0150\u00a9\2\u0aff")
        buf.write("\u0b01\5\u0152\u00aa\2\u0b00\u0afe\3\2\2\2\u0b00\u0aff")
        buf.write("\3\2\2\2\u0b00\u0b01\3\2\2\2\u0b01\u014f\3\2\2\2\u0b02")
        buf.write("\u0b03\7\u0108\2\2\u0b03\u0b04\5\u01ee\u00f8\2\u0b04\u0151")
        buf.write("\3\2\2\2\u0b05\u0b06\7\u019b\2\2\u0b06\u0b07\7\u01ec\2")
        buf.write("\2\u0b07\u0b0c\5\u02ae\u0158\2\u0b08\u0b09\7\u01f2\2\2")
        buf.write("\u0b09\u0b0b\5\u02ae\u0158\2\u0b0a\u0b08\3\2\2\2\u0b0b")
        buf.write("\u0b0e\3\2\2\2\u0b0c\u0b0a\3\2\2\2\u0b0c\u0b0d\3\2\2\2")
        buf.write("\u0b0d\u0b0f\3\2\2\2\u0b0e\u0b0c\3\2\2\2\u0b0f\u0b10\7")
        buf.write("\u01ed\2\2\u0b10\u0153\3\2\2\2\u0b11\u0b1d\7P\2\2\u0b12")
        buf.write("\u0b14\7\u00e9\2\2\u0b13\u0b12\3\2\2\2\u0b13\u0b14\3\2")
        buf.write("\2\2\u0b14\u0b1a\3\2\2\2\u0b15\u0b1b\7\u00b2\2\2\u0b16")
        buf.write("\u0b18\t\"\2\2\u0b17\u0b19\7\u0112\2\2\u0b18\u0b17\3\2")
        buf.write("\2\2\u0b18\u0b19\3\2\2\2\u0b19\u0b1b\3\2\2\2\u0b1a\u0b15")
        buf.write("\3\2\2\2\u0b1a\u0b16\3\2\2\2\u0b1b\u0b1d\3\2\2\2\u0b1c")
        buf.write("\u0b11\3\2\2\2\u0b1c\u0b13\3\2\2\2\u0b1d\u0155\3\2\2\2")
        buf.write("\u0b1e\u0b1f\7\u0119\2\2\u0b1f\u0b2d\7(\2\2\u0b20\u0b21")
        buf.write("\7\u01ec\2\2\u0b21\u0b22\5\u013e\u00a0\2\u0b22\u0b23\7")
        buf.write("\u01ed\2\2\u0b23\u0b2e\3\2\2\2\u0b24\u0b2e\5\u01ec\u00f7")
        buf.write("\2\u0b25\u0b2a\5\u01f0\u00f9\2\u0b26\u0b27\7\u01f2\2\2")
        buf.write("\u0b27\u0b29\5\u01f0\u00f9\2\u0b28\u0b26\3\2\2\2\u0b29")
        buf.write("\u0b2c\3\2\2\2\u0b2a\u0b28\3\2\2\2\u0b2a\u0b2b\3\2\2\2")
        buf.write("\u0b2b\u0b2e\3\2\2\2\u0b2c\u0b2a\3\2\2\2\u0b2d\u0b20\3")
        buf.write("\2\2\2\u0b2d\u0b24\3\2\2\2\u0b2d\u0b25\3\2\2\2\u0b2e\u0157")
        buf.write("\3\2\2\2\u0b2f\u0b30\7\u01a5\2\2\u0b30\u0b31\7\34\2\2")
        buf.write("\u0b31\u0b32\t#\2\2\u0b32\u0b38\5\u01f0\u00f9\2\u0b33")
        buf.write("\u0b34\7\17\2\2\u0b34\u0b35\7\u0104\2\2\u0b35\u0b36\t")
        buf.write("$\2\2\u0b36\u0b38\5\u01f0\u00f9\2\u0b37\u0b2f\3\2\2\2")
        buf.write("\u0b37\u0b33\3\2\2\2\u0b38\u0159\3\2\2\2\u0b39\u0b3b\7")
        buf.write("\u011f\2\2\u0b3a\u0b3c\7\u01b1\2\2\u0b3b\u0b3a\3\2\2\2")
        buf.write("\u0b3b\u0b3c\3\2\2\2\u0b3c\u0b3d\3\2\2\2\u0b3d\u0b3e\7")
        buf.write("\u01ec\2\2\u0b3e\u0b43\5\u015c\u00af\2\u0b3f\u0b40\7\u01f2")
        buf.write("\2\2\u0b40\u0b42\5\u015c\u00af\2\u0b41\u0b3f\3\2\2\2\u0b42")
        buf.write("\u0b45\3\2\2\2\u0b43\u0b41\3\2\2\2\u0b43\u0b44\3\2\2\2")
        buf.write("\u0b44\u0b46\3\2\2\2\u0b45\u0b43\3\2\2\2\u0b46\u0b47\5")
        buf.write("\u015e\u00b0\2\u0b47\u0b48\5\u0160\u00b1\2\u0b48\u0b49")
        buf.write("\7\u01ed\2\2\u0b49\u015b\3\2\2\2\u0b4a\u0b4b\5\u028e\u0148")
        buf.write("\2\u0b4b\u0b4c\7\u01ec\2\2\u0b4c\u0b4d\5\u01f0\u00f9\2")
        buf.write("\u0b4d\u0b4f\7\u01ed\2\2\u0b4e\u0b50\5\u0268\u0135\2\u0b4f")
        buf.write("\u0b4e\3\2\2\2\u0b4f\u0b50\3\2\2\2\u0b50\u015d\3\2\2\2")
        buf.write("\u0b51\u0b5e\7\u0096\2\2\u0b52\u0b5f\5\u02ae\u0158\2\u0b53")
        buf.write("\u0b54\7\u01ec\2\2\u0b54\u0b59\5\u02ae\u0158\2\u0b55\u0b56")
        buf.write("\7\u01f2\2\2\u0b56\u0b58\5\u02ae\u0158\2\u0b57\u0b55\3")
        buf.write("\2\2\2\u0b58\u0b5b\3\2\2\2\u0b59\u0b57\3\2\2\2\u0b59\u0b5a")
        buf.write("\3\2\2\2\u0b5a\u0b5c\3\2\2\2\u0b5b\u0b59\3\2\2\2\u0b5c")
        buf.write("\u0b5d\7\u01ed\2\2\u0b5d\u0b5f\3\2\2\2\u0b5e\u0b52\3\2")
        buf.write("\2\2\u0b5e\u0b53\3\2\2\2\u0b5f\u015f\3\2\2\2\u0b60\u0b61")
        buf.write("\7\u00a7\2\2\u0b61\u0b73\7\u01ec\2\2\u0b62\u0b74\5\u013e")
        buf.write("\u00a0\2\u0b63\u0b68\7\r\2\2\u0b64\u0b65\7\u01f2\2\2\u0b65")
        buf.write("\u0b67\7\r\2\2\u0b66\u0b64\3\2\2\2\u0b67\u0b6a\3\2\2\2")
        buf.write("\u0b68\u0b66\3\2\2\2\u0b68\u0b69\3\2\2\2\u0b69\u0b74\3")
        buf.write("\2\2\2\u0b6a\u0b68\3\2\2\2\u0b6b\u0b70\5\u0162\u00b2\2")
        buf.write("\u0b6c\u0b6d\7\u01f2\2\2\u0b6d\u0b6f\5\u0162\u00b2\2\u0b6e")
        buf.write("\u0b6c\3\2\2\2\u0b6f\u0b72\3\2\2\2\u0b70\u0b6e\3\2\2\2")
        buf.write("\u0b70\u0b71\3\2\2\2\u0b71\u0b74\3\2\2\2\u0b72\u0b70\3")
        buf.write("\2\2\2\u0b73\u0b62\3\2\2\2\u0b73\u0b63\3\2\2\2\u0b73\u0b6b")
        buf.write("\3\2\2\2\u0b74\u0b75\3\2\2\2\u0b75\u0b76\7\u01ed\2\2\u0b76")
        buf.write("\u0161\3\2\2\2\u0b77\u0b79\5\u0164\u00b3\2\u0b78\u0b7a")
        buf.write("\5\u0268\u0135\2\u0b79\u0b78\3\2\2\2\u0b79\u0b7a\3\2\2")
        buf.write("\2\u0b7a\u0163\3\2\2\2\u0b7b\u0b7e\5\u01f0\u00f9\2\u0b7c")
        buf.write("\u0b7e\5\u01ec\u00f7\2\u0b7d\u0b7b\3\2\2\2\u0b7d\u0b7c")
        buf.write("\3\2\2\2\u0b7e\u0165\3\2\2\2\u0b7f\u0b82\7\u0194\2\2\u0b80")
        buf.write("\u0b81\t%\2\2\u0b81\u0b83\7\u00ff\2\2\u0b82\u0b80\3\2")
        buf.write("\2\2\u0b82\u0b83\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b91")
        buf.write("\7\u01ec\2\2\u0b85\u0b92\5\u02ae\u0158\2\u0b86\u0b87\7")
        buf.write("\u01ec\2\2\u0b87\u0b8c\5\u02ae\u0158\2\u0b88\u0b89\7\u01f2")
        buf.write("\2\2\u0b89\u0b8b\5\u02ae\u0158\2\u0b8a\u0b88\3\2\2\2\u0b8b")
        buf.write("\u0b8e\3\2\2\2\u0b8c\u0b8a\3\2\2\2\u0b8c\u0b8d\3\2\2\2")
        buf.write("\u0b8d\u0b8f\3\2\2\2\u0b8e\u0b8c\3\2\2\2\u0b8f\u0b90\7")
        buf.write("\u01ed\2\2\u0b90\u0b92\3\2\2\2\u0b91\u0b85\3\2\2\2\u0b91")
        buf.write("\u0b86\3\2\2\2\u0b92\u0b93\3\2\2\2\u0b93\u0b94\5\u015e")
        buf.write("\u00b0\2\u0b94\u0b95\5\u0168\u00b5\2\u0b95\u0b96\7\u01ed")
        buf.write("\2\2\u0b96\u0167\3\2\2\2\u0b97\u0b98\7\u00a7\2\2\u0b98")
        buf.write("\u0b99\7\u01ec\2\2\u0b99\u0b9e\5\u016a\u00b6\2\u0b9a\u0b9b")
        buf.write("\7\u01f2\2\2\u0b9b\u0b9d\5\u016a\u00b6\2\u0b9c\u0b9a\3")
        buf.write("\2\2\2\u0b9d\u0ba0\3\2\2\2\u0b9e\u0b9c\3\2\2\2\u0b9e\u0b9f")
        buf.write("\3\2\2\2\u0b9f\u0ba1\3\2\2\2\u0ba0\u0b9e\3\2\2\2\u0ba1")
        buf.write("\u0ba2\7\u01ed\2\2\u0ba2\u0169\3\2\2\2\u0ba3\u0bb0\5\u02ae")
        buf.write("\u0158\2\u0ba4\u0ba5\7\u01ec\2\2\u0ba5\u0baa\5\u02ae\u0158")
        buf.write("\2\u0ba6\u0ba7\7\u01f2\2\2\u0ba7\u0ba9\5\u02ae\u0158\2")
        buf.write("\u0ba8\u0ba6\3\2\2\2\u0ba9\u0bac\3\2\2\2\u0baa\u0ba8\3")
        buf.write("\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0bad\3\2\2\2\u0bac\u0baa")
        buf.write("\3\2\2\2\u0bad\u0bae\7\u01ed\2\2\u0bae\u0bb0\3\2\2\2\u0baf")
        buf.write("\u0ba3\3\2\2\2\u0baf\u0ba4\3\2\2\2\u0bb0\u0bc0\3\2\2\2")
        buf.write("\u0bb1\u0bbe\7\17\2\2\u0bb2\u0bbf\5\u02d0\u0169\2\u0bb3")
        buf.write("\u0bb4\7\u01ec\2\2\u0bb4\u0bb9\5\u02d0\u0169\2\u0bb5\u0bb6")
        buf.write("\7\u01f2\2\2\u0bb6\u0bb8\5\u02d0\u0169\2\u0bb7\u0bb5\3")
        buf.write("\2\2\2\u0bb8\u0bbb\3\2\2\2\u0bb9\u0bb7\3\2\2\2\u0bb9\u0bba")
        buf.write("\3\2\2\2\u0bba\u0bbc\3\2\2\2\u0bbb\u0bb9\3\2\2\2\u0bbc")
        buf.write("\u0bbd\7\u01ed\2\2\u0bbd\u0bbf\3\2\2\2\u0bbe\u0bb2\3\2")
        buf.write("\2\2\u0bbe\u0bb3\3\2\2\2\u0bbf\u0bc1\3\2\2\2\u0bc0\u0bb1")
        buf.write("\3\2\2\2\u0bc0\u0bc1\3\2\2\2\u0bc1\u016b\3\2\2\2\u0bc2")
        buf.write("\u0bc3\7A\2\2\u0bc3\u0bc5\7(\2\2\u0bc4\u0bc6\7\u00f5\2")
        buf.write("\2\u0bc5\u0bc4\3\2\2\2\u0bc5\u0bc6\3\2\2\2\u0bc6\u0bc7")
        buf.write("\3\2\2\2\u0bc7\u0bc9\5\u01ee\u00f8\2\u0bc8\u0bca\5\u016e")
        buf.write("\u00b8\2\u0bc9\u0bc8\3\2\2\2\u0bc9\u0bca\3\2\2\2\u0bca")
        buf.write("\u0bd4\3\2\2\2\u0bcb\u0bcc\5\u016e\u00b8\2\u0bcc\u0bcd")
        buf.write("\7A\2\2\u0bcd\u0bcf\7(\2\2\u0bce\u0bd0\7\u00f5\2\2\u0bcf")
        buf.write("\u0bce\3\2\2\2\u0bcf\u0bd0\3\2\2\2\u0bd0\u0bd1\3\2\2\2")
        buf.write("\u0bd1\u0bd2\5\u01ee\u00f8\2\u0bd2\u0bd4\3\2\2\2\u0bd3")
        buf.write("\u0bc2\3\2\2\2\u0bd3\u0bcb\3\2\2\2\u0bd4\u016d\3\2\2\2")
        buf.write("\u0bd5\u0bd6\7\u016c\2\2\u0bd6\u0bd7\7\u01ad\2\2\u0bd7")
        buf.write("\u0bd8\5\u01ee\u00f8\2\u0bd8\u016f\3\2\2\2\u0bd9\u0bda")
        buf.write("\7\u009e\2\2\u0bda\u0bdb\7(\2\2\u0bdb\u0be0\5\u0172\u00ba")
        buf.write("\2\u0bdc\u0bdd\7\u01f2\2\2\u0bdd\u0bdf\5\u0172\u00ba\2")
        buf.write("\u0bde\u0bdc\3\2\2\2\u0bdf\u0be2\3\2\2\2\u0be0\u0bde\3")
        buf.write("\2\2\2\u0be0\u0be1\3\2\2\2\u0be1\u0171\3\2\2\2\u0be2\u0be0")
        buf.write("\3\2\2\2\u0be3\u0be7\5\u0176\u00bc\2\u0be4\u0be7\5\u0174")
        buf.write("\u00bb\2\u0be5\u0be7\5\u01f0\u00f9\2\u0be6\u0be3\3\2\2")
        buf.write("\2\u0be6\u0be4\3\2\2\2\u0be6\u0be5\3\2\2\2\u0be7\u0173")
        buf.write("\3\2\2\2\u0be8\u0be9\t&\2\2\u0be9\u0bea\7\u01ec\2\2\u0bea")
        buf.write("\u0bef\5\u0178\u00bd\2\u0beb\u0bec\7\u01f2\2\2\u0bec\u0bee")
        buf.write("\5\u0178\u00bd\2\u0bed\u0beb\3\2\2\2\u0bee\u0bf1\3\2\2")
        buf.write("\2\u0bef\u0bed\3\2\2\2\u0bef\u0bf0\3\2\2\2\u0bf0\u0bf2")
        buf.write("\3\2\2\2\u0bf1\u0bef\3\2\2\2\u0bf2\u0bf3\7\u01ed\2\2\u0bf3")
        buf.write("\u0175\3\2\2\2\u0bf4\u0bf5\7\u009f\2\2\u0bf5\u0bf6\7\u015a")
        buf.write("\2\2\u0bf6\u0bf7\7\u01ec\2\2\u0bf7\u0bfc\5\u0178\u00bd")
        buf.write("\2\u0bf8\u0bf9\7\u01f2\2\2\u0bf9\u0bfb\5\u0178\u00bd\2")
        buf.write("\u0bfa\u0bf8\3\2\2\2\u0bfb\u0bfe\3\2\2\2\u0bfc\u0bfa\3")
        buf.write("\2\2\2\u0bfc\u0bfd\3\2\2\2\u0bfd\u0bff\3\2\2\2\u0bfe\u0bfc")
        buf.write("\3\2\2\2\u0bff\u0c00\7\u01ed\2\2\u0c00\u0177\3\2\2\2\u0c01")
        buf.write("\u0c05\5\u0174\u00bb\2\u0c02\u0c05\5\u01ec\u00f7\2\u0c03")
        buf.write("\u0c05\5\u01f0\u00f9\2\u0c04\u0c01\3\2\2\2\u0c04\u0c02")
        buf.write("\3\2\2\2\u0c04\u0c03\3\2\2\2\u0c05\u0179\3\2\2\2\u0c06")
        buf.write("\u0c07\7\u00a1\2\2\u0c07\u0c08\5\u01ee\u00f8\2\u0c08\u017b")
        buf.write("\3\2\2\2\u0c09\u0c0d\7\u00e3\2\2\u0c0a\u0c0c\5\u017e\u00c0")
        buf.write("\2\u0c0b\u0c0a\3\2\2\2\u0c0c\u0c0f\3\2\2\2\u0c0d\u0c0b")
        buf.write("\3\2\2\2\u0c0d\u0c0e\3\2\2\2\u0c0e\u0c11\3\2\2\2\u0c0f")
        buf.write("\u0c0d\3\2\2\2\u0c10\u0c12\5\u0180\u00c1\2\u0c11\u0c10")
        buf.write("\3\2\2\2\u0c11\u0c12\3\2\2\2\u0c12\u0c16\3\2\2\2\u0c13")
        buf.write("\u0c15\5\u0182\u00c2\2\u0c14\u0c13\3\2\2\2\u0c15\u0c18")
        buf.write("\3\2\2\2\u0c16\u0c14\3\2\2\2\u0c16\u0c17\3\2\2\2\u0c17")
        buf.write("\u0c19\3\2\2\2\u0c18\u0c16\3\2\2\2\u0c19\u0c1a\5\u0184")
        buf.write("\u00c3\2\u0c1a\u017d\3\2\2\2\u0c1b\u0c1c\t\'\2\2\u0c1c")
        buf.write("\u0c24\7\u00eb\2\2\u0c1d\u0c21\7\u0192\2\2\u0c1e\u0c22")
        buf.write("\7l\2\2\u0c1f\u0c20\7\u0162\2\2\u0c20\u0c22\7\u0131\2")
        buf.write("\2\u0c21\u0c1e\3\2\2\2\u0c21\u0c1f\3\2\2\2\u0c22\u0c24")
        buf.write("\3\2\2\2\u0c23\u0c1b\3\2\2\2\u0c23\u0c1d\3\2\2\2\u0c24")
        buf.write("\u017f\3\2\2\2\u0c25\u0c26\7\u013b\2\2\u0c26\u0c27\t(")
        buf.write("\2\2\u0c27\u0c28\7\u0145\2\2\u0c28\u0181\3\2\2\2\u0c29")
        buf.write("\u0c2a\7\u0131\2\2\u0c2a\u0c2b\5\u028a\u0146\2\u0c2b\u0c2c")
        buf.write("\7\u0108\2\2\u0c2c\u0c2d\7\u01ec\2\2\u0c2d\u0c2e\5\u013e")
        buf.write("\u00a0\2\u0c2e\u0c2f\7\u01ed\2\2\u0c2f\u0c33\5\u0186\u00c4")
        buf.write("\2\u0c30\u0c32\5\u017e\u00c0\2\u0c31\u0c30\3\2\2\2\u0c32")
        buf.write("\u0c35\3\2\2\2\u0c33\u0c31\3\2\2\2\u0c33\u0c34\3\2\2\2")
        buf.write("\u0c34\u0183\3\2\2\2\u0c35\u0c33\3\2\2\2\u0c36\u0c37\7")
        buf.write("\u00d7\2\2\u0c37\u0c39\5\u028c\u0147\2\u0c38\u0c36\3\2")
        buf.write("\2\2\u0c38\u0c39\3\2\2\2\u0c39\u0c3a\3\2\2\2\u0c3a\u0c3e")
        buf.write("\5\u0186\u00c4\2\u0c3b\u0c3d\5\u017e\u00c0\2\u0c3c\u0c3b")
        buf.write("\3\2\2\2\u0c3d\u0c40\3\2\2\2\u0c3e\u0c3c\3\2\2\2\u0c3e")
        buf.write("\u0c3f\3\2\2\2\u0c3f\u0c41\3\2\2\2\u0c40\u0c3e\3\2\2\2")
        buf.write("\u0c41\u0c42\5\u018e\u00c8\2\u0c42\u0185\3\2\2\2\u0c43")
        buf.write("\u0c45\5\u0188\u00c5\2\u0c44\u0c43\3\2\2\2\u0c44\u0c45")
        buf.write("\3\2\2\2\u0c45\u0c46\3\2\2\2\u0c46\u0c47\7l\2\2\u0c47")
        buf.write("\u0c48\7(\2\2\u0c48\u0c49\5\u018a\u00c6\2\u0c49\u0c4a")
        buf.write("\7\u00db\2\2\u0c4a\u0c4b\5\u018a\u00c6\2\u0c4b\u0187\3")
        buf.write("\2\2\2\u0c4c\u0c4d\7\u0119\2\2\u0c4d\u0c4e\7(\2\2\u0c4e")
        buf.write("\u0c4f\5\u018a\u00c6\2\u0c4f\u0189\3\2\2\2\u0c50\u0c51")
        buf.write("\7\u01ec\2\2\u0c51\u0c56\5\u018c\u00c7\2\u0c52\u0c53\7")
        buf.write("\u01f2\2\2\u0c53\u0c55\5\u018c\u00c7\2\u0c54\u0c52\3\2")
        buf.write("\2\2\u0c55\u0c58\3\2\2\2\u0c56\u0c54\3\2\2\2\u0c56\u0c57")
        buf.write("\3\2\2\2\u0c57\u0c59\3\2\2\2\u0c58\u0c56\3\2\2\2\u0c59")
        buf.write("\u0c5a\7\u01ed\2\2\u0c5a\u018b\3\2\2\2\u0c5b\u0c5d\5\u01f0")
        buf.write("\u00f9\2\u0c5c\u0c5e\5\u026a\u0136\2\u0c5d\u0c5c\3\2\2")
        buf.write("\2\u0c5d\u0c5e\3\2\2\2\u0c5e\u018d\3\2\2\2\u0c5f\u0c61")
        buf.write("\5\u0190\u00c9\2\u0c60\u0c5f\3\2\2\2\u0c60\u0c61\3\2\2")
        buf.write("\2\u0c61\u0c62\3\2\2\2\u0c62\u0c63\7\u01ec\2\2\u0c63\u0c68")
        buf.write("\5\u0192\u00ca\2\u0c64\u0c65\7\u01f2\2\2\u0c65\u0c67\5")
        buf.write("\u0192\u00ca\2\u0c66\u0c64\3\2\2\2\u0c67\u0c6a\3\2\2\2")
        buf.write("\u0c68\u0c66\3\2\2\2\u0c68\u0c69\3\2\2\2\u0c69\u0c6b\3")
        buf.write("\2\2\2\u0c6a\u0c68\3\2\2\2\u0c6b\u0c6c\7\u01ed\2\2\u0c6c")
        buf.write("\u018f\3\2\2\2\u0c6d\u0c73\7\u0146\2\2\u0c6e\u0c74\7\u0196")
        buf.write("\2\2\u0c6f\u0c71\7\u0198\2\2\u0c70\u0c72\7\t\2\2\u0c71")
        buf.write("\u0c70\3\2\2\2\u0c71\u0c72\3\2\2\2\u0c72\u0c74\3\2\2\2")
        buf.write("\u0c73\u0c6e\3\2\2\2\u0c73\u0c6f\3\2\2\2\u0c73\u0c74\3")
        buf.write("\2\2\2\u0c74\u0c77\3\2\2\2\u0c75\u0c76\t)\2\2\u0c76\u0c78")
        buf.write("\7\u010e\2\2\u0c77\u0c75\3\2\2\2\u0c77\u0c78\3\2\2\2\u0c78")
        buf.write("\u0c7a\3\2\2\2\u0c79\u0c7b\5\u0196\u00cc\2\u0c7a\u0c79")
        buf.write("\3\2\2\2\u0c7a\u0c7b\3\2\2\2\u0c7b\u0191\3\2\2\2\u0c7c")
        buf.write("\u0c82\7\u0196\2\2\u0c7d\u0c7f\7\u0198\2\2\u0c7e\u0c80")
        buf.write("\7\t\2\2\u0c7f\u0c7e\3\2\2\2\u0c7f\u0c80\3\2\2\2\u0c80")
        buf.write("\u0c82\3\2\2\2\u0c81\u0c7c\3\2\2\2\u0c81\u0c7d\3\2\2\2")
        buf.write("\u0c81\u0c82\3\2\2\2\u0c82\u0c83\3\2\2\2\u0c83\u0c85\5")
        buf.write("\u0194\u00cb\2\u0c84\u0c86\5\u019a\u00ce\2\u0c85\u0c84")
        buf.write("\3\2\2\2\u0c85\u0c86\3\2\2\2\u0c86\u0c87\3\2\2\2\u0c87")
        buf.write("\u0c88\7\u0203\2\2\u0c88\u0c89\5\u01f0\u00f9\2\u0c89\u0193")
        buf.write("\3\2\2\2\u0c8a\u0c8b\5\u0206\u0104\2\u0c8b\u0195\3\2\2")
        buf.write("\2\u0c8c\u0c8d\7\u00bf\2\2\u0c8d\u0c8e\7\u01ec\2\2\u0c8e")
        buf.write("\u0c8f\5\u01f0\u00f9\2\u0c8f\u0c91\7\u01ed\2\2\u0c90\u0c92")
        buf.write("\5\u0198\u00cd\2\u0c91\u0c90\3\2\2\2\u0c91\u0c92\3\2\2")
        buf.write("\2\u0c92\u0197\3\2\2\2\u0c93\u0c94\7\u0195\2\2\u0c94\u0c95")
        buf.write("\7\u01ec\2\2\u0c95\u0c96\5\u01ee\u00f8\2\u0c96\u0c97\7")
        buf.write("\u01ed\2\2\u0c97\u0199\3\2\2\2\u0c98\u0c9a\7\u010e\2\2")
        buf.write("\u0c99\u0c9b\7\u015f\2\2\u0c9a\u0c99\3\2\2\2\u0c9a\u0c9b")
        buf.write("\3\2\2\2\u0c9b\u0c9c\3\2\2\2\u0c9c\u0c9d\7(\2\2\u0c9d")
        buf.write("\u0ca2\5\u019c\u00cf\2\u0c9e\u0c9f\7\u01f2\2\2\u0c9f\u0ca1")
        buf.write("\5\u019c\u00cf\2\u0ca0\u0c9e\3\2\2\2\u0ca1\u0ca4\3\2\2")
        buf.write("\2\u0ca2\u0ca0\3\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u019b")
        buf.write("\3\2\2\2\u0ca4\u0ca2\3\2\2\2\u0ca5\u0ca7\5\u01f0\u00f9")
        buf.write("\2\u0ca6\u0ca8\t*\2\2\u0ca7\u0ca6\3\2\2\2\u0ca7\u0ca8")
        buf.write("\3\2\2\2\u0ca8\u0cab\3\2\2\2\u0ca9\u0caa\7\u00ff\2\2\u0caa")
        buf.write("\u0cac\t+\2\2\u0cab\u0ca9\3\2\2\2\u0cab\u0cac\3\2\2\2")
        buf.write("\u0cac\u019d\3\2\2\2\u0cad\u0cae\7\u0096\2\2\u0cae\u0cb0")
        buf.write("\7\u0196\2\2\u0caf\u0cb1\5\u01a0\u00d1\2\u0cb0\u0caf\3")
        buf.write("\2\2\2\u0cb0\u0cb1\3\2\2\2\u0cb1\u0cb3\3\2\2\2\u0cb2\u0cb4")
        buf.write("\5\u01a2\u00d2\2\u0cb3\u0cb2\3\2\2\2\u0cb3\u0cb4\3\2\2")
        buf.write("\2\u0cb4\u019f\3\2\2\2\u0cb5\u0cb6\7\u0104\2\2\u0cb6\u0cbb")
        buf.write("\5\u02ae\u0158\2\u0cb7\u0cb8\7\u01f2\2\2\u0cb8\u0cba\5")
        buf.write("\u02ae\u0158\2\u0cb9\u0cb7\3\2\2\2\u0cba\u0cbd\3\2\2\2")
        buf.write("\u0cbb\u0cb9\3\2\2\2\u0cbb\u0cbc\3\2\2\2\u0cbc\u01a1\3")
        buf.write("\2\2\2\u0cbd\u0cbb\3\2\2\2\u0cbe\u0cbf\7\u0164\2\2\u0cbf")
        buf.write("\u0cc4\7\u00d1\2\2\u0cc0\u0cc4\7\u00fd\2\2\u0cc1\u0cc2")
        buf.write("\7\u01a6\2\2\u0cc2\u0cc4\5\u01f0\u00f9\2\u0cc3\u0cbe\3")
        buf.write("\2\2\2\u0cc3\u0cc0\3\2\2\2\u0cc3\u0cc1\3\2\2\2\u0cc4\u01a3")
        buf.write("\3\2\2\2\u0cc5\u0cc6\7\u00ce\2\2\u0cc6\u0cc7\5\u01f0\u00f9")
        buf.write("\2\u0cc7\u01a5\3\2\2\2\u0cc8\u0cc9\7\u01ec\2\2\u0cc9\u0cce")
        buf.write("\5\u02ae\u0158\2\u0cca\u0ccb\7\u01f2\2\2\u0ccb\u0ccd\5")
        buf.write("\u02ae\u0158\2\u0ccc\u0cca\3\2\2\2\u0ccd\u0cd0\3\2\2\2")
        buf.write("\u0cce\u0ccc\3\2\2\2\u0cce\u0ccf\3\2\2\2\u0ccf\u0cd1\3")
        buf.write("\2\2\2\u0cd0\u0cce\3\2\2\2\u0cd1\u0cd2\7\u01ed\2\2\u0cd2")
        buf.write("\u01a7\3\2\2\2\u0cd3\u0cd4\7\u0196\2\2\u0cd4\u0cd5\5\u01d6")
        buf.write("\u00ec\2\u0cd5\u0cd7\5\u01aa\u00d6\2\u0cd6\u0cd8\5\u026e")
        buf.write("\u0138\2\u0cd7\u0cd6\3\2\2\2\u0cd7\u0cd8\3\2\2\2\u0cd8")
        buf.write("\u0cda\3\2\2\2\u0cd9\u0cdb\5\u01d8\u00ed\2\u0cda\u0cd9")
        buf.write("\3\2\2\2\u0cda\u0cdb\3\2\2\2\u0cdb\u0cdd\3\2\2\2\u0cdc")
        buf.write("\u0cde\5\u01da\u00ee\2\u0cdd\u0cdc\3\2\2\2\u0cdd\u0cde")
        buf.write("\3\2\2\2\u0cde\u01a9\3\2\2\2\u0cdf\u0cef\7\u0159\2\2\u0ce0")
        buf.write("\u0ce5\5\u01ac\u00d7\2\u0ce1\u0ce2\7\u01f2\2\2\u0ce2\u0ce4")
        buf.write("\5\u01ac\u00d7\2\u0ce3\u0ce1\3\2\2\2\u0ce4\u0ce7\3\2\2")
        buf.write("\2\u0ce5\u0ce3\3\2\2\2\u0ce5\u0ce6\3\2\2\2\u0ce6\u0cf0")
        buf.write("\3\2\2\2\u0ce7\u0ce5\3\2\2\2\u0ce8\u0ce9\7\u019d\2\2\u0ce9")
        buf.write("\u0cea\7\u01ec\2\2\u0cea\u0ceb\5\u02d8\u016d\2\u0ceb\u0cec")
        buf.write("\7\u01ed\2\2\u0cec\u0ced\7\u0203\2\2\u0ced\u0cee\5\u01f0")
        buf.write("\u00f9\2\u0cee\u0cf0\3\2\2\2\u0cef\u0ce0\3\2\2\2\u0cef")
        buf.write("\u0ce8\3\2\2\2\u0cf0\u01ab\3\2\2\2\u0cf1\u0cf2\5\u02ae")
        buf.write("\u0158\2\u0cf2\u0cf3\7\u0203\2\2\u0cf3\u0cf4\5\u01f0\u00f9")
        buf.write("\2\u0cf4\u0d03\3\2\2\2\u0cf5\u0cf6\7\u01ec\2\2\u0cf6\u0cfb")
        buf.write("\5\u02ae\u0158\2\u0cf7\u0cf8\7\u01f2\2\2\u0cf8\u0cfa\5")
        buf.write("\u02ae\u0158\2\u0cf9\u0cf7\3\2\2\2\u0cfa\u0cfd\3\2\2\2")
        buf.write("\u0cfb\u0cf9\3\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0cfe\3")
        buf.write("\2\2\2\u0cfd\u0cfb\3\2\2\2\u0cfe\u0cff\7\u01ed\2\2\u0cff")
        buf.write("\u0d00\7\u0203\2\2\u0d00\u0d01\5\u013e\u00a0\2\u0d01\u0d03")
        buf.write("\3\2\2\2\u0d02\u0cf1\3\2\2\2\u0d02\u0cf5\3\2\2\2\u0d03")
        buf.write("\u01ad\3\2\2\2\u0d04\u0d06\7h\2\2\u0d05\u0d07\7\u0099")
        buf.write("\2\2\u0d06\u0d05\3\2\2\2\u0d06\u0d07\3\2\2\2\u0d07\u0d08")
        buf.write("\3\2\2\2\u0d08\u0d0a\5\u01d6\u00ec\2\u0d09\u0d0b\5\u026e")
        buf.write("\u0138\2\u0d0a\u0d09\3\2\2\2\u0d0a\u0d0b\3\2\2\2\u0d0b")
        buf.write("\u0d0d\3\2\2\2\u0d0c\u0d0e\5\u01d8\u00ed\2\u0d0d\u0d0c")
        buf.write("\3\2\2\2\u0d0d\u0d0e\3\2\2\2\u0d0e\u0d10\3\2\2\2\u0d0f")
        buf.write("\u0d11\5\u01da\u00ee\2\u0d10\u0d0f\3\2\2\2\u0d10\u0d11")
        buf.write("\3\2\2\2\u0d11\u01af\3\2\2\2\u0d12\u0d15\7\u00b4\2\2\u0d13")
        buf.write("\u0d16\5\u01b2\u00da\2\u0d14\u0d16\5\u01b4\u00db\2\u0d15")
        buf.write("\u0d13\3\2\2\2\u0d15\u0d14\3\2\2\2\u0d16\u01b1\3\2\2\2")
        buf.write("\u0d17\u0d1d\5\u01be\u00e0\2\u0d18\u0d1a\5\u01c0\u00e1")
        buf.write("\2\u0d19\u0d1b\5\u01d8\u00ed\2\u0d1a\u0d19\3\2\2\2\u0d1a")
        buf.write("\u0d1b\3\2\2\2\u0d1b\u0d1e\3\2\2\2\u0d1c\u0d1e\5\u0134")
        buf.write("\u009b\2\u0d1d\u0d18\3\2\2\2\u0d1d\u0d1c\3\2\2\2\u0d1e")
        buf.write("\u0d20\3\2\2\2\u0d1f\u0d21\5\u01da\u00ee\2\u0d20\u0d1f")
        buf.write("\3\2\2\2\u0d20\u0d21\3\2\2\2\u0d21\u01b3\3\2\2\2\u0d22")
        buf.write("\u0d24\7\t\2\2\u0d23\u0d25\5\u01b6\u00dc\2\u0d24\u0d23")
        buf.write("\3\2\2\2\u0d25\u0d26\3\2\2\2\u0d26\u0d24\3\2\2\2\u0d26")
        buf.write("\u0d27\3\2\2\2\u0d27\u0d2a\3\2\2\2\u0d28\u0d2a\5\u01b8")
        buf.write("\u00dd\2\u0d29\u0d22\3\2\2\2\u0d29\u0d28\3\2\2\2\u0d2a")
        buf.write("\u0d2b\3\2\2\2\u0d2b\u0d2c\5\u0134\u009b\2\u0d2c\u01b5")
        buf.write("\3\2\2\2\u0d2d\u0d2f\5\u01be\u00e0\2\u0d2e\u0d30\5\u01c0")
        buf.write("\u00e1\2\u0d2f\u0d2e\3\2\2\2\u0d2f\u0d30\3\2\2\2\u0d30")
        buf.write("\u0d32\3\2\2\2\u0d31\u0d33\5\u01da\u00ee\2\u0d32\u0d31")
        buf.write("\3\2\2\2\u0d32\u0d33\3\2\2\2\u0d33\u01b7\3\2\2\2\u0d34")
        buf.write("\u0d36\t,\2\2\u0d35\u0d34\3\2\2\2\u0d35\u0d36\3\2\2\2")
        buf.write("\u0d36\u0d38\3\2\2\2\u0d37\u0d39\5\u01ba\u00de\2\u0d38")
        buf.write("\u0d37\3\2\2\2\u0d39\u0d3a\3\2\2\2\u0d3a\u0d38\3\2\2\2")
        buf.write("\u0d3a\u0d3b\3\2\2\2\u0d3b\u0d3d\3\2\2\2\u0d3c\u0d3e\5")
        buf.write("\u01bc\u00df\2\u0d3d\u0d3c\3\2\2\2\u0d3d\u0d3e\3\2\2\2")
        buf.write("\u0d3e\u01b9\3\2\2\2\u0d3f\u0d40\7\u01a9\2\2\u0d40\u0d41")
        buf.write("\5\u01ee\u00f8\2\u0d41\u0d43\7\u017b\2\2\u0d42\u0d44\5")
        buf.write("\u01b6\u00dc\2\u0d43\u0d42\3\2\2\2\u0d44\u0d45\3\2\2\2")
        buf.write("\u0d45\u0d43\3\2\2\2\u0d45\u0d46\3\2\2\2\u0d46\u01bb\3")
        buf.write("\2\2\2\u0d47\u0d49\7v\2\2\u0d48\u0d4a\5\u01b6\u00dc\2")
        buf.write("\u0d49\u0d48\3\2\2\2\u0d4a\u0d4b\3\2\2\2\u0d4b\u0d49\3")
        buf.write("\2\2\2\u0d4b\u0d4c\3\2\2\2\u0d4c\u01bd\3\2\2\2\u0d4d\u0d4e")
        buf.write("\7\u00bb\2\2\u0d4e\u0d50\5\u01d6\u00ec\2\u0d4f\u0d51\5")
        buf.write("\u01a6\u00d4\2\u0d50\u0d4f\3\2\2\2\u0d50\u0d51\3\2\2\2")
        buf.write("\u0d51\u01bf\3\2\2\2\u0d52\u0d53\7\u019e\2\2\u0d53\u0d54")
        buf.write("\5\u01ec\u00f7\2\u0d54\u01c1\3\2\2\2\u0d55\u0d56\7\u00dd")
        buf.write("\2\2\u0d56\u0d57\7\u00bb\2\2\u0d57\u0d59\5\u02b0\u0159")
        buf.write("\2\u0d58\u0d5a\5\u026a\u0136\2\u0d59\u0d58\3\2\2\2\u0d59")
        buf.write("\u0d5a\3\2\2\2\u0d5a\u0d5b\3\2\2\2\u0d5b\u0d5c\7\u019b")
        buf.write("\2\2\u0d5c\u0d5d\5\u01cc\u00e7\2\u0d5d\u0d5e\7\u0108\2")
        buf.write("\2\u0d5e\u0d5f\7\u01ec\2\2\u0d5f\u0d60\5\u01ee\u00f8\2")
        buf.write("\u0d60\u0d69\7\u01ed\2\2\u0d61\u0d63\5\u01c4\u00e3\2\u0d62")
        buf.write("\u0d64\5\u01ca\u00e6\2\u0d63\u0d62\3\2\2\2\u0d63\u0d64")
        buf.write("\3\2\2\2\u0d64\u0d6a\3\2\2\2\u0d65\u0d67\5\u01ca\u00e6")
        buf.write("\2\u0d66\u0d68\5\u01c4\u00e3\2\u0d67\u0d66\3\2\2\2\u0d67")
        buf.write("\u0d68\3\2\2\2\u0d68\u0d6a\3\2\2\2\u0d69\u0d61\3\2\2\2")
        buf.write("\u0d69\u0d65\3\2\2\2\u0d69\u0d6a\3\2\2\2\u0d6a\u0d6c\3")
        buf.write("\2\2\2\u0d6b\u0d6d\5\u01da\u00ee\2\u0d6c\u0d6b\3\2\2\2")
        buf.write("\u0d6c\u0d6d\3\2\2\2\u0d6d\u01c3\3\2\2\2\u0d6e\u0d6f\7")
        buf.write("\u01a9\2\2\u0d6f\u0d70\7\u00d9\2\2\u0d70\u0d71\7\u017b")
        buf.write("\2\2\u0d71\u0d72\7\u0196\2\2\u0d72\u0d73\7\u0159\2\2\u0d73")
        buf.write("\u0d78\5\u01c6\u00e4\2\u0d74\u0d75\7\u01f2\2\2\u0d75\u0d77")
        buf.write("\5\u01c6\u00e4\2\u0d76\u0d74\3\2\2\2\u0d77\u0d7a\3\2\2")
        buf.write("\2\u0d78\u0d76\3\2\2\2\u0d78\u0d79\3\2\2\2\u0d79\u0d7c")
        buf.write("\3\2\2\2\u0d7a\u0d78\3\2\2\2\u0d7b\u0d7d\5\u026e\u0138")
        buf.write("\2\u0d7c\u0d7b\3\2\2\2\u0d7c\u0d7d\3\2\2\2\u0d7d\u0d7f")
        buf.write("\3\2\2\2\u0d7e\u0d80\5\u01c8\u00e5\2\u0d7f\u0d7e\3\2\2")
        buf.write("\2\u0d7f\u0d80\3\2\2\2\u0d80\u01c5\3\2\2\2\u0d81\u0d82")
        buf.write("\5\u02ae\u0158\2\u0d82\u0d83\7\u0203\2\2\u0d83\u0d84\5")
        buf.write("\u01f0\u00f9\2\u0d84\u01c7\3\2\2\2\u0d85\u0d86\7h\2\2")
        buf.write("\u0d86\u0d87\5\u026e\u0138\2\u0d87\u01c9\3\2\2\2\u0d88")
        buf.write("\u0d89\7\u01a9\2\2\u0d89\u0d8a\7\u00fc\2\2\u0d8a\u0d8b")
        buf.write("\7\u00d9\2\2\u0d8b\u0d8c\7\u017b\2\2\u0d8c\u0d8e\7\u00b4")
        buf.write("\2\2\u0d8d\u0d8f\5\u01a6\u00d4\2\u0d8e\u0d8d\3\2\2\2\u0d8e")
        buf.write("\u0d8f\3\2\2\2\u0d8f\u0d90\3\2\2\2\u0d90\u0d91\7\u019e")
        buf.write("\2\2\u0d91\u0d93\5\u01ec\u00f7\2\u0d92\u0d94\5\u026e\u0138")
        buf.write("\2\u0d93\u0d92\3\2\2\2\u0d93\u0d94\3\2\2\2\u0d94\u01cb")
        buf.write("\3\2\2\2\u0d95\u0d9b\5\u02b0\u0159\2\u0d96\u0d97\7\u01ec")
        buf.write("\2\2\u0d97\u0d98\5\u0134\u009b\2\u0d98\u0d99\7\u01ed\2")
        buf.write("\2\u0d99\u0d9b\3\2\2\2\u0d9a\u0d95\3\2\2\2\u0d9a\u0d96")
        buf.write("\3\2\2\2\u0d9b\u0d9d\3\2\2\2\u0d9c\u0d9e\5\u026a\u0136")
        buf.write("\2\u0d9d\u0d9c\3\2\2\2\u0d9d\u0d9e\3\2\2\2\u0d9e\u01cd")
        buf.write("\3\2\2\2\u0d9f\u0da0\7\u00d0\2\2\u0da0\u0da1\7\u0179\2")
        buf.write("\2\u0da1\u0da6\5\u01d2\u00ea\2\u0da2\u0da3\7\u01f2\2\2")
        buf.write("\u0da3\u0da5\5\u01d2\u00ea\2\u0da4\u0da2\3\2\2\2\u0da5")
        buf.write("\u0da8\3\2\2\2\u0da6\u0da4\3\2\2\2\u0da6\u0da7\3\2\2\2")
        buf.write("\u0da7\u0da9\3\2\2\2\u0da8\u0da6\3\2\2\2\u0da9\u0daa\7")
        buf.write("\u00a7\2\2\u0daa\u0dab\5\u01d4\u00eb\2\u0dab\u0dad\7\u00e2")
        buf.write("\2\2\u0dac\u0dae\5\u01d0\u00e9\2\u0dad\u0dac\3\2\2\2\u0dad")
        buf.write("\u0dae\3\2\2\2\u0dae\u01cf\3\2\2\2\u0daf\u0db0\7\u01a6")
        buf.write("\2\2\u0db0\u0db3\5\u01f0\u00f9\2\u0db1\u0db3\7\u00fd\2")
        buf.write("\2\u0db2\u0daf\3\2\2\2\u0db2\u0db1\3\2\2\2\u0db3\u01d1")
        buf.write("\3\2\2\2\u0db4\u0db6\5\u02b0\u0159\2\u0db5\u0db7\5\u0266")
        buf.write("\u0134\2\u0db6\u0db5\3\2\2\2\u0db6\u0db7\3\2\2\2\u0db7")
        buf.write("\u01d3\3\2\2\2\u0db8\u0db9\7\u0143\2\2\u0db9\u0dc5\7\u015c")
        buf.write("\2\2\u0dba\u0dbb\7\u0143\2\2\u0dbb\u0dc5\7\u0086\2\2\u0dbc")
        buf.write("\u0dbe\7\u015c\2\2\u0dbd\u0dbf\7\u0196\2\2\u0dbe\u0dbd")
        buf.write("\3\2\2\2\u0dbe\u0dbf\3\2\2\2\u0dbf\u0dc5\3\2\2\2\u0dc0")
        buf.write("\u0dc1\7\u015c\2\2\u0dc1\u0dc2\7\u0143\2\2\u0dc2\u0dc5")
        buf.write("\7\u0086\2\2\u0dc3\u0dc5\7\u0086\2\2\u0dc4\u0db8\3\2\2")
        buf.write("\2\u0dc4\u0dba\3\2\2\2\u0dc4\u0dbc\3\2\2\2\u0dc4\u0dc0")
        buf.write("\3\2\2\2\u0dc4\u0dc3\3\2\2\2\u0dc5\u01d5\3\2\2\2\u0dc6")
        buf.write("\u0dcd\5\u01e0\u00f1\2\u0dc7\u0dc8\7\u0109\2\2\u0dc8\u0dc9")
        buf.write("\7\u01ec\2\2\u0dc9\u0dca\5\u01e0\u00f1\2\u0dca\u0dcb\7")
        buf.write("\u01ed\2\2\u0dcb\u0dcd\3\2\2\2\u0dcc\u0dc6\3\2\2\2\u0dcc")
        buf.write("\u0dc7\3\2\2\2\u0dcd\u0dcf\3\2\2\2\u0dce\u0dd0\5\u026a")
        buf.write("\u0136\2\u0dcf\u0dce\3\2\2\2\u0dcf\u0dd0\3\2\2\2\u0dd0")
        buf.write("\u01d7\3\2\2\2\u0dd1\u0dd2\t\31\2\2\u0dd2\u0dd7\5\u01f0")
        buf.write("\u00f9\2\u0dd3\u0dd4\7\u01f2\2\2\u0dd4\u0dd6\5\u01f0\u00f9")
        buf.write("\2\u0dd5\u0dd3\3\2\2\2\u0dd6\u0dd9\3\2\2\2\u0dd7\u0dd5")
        buf.write("\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8\u0dda\3\2\2\2\u0dd9")
        buf.write("\u0dd7\3\2\2\2\u0dda\u0ddb\5\u0272\u013a\2\u0ddb\u01d9")
        buf.write("\3\2\2\2\u0ddc\u0ddd\7\u00d2\2\2\u0ddd\u0ddf\7~\2\2\u0dde")
        buf.write("\u0de0\5\u01dc\u00ef\2\u0ddf\u0dde\3\2\2\2\u0ddf\u0de0")
        buf.write("\3\2\2\2\u0de0\u0de2\3\2\2\2\u0de1\u0de3\5\u01f0\u00f9")
        buf.write("\2\u0de2\u0de1\3\2\2\2\u0de2\u0de3\3\2\2\2\u0de3\u0de5")
        buf.write("\3\2\2\2\u0de4\u0de6\5\u01de\u00f0\2\u0de5\u0de4\3\2\2")
        buf.write("\2\u0de5\u0de6\3\2\2\2\u0de6\u01db\3\2\2\2\u0de7\u0de8")
        buf.write("\7\u00bb\2\2\u0de8\u0de9\5\u02b0\u0159\2\u0de9\u01dd\3")
        buf.write("\2\2\2\u0dea\u0deb\7\u0133\2\2\u0deb\u0dee\7\u00ce\2\2")
        buf.write("\u0dec\u0def\7\u0193\2\2\u0ded\u0def\5\u01f0\u00f9\2\u0dee")
        buf.write("\u0dec\3\2\2\2\u0dee\u0ded\3\2\2\2\u0def\u01df\3\2\2\2")
        buf.write("\u0df0\u0dfd\5\u01e2\u00f2\2\u0df1\u0df2\7\u01ec\2\2\u0df2")
        buf.write("\u0df4\5\u0134\u009b\2\u0df3\u0df5\5\u01e4\u00f3\2\u0df4")
        buf.write("\u0df3\3\2\2\2\u0df4\u0df5\3\2\2\2\u0df5\u0df6\3\2\2\2")
        buf.write("\u0df6\u0df7\7\u01ed\2\2\u0df7\u0dfd\3\2\2\2\u0df8\u0dfa")
        buf.write("\5\u02b0\u0159\2\u0df9\u0dfb\5\u01e6\u00f4\2\u0dfa\u0df9")
        buf.write("\3\2\2\2\u0dfa\u0dfb\3\2\2\2\u0dfb\u0dfd\3\2\2\2\u0dfc")
        buf.write("\u0df0\3\2\2\2\u0dfc\u0df1\3\2\2\2\u0dfc\u0df8\3\2\2\2")
        buf.write("\u0dfd\u01e1\3\2\2\2\u0dfe\u0e0b\t-\2\2\u0dff\u0e00\7")
        buf.write("\u01ec\2\2\u0e00\u0e01\5\u013e\u00a0\2\u0e01\u0e02\7\u01ed")
        buf.write("\2\2\u0e02\u0e0c\3\2\2\2\u0e03\u0e04\7\u01ec\2\2\u0e04")
        buf.write("\u0e05\5\u01f0\u00f9\2\u0e05\u0e09\7\u01ed\2\2\u0e06\u0e07")
        buf.write("\7\u01ec\2\2\u0e07\u0e08\7\u01f0\2\2\u0e08\u0e0a\7\u01ed")
        buf.write("\2\2\u0e09\u0e06\3\2\2\2\u0e09\u0e0a\3\2\2\2\u0e0a\u0e0c")
        buf.write("\3\2\2\2\u0e0b\u0dff\3\2\2\2\u0e0b\u0e03\3\2\2\2\u0e0c")
        buf.write("\u01e3\3\2\2\2\u0e0d\u0e16\7\u01ad\2\2\u0e0e\u0e0f\7\u012d")
        buf.write("\2\2\u0e0f\u0e17\7\u0109\2\2\u0e10\u0e11\7\64\2\2\u0e11")
        buf.write("\u0e14\7\u010b\2\2\u0e12\u0e13\7D\2\2\u0e13\u0e15\5\u0292")
        buf.write("\u014a\2\u0e14\u0e12\3\2\2\2\u0e14\u0e15\3\2\2\2\u0e15")
        buf.write("\u0e17\3\2\2\2\u0e16\u0e0e\3\2\2\2\u0e16\u0e10\3\2\2\2")
        buf.write("\u0e17\u01e5\3\2\2\2\u0e18\u0e1a\7\u0147\2\2\u0e19\u0e1b")
        buf.write("\7\"\2\2\u0e1a\u0e19\3\2\2\2\u0e1a\u0e1b\3\2\2\2\u0e1b")
        buf.write("\u0e1c\3\2\2\2\u0e1c\u0e1d\7\u01ec\2\2\u0e1d\u0e20\5\u01f0")
        buf.write("\u00f9\2\u0e1e\u0e1f\7\u01f2\2\2\u0e1f\u0e21\5\u01f0\u00f9")
        buf.write("\2\u0e20\u0e1e\3\2\2\2\u0e20\u0e21\3\2\2\2\u0e21\u0e22")
        buf.write("\3\2\2\2\u0e22\u0e24\7\u01ed\2\2\u0e23\u0e25\5\u01e8\u00f5")
        buf.write("\2\u0e24\u0e23\3\2\2\2\u0e24\u0e25\3\2\2\2\u0e25\u01e7")
        buf.write("\3\2\2\2\u0e26\u0e27\7\u014f\2\2\u0e27\u0e28\7\u01ec\2")
        buf.write("\2\u0e28\u0e29\5\u01f0\u00f9\2\u0e29\u0e2a\7\u01ed\2\2")
        buf.write("\u0e2a\u01e9\3\2\2\2\u0e2b\u0e2c\7T\2\2\u0e2c\u0e2d\7")
        buf.write("\u01ec\2\2\u0e2d\u0e2e\5\u013e\u00a0\2\u0e2e\u0e2f\7\u01ed")
        buf.write("\2\2\u0e2f\u01eb\3\2\2\2\u0e30\u0e32\7\u01ec\2\2\u0e31")
        buf.write("\u0e33\5\u01f0\u00f9\2\u0e32\u0e31\3\2\2\2\u0e32\u0e33")
        buf.write("\3\2\2\2\u0e33\u0e38\3\2\2\2\u0e34\u0e35\7\u01f2\2\2\u0e35")
        buf.write("\u0e37\5\u01f0\u00f9\2\u0e36\u0e34\3\2\2\2\u0e37\u0e3a")
        buf.write("\3\2\2\2\u0e38\u0e36\3\2\2\2\u0e38\u0e39\3\2\2\2\u0e39")
        buf.write("\u0e3b\3\2\2\2\u0e3a\u0e38\3\2\2\2\u0e3b\u0e3c\7\u01ed")
        buf.write("\2\2\u0e3c\u01ed\3\2\2\2\u0e3d\u0e3e\5\u01f0\u00f9\2\u0e3e")
        buf.write("\u01ef\3\2\2\2\u0e3f\u0e40\b\u00f9\1\2\u0e40\u0e41\7T")
        buf.write("\2\2\u0e41\u0e4a\5\u01f4\u00fb\2\u0e42\u0e43\7\u00fc\2")
        buf.write("\2\u0e43\u0e4a\5\u01f0\u00f9\7\u0e44\u0e4a\5\u0202\u0102")
        buf.write("\2\u0e45\u0e46\7\u01ec\2\2\u0e46\u0e47\5\u01f0\u00f9\2")
        buf.write("\u0e47\u0e48\7\u01ed\2\2\u0e48\u0e4a\3\2\2\2\u0e49\u0e3f")
        buf.write("\3\2\2\2\u0e49\u0e42\3\2\2\2\u0e49\u0e44\3\2\2\2\u0e49")
        buf.write("\u0e45\3\2\2\2\u0e4a\u0e7f\3\2\2\2\u0e4b\u0e4d\f\f\2\2")
        buf.write("\u0e4c\u0e4e\7\u00fc\2\2\u0e4d\u0e4c\3\2\2\2\u0e4d\u0e4e")
        buf.write("\3\2\2\2\u0e4e\u0e4f\3\2\2\2\u0e4f\u0e50\7\34\2\2\u0e50")
        buf.write("\u0e51\5\u01f0\u00f9\2\u0e51\u0e52\7\f\2\2\u0e52\u0e53")
        buf.write("\5\u01f0\u00f9\r\u0e53\u0e7e\3\2\2\2\u0e54\u0e55\f\n\2")
        buf.write("\2\u0e55\u0e56\5\u01f8\u00fd\2\u0e56\u0e57\5\u01f0\u00f9")
        buf.write("\13\u0e57\u0e7e\3\2\2\2\u0e58\u0e59\f\6\2\2\u0e59\u0e5a")
        buf.write("\7\f\2\2\u0e5a\u0e7e\5\u01f0\u00f9\7\u0e5b\u0e5c\f\5\2")
        buf.write("\2\u0e5c\u0e5d\7\u010c\2\2\u0e5d\u0e7e\5\u01f0\u00f9\6")
        buf.write("\u0e5e\u0e5f\f\16\2\2\u0e5f\u0e60\7\u00bd\2\2\u0e60\u0e7e")
        buf.write("\5\u01f2\u00fa\2\u0e61\u0e63\f\r\2\2\u0e62\u0e64\7\u00fc")
        buf.write("\2\2\u0e63\u0e62\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e65")
        buf.write("\3\2\2\2\u0e65\u0e6b\7\u00a7\2\2\u0e66\u0e67\7\u01ec\2")
        buf.write("\2\u0e67\u0e68\5\u013e\u00a0\2\u0e68\u0e69\7\u01ed\2\2")
        buf.write("\u0e69\u0e6c\3\2\2\2\u0e6a\u0e6c\5\u01ec\u00f7\2\u0e6b")
        buf.write("\u0e66\3\2\2\2\u0e6b\u0e6a\3\2\2\2\u0e6c\u0e7e\3\2\2\2")
        buf.write("\u0e6d\u0e6f\f\13\2\2\u0e6e\u0e70\7\u00fc\2\2\u0e6f\u0e6e")
        buf.write("\3\2\2\2\u0e6f\u0e70\3\2\2\2\u0e70\u0e71\3\2\2\2\u0e71")
        buf.write("\u0e72\5\u01fa\u00fe\2\u0e72\u0e75\5\u01f0\u00f9\2\u0e73")
        buf.write("\u0e74\7\177\2\2\u0e74\u0e76\5\u01f0\u00f9\2\u0e75\u0e73")
        buf.write("\3\2\2\2\u0e75\u0e76\3\2\2\2\u0e76\u0e7e\3\2\2\2\u0e77")
        buf.write("\u0e78\f\t\2\2\u0e78\u0e7a\t.\2\2\u0e79\u0e7b\7\u0104")
        buf.write("\2\2\u0e7a\u0e79\3\2\2\2\u0e7a\u0e7b\3\2\2\2\u0e7b\u0e7c")
        buf.write("\3\2\2\2\u0e7c\u0e7e\5\u0202\u0102\2\u0e7d\u0e4b\3\2\2")
        buf.write("\2\u0e7d\u0e54\3\2\2\2\u0e7d\u0e58\3\2\2\2\u0e7d\u0e5b")
        buf.write("\3\2\2\2\u0e7d\u0e5e\3\2\2\2\u0e7d\u0e61\3\2\2\2\u0e7d")
        buf.write("\u0e6d\3\2\2\2\u0e7d\u0e77\3\2\2\2\u0e7e\u0e81\3\2\2\2")
        buf.write("\u0e7f\u0e7d\3\2\2\2\u0e7f\u0e80\3\2\2\2\u0e80\u01f1\3")
        buf.write("\2\2\2\u0e81\u0e7f\3\2\2\2\u0e82\u0e84\7\u00fc\2\2\u0e83")
        buf.write("\u0e82\3\2\2\2\u0e83\u0e84\3\2\2\2\u0e84\u0e9e\3\2\2\2")
        buf.write("\u0e85\u0e9f\7\u00fe\2\2\u0e86\u0e9f\7\u00e8\2\2\u0e87")
        buf.write("\u0e9f\7\u0127\2\2\u0e88\u0e9f\7\u00b0\2\2\u0e89\u0e8a")
        buf.write("\7\4\2\2\u0e8a\u0e9f\7\u0159\2\2\u0e8b\u0e9f\7x\2\2\u0e8c")
        buf.write("\u0e8e\7\u0104\2\2\u0e8d\u0e8f\7\u018e\2\2\u0e8e\u0e8d")
        buf.write("\3\2\2\2\u0e8e\u0e8f\3\2\2\2\u0e8f\u0e90\3\2\2\2\u0e90")
        buf.write("\u0e92\7\u01ec\2\2\u0e91\u0e93\7\u0109\2\2\u0e92\u0e91")
        buf.write("\3\2\2\2\u0e92\u0e93\3\2\2\2\u0e93\u0e94\3\2\2\2\u0e94")
        buf.write("\u0e99\5\u02c2\u0162\2\u0e95\u0e96\7\u01f2\2\2\u0e96\u0e98")
        buf.write("\5\u02c2\u0162\2\u0e97\u0e95\3\2\2\2\u0e98\u0e9b\3\2\2")
        buf.write("\2\u0e99\u0e97\3\2\2\2\u0e99\u0e9a\3\2\2\2\u0e9a\u0e9c")
        buf.write("\3\2\2\2\u0e9b\u0e99\3\2\2\2\u0e9c\u0e9d\7\u01ed\2\2\u0e9d")
        buf.write("\u0e9f\3\2\2\2\u0e9e\u0e85\3\2\2\2\u0e9e\u0e86\3\2\2\2")
        buf.write("\u0e9e\u0e87\3\2\2\2\u0e9e\u0e88\3\2\2\2\u0e9e\u0e89\3")
        buf.write("\2\2\2\u0e9e\u0e8b\3\2\2\2\u0e9e\u0e8c\3\2\2\2\u0e9f\u01f3")
        buf.write("\3\2\2\2\u0ea0\u0ea1\7\u01ec\2\2\u0ea1\u0ea2\5\u013e\u00a0")
        buf.write("\2\u0ea2\u0ea3\7\u01ed\2\2\u0ea3\u01f5\3\2\2\2\u0ea4\u0ea5")
        buf.write("\t.\2\2\u0ea5\u01f7\3\2\2\2\u0ea6\u0ead\7\u0203\2\2\u0ea7")
        buf.write("\u0ead\5\u02dc\u016f\2\u0ea8\u0ead\7\u01fa\2\2\u0ea9\u0ead")
        buf.write("\7\u0200\2\2\u0eaa\u0ead\5\u02e0\u0171\2\u0eab\u0ead\5")
        buf.write("\u02de\u0170\2\u0eac\u0ea6\3\2\2\2\u0eac\u0ea7\3\2\2\2")
        buf.write("\u0eac\u0ea8\3\2\2\2\u0eac\u0ea9\3\2\2\2\u0eac\u0eaa\3")
        buf.write("\2\2\2\u0eac\u0eab\3\2\2\2\u0ead\u01f9\3\2\2\2\u0eae\u0eaf")
        buf.write("\t/\2\2\u0eaf\u01fb\3\2\2\2\u0eb0\u0eb1\7\177\2\2\u0eb1")
        buf.write("\u0eb2\5\u0200\u0101\2\u0eb2\u01fd\3\2\2\2\u0eb3\u0eb4")
        buf.write("\5\u0200\u0101\2\u0eb4\u0eb5\7\f\2\2\u0eb5\u0eb6\5\u0200")
        buf.write("\u0101\2\u0eb6\u01ff\3\2\2\2\u0eb7\u0eb8\5\u0202\u0102")
        buf.write("\2\u0eb8\u0201\3\2\2\2\u0eb9\u0eba\b\u0102\1\2\u0eba\u0ebb")
        buf.write("\7\u01ec\2\2\u0ebb\u0ebc\5\u0202\u0102\2\u0ebc\u0ebd\7")
        buf.write("\u01ed\2\2\u0ebd\u0ec0\3\2\2\2\u0ebe\u0ec0\5\u0212\u010a")
        buf.write("\2\u0ebf\u0eb9\3\2\2\2\u0ebf\u0ebe\3\2\2\2\u0ec0\u0ed7")
        buf.write("\3\2\2\2\u0ec1\u0ec2\f\7\2\2\u0ec2\u0ec3\t\60\2\2\u0ec3")
        buf.write("\u0ed6\5\u0202\u0102\b\u0ec4\u0ec5\f\6\2\2\u0ec5\u0ec6")
        buf.write("\t\61\2\2\u0ec6\u0ed6\5\u0202\u0102\7\u0ec7\u0ec8\f\5")
        buf.write("\2\2\u0ec8\u0ec9\7\u0201\2\2\u0ec9\u0ed6\5\u0202\u0102")
        buf.write("\6\u0eca\u0ed3\f\b\2\2\u0ecb\u0ed0\7\22\2\2\u0ecc\u0ed1")
        buf.write("\7\u00cf\2\2\u0ecd\u0ece\7\u017c\2\2\u0ece\u0ecf\7\u01c3")
        buf.write("\2\2\u0ecf\u0ed1\5\u0202\u0102\2\u0ed0\u0ecc\3\2\2\2\u0ed0")
        buf.write("\u0ecd\3\2\2\2\u0ed1\u0ed4\3\2\2\2\u0ed2\u0ed4\5\u0204")
        buf.write("\u0103\2\u0ed3\u0ecb\3\2\2\2\u0ed3\u0ed2\3\2\2\2\u0ed4")
        buf.write("\u0ed6\3\2\2\2\u0ed5\u0ec1\3\2\2\2\u0ed5\u0ec4\3\2\2\2")
        buf.write("\u0ed5\u0ec7\3\2\2\2\u0ed5\u0eca\3\2\2\2\u0ed6\u0ed9\3")
        buf.write("\2\2\2\u0ed7\u0ed5\3\2\2\2\u0ed7\u0ed8\3\2\2\2\u0ed8\u0203")
        buf.write("\3\2\2\2\u0ed9\u0ed7\3\2\2\2\u0eda\u0edf\7Z\2\2\u0edb")
        buf.write("\u0edc\7\u01ec\2\2\u0edc\u0edd\5\u0200\u0101\2\u0edd\u0ede")
        buf.write("\7\u01ed\2\2\u0ede\u0ee0\3\2\2\2\u0edf\u0edb\3\2\2\2\u0edf")
        buf.write("\u0ee0\3\2\2\2\u0ee0\u0ee1\3\2\2\2\u0ee1\u0ee2\7\u0185")
        buf.write("\2\2\u0ee2\u0ee7\7\u014e\2\2\u0ee3\u0ee4\7\u01ec\2\2\u0ee4")
        buf.write("\u0ee5\5\u0200\u0101\2\u0ee5\u0ee6\7\u01ed\2\2\u0ee6\u0ee8")
        buf.write("\3\2\2\2\u0ee7\u0ee3\3\2\2\2\u0ee7\u0ee8\3\2\2\2\u0ee8")
        buf.write("\u0ef3\3\2\2\2\u0ee9\u0eee\7\u01c0\2\2\u0eea\u0eeb\7\u01ec")
        buf.write("\2\2\u0eeb\u0eec\5\u0200\u0101\2\u0eec\u0eed\7\u01ed\2")
        buf.write("\2\u0eed\u0eef\3\2\2\2\u0eee\u0eea\3\2\2\2\u0eee\u0eef")
        buf.write("\3\2\2\2\u0eef\u0ef0\3\2\2\2\u0ef0\u0ef1\7\u0185\2\2\u0ef1")
        buf.write("\u0ef3\7\u00e5\2\2\u0ef2\u0eda\3\2\2\2\u0ef2\u0ee9\3\2")
        buf.write("\2\2\u0ef3\u0205\3\2\2\2\u0ef4\u0ef5\5\u0212\u010a\2\u0ef5")
        buf.write("\u0ef6\7\u0204\2\2\u0ef6\u0ef7\5\u0208\u0105\2\u0ef7\u0ef8")
        buf.write("\7\u0205\2\2\u0ef8\u0207\3\2\2\2\u0ef9\u0efc\7\r\2\2\u0efa")
        buf.write("\u0efc\5\u01f0\u00f9\2\u0efb\u0ef9\3\2\2\2\u0efb\u0efa")
        buf.write("\3\2\2\2\u0efc\u0f04\3\2\2\2\u0efd\u0f00\7\u01f2\2\2\u0efe")
        buf.write("\u0f01\7\r\2\2\u0eff\u0f01\5\u01f0\u00f9\2\u0f00\u0efe")
        buf.write("\3\2\2\2\u0f00\u0eff\3\2\2\2\u0f01\u0f03\3\2\2\2\u0f02")
        buf.write("\u0efd\3\2\2\2\u0f03\u0f06\3\2\2\2\u0f04\u0f02\3\2\2\2")
        buf.write("\u0f04\u0f05\3\2\2\2\u0f05\u0f11\3\2\2\2\u0f06\u0f04\3")
        buf.write("\2\2\2\u0f07\u0f0c\5\u020a\u0106\2\u0f08\u0f09\7\u01f2")
        buf.write("\2\2\u0f09\u0f0b\5\u020a\u0106\2\u0f0a\u0f08\3\2\2\2\u0f0b")
        buf.write("\u0f0e\3\2\2\2\u0f0c\u0f0a\3\2\2\2\u0f0c\u0f0d\3\2\2\2")
        buf.write("\u0f0d\u0f11\3\2\2\2\u0f0e\u0f0c\3\2\2\2\u0f0f\u0f11\5")
        buf.write("\u0210\u0109\2\u0f10\u0efb\3\2\2\2\u0f10\u0f07\3\2\2\2")
        buf.write("\u0f10\u0f0f\3\2\2\2\u0f11\u0209\3\2\2\2\u0f12\u0f13\7")
        buf.write("\u0096\2\2\u0f13\u0f20\5\u02ae\u0158\2\u0f14\u0f15\7\u00a7")
        buf.write("\2\2\u0f15\u0f21\5\u01ec\u00f7\2\u0f16\u0f18\5\u020c\u0107")
        buf.write("\2\u0f17\u0f16\3\2\2\2\u0f17\u0f18\3\2\2\2\u0f18\u0f19")
        buf.write("\3\2\2\2\u0f19\u0f1a\7\u0099\2\2\u0f1a\u0f1b\5\u01f0\u00f9")
        buf.write("\2\u0f1b\u0f1c\7\u0185\2\2\u0f1c\u0f1d\5\u01f0\u00f9\2")
        buf.write("\u0f1d\u0f1e\5\u020e\u0108\2\u0f1e\u0f1f\5\u01f0\u00f9")
        buf.write("\2\u0f1f\u0f21\3\2\2\2\u0f20\u0f14\3\2\2\2\u0f20\u0f17")
        buf.write("\3\2\2\2\u0f21\u020b\3\2\2\2\u0f22\u0f23\7\u00ca\2\2\u0f23")
        buf.write("\u0f24\5\u01f0\u00f9\2\u0f24\u020d\3\2\2\2\u0f25\u0f26")
        buf.write("\t\62\2\2\u0f26\u020f\3\2\2\2\u0f27\u0f28\7\u0096\2\2")
        buf.write("\u0f28\u0f29\7\u01ec\2\2\u0f29\u0f2e\5\u02ae\u0158\2\u0f2a")
        buf.write("\u0f2b\7\u01f2\2\2\u0f2b\u0f2d\5\u02ae\u0158\2\u0f2c\u0f2a")
        buf.write("\3\2\2\2\u0f2d\u0f30\3\2\2\2\u0f2e\u0f2c\3\2\2\2\u0f2e")
        buf.write("\u0f2f\3\2\2\2\u0f2f\u0f31\3\2\2\2\u0f30\u0f2e\3\2\2\2")
        buf.write("\u0f31\u0f32\7\u01ed\2\2\u0f32\u0f33\7\u00a7\2\2\u0f33")
        buf.write("\u0f40\7\u01ec\2\2\u0f34\u0f41\5\u013e\u00a0\2\u0f35\u0f36")
        buf.write("\7\u01ec\2\2\u0f36\u0f3b\5\u01ec\u00f7\2\u0f37\u0f38\7")
        buf.write("\u01f2\2\2\u0f38\u0f3a\5\u01ec\u00f7\2\u0f39\u0f37\3\2")
        buf.write("\2\2\u0f3a\u0f3d\3\2\2\2\u0f3b\u0f39\3\2\2\2\u0f3b\u0f3c")
        buf.write("\3\2\2\2\u0f3c\u0f3e\3\2\2\2\u0f3d\u0f3b\3\2\2\2\u0f3e")
        buf.write("\u0f3f\7\u01ed\2\2\u0f3f\u0f41\3\2\2\2\u0f40\u0f34\3\2")
        buf.write("\2\2\u0f40\u0f35\3\2\2\2\u0f41\u0f42\3\2\2\2\u0f42\u0f43")
        buf.write("\7\u01ed\2\2\u0f43\u0211\3\2\2\2\u0f44\u0f45\b\u010a\1")
        buf.write("\2\u0f45\u0f46\t\61\2\2\u0f46\u0f56\5\u0212\u010a\f\u0f47")
        buf.write("\u0f48\7\u0128\2\2\u0f48\u0f56\5\u0212\u010a\13\u0f49")
        buf.write("\u0f4a\7B\2\2\u0f4a\u0f56\5\u0212\u010a\n\u0f4b\u0f4c")
        buf.write("\7\u00f0\2\2\u0f4c\u0f56\5\u0212\u010a\t\u0f4d\u0f4e\7")
        buf.write("o\2\2\u0f4e\u0f56\5\u0212\u010a\b\u0f4f\u0f50\7\t\2\2")
        buf.write("\u0f50\u0f56\5\u0212\u010a\7\u0f51\u0f56\5\u0214\u010b")
        buf.write("\2\u0f52\u0f56\5\u0226\u0114\2\u0f53\u0f56\5\u0228\u0115")
        buf.write("\2\u0f54\u0f56\5\u0220\u0111\2\u0f55\u0f44\3\2\2\2\u0f55")
        buf.write("\u0f47\3\2\2\2\u0f55\u0f49\3\2\2\2\u0f55\u0f4b\3\2\2\2")
        buf.write("\u0f55\u0f4d\3\2\2\2\u0f55\u0f4f\3\2\2\2\u0f55\u0f51\3")
        buf.write("\2\2\2\u0f55\u0f52\3\2\2\2\u0f55\u0f53\3\2\2\2\u0f55\u0f54")
        buf.write("\3\2\2\2\u0f56\u0f5e\3\2\2\2\u0f57\u0f58\f\r\2\2\u0f58")
        buf.write("\u0f59\7\u0204\2\2\u0f59\u0f5a\5\u0208\u0105\2\u0f5a\u0f5b")
        buf.write("\7\u0205\2\2\u0f5b\u0f5d\3\2\2\2\u0f5c\u0f57\3\2\2\2\u0f5d")
        buf.write("\u0f60\3\2\2\2\u0f5e\u0f5c\3\2\2\2\u0f5e\u0f5f\3\2\2\2")
        buf.write("\u0f5f\u0213\3\2\2\2\u0f60\u0f5e\3\2\2\2\u0f61\u0f64\5")
        buf.write("\u021a\u010e\2\u0f62\u0f64\5\u0216\u010c\2\u0f63\u0f61")
        buf.write("\3\2\2\2\u0f63\u0f62\3\2\2\2\u0f64\u0215\3\2\2\2\u0f65")
        buf.write("\u0f67\5\u0294\u014b\2\u0f66\u0f65\3\2\2\2\u0f66\u0f67")
        buf.write("\3\2\2\2\u0f67\u0f68\3\2\2\2\u0f68\u0f69\7/\2\2\u0f69")
        buf.write("\u0f6b\5\u0220\u0111\2\u0f6a\u0f6c\5\u0218\u010d\2\u0f6b")
        buf.write("\u0f6a\3\2\2\2\u0f6c\u0f6d\3\2\2\2\u0f6d\u0f6b\3\2\2\2")
        buf.write("\u0f6d\u0f6e\3\2\2\2\u0f6e\u0f70\3\2\2\2\u0f6f\u0f71\5")
        buf.write("\u021e\u0110\2\u0f70\u0f6f\3\2\2\2\u0f70\u0f71\3\2\2\2")
        buf.write("\u0f71\u0f72\3\2\2\2\u0f72\u0f74\7{\2\2\u0f73\u0f75\7")
        buf.write("/\2\2\u0f74\u0f73\3\2\2\2\u0f74\u0f75\3\2\2\2\u0f75\u0f77")
        buf.write("\3\2\2\2\u0f76\u0f78\5\u0294\u014b\2\u0f77\u0f76\3\2\2")
        buf.write("\2\u0f77\u0f78\3\2\2\2\u0f78\u0217\3\2\2\2\u0f79\u0f7a")
        buf.write("\7\u01a9\2\2\u0f7a\u0f7b\5\u01f0\u00f9\2\u0f7b\u0f7e\7")
        buf.write("\u017b\2\2\u0f7c\u0f7f\5\u00e0q\2\u0f7d\u0f7f\5\u01f0")
        buf.write("\u00f9\2\u0f7e\u0f7c\3\2\2\2\u0f7e\u0f7d\3\2\2\2\u0f7f")
        buf.write("\u0219\3\2\2\2\u0f80\u0f82\5\u0294\u014b\2\u0f81\u0f80")
        buf.write("\3\2\2\2\u0f81\u0f82\3\2\2\2\u0f82\u0f83\3\2\2\2\u0f83")
        buf.write("\u0f85\7/\2\2\u0f84\u0f86\5\u021c\u010f\2\u0f85\u0f84")
        buf.write("\3\2\2\2\u0f86\u0f87\3\2\2\2\u0f87\u0f85\3\2\2\2\u0f87")
        buf.write("\u0f88\3\2\2\2\u0f88\u0f8a\3\2\2\2\u0f89\u0f8b\5\u021e")
        buf.write("\u0110\2\u0f8a\u0f89\3\2\2\2\u0f8a\u0f8b\3\2\2\2\u0f8b")
        buf.write("\u0f8c\3\2\2\2\u0f8c\u0f8e\7{\2\2\u0f8d\u0f8f\7/\2\2\u0f8e")
        buf.write("\u0f8d\3\2\2\2\u0f8e\u0f8f\3\2\2\2\u0f8f\u0f91\3\2\2\2")
        buf.write("\u0f90\u0f92\5\u0294\u014b\2\u0f91\u0f90\3\2\2\2\u0f91")
        buf.write("\u0f92\3\2\2\2\u0f92\u021b\3\2\2\2\u0f93\u0f94\7\u01a9")
        buf.write("\2\2\u0f94\u0f95\5\u01f0\u00f9\2\u0f95\u0f98\7\u017b\2")
        buf.write("\2\u0f96\u0f99\5\u00e0q\2\u0f97\u0f99\5\u01f0\u00f9\2")
        buf.write("\u0f98\u0f96\3\2\2\2\u0f98\u0f97\3\2\2\2\u0f99\u021d\3")
        buf.write("\2\2\2\u0f9a\u0f9d\7v\2\2\u0f9b\u0f9e\5\u00e0q\2\u0f9c")
        buf.write("\u0f9e\5\u01f0\u00f9\2\u0f9d\u0f9b\3\2\2\2\u0f9d\u0f9c")
        buf.write("\3\2\2\2\u0f9e\u021f\3\2\2\2\u0f9f\u0fa0\5\u02ce\u0168")
        buf.write("\2\u0fa0\u0fa1\5\u02e4\u0173\2\u0fa1\u0fb1\3\2\2\2\u0fa2")
        buf.write("\u0fb1\5\u02ca\u0166\2\u0fa3\u0fb1\5\u02d0\u0169\2\u0fa4")
        buf.write("\u0fb1\5\u02cc\u0167\2\u0fa5\u0fa6\7\u01ec\2\2\u0fa6\u0fa7")
        buf.write("\5\u0220\u0111\2\u0fa7\u0fa8\7\u01ed\2\2\u0fa8\u0fb1\3")
        buf.write("\2\2\2\u0fa9\u0faa\7\u01ec\2\2\u0faa\u0fab\5\u013e\u00a0")
        buf.write("\2\u0fab\u0fac\7\u01ed\2\2\u0fac\u0faf\3\2\2\2\u0fad\u0faf")
        buf.write("\5\u01ec\u00f7\2\u0fae\u0fa9\3\2\2\2\u0fae\u0fad\3\2\2")
        buf.write("\2\u0faf\u0fb1\3\2\2\2\u0fb0\u0f9f\3\2\2\2\u0fb0\u0fa2")
        buf.write("\3\2\2\2\u0fb0\u0fa3\3\2\2\2\u0fb0\u0fa4\3\2\2\2\u0fb0")
        buf.write("\u0fa5\3\2\2\2\u0fb0\u0fae\3\2\2\2\u0fb1\u0221\3\2\2\2")
        buf.write("\u0fb2\u0fb4\5\u01f0\u00f9\2\u0fb3\u0fb5\5\u0224\u0113")
        buf.write("\2\u0fb4\u0fb3\3\2\2\2\u0fb4\u0fb5\3\2\2\2\u0fb5\u0223")
        buf.write("\3\2\2\2\u0fb6\u0fb7\7\u01f2\2\2\u0fb7\u0fbc\5\u01f0\u00f9")
        buf.write("\2\u0fb8\u0fb9\7\u01f2\2\2\u0fb9\u0fbb\5\u01f0\u00f9\2")
        buf.write("\u0fba\u0fb8\3\2\2\2\u0fbb\u0fbe\3\2\2\2\u0fbc\u0fba\3")
        buf.write("\2\2\2\u0fbc\u0fbd\3\2\2\2\u0fbd\u0225\3\2\2\2\u0fbe\u0fbc")
        buf.write("\3\2\2\2\u0fbf\u0fc8\t\63\2\2\u0fc0\u0fc1\7\u01ec\2\2")
        buf.write("\u0fc1\u0fc2\5\u013e\u00a0\2\u0fc2\u0fc3\7\u01ed\2\2\u0fc3")
        buf.write("\u0fc9\3\2\2\2\u0fc4\u0fc5\7\u01ec\2\2\u0fc5\u0fc6\5\u01f0")
        buf.write("\u00f9\2\u0fc6\u0fc7\7\u01ed\2\2\u0fc7\u0fc9\3\2\2\2\u0fc8")
        buf.write("\u0fc0\3\2\2\2\u0fc8\u0fc4\3\2\2\2\u0fc9\u0227\3\2\2\2")
        buf.write("\u0fca\u10f4\5\u022a\u0116\2\u0fcb\u0fcc\5\u02e6\u0174")
        buf.write("\2\u0fcc\u0fce\5\u02bc\u015f\2\u0fcd\u0fcf\5\u023a\u011e")
        buf.write("\2\u0fce\u0fcd\3\2\2\2\u0fce\u0fcf\3\2\2\2\u0fcf\u10f4")
        buf.write("\3\2\2\2\u0fd0\u0fd1\t\64\2\2\u0fd1\u0fd8\7\u01ec\2\2")
        buf.write("\u0fd2\u0fd3\7\u00e6\2\2\u0fd3\u0fd4\7\u01ec\2\2\u0fd4")
        buf.write("\u0fd5\5\u013e\u00a0\2\u0fd5\u0fd6\7\u01ed\2\2\u0fd6\u0fd9")
        buf.write("\3\2\2\2\u0fd7\u0fd9\5\u0200\u0101\2\u0fd8\u0fd2\3\2\2")
        buf.write("\2\u0fd8\u0fd7\3\2\2\2\u0fd9\u0fda\3\2\2\2\u0fda\u0fdb")
        buf.write("\7\17\2\2\u0fdb\u0fdc\5\u02c2\u0162\2\u0fdc\u0fdd\7\u01ed")
        buf.write("\2\2\u0fdd\u10f4\3\2\2\2\u0fde\u0fdf\7\65\2\2\u0fdf\u0fe0")
        buf.write("\7\u01ec\2\2\u0fe0\u0fe1\5\u0200\u0101\2\u0fe1\u0fe2\7")
        buf.write("\u019b\2\2\u0fe2\u0fe3\7\u00ed\2\2\u0fe3\u0fe4\7\u01ed")
        buf.write("\2\2\u0fe4\u10f4\3\2\2\2\u0fe5\u0fe6\79\2\2\u0fe6\u0fe8")
        buf.write("\7\u01ec\2\2\u0fe7\u0fe9\t\65\2\2\u0fe8\u0fe7\3\2\2\2")
        buf.write("\u0fe8\u0fe9\3\2\2\2\u0fe9\u0fea\3\2\2\2\u0fea\u0fec\5")
        buf.write("\u0200\u0101\2\u0feb\u0fed\5\u023e\u0120\2\u0fec\u0feb")
        buf.write("\3\2\2\2\u0fec\u0fed\3\2\2\2\u0fed\u0fee\3\2\2\2\u0fee")
        buf.write("\u0fef\7\u01ed\2\2\u0fef\u10f4\3\2\2\2\u0ff0\u0ff1\5\u022e")
        buf.write("\u0118\2\u0ff1\u0ff3\5\u02b8\u015d\2\u0ff2\u0ff4\5\u0240")
        buf.write("\u0121\2\u0ff3\u0ff2\3\2\2\2\u0ff4\u0ff5\3\2\2\2\u0ff5")
        buf.write("\u0ff3\3\2\2\2\u0ff5\u0ff6\3\2\2\2\u0ff6\u10f4\3\2\2\2")
        buf.write("\u0ff7\u0ff8\7b\2\2\u0ff8\u0ff9\7\u01ec\2\2\u0ff9\u0ffb")
        buf.write("\5\u0200\u0101\2\u0ffa\u0ffc\t\66\2\2\u0ffb\u0ffa\3\2")
        buf.write("\2\2\u0ffb\u0ffc\3\2\2\2\u0ffc\u0ffd\3\2\2\2\u0ffd\u0ffe")
        buf.write("\7\u01ed\2\2\u0ffe\u10f4\3\2\2\2\u0fff\u1000\7\u008c\2")
        buf.write("\2\u1000\u1001\7\u01ec\2\2\u1001\u1002\5\u02e6\u0174\2")
        buf.write("\u1002\u1003\7\u0099\2\2\u1003\u1004\5\u0200\u0101\2\u1004")
        buf.write("\u1005\7\u01ed\2\2\u1005\u10f4\3\2\2\2\u1006\u1007\t\67")
        buf.write("\2\2\u1007\u1009\5\u02ba\u015e\2\u1008\u100a\5\u02be\u0160")
        buf.write("\2\u1009\u1008\3\2\2\2\u1009\u100a\3\2\2\2\u100a\u100b")
        buf.write("\3\2\2\2\u100b\u100c\5\u0232\u011a\2\u100c\u10f4\3\2\2")
        buf.write("\2\u100d\u100e\5\u0230\u0119\2\u100e\u100f\7\u01ec\2\2")
        buf.write("\u100f\u1014\5\u01f0\u00f9\2\u1010\u1011\7\u01f2\2\2\u1011")
        buf.write("\u1013\5\u01f0\u00f9\2\u1012\u1010\3\2\2\2\u1013\u1016")
        buf.write("\3\2\2\2\u1014\u1012\3\2\2\2\u1014\u1015\3\2\2\2\u1015")
        buf.write("\u1018\3\2\2\2\u1016\u1014\3\2\2\2\u1017\u1019\5\u0242")
        buf.write("\u0122\2\u1018\u1017\3\2\2\2\u1018\u1019\3\2\2\2\u1019")
        buf.write("\u101b\3\2\2\2\u101a\u101c\5\u023a\u011e\2\u101b\u101a")
        buf.write("\3\2\2\2\u101b\u101c\3\2\2\2\u101c\u101d\3\2\2\2\u101d")
        buf.write("\u101e\7\u01ed\2\2\u101e\u10f4\3\2\2\2\u101f\u1020\7\u0188")
        buf.write("\2\2\u1020\u1021\7\u01ec\2\2\u1021\u1024\5\u01f0\u00f9")
        buf.write("\2\u1022\u1023\7\u019b\2\2\u1023\u1025\t8\2\2\u1024\u1022")
        buf.write("\3\2\2\2\u1024\u1025\3\2\2\2\u1025\u102a\3\2\2\2\u1026")
        buf.write("\u1027\7\u01f2\2\2\u1027\u1029\5\u01f0\u00f9\2\u1028\u1026")
        buf.write("\3\2\2\2\u1029\u102c\3\2\2\2\u102a\u1028\3\2\2\2\u102a")
        buf.write("\u102b\3\2\2\2\u102b\u102d\3\2\2\2\u102c\u102a\3\2\2\2")
        buf.write("\u102d\u102e\7\u01ed\2\2\u102e\u10f4\3\2\2\2\u102f\u1030")
        buf.write("\7\u0189\2\2\u1030\u1031\7\u01ec\2\2\u1031\u1032\5\u01f0")
        buf.write("\u00f9\2\u1032\u1034\7\17\2\2\u1033\u1035\7\u0130\2\2")
        buf.write("\u1034\u1033\3\2\2\2\u1034\u1035\3\2\2\2\u1035\u1036\3")
        buf.write("\2\2\2\u1036\u1037\5\u02c2\u0162\2\u1037\u1038\7\u01ed")
        buf.write("\2\2\u1038\u10f4\3\2\2\2\u1039\u103a\7\u018b\2\2\u103a")
        buf.write("\u1042\7\u01ec\2\2\u103b\u103d\t9\2\2\u103c\u103b\3\2")
        buf.write("\2\2\u103c\u103d\3\2\2\2\u103d\u103f\3\2\2\2\u103e\u1040")
        buf.write("\5\u02d6\u016c\2\u103f\u103e\3\2\2\2\u103f\u1040\3\2\2")
        buf.write("\2\u1040\u1041\3\2\2\2\u1041\u1043\7\u0099\2\2\u1042\u103c")
        buf.write("\3\2\2\2\u1042\u1043\3\2\2\2\u1043\u1044\3\2\2\2\u1044")
        buf.write("\u1045\5\u0200\u0101\2\u1045\u1046\7\u01ed\2\2\u1046\u10f4")
        buf.write("\3\2\2\2\u1047\u1048\7\u01b2\2\2\u1048\u1049\7\u01ec\2")
        buf.write("\2\u1049\u104b\5\u01f0\u00f9\2\u104a\u104c\5\u019a\u00ce")
        buf.write("\2\u104b\u104a\3\2\2\2\u104b\u104c\3\2\2\2\u104c\u104d")
        buf.write("\3\2\2\2\u104d\u1050\7\u01ed\2\2\u104e\u104f\7\u01e5\2")
        buf.write("\2\u104f\u1051\5\u02cc\u0167\2\u1050\u104e\3\2\2\2\u1050")
        buf.write("\u1051\3\2\2\2\u1051\u10f4\3\2\2\2\u1052\u1053\t:\2\2")
        buf.write("\u1053\u1054\7\u01ec\2\2\u1054\u1059\5\u024e\u0128\2\u1055")
        buf.write("\u1056\7\u01f2\2\2\u1056\u1058\5\u024e\u0128\2\u1057\u1055")
        buf.write("\3\2\2\2\u1058\u105b\3\2\2\2\u1059\u1057\3\2\2\2\u1059")
        buf.write("\u105a\3\2\2\2\u105a\u105c\3\2\2\2\u105b\u1059\3\2\2\2")
        buf.write("\u105c\u105f\7\u01ed\2\2\u105d\u105e\7\u01e5\2\2\u105e")
        buf.write("\u1060\5\u02cc\u0167\2\u105f\u105d\3\2\2\2\u105f\u1060")
        buf.write("\3\2\2\2\u1060\u10f4\3\2\2\2\u1061\u1062\7\u01b6\2\2\u1062")
        buf.write("\u1064\7\u01ec\2\2\u1063\u1065\t;\2\2\u1064\u1063\3\2")
        buf.write("\2\2\u1064\u1065\3\2\2\2\u1065\u1067\3\2\2\2\u1066\u1068")
        buf.write("\t<\2\2\u1067\u1066\3\2\2\2\u1067\u1068\3\2\2\2\u1068")
        buf.write("\u1069\3\2\2\2\u1069\u106c\5\u01f0\u00f9\2\u106a\u106b")
        buf.write("\7\u01f2\2\2\u106b\u106d\5\u0246\u0124\2\u106c\u106a\3")
        buf.write("\2\2\2\u106c\u106d\3\2\2\2\u106d\u1075\3\2\2\2\u106e\u106f")
        buf.write("\7\u01f2\2\2\u106f\u1071\5\u01f0\u00f9\2\u1070\u1072\5")
        buf.write("\u0268\u0135\2\u1071\u1070\3\2\2\2\u1071\u1072\3\2\2\2")
        buf.write("\u1072\u1074\3\2\2\2\u1073\u106e\3\2\2\2\u1074\u1077\3")
        buf.write("\2\2\2\u1075\u1073\3\2\2\2\u1075\u1076\3\2\2\2\u1076\u1078")
        buf.write("\3\2\2\2\u1077\u1075\3\2\2\2\u1078\u107b\7\u01ed\2\2\u1079")
        buf.write("\u107a\7\u01e5\2\2\u107a\u107c\5\u02cc\u0167\2\u107b\u1079")
        buf.write("\3\2\2\2\u107b\u107c\3\2\2\2\u107c\u10f4\3\2\2\2\u107d")
        buf.write("\u107e\7\u01b7\2\2\u107e\u107f\7\u01ec\2\2\u107f\u1081")
        buf.write("\5\u01f0\u00f9\2\u1080\u1082\5\u0244\u0123\2\u1081\u1080")
        buf.write("\3\2\2\2\u1081\u1082\3\2\2\2\u1082\u1083\3\2\2\2\u1083")
        buf.write("\u1084\7\u01ed\2\2\u1084\u10f4\3\2\2\2\u1085\u1086\7\u01ba")
        buf.write("\2\2\u1086\u1087\7\u01ec\2\2\u1087\u1088\t=\2\2\u1088")
        buf.write("\u108a\5\u0200\u0101\2\u1089\u108b\7\u01a8\2\2\u108a\u1089")
        buf.write("\3\2\2\2\u108a\u108b\3\2\2\2\u108b\u108c\3\2\2\2\u108c")
        buf.write("\u108f\7\u01ed\2\2\u108d\u108e\7\u01e5\2\2\u108e\u1090")
        buf.write("\5\u02cc\u0167\2\u108f\u108d\3\2\2\2\u108f\u1090\3\2\2")
        buf.write("\2\u1090\u10f4\3\2\2\2\u1091\u1092\7\u01bb\2\2\u1092\u1097")
        buf.write("\7\u01ec\2\2\u1093\u1094\7\u00e7\2\2\u1094\u1098\5\u02d8")
        buf.write("\u016d\2\u1095\u1096\7\u0080\2\2\u1096\u1098\5\u0200\u0101")
        buf.write("\2\u1097\u1093\3\2\2\2\u1097\u1095\3\2\2\2\u1098\u109b")
        buf.write("\3\2\2\2\u1099\u109a\7\u01f2\2\2\u109a\u109c\5\u0200\u0101")
        buf.write("\2\u109b\u1099\3\2\2\2\u109b\u109c\3\2\2\2\u109c\u109d")
        buf.write("\3\2\2\2\u109d\u10a0\7\u01ed\2\2\u109e\u109f\7\u01e5\2")
        buf.write("\2\u109f\u10a1\5\u02cc\u0167\2\u10a0\u109e\3\2\2\2\u10a0")
        buf.write("\u10a1\3\2\2\2\u10a1\u10f4\3\2\2\2\u10a2\u10a3\7\u01bc")
        buf.write("\2\2\u10a3\u10a4\7\u01ec\2\2\u10a4\u10a6\5\u0200\u0101")
        buf.write("\2\u10a5\u10a7\5\u0244\u0123\2\u10a6\u10a5\3\2\2\2\u10a6")
        buf.write("\u10a7\3\2\2\2\u10a7\u10a8\3\2\2\2\u10a8\u10a9\7\u013c")
        buf.write("\2\2\u10a9\u10ad\7G\2\2\u10aa\u10ab\7\u00fe\2\2\u10ab")
        buf.write("\u10ac\7\u0108\2\2\u10ac\u10ae\7x\2\2\u10ad\u10aa\3\2")
        buf.write("\2\2\u10ad\u10ae\3\2\2\2\u10ae\u10af\3\2\2\2\u10af\u10b2")
        buf.write("\7\u01ed\2\2\u10b0\u10b1\7\u01e5\2\2\u10b1\u10b3\5\u02cc")
        buf.write("\u0167\2\u10b2\u10b0\3\2\2\2\u10b2\u10b3\3\2\2\2\u10b3")
        buf.write("\u10f4\3\2\2\2\u10b4\u10b5\7\u01bd\2\2\u10b5\u10b6\7\u01ec")
        buf.write("\2\2\u10b6\u10b9\5\u0200\u0101\2\u10b7\u10b8\7\u01f2\2")
        buf.write("\2\u10b8\u10ba\5\u0250\u0129\2\u10b9\u10b7\3\2\2\2\u10b9")
        buf.write("\u10ba\3\2\2\2\u10ba\u10bd\3\2\2\2\u10bb\u10bc\7\u01f2")
        buf.write("\2\2\u10bc\u10be\5\u0252\u012a\2\u10bd\u10bb\3\2\2\2\u10bd")
        buf.write("\u10be\3\2\2\2\u10be\u10bf\3\2\2\2\u10bf\u10c2\7\u01ed")
        buf.write("\2\2\u10c0\u10c1\7\u01e5\2\2\u10c1\u10c3\5\u02cc\u0167")
        buf.write("\2\u10c2\u10c0\3\2\2\2\u10c2\u10c3\3\2\2\2\u10c3\u10f4")
        buf.write("\3\2\2\2\u10c4\u10c5\7\u01be\2\2\u10c5\u10c6\7\u01ec\2")
        buf.write("\2\u10c6\u10c7\t=\2\2\u10c7\u10ca\5\u0200\u0101\2\u10c8")
        buf.write("\u10c9\7\17\2\2\u10c9\u10cb\5\u02c2\u0162\2\u10ca\u10c8")
        buf.write("\3\2\2\2\u10ca\u10cb\3\2\2\2\u10cb\u10cd\3\2\2\2\u10cc")
        buf.write("\u10ce\5\u0254\u012b\2\u10cd\u10cc\3\2\2\2\u10cd\u10ce")
        buf.write("\3\2\2\2\u10ce\u10d0\3\2\2\2\u10cf\u10d1\5\u0256\u012c")
        buf.write("\2\u10d0\u10cf\3\2\2\2\u10d0\u10d1\3\2\2\2\u10d1\u10d3")
        buf.write("\3\2\2\2\u10d2\u10d4\5\u0258\u012d\2\u10d3\u10d2\3\2\2")
        buf.write("\2\u10d3\u10d4\3\2\2\2\u10d4\u10d7\3\2\2\2\u10d5\u10d6")
        buf.write("\t>\2\2\u10d6\u10d8\7e\2\2\u10d7\u10d5\3\2\2\2\u10d7\u10d8")
        buf.write("\3\2\2\2\u10d8\u10d9\3\2\2\2\u10d9\u10dc\7\u01ed\2\2\u10da")
        buf.write("\u10db\7\u01e5\2\2\u10db\u10dd\5\u02cc\u0167\2\u10dc\u10da")
        buf.write("\3\2\2\2\u10dc\u10dd\3\2\2\2\u10dd\u10f4\3\2\2\2\u10de")
        buf.write("\u10df\7\u01bf\2\2\u10df\u10e1\7\u01ec\2\2\u10e0\u10e2")
        buf.write("\5\u0248\u0125\2\u10e1\u10e0\3\2\2\2\u10e1\u10e2\3\2\2")
        buf.write("\2\u10e2\u10e3\3\2\2\2\u10e3\u10e5\5\u0200\u0101\2\u10e4")
        buf.write("\u10e6\5\u0244\u0123\2\u10e5\u10e4\3\2\2\2\u10e5\u10e6")
        buf.write("\3\2\2\2\u10e6\u10ec\3\2\2\2\u10e7\u10e8\7:\2\2\u10e8")
        buf.write("\u10e9\5\u024a\u0126\2\u10e9\u10ea\7\u01f2\2\2\u10ea\u10eb")
        buf.write("\5\u024a\u0126\2\u10eb\u10ed\3\2\2\2\u10ec\u10e7\3\2\2")
        buf.write("\2\u10ec\u10ed\3\2\2\2\u10ed\u10ee\3\2\2\2\u10ee\u10f1")
        buf.write("\7\u01ed\2\2\u10ef\u10f0\7\u01e5\2\2\u10f0\u10f2\5\u02cc")
        buf.write("\u0167\2\u10f1\u10ef\3\2\2\2\u10f1\u10f2\3\2\2\2\u10f2")
        buf.write("\u10f4\3\2\2\2\u10f3\u0fca\3\2\2\2\u10f3\u0fcb\3\2\2\2")
        buf.write("\u10f3\u0fd0\3\2\2\2\u10f3\u0fde\3\2\2\2\u10f3\u0fe5\3")
        buf.write("\2\2\2\u10f3\u0ff0\3\2\2\2\u10f3\u0ff7\3\2\2\2\u10f3\u0fff")
        buf.write("\3\2\2\2\u10f3\u1006\3\2\2\2\u10f3\u100d\3\2\2\2\u10f3")
        buf.write("\u101f\3\2\2\2\u10f3\u102f\3\2\2\2\u10f3\u1039\3\2\2\2")
        buf.write("\u10f3\u1047\3\2\2\2\u10f3\u1052\3\2\2\2\u10f3\u1061\3")
        buf.write("\2\2\2\u10f3\u107d\3\2\2\2\u10f3\u1085\3\2\2\2\u10f3\u1091")
        buf.write("\3\2\2\2\u10f3\u10a2\3\2\2\2\u10f3\u10b4\3\2\2\2\u10f3")
        buf.write("\u10c4\3\2\2\2\u10f3\u10de\3\2\2\2\u10f4\u0229\3\2\2\2")
        buf.write("\u10f5\u10f6\5\u022c\u0117\2\u10f6\u10f8\5\u02ba\u015e")
        buf.write("\2\u10f7\u10f9\5\u0232\u011a\2\u10f8\u10f7\3\2\2\2\u10f8")
        buf.write("\u10f9\3\2\2\2\u10f9\u1108\3\2\2\2\u10fa\u10fb\7N\2\2")
        buf.write("\u10fb\u1101\7\u01ec\2\2\u10fc\u1102\7\u01ef\2\2\u10fd")
        buf.write("\u10ff\t!\2\2\u10fe\u10fd\3\2\2\2\u10fe\u10ff\3\2\2\2")
        buf.write("\u10ff\u1100\3\2\2\2\u1100\u1102\5\u0200\u0101\2\u1101")
        buf.write("\u10fc\3\2\2\2\u1101\u10fe\3\2\2\2\u1102\u1103\3\2\2\2")
        buf.write("\u1103\u1105\7\u01ed\2\2\u1104\u1106\5\u0232\u011a\2\u1105")
        buf.write("\u1104\3\2\2\2\u1105\u1106\3\2\2\2\u1106\u1108\3\2\2\2")
        buf.write("\u1107\u10f5\3\2\2\2\u1107\u10fa\3\2\2\2\u1108\u022b\3")
        buf.write("\2\2\2\u1109\u110a\t?\2\2\u110a\u022d\3\2\2\2\u110b\u110c")
        buf.write("\t@\2\2\u110c\u022f\3\2\2\2\u110d\u110e\tA\2\2\u110e\u0231")
        buf.write("\3\2\2\2\u110f\u1110\7\u0113\2\2\u1110\u1112\7\u01ec\2")
        buf.write("\2\u1111\u1113\5\u0156\u00ac\2\u1112\u1111\3\2\2\2\u1112")
        buf.write("\u1113\3\2\2\2\u1113\u1118\3\2\2\2\u1114\u1116\5\u019a")
        buf.write("\u00ce\2\u1115\u1117\5\u0234\u011b\2\u1116\u1115\3\2\2")
        buf.write("\2\u1116\u1117\3\2\2\2\u1117\u1119\3\2\2\2\u1118\u1114")
        buf.write("\3\2\2\2\u1118\u1119\3\2\2\2\u1119\u111a\3\2\2\2\u111a")
        buf.write("\u111b\7\u01ed\2\2\u111b\u0233\3\2\2\2\u111c\u1123\5\u0236")
        buf.write("\u011c\2\u111d\u111e\7\34\2\2\u111e\u111f\5\u0238\u011d")
        buf.write("\2\u111f\u1120\7\f\2\2\u1120\u1121\5\u0238\u011d\2\u1121")
        buf.write("\u1124\3\2\2\2\u1122\u1124\5\u0238\u011d\2\u1123\u111d")
        buf.write("\3\2\2\2\u1123\u1122\3\2\2\2\u1124\u0235\3\2\2\2\u1125")
        buf.write("\u1126\tB\2\2\u1126\u0237\3\2\2\2\u1127\u1128\7\u018f")
        buf.write("\2\2\u1128\u112f\7\u0125\2\2\u1129\u112a\7R\2\2\u112a")
        buf.write("\u112f\7\u0143\2\2\u112b\u112c\5\u0200\u0101\2\u112c\u112d")
        buf.write("\tC\2\2\u112d\u112f\3\2\2\2\u112e\u1127\3\2\2\2\u112e")
        buf.write("\u1129\3\2\2\2\u112e\u112b\3\2\2\2\u112f\u0239\3\2\2\2")
        buf.write("\u1130\u113a\7\u019b\2\2\u1131\u113b\7\u01ef\2\2\u1132")
        buf.write("\u1137\5\u023c\u011f\2\u1133\u1134\7\u01f2\2\2\u1134\u1136")
        buf.write("\5\u023c\u011f\2\u1135\u1133\3\2\2\2\u1136\u1139\3\2\2")
        buf.write("\2\u1137\u1135\3\2\2\2\u1137\u1138\3\2\2\2\u1138\u113b")
        buf.write("\3\2\2\2\u1139\u1137\3\2\2\2\u113a\u1131\3\2\2\2\u113a")
        buf.write("\u1132\3\2\2\2\u113b\u023b\3\2\2\2\u113c\u113e\7\u00a7")
        buf.write("\2\2\u113d\u113f\7\u0111\2\2\u113e\u113d\3\2\2\2\u113e")
        buf.write("\u113f\3\2\2\2\u113f\u1142\3\2\2\2\u1140\u1142\7\u0111")
        buf.write("\2\2\u1141\u113c\3\2\2\2\u1141\u1140\3\2\2\2\u1141\u1142")
        buf.write("\3\2\2\2\u1142\u1143\3\2\2\2\u1143\u1145\5\u0144\u00a3")
        buf.write("\2\u1144\u1146\5\u0268\u0135\2\u1145\u1144\3\2\2\2\u1145")
        buf.write("\u1146\3\2\2\2\u1146\u023d\3\2\2\2\u1147\u1148\7\u010e")
        buf.write("\2\2\u1148\u1149\7(\2\2\u1149\u114a\5\u0200\u0101\2\u114a")
        buf.write("\u023f\3\2\2\2\u114b\u114c\7\u01ae\2\2\u114c\u114d\7\u009e")
        buf.write("\2\2\u114d\u114e\7\u01ec\2\2\u114e\u114f\5\u019a\u00ce")
        buf.write("\2\u114f\u1150\7\u01ed\2\2\u1150\u1153\3\2\2\2\u1151\u1153")
        buf.write("\5\u0232\u011a\2\u1152\u114b\3\2\2\2\u1152\u1151\3\2\2")
        buf.write("\2\u1153\u0241\3\2\2\2\u1154\u1166\7M\2\2\u1155\u1157")
        buf.write("\7\u00e3\2\2\u1156\u1158\7\26\2\2\u1157\u1156\3\2\2\2")
        buf.write("\u1157\u1158\3\2\2\2\u1158\u1167\3\2\2\2\u1159\u115a\7")
        buf.write("\u01ec\2\2\u115a\u115f\5\u0276\u013c\2\u115b\u115c\7\u01f2")
        buf.write("\2\2\u115c\u115e\5\u0276\u013c\2\u115d\u115b\3\2\2\2\u115e")
        buf.write("\u1161\3\2\2\2\u115f\u115d\3\2\2\2\u115f\u1160\3\2\2\2")
        buf.write("\u1160\u1162\3\2\2\2\u1161\u115f\3\2\2\2\u1162\u1163\7")
        buf.write("\u01ed\2\2\u1163\u1164\7\u019e\2\2\u1164\u1165\5\u01ec")
        buf.write("\u00f7\2\u1165\u1167\3\2\2\2\u1166\u1155\3\2\2\2\u1166")
        buf.write("\u1159\3\2\2\2\u1167\u0243\3\2\2\2\u1168\u116b\7\u011a")
        buf.write("\2\2\u1169\u116a\7(\2\2\u116a\u116c\7\u019d\2\2\u116b")
        buf.write("\u1169\3\2\2\2\u116b\u116c\3\2\2\2\u116c\u116d\3\2\2\2")
        buf.write("\u116d\u116f\5\u01f0\u00f9\2\u116e\u1170\5\u0268\u0135")
        buf.write("\2\u116f\u116e\3\2\2\2\u116f\u1170\3\2\2\2\u1170\u1171")
        buf.write("\3\2\2\2\u1171\u1172\7\u01f2\2\2\u1172\u1174\5\u01f0\u00f9")
        buf.write("\2\u1173\u1175\5\u0268\u0135\2\u1174\u1173\3\2\2\2\u1174")
        buf.write("\u1175\3\2\2\2\u1175\u0245\3\2\2\2\u1176\u1177\7\u01b3")
        buf.write("\2\2\u1177\u1179\7\u01ec\2\2\u1178\u117a\t;\2\2\u1179")
        buf.write("\u1178\3\2\2\2\u1179\u117a\3\2\2\2\u117a\u117c\3\2\2\2")
        buf.write("\u117b\u117d\tD\2\2\u117c\u117b\3\2\2\2\u117c\u117d\3")
        buf.write("\2\2\2\u117d\u117e\3\2\2\2\u117e\u1183\5\u024e\u0128\2")
        buf.write("\u117f\u1180\7\u01f2\2\2\u1180\u1182\5\u024e\u0128\2\u1181")
        buf.write("\u117f\3\2\2\2\u1182\u1185\3\2\2\2\u1183\u1181\3\2\2\2")
        buf.write("\u1183\u1184\3\2\2\2\u1184\u1186\3\2\2\2\u1185\u1183\3")
        buf.write("\2\2\2\u1186\u1187\7\u01ed\2\2\u1187\u0247\3\2\2\2\u1188")
        buf.write("\u1189\7\u01b9\2\2\u1189\u118d\7\u01ec\2\2\u118a\u118b")
        buf.write("\5\u0200\u0101\2\u118b\u118c\5\u0268\u0135\2\u118c\u118e")
        buf.write("\3\2\2\2\u118d\u118a\3\2\2\2\u118d\u118e\3\2\2\2\u118e")
        buf.write("\u1195\3\2\2\2\u118f\u1190\7\u01f2\2\2\u1190\u1191\5\u0200")
        buf.write("\u0101\2\u1191\u1192\5\u0268\u0135\2\u1192\u1194\3\2\2")
        buf.write("\2\u1193\u118f\3\2\2\2\u1194\u1197\3\2\2\2\u1195\u1193")
        buf.write("\3\2\2\2\u1195\u1196\3\2\2\2\u1196\u1199\3\2\2\2\u1197")
        buf.write("\u1195\3\2\2\2\u1198\u119a\5\u024c\u0127\2\u1199\u1198")
        buf.write("\3\2\2\2\u1199\u119a\3\2\2\2\u119a\u119b\3\2\2\2\u119b")
        buf.write("\u119c\7\u01ed\2\2\u119c\u0249\3\2\2\2\u119d\u11a8\5\u0274")
        buf.write("\u013b\2\u119e\u119f\7\u0096\2\2\u119f\u11a9\7\u010f\2")
        buf.write("\2\u11a0\u11a3\5\u02c2\u0162\2\u11a1\u11a2\7\u011b\2\2")
        buf.write("\u11a2\u11a4\5\u0200\u0101\2\u11a3\u11a1\3\2\2\2\u11a3")
        buf.write("\u11a4\3\2\2\2\u11a4\u11a6\3\2\2\2\u11a5\u11a7\5\u024c")
        buf.write("\u0127\2\u11a6\u11a5\3\2\2\2\u11a6\u11a7\3\2\2\2\u11a7")
        buf.write("\u11a9\3\2\2\2\u11a8\u119e\3\2\2\2\u11a8\u11a0\3\2\2\2")
        buf.write("\u11a9\u024b\3\2\2\2\u11aa\u11ab\7d\2\2\u11ab\u11ac\5")
        buf.write("\u0200\u0101\2\u11ac\u024d\3\2\2\2\u11ad\u11b4\5\u01f0")
        buf.write("\u00f9\2\u11ae\u11b2\7\17\2\2\u11af\u11b3\5\u02da\u016e")
        buf.write("\2\u11b0\u11b1\7\u0080\2\2\u11b1\u11b3\5\u0200\u0101\2")
        buf.write("\u11b2\u11af\3\2\2\2\u11b2\u11b0\3\2\2\2\u11b3\u11b5\3")
        buf.write("\2\2\2\u11b4\u11ae\3\2\2\2\u11b4\u11b5\3\2\2\2\u11b5\u024f")
        buf.write("\3\2\2\2\u11b6\u11ba\7\u01a4\2\2\u11b7\u11b8\7\u00f1\2")
        buf.write("\2\u11b8\u11bb\7\u019d\2\2\u11b9\u11bb\5\u01f0\u00f9\2")
        buf.write("\u11ba\u11b7\3\2\2\2\u11ba\u11b9\3\2\2\2\u11bb\u0251\3")
        buf.write("\2\2\2\u11bc\u11c2\7\u016b\2\2\u11bd\u11c3\7\u01c1\2\2")
        buf.write("\u11be\u11c0\7\u00f1\2\2\u11bf\u11c1\7\u019d\2\2\u11c0")
        buf.write("\u11bf\3\2\2\2\u11c0\u11c1\3\2\2\2\u11c1\u11c3\3\2\2\2")
        buf.write("\u11c2\u11bd\3\2\2\2\u11c2\u11be\3\2\2\2\u11c3\u0253\3")
        buf.write("\2\2\2\u11c4\u11c5\7z\2\2\u11c5\u11c6\5\u0200\u0101\2")
        buf.write("\u11c6\u0255\3\2\2\2\u11c7\u11c8\7\u01a4\2\2\u11c8\u11c9")
        buf.write("\5\u0200\u0101\2\u11c9\u0257\3\2\2\2\u11ca\u11cb\7\u00f1")
        buf.write("\2\2\u11cb\u11d3\7\u00ab\2\2\u11cc\u11d0\7\u00ab\2\2\u11cd")
        buf.write("\u11ce\7\u0163\2\2\u11ce\u11cf\7\u0203\2\2\u11cf\u11d1")
        buf.write("\5\u0200\u0101\2\u11d0\u11cd\3\2\2\2\u11d0\u11d1\3\2\2")
        buf.write("\2\u11d1\u11d3\3\2\2\2\u11d2\u11ca\3\2\2\2\u11d2\u11cc")
        buf.write("\3\2\2\2\u11d3\u0259\3\2\2\2\u11d4\u11db\7\u01f3\2\2\u11d5")
        buf.write("\u11db\5\u025c\u012f\2\u11d6\u11db\5\u0260\u0131\2\u11d7")
        buf.write("\u11db\5\u0262\u0132\2\u11d8\u11db\5\u025e\u0130\2\u11d9")
        buf.write("\u11db\5\u0264\u0133\2\u11da\u11d4\3\2\2\2\u11da\u11d5")
        buf.write("\3\2\2\2\u11da\u11d6\3\2\2\2\u11da\u11d7\3\2\2\2\u11da")
        buf.write("\u11d8\3\2\2\2\u11da\u11d9\3\2\2\2\u11db\u025b\3\2\2\2")
        buf.write("\u11dc\u11dd\7\u01aa\2\2\u11dd\u11e3\tE\2\2\u11de\u11df")
        buf.write("\7\u0089\2\2\u11df\u11e0\tF\2\2\u11e0\u11e4\tG\2\2\u11e1")
        buf.write("\u11e2\7I\2\2\u11e2\u11e4\tH\2\2\u11e3\u11de\3\2\2\2\u11e3")
        buf.write("\u11e1\3\2\2\2\u11e4\u025d\3\2\2\2\u11e5\u11e6\7\u0159")
        buf.write("\2\2\u11e6\u11ec\5\u02e6\u0174\2\u11e7\u11ed\7\u01e8\2")
        buf.write("\2\u11e8\u11ed\7\u0108\2\2\u11e9\u11ed\7\u0105\2\2\u11ea")
        buf.write("\u11ed\5\u02d2\u016a\2\u11eb\u11ed\5\u02e6\u0174\2\u11ec")
        buf.write("\u11e7\3\2\2\2\u11ec\u11e8\3\2\2\2\u11ec\u11e9\3\2\2\2")
        buf.write("\u11ec\u11ea\3\2\2\2\u11ec\u11eb\3\2\2\2\u11ed\u025f\3")
        buf.write("\2\2\2\u11ee\u11ef\7\u0089\2\2\u11ef\u0261\3\2\2\2\u11f0")
        buf.write("\u11f1\7\u020a\2\2\u11f1\u0263\3\2\2\2\u11f2\u11f3\7\u015d")
        buf.write("\2\2\u11f3\u11f7\7}\2\2\u11f4\u11f5\7\u015d\2\2\u11f5")
        buf.write("\u11f7\7~\2\2\u11f6\u11f2\3\2\2\2\u11f6\u11f4\3\2\2\2")
        buf.write("\u11f7\u0265\3\2\2\2\u11f8\u11fa\tI\2\2\u11f9\u11fb\7")
        buf.write("\u0096\2\2\u11fa\u11f9\3\2\2\2\u11fa\u11fb\3\2\2\2\u11fb")
        buf.write("\u11fc\3\2\2\2\u11fc\u11fd\5\u01ec\u00f7\2\u11fd\u0267")
        buf.write("\3\2\2\2\u11fe\u1200\7\17\2\2\u11ff\u11fe\3\2\2\2\u11ff")
        buf.write("\u1200\3\2\2\2\u1200\u1203\3\2\2\2\u1201\u1204\5\u02d8")
        buf.write("\u016d\2\u1202\u1204\5\u026c\u0137\2\u1203\u1201\3\2\2")
        buf.write("\2\u1203\u1202\3\2\2\2\u1204\u1207\3\2\2\2\u1205\u1207")
        buf.write("\7\17\2\2\u1206\u11ff\3\2\2\2\u1206\u1205\3\2\2\2\u1207")
        buf.write("\u0269\3\2\2\2\u1208\u120a\7\17\2\2\u1209\u1208\3\2\2")
        buf.write("\2\u1209\u120a\3\2\2\2\u120a\u120d\3\2\2\2\u120b\u120e")
        buf.write("\5\u02d8\u016d\2\u120c\u120e\5\u026c\u0137\2\u120d\u120b")
        buf.write("\3\2\2\2\u120d\u120c\3\2\2\2\u120e\u026b\3\2\2\2\u120f")
        buf.write("\u1210\5\u02d6\u016c\2\u1210\u026d\3\2\2\2\u1211\u1214")
        buf.write("\7\u01ab\2\2\u1212\u1215\5\u0270\u0139\2\u1213\u1215\5")
        buf.write("\u01f0\u00f9\2\u1214\u1212\3\2\2\2\u1214\u1213\3\2\2\2")
        buf.write("\u1215\u026f\3\2\2\2\u1216\u1217\7R\2\2\u1217\u1218\7")
        buf.write("\u0104\2\2\u1218\u1219\5\u02a6\u0154\2\u1219\u0271\3\2")
        buf.write("\2\2\u121a\u121b\7\u00bb\2\2\u121b\u1220\5\u02a2\u0152")
        buf.write("\2\u121c\u121d\7\u01f2\2\2\u121d\u121f\5\u02a2\u0152\2")
        buf.write("\u121e\u121c\3\2\2\2\u121f\u1222\3\2\2\2\u1220\u121e\3")
        buf.write("\2\2\2\u1220\u1221\3\2\2\2\u1221\u122f\3\2\2\2\u1222\u1220")
        buf.write("\3\2\2\2\u1223\u1224\7\'\2\2\u1224\u1225\79\2\2\u1225")
        buf.write("\u1226\7\u00bb\2\2\u1226\u122b\5\u02a2\u0152\2\u1227\u1228")
        buf.write("\7\u01f2\2\2\u1228\u122a\5\u02a2\u0152\2\u1229\u1227\3")
        buf.write("\2\2\2\u122a\u122d\3\2\2\2\u122b\u1229\3\2\2\2\u122b\u122c")
        buf.write("\3\2\2\2\u122c\u122f\3\2\2\2\u122d\u122b\3\2\2\2\u122e")
        buf.write("\u121a\3\2\2\2\u122e\u1223\3\2\2\2\u122f\u0273\3\2\2\2")
        buf.write("\u1230\u1233\5\u02d8\u016d\2\u1231\u1233\5\u02d6\u016c")
        buf.write("\2\u1232\u1230\3\2\2\2\u1232\u1231\3\2\2\2\u1233\u0275")
        buf.write("\3\2\2\2\u1234\u1235\5\u02d8\u016d\2\u1235\u0277\3\2\2")
        buf.write("\2\u1236\u1237\5\u02d8\u016d\2\u1237\u0279\3\2\2\2\u1238")
        buf.write("\u1239\5\u02d8\u016d\2\u1239\u027b\3\2\2\2\u123a\u123b")
        buf.write("\5\u02d8\u016d\2\u123b\u027d\3\2\2\2\u123c\u123d\5\u02d8")
        buf.write("\u016d\2\u123d\u027f\3\2\2\2\u123e\u123f\5\u02d8\u016d")
        buf.write("\2\u123f\u0281\3\2\2\2\u1240\u1245\5\u02d8\u016d\2\u1241")
        buf.write("\u1242\7\u01e5\2\2\u1242\u1244\5\u02da\u016e\2\u1243\u1241")
        buf.write("\3\2\2\2\u1244\u1247\3\2\2\2\u1245\u1243\3\2\2\2\u1245")
        buf.write("\u1246\3\2\2\2\u1246\u124a\3\2\2\2\u1247\u1245\3\2\2\2")
        buf.write("\u1248\u1249\7\u01f4\2\2\u1249\u124b\5\u02ac\u0157\2\u124a")
        buf.write("\u1248\3\2\2\2\u124a\u124b\3\2\2\2\u124b\u0283\3\2\2\2")
        buf.write("\u124c\u124d\5\u02d8\u016d\2\u124d\u0285\3\2\2\2\u124e")
        buf.write("\u1251\5\u02d8\u016d\2\u124f\u1250\7\u01e5\2\2\u1250\u1252")
        buf.write("\5\u02da\u016e\2\u1251\u124f\3\2\2\2\u1251\u1252\3\2\2")
        buf.write("\2\u1252\u0287\3\2\2\2\u1253\u1254\5\u02d8\u016d\2\u1254")
        buf.write("\u0289\3\2\2\2\u1255\u1256\5\u02d8\u016d\2\u1256\u028b")
        buf.write("\3\2\2\2\u1257\u1258\5\u02d8\u016d\2\u1258\u028d\3\2\2")
        buf.write("\2\u1259\u125e\5\u02d8\u016d\2\u125a\u125b\7\u01e5\2\2")
        buf.write("\u125b\u125d\5\u02da\u016e\2\u125c\u125a\3\2\2\2\u125d")
        buf.write("\u1260\3\2\2\2\u125e\u125c\3\2\2\2\u125e\u125f\3\2\2\2")
        buf.write("\u125f\u028f\3\2\2\2\u1260\u125e\3\2\2\2\u1261\u1262\5")
        buf.write("\u02d8\u016d\2\u1262\u0291\3\2\2\2\u1263\u1268\5\u02d8")
        buf.write("\u016d\2\u1264\u1265\7\u01e5\2\2\u1265\u1267\5\u02da\u016e")
        buf.write("\2\u1266\u1264\3\2\2\2\u1267\u126a\3\2\2\2\u1268\u1266")
        buf.write("\3\2\2\2\u1268\u1269\3\2\2\2\u1269\u126d\3\2\2\2\u126a")
        buf.write("\u1268\3\2\2\2\u126b\u126c\7\u01f4\2\2\u126c\u126e\5\u02ac")
        buf.write("\u0157\2\u126d\u126b\3\2\2\2\u126d\u126e\3\2\2\2\u126e")
        buf.write("\u0293\3\2\2\2\u126f\u1270\5\u02da\u016e\2\u1270\u0295")
        buf.write("\3\2\2\2\u1271\u1276\5\u02da\u016e\2\u1272\u1273\7\u01e5")
        buf.write("\2\2\u1273\u1275\5\u02da\u016e\2\u1274\u1272\3\2\2\2\u1275")
        buf.write("\u1278\3\2\2\2\u1276\u1274\3\2\2\2\u1276\u1277\3\2\2\2")
        buf.write("\u1277\u0297\3\2\2\2\u1278\u1276\3\2\2\2\u1279\u127e\5")
        buf.write("\u02da\u016e\2\u127a\u127b\7\u01e5\2\2\u127b\u127d\5\u02da")
        buf.write("\u016e\2\u127c\u127a\3\2\2\2\u127d\u1280\3\2\2\2\u127e")
        buf.write("\u127c\3\2\2\2\u127e\u127f\3\2\2\2\u127f\u0299\3\2\2\2")
        buf.write("\u1280\u127e\3\2\2\2\u1281\u1286\5\u02d8\u016d\2\u1282")
        buf.write("\u1283\7\u01e5\2\2\u1283\u1285\5\u02da\u016e\2\u1284\u1282")
        buf.write("\3\2\2\2\u1285\u1288\3\2\2\2\u1286\u1284\3\2\2\2\u1286")
        buf.write("\u1287\3\2\2\2\u1287\u029b\3\2\2\2\u1288\u1286\3\2\2\2")
        buf.write("\u1289\u128c\5\u02d8\u016d\2\u128a\u128b\7\u01e5\2\2\u128b")
        buf.write("\u128d\5\u02da\u016e\2\u128c\u128a\3\2\2\2\u128c\u128d")
        buf.write("\3\2\2\2\u128d\u029d\3\2\2\2\u128e\u1291\5\u02d8\u016d")
        buf.write("\2\u128f\u1290\7\u01e5\2\2\u1290\u1292\5\u02da\u016e\2")
        buf.write("\u1291\u128f\3\2\2\2\u1291\u1292\3\2\2\2\u1292\u029f\3")
        buf.write("\2\2\2\u1293\u1296\5\u02d8\u016d\2\u1294\u1295\7\u01e5")
        buf.write("\2\2\u1295\u1297\5\u02da\u016e\2\u1296\u1294\3\2\2\2\u1296")
        buf.write("\u1297\3\2\2\2\u1297\u02a1\3\2\2\2\u1298\u129b\5\u02b2")
        buf.write("\u015a\2\u1299\u129b\5\u02ca\u0166\2\u129a\u1298\3\2\2")
        buf.write("\2\u129a\u1299\3\2\2\2\u129b\u02a3\3\2\2\2\u129c\u129d")
        buf.write("\5\u02d8\u016d\2\u129d\u02a5\3\2\2\2\u129e\u12a1\5\u02d8")
        buf.write("\u016d\2\u129f\u12a1\5\u02ca\u0166\2\u12a0\u129e\3\2\2")
        buf.write("\2\u12a0\u129f\3\2\2\2\u12a1\u02a7\3\2\2\2\u12a2\u12a5")
        buf.write("\5\u02d8\u016d\2\u12a3\u12a5\5\u02ca\u0166\2\u12a4\u12a2")
        buf.write("\3\2\2\2\u12a4\u12a3\3\2\2\2\u12a5\u02a9\3\2\2\2\u12a6")
        buf.write("\u12a9\5\u02d8\u016d\2\u12a7\u12a8\7\u01e5\2\2\u12a8\u12aa")
        buf.write("\5\u02da\u016e\2\u12a9\u12a7\3\2\2\2\u12a9\u12aa\3\2\2")
        buf.write("\2\u12aa\u02ab\3\2\2\2\u12ab\u12ac\5\u02d8\u016d\2\u12ac")
        buf.write("\u02ad\3\2\2\2\u12ad\u12b2\5\u02d8\u016d\2\u12ae\u12af")
        buf.write("\7\u01e5\2\2\u12af\u12b1\5\u02da\u016e\2\u12b0\u12ae\3")
        buf.write("\2\2\2\u12b1\u12b4\3\2\2\2\u12b2\u12b0\3\2\2\2\u12b2\u12b3")
        buf.write("\3\2\2\2\u12b3\u02af\3\2\2\2\u12b4\u12b2\3\2\2\2\u12b5")
        buf.write("\u12b9\5\u02b2\u015a\2\u12b6\u12b7\7\u01f4\2\2\u12b7\u12ba")
        buf.write("\5\u02ac\u0157\2\u12b8\u12ba\5\u0266\u0134\2\u12b9\u12b6")
        buf.write("\3\2\2\2\u12b9\u12b8\3\2\2\2\u12b9\u12ba\3\2\2\2\u12ba")
        buf.write("\u02b1\3\2\2\2\u12bb\u12c0\5\u02da\u016e\2\u12bc\u12bd")
        buf.write("\7\u01e5\2\2\u12bd\u12bf\5\u02da\u016e\2\u12be\u12bc\3")
        buf.write("\2\2\2\u12bf\u12c2\3\2\2\2\u12c0\u12be\3\2\2\2\u12c0\u12c1")
        buf.write("\3\2\2\2\u12c1\u02b3\3\2\2\2\u12c2\u12c0\3\2\2\2\u12c3")
        buf.write("\u12c4\7\u01ef\2\2\u12c4\u02b5\3\2\2\2\u12c5\u12c6\7\u00c2")
        buf.write("\2\2\u12c6\u12c7\7\u01ec\2\2\u12c7\u12c8\7\u01cb\2\2\u12c8")
        buf.write("\u12c9\t+\2\2\u12c9\u12ca\5\u019a\u00ce\2\u12ca\u12cc")
        buf.write("\7\u01ed\2\2\u12cb\u12cd\5\u0232\u011a\2\u12cc\u12cb\3")
        buf.write("\2\2\2\u12cc\u12cd\3\2\2\2\u12cd\u02b7\3\2\2\2\u12ce\u12d0")
        buf.write("\7\u01ec\2\2\u12cf\u12d1\5\u02c0\u0161\2\u12d0\u12cf\3")
        buf.write("\2\2\2\u12d0\u12d1\3\2\2\2\u12d1\u12d6\3\2\2\2\u12d2\u12d3")
        buf.write("\7\u01f2\2\2\u12d3\u12d5\5\u02c0\u0161\2\u12d4\u12d2\3")
        buf.write("\2\2\2\u12d5\u12d8\3\2\2\2\u12d6\u12d4\3\2\2\2\u12d6\u12d7")
        buf.write("\3\2\2\2\u12d7\u12d9\3\2\2\2\u12d8\u12d6\3\2\2\2\u12d9")
        buf.write("\u12db\7\u01ed\2\2\u12da\u12dc\5\u02b6\u015c\2\u12db\u12da")
        buf.write("\3\2\2\2\u12db\u12dc\3\2\2\2\u12dc\u02b9\3\2\2\2\u12dd")
        buf.write("\u12e2\7\u01ec\2\2\u12de\u12e0\5\u02c0\u0161\2\u12df\u12e1")
        buf.write("\5\u02be\u0160\2\u12e0\u12df\3\2\2\2\u12e0\u12e1\3\2\2")
        buf.write("\2\u12e1\u12e3\3\2\2\2\u12e2\u12de\3\2\2\2\u12e2\u12e3")
        buf.write("\3\2\2\2\u12e3\u12eb\3\2\2\2\u12e4\u12e5\7\u01f2\2\2\u12e5")
        buf.write("\u12e7\5\u02c0\u0161\2\u12e6\u12e8\5\u02be\u0160\2\u12e7")
        buf.write("\u12e6\3\2\2\2\u12e7\u12e8\3\2\2\2\u12e8\u12ea\3\2\2\2")
        buf.write("\u12e9\u12e4\3\2\2\2\u12ea\u12ed\3\2\2\2\u12eb\u12e9\3")
        buf.write("\2\2\2\u12eb\u12ec\3\2\2\2\u12ec\u12ee\3\2\2\2\u12ed\u12eb")
        buf.write("\3\2\2\2\u12ee\u12f0\7\u01ed\2\2\u12ef\u12f1\5\u02b6\u015c")
        buf.write("\2\u12f0\u12ef\3\2\2\2\u12f0\u12f1\3\2\2\2\u12f1\u02bb")
        buf.write("\3\2\2\2\u12f2\u12f3\7\u01ec\2\2\u12f3\u1300\5\u02ae\u0158")
        buf.write("\2\u12f4\u12f7\7\u01f2\2\2\u12f5\u12f8\5\u02d2\u016a\2")
        buf.write("\u12f6\u12f8\7\u00fe\2\2\u12f7\u12f5\3\2\2\2\u12f7\u12f6")
        buf.write("\3\2\2\2\u12f8\u12fe\3\2\2\2\u12f9\u12fc\7\u01f2\2\2\u12fa")
        buf.write("\u12fd\5\u02d2\u016a\2\u12fb\u12fd\7\u00fe\2\2\u12fc\u12fa")
        buf.write("\3\2\2\2\u12fc\u12fb\3\2\2\2\u12fd\u12ff\3\2\2\2\u12fe")
        buf.write("\u12f9\3\2\2\2\u12fe\u12ff\3\2\2\2\u12ff\u1301\3\2\2\2")
        buf.write("\u1300\u12f4\3\2\2\2\u1300\u1301\3\2\2\2\u1301\u1302\3")
        buf.write("\2\2\2\u1302\u1316\7\u019b\2\2\u1303\u1304\5\u02b0\u0159")
        buf.write("\2\u1304\u1305\7\u01e5\2\2\u1305\u1306\7\u01ef\2\2\u1306")
        buf.write("\u1317\3\2\2\2\u1307\u1317\7\u01ef\2\2\u1308\u130a\5\u01f0")
        buf.write("\u00f9\2\u1309\u130b\5\u0268\u0135\2\u130a\u1309\3\2\2")
        buf.write("\2\u130a\u130b\3\2\2\2\u130b\u1313\3\2\2\2\u130c\u130d")
        buf.write("\7\u01f2\2\2\u130d\u130f\5\u01f0\u00f9\2\u130e\u1310\5")
        buf.write("\u0268\u0135\2\u130f\u130e\3\2\2\2\u130f\u1310\3\2\2\2")
        buf.write("\u1310\u1312\3\2\2\2\u1311\u130c\3\2\2\2\u1312\u1315\3")
        buf.write("\2\2\2\u1313\u1311\3\2\2\2\u1313\u1314\3\2\2\2\u1314\u1317")
        buf.write("\3\2\2\2\u1315\u1313\3\2\2\2\u1316\u1303\3\2\2\2\u1316")
        buf.write("\u1307\3\2\2\2\u1316\u1308\3\2\2\2\u1317\u1318\3\2\2\2")
        buf.write("\u1318\u131a\7\u01ed\2\2\u1319\u131b\5\u02b6\u015c\2\u131a")
        buf.write("\u1319\3\2\2\2\u131a\u131b\3\2\2\2\u131b\u02bd\3\2\2\2")
        buf.write("\u131c\u131d\tJ\2\2\u131d\u131e\7\u00ff\2\2\u131e\u02bf")
        buf.write("\3\2\2\2\u131f\u1320\5\u02d8\u016d\2\u1320\u1321\7\u0203")
        buf.write("\2\2\u1321\u1322\7\u0200\2\2\u1322\u1324\3\2\2\2\u1323")
        buf.write("\u131f\3\2\2\2\u1323\u1324\3\2\2\2\u1324\u1325\3\2\2\2")
        buf.write("\u1325\u1326\5\u01f0\u00f9\2\u1326\u02c1\3\2\2\2\u1327")
        buf.write("\u1330\5\u02c4\u0163\2\u1328\u132a\7\u0130\2\2\u1329\u1328")
        buf.write("\3\2\2\2\u1329\u132a\3\2\2\2\u132a\u132b\3\2\2\2\u132b")
        buf.write("\u132d\5\u0296\u014c\2\u132c\u132e\t\27\2\2\u132d\u132c")
        buf.write("\3\2\2\2\u132d\u132e\3\2\2\2\u132e\u1330\3\2\2\2\u132f")
        buf.write("\u1327\3\2\2\2\u132f\u1329\3\2\2\2\u1330\u02c3\3\2\2\2")
        buf.write("\u1331\u1333\5\u02c8\u0165\2\u1332\u1334\5\u02c6\u0164")
        buf.write("\2\u1333\u1332\3\2\2\2\u1333\u1334\3\2\2\2\u1334\u133b")
        buf.write("\3\2\2\2\u1335\u1337\7\u01ad\2\2\u1336\u1338\7\u00cf\2")
        buf.write("\2\u1337\u1336\3\2\2\2\u1337\u1338\3\2\2\2\u1338\u1339")
        buf.write("\3\2\2\2\u1339\u133a\7\u017c\2\2\u133a\u133c\7\u01c3\2")
        buf.write("\2\u133b\u1335\3\2\2\2\u133b\u133c\3\2\2\2\u133c\u134e")
        buf.write("\3\2\2\2\u133d\u133e\7\u00ba\2\2\u133e\u1343\tK\2\2\u133f")
        buf.write("\u1340\7\u01ec\2\2\u1340\u1341\5\u01f0\u00f9\2\u1341\u1342")
        buf.write("\7\u01ed\2\2\u1342\u1344\3\2\2\2\u1343\u133f\3\2\2\2\u1343")
        buf.write("\u1344\3\2\2\2\u1344\u1345\3\2\2\2\u1345\u1346\7\u0185")
        buf.write("\2\2\u1346\u134b\tL\2\2\u1347\u1348\7\u01ec\2\2\u1348")
        buf.write("\u1349\5\u01f0\u00f9\2\u1349\u134a\7\u01ed\2\2\u134a\u134c")
        buf.write("\3\2\2\2\u134b\u1347\3\2\2\2\u134b\u134c\3\2\2\2\u134c")
        buf.write("\u134e\3\2\2\2\u134d\u1331\3\2\2\2\u134d\u133d\3\2\2\2")
        buf.write("\u134e\u02c5\3\2\2\2\u134f\u1350\7\u01ec\2\2\u1350\u1353")
        buf.write("\5\u02d2\u016a\2\u1351\u1352\7\u01f2\2\2\u1352\u1354\5")
        buf.write("\u02d2\u016a\2\u1353\u1351\3\2\2\2\u1353\u1354\3\2\2\2")
        buf.write("\u1354\u1356\3\2\2\2\u1355\u1357\tM\2\2\u1356\u1355\3")
        buf.write("\2\2\2\u1356\u1357\3\2\2\2\u1357\u1358\3\2\2\2\u1358\u1359")
        buf.write("\7\u01ed\2\2\u1359\u02c7\3\2\2\2\u135a\u1397\7 \2\2\u135b")
        buf.write("\u1397\7\u0121\2\2\u135c\u1397\7\u00e9\2\2\u135d\u1397")
        buf.write("\7\37\2\2\u135e\u1397\7\36\2\2\u135f\u1397\7\u00ea\2\2")
        buf.write("\u1360\u1397\7\u0122\2\2\u1361\u1397\7\u0123\2\2\u1362")
        buf.write("\u1397\7\u0160\2\2\u1363\u1397\7\u0161\2\2\u1364\u1397")
        buf.write("\7\u0102\2\2\u1365\u1397\7_\2\2\u1366\u1397\7\u00b8\2")
        buf.write("\2\u1367\u1397\7\u00b7\2\2\u1368\u1397\7\u0101\2\2\u1369")
        buf.write("\u1397\7\u0165\2\2\u136a\u1397\7\u0100\2\2\u136b\u1397")
        buf.write("\7`\2\2\u136c\u136e\7q\2\2\u136d\u136f\7\u0126\2\2\u136e")
        buf.write("\u136d\3\2\2\2\u136e\u136f\3\2\2\2\u136f\u1397\3\2\2\2")
        buf.write("\u1370\u1397\7\u0093\2\2\u1371\u1397\7\u012e\2\2\u1372")
        buf.write("\u1397\7\u00ec\2\2\u1373\u1375\7\u00d5\2\2\u1374\u1376")
        buf.write("\7\u012c\2\2\u1375\u1374\3\2\2\2\u1375\u1376\3\2\2\2\u1376")
        buf.write("\u1397\3\2\2\2\u1377\u1397\7\61\2\2\u1378\u1397\7\63\2")
        buf.write("\2\u1379\u1397\7\u01a0\2\2\u137a\u1397\7\u019f\2\2\u137b")
        buf.write("\u1397\7\u0172\2\2\u137c\u1397\7\u012c\2\2\u137d\u1397")
        buf.write("\7$\2\2\u137e\u1397\7Y\2\2\u137f\u1397\7\u0144\2\2\u1380")
        buf.write("\u1397\7\u0199\2\2\u1381\u1397\7\u01c0\2\2\u1382\u1397")
        buf.write("\7\u00e5\2\2\u1383\u1397\7Z\2\2\u1384\u1397\7\u00a3\2")
        buf.write("\2\u1385\u1397\7\u00df\2\2\u1386\u1397\7\u014e\2\2\u1387")
        buf.write("\u1397\7\u0182\2\2\u1388\u1397\7\u0183\2\2\u1389\u1397")
        buf.write("\7\u0184\2\2\u138a\u1397\7\u0181\2\2\u138b\u1397\7\u017d")
        buf.write("\2\2\u138c\u1397\7\u0180\2\2\u138d\u1397\7\u017f\2\2\u138e")
        buf.write("\u1397\7\u017e\2\2\u138f\u1397\7\u01c2\2\2\u1390\u1397")
        buf.write("\7s\2\2\u1391\u1397\7\35\2\2\u1392\u1397\7!\2\2\u1393")
        buf.write("\u1397\7\66\2\2\u1394\u1397\7\u00ee\2\2\u1395\u1397\7")
        buf.write("\u00e1\2\2\u1396\u135a\3\2\2\2\u1396\u135b\3\2\2\2\u1396")
        buf.write("\u135c\3\2\2\2\u1396\u135d\3\2\2\2\u1396\u135e\3\2\2\2")
        buf.write("\u1396\u135f\3\2\2\2\u1396\u1360\3\2\2\2\u1396\u1361\3")
        buf.write("\2\2\2\u1396\u1362\3\2\2\2\u1396\u1363\3\2\2\2\u1396\u1364")
        buf.write("\3\2\2\2\u1396\u1365\3\2\2\2\u1396\u1366\3\2\2\2\u1396")
        buf.write("\u1367\3\2\2\2\u1396\u1368\3\2\2\2\u1396\u1369\3\2\2\2")
        buf.write("\u1396\u136a\3\2\2\2\u1396\u136b\3\2\2\2\u1396\u136c\3")
        buf.write("\2\2\2\u1396\u1370\3\2\2\2\u1396\u1371\3\2\2\2\u1396\u1372")
        buf.write("\3\2\2\2\u1396\u1373\3\2\2\2\u1396\u1377\3\2\2\2\u1396")
        buf.write("\u1378\3\2\2\2\u1396\u1379\3\2\2\2\u1396\u137a\3\2\2\2")
        buf.write("\u1396\u137b\3\2\2\2\u1396\u137c\3\2\2\2\u1396\u137d\3")
        buf.write("\2\2\2\u1396\u137e\3\2\2\2\u1396\u137f\3\2\2\2\u1396\u1380")
        buf.write("\3\2\2\2\u1396\u1381\3\2\2\2\u1396\u1382\3\2\2\2\u1396")
        buf.write("\u1383\3\2\2\2\u1396\u1384\3\2\2\2\u1396\u1385\3\2\2\2")
        buf.write("\u1396\u1386\3\2\2\2\u1396\u1387\3\2\2\2\u1396\u1388\3")
        buf.write("\2\2\2\u1396\u1389\3\2\2\2\u1396\u138a\3\2\2\2\u1396\u138b")
        buf.write("\3\2\2\2\u1396\u138c\3\2\2\2\u1396\u138d\3\2\2\2\u1396")
        buf.write("\u138e\3\2\2\2\u1396\u138f\3\2\2\2\u1396\u1390\3\2\2\2")
        buf.write("\u1396\u1391\3\2\2\2\u1396\u1392\3\2\2\2\u1396\u1393\3")
        buf.write("\2\2\2\u1396\u1394\3\2\2\2\u1396\u1395\3\2\2\2\u1397\u02c9")
        buf.write("\3\2\2\2\u1398\u139c\7\u01f6\2\2\u1399\u139a\7\u01f7\2")
        buf.write("\2\u139a\u139c\7\u01e6\2\2\u139b\u1398\3\2\2\2\u139b\u1399")
        buf.write("\3\2\2\2\u139c\u13a5\3\2\2\2\u139d\u139f\7\u00ae\2\2\u139e")
        buf.write("\u139d\3\2\2\2\u139e\u139f\3\2\2\2\u139f\u13a3\3\2\2\2")
        buf.write("\u13a0\u13a4\7\u01f6\2\2\u13a1\u13a2\7\u01f7\2\2\u13a2")
        buf.write("\u13a4\7\u01e6\2\2\u13a3\u13a0\3\2\2\2\u13a3\u13a1\3\2")
        buf.write("\2\2\u13a4\u13a6\3\2\2\2\u13a5\u139e\3\2\2\2\u13a5\u13a6")
        buf.write("\3\2\2\2\u13a6\u13ab\3\2\2\2\u13a7\u13a8\7\u01e5\2\2\u13a8")
        buf.write("\u13aa\5\u02cc\u0167\2\u13a9\u13a7\3\2\2\2\u13aa\u13ad")
        buf.write("\3\2\2\2\u13ab\u13a9\3\2\2\2\u13ab\u13ac\3\2\2\2\u13ac")
        buf.write("\u02cb\3\2\2\2\u13ad\u13ab\3\2\2\2\u13ae\u13af\5\u02b2")
        buf.write("\u015a\2\u13af\u13b0\5\u02b8\u015d\2\u13b0\u13b3\3\2\2")
        buf.write("\2\u13b1\u13b3\5\u02b2\u015a\2\u13b2\u13ae\3\2\2\2\u13b2")
        buf.write("\u13b1\3\2\2\2\u13b3\u02cd\3\2\2\2\u13b4\u13b5\5\u02b2")
        buf.write("\u015a\2\u13b5\u02cf\3\2\2\2\u13b6\u13b9\7\u017d\2\2\u13b7")
        buf.write("\u13ba\5\u02d6\u016c\2\u13b8\u13ba\5\u02ca\u0166\2\u13b9")
        buf.write("\u13b7\3\2\2\2\u13b9\u13b8\3\2\2\2\u13ba\u13bf\3\2\2\2")
        buf.write("\u13bb\u13bc\7\22\2\2\u13bc\u13bd\7\u017c\2\2\u13bd\u13be")
        buf.write("\7\u01c3\2\2\u13be\u13c0\5\u02d6\u016c\2\u13bf\u13bb\3")
        buf.write("\2\2\2\u13bf\u13c0\3\2\2\2\u13c0\u13f5\3\2\2\2\u13c1\u13c5")
        buf.write("\7\u00ba\2\2\u13c2\u13c6\5\u02d6\u016c\2\u13c3\u13c6\5")
        buf.write("\u02ca\u0166\2\u13c4\u13c6\5\u02cc\u0167\2\u13c5\u13c2")
        buf.write("\3\2\2\2\u13c5\u13c3\3\2\2\2\u13c5\u13c4\3\2\2\2\u13c6")
        buf.write("\u13c7\3\2\2\2\u13c7\u13d5\tN\2\2\u13c8\u13cb\7\u01ec")
        buf.write("\2\2\u13c9\u13cc\7\u01e6\2\2\u13ca\u13cc\5\u02ca\u0166")
        buf.write("\2\u13cb\u13c9\3\2\2\2\u13cb\u13ca\3\2\2\2\u13cc\u13d2")
        buf.write("\3\2\2\2\u13cd\u13d0\7\u01f2\2\2\u13ce\u13d1\7\u01e6\2")
        buf.write("\2\u13cf\u13d1\5\u02ca\u0166\2\u13d0\u13ce\3\2\2\2\u13d0")
        buf.write("\u13cf\3\2\2\2\u13d1\u13d3\3\2\2\2\u13d2\u13cd\3\2\2\2")
        buf.write("\u13d2\u13d3\3\2\2\2\u13d3\u13d4\3\2\2\2\u13d4\u13d6\7")
        buf.write("\u01ed\2\2\u13d5\u13c8\3\2\2\2\u13d5\u13d6\3\2\2\2\u13d6")
        buf.write("\u13e6\3\2\2\2\u13d7\u13e4\7\u0185\2\2\u13d8\u13e5\7Z")
        buf.write("\2\2\u13d9\u13e5\7\u00a3\2\2\u13da\u13e5\7\u00df\2\2\u13db")
        buf.write("\u13e2\7\u014e\2\2\u13dc\u13df\7\u01ec\2\2\u13dd\u13e0")
        buf.write("\7\u01e6\2\2\u13de\u13e0\5\u02ca\u0166\2\u13df\u13dd\3")
        buf.write("\2\2\2\u13df\u13de\3\2\2\2\u13e0\u13e1\3\2\2\2\u13e1\u13e3")
        buf.write("\7\u01ed\2\2\u13e2\u13dc\3\2\2\2\u13e2\u13e3\3\2\2\2\u13e3")
        buf.write("\u13e5\3\2\2\2\u13e4\u13d8\3\2\2\2\u13e4\u13d9\3\2\2\2")
        buf.write("\u13e4\u13da\3\2\2\2\u13e4\u13db\3\2\2\2\u13e5\u13e7\3")
        buf.write("\2\2\2\u13e6\u13d7\3\2\2\2\u13e6\u13e7\3\2\2\2\u13e7\u13f5")
        buf.write("\3\2\2\2\u13e8\u13f5\5\u02d2\u016a\2\u13e9\u13ea\7Y\2")
        buf.write("\2\u13ea\u13f5\5\u02d6\u016c\2\u13eb\u13f5\5\u02d6\u016c")
        buf.write("\2\u13ec\u13f5\7\u00fe\2\2\u13ed\u13f5\7\u018c\2\2\u13ee")
        buf.write("\u13f5\7\u008e\2\2\u13ef\u13f5\7\\\2\2\u13f0\u13f5\7\u0158")
        buf.write("\2\2\u13f1\u13f5\7\u00e0\2\2\u13f2\u13f5\7\u00da\2\2\u13f3")
        buf.write("\u13f5\7d\2\2\u13f4\u13b6\3\2\2\2\u13f4\u13c1\3\2\2\2")
        buf.write("\u13f4\u13e8\3\2\2\2\u13f4\u13e9\3\2\2\2\u13f4\u13eb\3")
        buf.write("\2\2\2\u13f4\u13ec\3\2\2\2\u13f4\u13ed\3\2\2\2\u13f4\u13ee")
        buf.write("\3\2\2\2\u13f4\u13ef\3\2\2\2\u13f4\u13f0\3\2\2\2\u13f4")
        buf.write("\u13f1\3\2\2\2\u13f4\u13f2\3\2\2\2\u13f4\u13f3\3\2\2\2")
        buf.write("\u13f5\u02d1\3\2\2\2\u13f6\u13f7\tO\2\2\u13f7\u02d3\3")
        buf.write("\2\2\2\u13f8\u13f9\7\u01f1\2\2\u13f9\u13fa\5\u02d2\u016a")
        buf.write("\2\u13fa\u02d5\3\2\2\2\u13fb\u13fc\tP\2\2\u13fc\u02d7")
        buf.write("\3\2\2\2\u13fd\u13fe\5\u02b2\u015a\2\u13fe\u02d9\3\2\2")
        buf.write("\2\u13ff\u1402\5\u02e6\u0174\2\u1400\u1402\7\u01e9\2\2")
        buf.write("\u1401\u13ff\3\2\2\2\u1401\u1400\3\2\2\2\u1402\u02db\3")
        buf.write("\2\2\2\u1403\u140b\7\u01fc\2\2\u1404\u1405\7\u01fa\2\2")
        buf.write("\u1405\u140b\7\u0200\2\2\u1406\u1407\7\u01ff\2\2\u1407")
        buf.write("\u140b\7\u0203\2\2\u1408\u1409\7\u01fd\2\2\u1409\u140b")
        buf.write("\7\u0203\2\2\u140a\u1403\3\2\2\2\u140a\u1404\3\2\2\2\u140a")
        buf.write("\u1406\3\2\2\2\u140a\u1408\3\2\2\2\u140b\u02dd\3\2\2\2")
        buf.write("\u140c\u1410\7\u01fb\2\2\u140d\u140e\7\u0200\2\2\u140e")
        buf.write("\u1410\7\u0203\2\2\u140f\u140c\3\2\2\2\u140f\u140d\3\2")
        buf.write("\2\2\u1410\u02df\3\2\2\2\u1411\u1415\7\u01f9\2\2\u1412")
        buf.write("\u1413\7\u01fa\2\2\u1413\u1415\7\u0203\2\2\u1414\u1411")
        buf.write("\3\2\2\2\u1414\u1412\3\2\2\2\u1415\u02e1\3\2\2\2\u1416")
        buf.write("\u141a\7\u0201\2\2\u1417\u1418\7\u0202\2\2\u1418\u141a")
        buf.write("\7\u0202\2\2\u1419\u1416\3\2\2\2\u1419\u1417\3\2\2\2\u141a")
        buf.write("\u02e3\3\2\2\2\u141b\u141c\7\u01ec\2\2\u141c\u141d\7\u01f0")
        buf.write("\2\2\u141d\u141e\7\u01ed\2\2\u141e\u02e5\3\2\2\2\u141f")
        buf.write("\u1420\tQ\2\2\u1420\u02e7\3\2\2\2\u02a7\u02eb\u02f0\u02f7")
        buf.write("\u0301\u0303\u0307\u031c\u0327\u032c\u0331\u0336\u0338")
        buf.write("\u0342\u0347\u034f\u0351\u0355\u0359\u035e\u0363\u0368")
        buf.write("\u036c\u037a\u037f\u0382\u0388\u0391\u039f\u03a7\u03b0")
        buf.write("\u03b3\u03b8\u03bd\u03c2\u03c7\u03cf\u03d6\u03d8\u03dc")
        buf.write("\u03e2\u03e7\u03f2\u03fc\u0401\u040d\u0412\u0417\u041a")
        buf.write("\u0428\u0433\u0438\u043d\u0442\u0444\u044e\u0453\u0456")
        buf.write("\u045a\u045f\u0465\u0474\u0479\u047e\u0480\u0485\u048c")
        buf.write("\u048f\u0492\u0495\u049f\u04ab\u04af\u04b2\u04bb\u04c3")
        buf.write("\u04cb\u04ce\u04d5\u04d9\u04e0\u04e6\u050f\u052b\u0532")
        buf.write("\u0537\u0542\u0545\u0550\u0558\u055c\u0566\u0569\u056d")
        buf.write("\u0570\u0575\u057a\u057e\u0588\u0592\u0598\u05a3\u05a8")
        buf.write("\u05ac\u05b4\u05bc\u05c1\u05c4\u05c6\u05c9\u05d2\u05d7")
        buf.write("\u05dc\u05df\u05e2\u05e6\u05e9\u05f1\u05f6\u05fb\u0602")
        buf.write("\u060c\u061c\u0622\u062c\u0636\u063d\u0642\u0648\u0652")
        buf.write("\u0657\u065e\u0663\u0669\u066c\u066f\u0680\u0685\u068e")
        buf.write("\u0693\u0699\u069c\u06a3\u06a6\u06ad\u06b2\u06b6\u06bb")
        buf.write("\u06c0\u06ca\u06d0\u06da\u06df\u06e6\u06ec\u06f0\u06f3")
        buf.write("\u06f6\u0707\u070c\u0714\u0722\u0729\u0738\u073f\u0741")
        buf.write("\u0754\u0764\u076d\u0772\u0776\u0779\u0783\u078f\u0795")
        buf.write("\u079d\u07a1\u07a4\u07b2\u07b6\u07bb\u07be\u07cb\u07cf")
        buf.write("\u07db\u07e0\u07e4\u07e8\u07ee\u07f1\u07f4\u080f\u0815")
        buf.write("\u0819\u081f\u082b\u0834\u0836\u083c\u0840\u0843\u084c")
        buf.write("\u0857\u085b\u085e\u0862\u086a\u0873\u087c\u087e\u088c")
        buf.write("\u08a0\u08a4\u08ab\u08af\u08b3\u08b7\u08c3\u08c7\u08d5")
        buf.write("\u08db\u08e2\u08e7\u08f1\u08f7\u08f9\u0902\u090c\u0911")
        buf.write("\u0920\u0924\u0927\u092b\u0933\u0935\u0939\u0941\u0948")
        buf.write("\u094d\u094f\u0954\u0959\u0961\u0968\u096c\u096f\u097b")
        buf.write("\u0981\u0989\u0993\u099e\u09a1\u09a8\u09ab\u09b2\u09bd")
        buf.write("\u09c3\u09c7\u09d1\u09d4\u09da\u09e5\u09e7\u09e9\u09ec")
        buf.write("\u09f0\u09f3\u09f7\u09fb\u0a00\u0a0b\u0a0f\u0a17\u0a1a")
        buf.write("\u0a24\u0a29\u0a2f\u0a33\u0a36\u0a3e\u0a41\u0a45\u0a49")
        buf.write("\u0a4e\u0a51\u0a55\u0a59\u0a5d\u0a69\u0a79\u0a7f\u0a83")
        buf.write("\u0a88\u0a8c\u0a93\u0a97\u0a9b\u0a9e\u0aa2\u0aa4\u0aa8")
        buf.write("\u0aad\u0aaf\u0aba\u0abc\u0ac4\u0aca\u0ad1\u0ad8\u0adc")
        buf.write("\u0ade\u0ae4\u0aea\u0af1\u0af4\u0af7\u0afc\u0b00\u0b0c")
        buf.write("\u0b13\u0b18\u0b1a\u0b1c\u0b2a\u0b2d\u0b37\u0b3b\u0b43")
        buf.write("\u0b4f\u0b59\u0b5e\u0b68\u0b70\u0b73\u0b79\u0b7d\u0b82")
        buf.write("\u0b8c\u0b91\u0b9e\u0baa\u0baf\u0bb9\u0bbe\u0bc0\u0bc5")
        buf.write("\u0bc9\u0bcf\u0bd3\u0be0\u0be6\u0bef\u0bfc\u0c04\u0c0d")
        buf.write("\u0c11\u0c16\u0c21\u0c23\u0c33\u0c38\u0c3e\u0c44\u0c56")
        buf.write("\u0c5d\u0c60\u0c68\u0c71\u0c73\u0c77\u0c7a\u0c7f\u0c81")
        buf.write("\u0c85\u0c91\u0c9a\u0ca2\u0ca7\u0cab\u0cb0\u0cb3\u0cbb")
        buf.write("\u0cc3\u0cce\u0cd7\u0cda\u0cdd\u0ce5\u0cef\u0cfb\u0d02")
        buf.write("\u0d06\u0d0a\u0d0d\u0d10\u0d15\u0d1a\u0d1d\u0d20\u0d26")
        buf.write("\u0d29\u0d2f\u0d32\u0d35\u0d3a\u0d3d\u0d45\u0d4b\u0d50")
        buf.write("\u0d59\u0d63\u0d67\u0d69\u0d6c\u0d78\u0d7c\u0d7f\u0d8e")
        buf.write("\u0d93\u0d9a\u0d9d\u0da6\u0dad\u0db2\u0db6\u0dbe\u0dc4")
        buf.write("\u0dcc\u0dcf\u0dd7\u0ddf\u0de2\u0de5\u0dee\u0df4\u0dfa")
        buf.write("\u0dfc\u0e09\u0e0b\u0e14\u0e16\u0e1a\u0e20\u0e24\u0e32")
        buf.write("\u0e38\u0e49\u0e4d\u0e63\u0e6b\u0e6f\u0e75\u0e7a\u0e7d")
        buf.write("\u0e7f\u0e83\u0e8e\u0e92\u0e99\u0e9e\u0eac\u0ebf\u0ed0")
        buf.write("\u0ed3\u0ed5\u0ed7\u0edf\u0ee7\u0eee\u0ef2\u0efb\u0f00")
        buf.write("\u0f04\u0f0c\u0f10\u0f17\u0f20\u0f2e\u0f3b\u0f40\u0f55")
        buf.write("\u0f5e\u0f63\u0f66\u0f6d\u0f70\u0f74\u0f77\u0f7e\u0f81")
        buf.write("\u0f87\u0f8a\u0f8e\u0f91\u0f98\u0f9d\u0fae\u0fb0\u0fb4")
        buf.write("\u0fbc\u0fc8\u0fce\u0fd8\u0fe8\u0fec\u0ff5\u0ffb\u1009")
        buf.write("\u1014\u1018\u101b\u1024\u102a\u1034\u103c\u103f\u1042")
        buf.write("\u104b\u1050\u1059\u105f\u1064\u1067\u106c\u1071\u1075")
        buf.write("\u107b\u1081\u108a\u108f\u1097\u109b\u10a0\u10a6\u10ad")
        buf.write("\u10b2\u10b9\u10bd\u10c2\u10ca\u10cd\u10d0\u10d3\u10d7")
        buf.write("\u10dc\u10e1\u10e5\u10ec\u10f1\u10f3\u10f8\u10fe\u1101")
        buf.write("\u1105\u1107\u1112\u1116\u1118\u1123\u112e\u1137\u113a")
        buf.write("\u113e\u1141\u1145\u1152\u1157\u115f\u1166\u116b\u116f")
        buf.write("\u1174\u1179\u117c\u1183\u118d\u1195\u1199\u11a3\u11a6")
        buf.write("\u11a8\u11b2\u11b4\u11ba\u11c0\u11c2\u11d0\u11d2\u11da")
        buf.write("\u11e3\u11ec\u11f6\u11fa\u11ff\u1203\u1206\u1209\u120d")
        buf.write("\u1214\u1220\u122b\u122e\u1232\u1245\u124a\u1251\u125e")
        buf.write("\u1268\u126d\u1276\u127e\u1286\u128c\u1291\u1296\u129a")
        buf.write("\u12a0\u12a4\u12a9\u12b2\u12b9\u12c0\u12cc\u12d0\u12d6")
        buf.write("\u12db\u12e0\u12e2\u12e7\u12eb\u12f0\u12f7\u12fc\u12fe")
        buf.write("\u1300\u130a\u130f\u1313\u1316\u131a\u1323\u1329\u132d")
        buf.write("\u132f\u1333\u1337\u133b\u1343\u134b\u134d\u1353\u1356")
        buf.write("\u136e\u1375\u1396\u139b\u139e\u13a3\u13a5\u13ab\u13b2")
        buf.write("\u13b9\u13bf\u13c5\u13cb\u13d0\u13d2\u13d5\u13df\u13e2")
        buf.write("\u13e4\u13e6\u13f4\u1401\u140a\u140f\u1414\u1419")
        return buf.getvalue()


class plsqlParser ( Parser ):

    grammarFileName = "plsql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'..'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'.'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'%'", "'&'", "'('", "')'", 
                     "'**'", "'*'", "'+'", "'-'", "','", "'/'", "'@'", "':='", 
                     "<INVALID>", "':'", "';'", "'<='", "'<'", "'>='", "<INVALID>", 
                     "'^'", "'~'", "'!'", "'>'", "'||'", "'|'", "'='", "'['", 
                     "']'", "'_'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'@!'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "A_LETTER", "ADD", "AFTER", 
                      "AGENT", "AGGREGATE", "ALL", "ALTER", "ANALYZE", "AND", 
                      "ANY", "ARRAY", "AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", 
                      "AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", 
                      "BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", "BINARY_DOUBLE", 
                      "BINARY_FLOAT", "BINARY_INTEGER", "BLOB", "BLOCK", 
                      "BODY", "BOOLEAN", "BOTH", "BREADTH", "BULK", "BY", 
                      "BYTE", "C_LETTER", "CACHE", "CALL", "CANONICAL", 
                      "CASCADE", "CASE", "CAST", "CHAR", "CHAR_CS", "CHARACTER", 
                      "CHECK", "CHR", "CLOB", "CLOSE", "CLUSTER", "COLLECT", 
                      "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPATIBILITY", 
                      "COMPILE", "COMPOUND", "CONNECT", "CONNECT_BY_ROOT", 
                      "CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", 
                      "CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID", 
                      "CORRUPT_XID_ALL", "COST", "COUNT", "CREATE", "CROSS", 
                      "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", 
                      "CYCLE", "DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", 
                      "DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", 
                      "DECOMPOSE", "DECREMENT", "DEFAULT", "DEFAULTS", "DEFERRED", 
                      "DEFINER", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", 
                      "DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", 
                      "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
                      "EACH", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", 
                      "ENCODING", "END", "ENTITYESCAPING", "ERR", "ERRORS", 
                      "ESCAPE", "EVALNAME", "EXCEPT", "EXCEPTION", "EXCEPTION_INIT", 
                      "EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", 
                      "EXIT", "EXPLAIN", "EXTERNAL", "EXTRACT", "FAILURE", 
                      "FALSE", "FETCH", "FINAL", "FIRST", "FIRST_VALUE", 
                      "FLOAT", "FOLLOWING", "FOLLOWS", "FOR", "FORALL", 
                      "FORCE", "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", 
                      "GROUP", "GROUPING", "HASH", "HAVING", "HIDE", "HOUR", 
                      "IF", "IGNORE", "IMMEDIATE", "IN", "INCLUDE", "INCLUDING", 
                      "INCREMENT", "INDENT", "INDEX", "INDEXED", "INDICATOR", 
                      "INDICES", "INFINITE", "INLINE", "INNER", "INOUT", 
                      "INSERT", "INSTANTIABLE", "INSTEAD", "INT", "INTEGER", 
                      "INTERSECT", "INTERVAL", "INTO", "INVALIDATE", "IS", 
                      "ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", "LANGUAGE", 
                      "LAST", "LAST_VALUE", "LEADING", "LEFT", "LEVEL", 
                      "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", "LIMIT", 
                      "LOCAL", "LOCK", "LOCKED", "LOG", "LOGOFF", "LOGON", 
                      "LONG", "LOOP", "MAIN", "MAP", "MATCHED", "MAXVALUE", 
                      "MEASURES", "MEMBER", "MERGE", "MINUS", "MINUTE", 
                      "MINVALUE", "MLSLABEL", "MODE", "MODEL", "MODIFY", 
                      "MONTH", "MULTISET", "NAME", "NAN", "NATURAL", "NATURALN", 
                      "NAV", "NCHAR", "NCHAR_CS", "NCLOB", "NESTED", "NEW", 
                      "NO", "NOAUDIT", "NOCACHE", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", 
                      "NOMAXVALUE", "NOMINVALUE", "NONE", "NOORDER", "NOSCHEMACHECK", 
                      "NOT", "NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", 
                      "NVARCHAR2", "OBJECT", "OF", "OFF", "OID", "OLD", 
                      "ON", "ONLY", "OPEN", "OPTION", "OR", "ORADATA", "ORDER", 
                      "ORDINALITY", "OSERROR", "OUT", "OUTER", "OVER", "OVERRIDING", 
                      "PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", 
                      "PARTITION", "PASSING", "PATH", "PERCENT_ROWTYPE", 
                      "PERCENT_TYPE", "PIPELINED", "PIVOT", "PLAN", "PLS_INTEGER", 
                      "POSITIVE", "POSITIVEN", "PRAGMA", "PRECEDING", "PRECISION", 
                      "PRESENT", "PRIOR", "PROCEDURE", "RAISE", "RANGE", 
                      "RAW", "READ", "REAL", "RECORD", "REF", "REFERENCE", 
                      "REFERENCING", "REJECT", "RELIES_ON", "RENAME", "REPLACE", 
                      "RESPECT", "RESTRICT_REFERENCES", "RESULT", "RESULT_CACHE", 
                      "RETURN", "RETURNING", "REUSE", "REVERSE", "REVOKE", 
                      "RIGHT", "ROLLBACK", "ROLLUP", "ROW", "ROWID", "ROWS", 
                      "RULES", "SAMPLE", "SAVE", "SAVEPOINT", "SCHEMA", 
                      "SCHEMACHECK", "SCN", "SEARCH", "SECOND", "SEED", 
                      "SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", 
                      "SERIALIZABLE", "SERIALLY_REUSABLE", "SERVERERROR", 
                      "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", 
                      "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
                      "SINGLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", 
                      "SOME", "SPECIFICATION", "SQLDATA", "SQLERROR", "STANDALONE", 
                      "START", "STARTUP", "STATEMENT", "STATEMENT_ID", "STATIC", 
                      "STATISTICS", "STRING", "SUBMULTISET", "SUBPARTITION", 
                      "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", "SUSPEND", 
                      "TABLE", "THE", "THEN", "TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", 
                      "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
                      "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
                      "TIMEZONE_REGION", "TO", "TRAILING", "TRANSACTION", 
                      "TRANSLATE", "TREAT", "TRIGGER", "TRIM", "TRUE", "TRUNCATE", 
                      "TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", "UNLIMITED", 
                      "UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", 
                      "UROWID", "USE", "USING", "VALIDATE", "VALUE", "VALUES", 
                      "VARCHAR", "VARCHAR2", "VARIABLE", "VARRAY", "VARYING", 
                      "VERSION", "VERSIONS", "WAIT", "WARNING", "WELLFORMED", 
                      "WHEN", "WHENEVER", "WHERE", "WHILE", "WITH", "WITHIN", 
                      "WORK", "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", 
                      "XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", 
                      "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
                      "XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", 
                      "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", "ZONE", 
                      "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", 
                      "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
                      "CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", 
                      "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", "AVG", 
                      "CORR", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", 
                      "RATIO_TO_REPORT", "ROW_NUMBER", "SUM", "VARIANCE", 
                      "REGR_", "STDDEV", "VAR_", "COVAR_", "NATIONAL_CHAR_STRING_LIT", 
                      "BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", 
                      "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
                      "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
                      "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", 
                      "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
                      "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
                      "LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", 
                      "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
                      "GREATER_THAN_OP", "CONCATENATION_OP", "VERTICAL_BAR", 
                      "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", "INTRODUCER", 
                      "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
                      "PROMPT", "REGULAR_ID", "ZV" ]

    RULE_swallow_to_semi = 0
    RULE_compilation_unit = 1
    RULE_sql_script = 2
    RULE_unit_statement = 3
    RULE_drop_function = 4
    RULE_alter_function = 5
    RULE_create_function_body = 6
    RULE_parallel_enable_clause = 7
    RULE_partition_by_clause = 8
    RULE_result_cache_clause = 9
    RULE_relies_on_part = 10
    RULE_streaming_clause = 11
    RULE_drop_package = 12
    RULE_alter_package = 13
    RULE_create_package = 14
    RULE_package_body = 15
    RULE_package_spec = 16
    RULE_package_obj_spec = 17
    RULE_procedure_spec = 18
    RULE_function_spec = 19
    RULE_package_obj_body = 20
    RULE_drop_procedure = 21
    RULE_alter_procedure = 22
    RULE_create_procedure_body = 23
    RULE_drop_trigger = 24
    RULE_alter_trigger = 25
    RULE_create_trigger = 26
    RULE_trigger_follows_clause = 27
    RULE_trigger_when_clause = 28
    RULE_simple_dml_trigger = 29
    RULE_for_each_row = 30
    RULE_compound_dml_trigger = 31
    RULE_non_dml_trigger = 32
    RULE_trigger_body = 33
    RULE_routine_clause = 34
    RULE_compound_trigger_block = 35
    RULE_timing_point_section = 36
    RULE_non_dml_event = 37
    RULE_dml_event_clause = 38
    RULE_dml_event_element = 39
    RULE_dml_event_nested_clause = 40
    RULE_referencing_clause = 41
    RULE_referencing_element = 42
    RULE_drop_type = 43
    RULE_alter_type = 44
    RULE_compile_type_clause = 45
    RULE_replace_type_clause = 46
    RULE_alter_method_spec = 47
    RULE_alter_method_element = 48
    RULE_alter_attribute_definition = 49
    RULE_attribute_definition = 50
    RULE_alter_collection_clauses = 51
    RULE_dependent_handling_clause = 52
    RULE_dependent_exceptions_part = 53
    RULE_create_type = 54
    RULE_type_definition = 55
    RULE_object_type_def = 56
    RULE_object_as_part = 57
    RULE_object_under_part = 58
    RULE_nested_table_type_def = 59
    RULE_sqlj_object_type = 60
    RULE_type_body = 61
    RULE_type_body_elements = 62
    RULE_map_order_func_declaration = 63
    RULE_subprog_decl_in_type = 64
    RULE_proc_decl_in_type = 65
    RULE_func_decl_in_type = 66
    RULE_constructor_declaration = 67
    RULE_modifier_clause = 68
    RULE_object_member_spec = 69
    RULE_sqlj_object_type_attr = 70
    RULE_element_spec = 71
    RULE_element_spec_options = 72
    RULE_subprogram_spec = 73
    RULE_type_procedure_spec = 74
    RULE_type_function_spec = 75
    RULE_constructor_spec = 76
    RULE_map_order_function_spec = 77
    RULE_pragma_clause = 78
    RULE_pragma_elements = 79
    RULE_type_elements_parameter = 80
    RULE_drop_sequence = 81
    RULE_alter_sequence = 82
    RULE_create_sequence = 83
    RULE_sequence_spec = 84
    RULE_sequence_start_clause = 85
    RULE_invoker_rights_clause = 86
    RULE_compiler_parameters_clause = 87
    RULE_call_spec = 88
    RULE_java_spec = 89
    RULE_c_spec = 90
    RULE_c_agent_in_clause = 91
    RULE_c_parameters_clause = 92
    RULE_parameter = 93
    RULE_default_value_part = 94
    RULE_declare_spec = 95
    RULE_variable_declaration = 96
    RULE_subtype_declaration = 97
    RULE_cursor_declaration = 98
    RULE_parameter_spec = 99
    RULE_exception_declaration = 100
    RULE_pragma_declaration = 101
    RULE_record_declaration = 102
    RULE_record_type_dec = 103
    RULE_field_spec = 104
    RULE_record_var_dec = 105
    RULE_table_declaration = 106
    RULE_table_type_dec = 107
    RULE_table_indexed_by_part = 108
    RULE_varray_type_def = 109
    RULE_table_var_dec = 110
    RULE_seq_of_statements = 111
    RULE_label_declaration = 112
    RULE_statement = 113
    RULE_assignment_statement = 114
    RULE_continue_statement = 115
    RULE_exit_statement = 116
    RULE_goto_statement = 117
    RULE_if_statement = 118
    RULE_elsif_part = 119
    RULE_else_part = 120
    RULE_loop_statement = 121
    RULE_cursor_loop_param = 122
    RULE_forall_statement = 123
    RULE_bounds_clause = 124
    RULE_between_bound = 125
    RULE_lower_bound = 126
    RULE_upper_bound = 127
    RULE_null_statement = 128
    RULE_raise_statement = 129
    RULE_return_statement = 130
    RULE_function_call = 131
    RULE_body = 132
    RULE_exception_handler = 133
    RULE_trigger_block = 134
    RULE_block = 135
    RULE_sql_statement = 136
    RULE_execute_immediate = 137
    RULE_dynamic_returning_clause = 138
    RULE_data_manipulation_language_statements = 139
    RULE_cursor_manipulation_statements = 140
    RULE_close_statement = 141
    RULE_open_statement = 142
    RULE_fetch_statement = 143
    RULE_open_for_statement = 144
    RULE_transaction_control_statements = 145
    RULE_set_transaction_command = 146
    RULE_set_constraint_command = 147
    RULE_commit_statement = 148
    RULE_write_clause = 149
    RULE_rollback_statement = 150
    RULE_savepoint_statement = 151
    RULE_explain_statement = 152
    RULE_select_statement = 153
    RULE_subquery_factoring_clause = 154
    RULE_factoring_element = 155
    RULE_search_clause = 156
    RULE_cycle_clause = 157
    RULE_subquery = 158
    RULE_subquery_operation_part = 159
    RULE_query_block = 160
    RULE_selected_element = 161
    RULE_from_clause = 162
    RULE_table_ref_pivot = 163
    RULE_table_ref = 164
    RULE_table_ref_aux = 165
    RULE_join_clause = 166
    RULE_join_on_part = 167
    RULE_join_using_part = 168
    RULE_join_type = 169
    RULE_query_partition_clause = 170
    RULE_flashback_query_clause = 171
    RULE_pivot_clause = 172
    RULE_pivot_element = 173
    RULE_pivot_for_clause = 174
    RULE_pivot_in_clause = 175
    RULE_pivot_in_clause_element = 176
    RULE_pivot_in_clause_elements = 177
    RULE_unpivot_clause = 178
    RULE_unpivot_in_clause = 179
    RULE_unpivot_in_elements = 180
    RULE_hierarchical_query_clause = 181
    RULE_start_part = 182
    RULE_group_by_clause = 183
    RULE_group_by_elements = 184
    RULE_rollup_cube_clause = 185
    RULE_grouping_sets_clause = 186
    RULE_grouping_sets_elements = 187
    RULE_having_clause = 188
    RULE_model_clause = 189
    RULE_cell_reference_options = 190
    RULE_return_rows_clause = 191
    RULE_reference_model = 192
    RULE_main_model = 193
    RULE_model_column_clauses = 194
    RULE_model_column_partition_part = 195
    RULE_model_column_list = 196
    RULE_model_column = 197
    RULE_model_rules_clause = 198
    RULE_model_rules_part = 199
    RULE_model_rules_element = 200
    RULE_cell_assignment = 201
    RULE_model_iterate_clause = 202
    RULE_until_part = 203
    RULE_order_by_clause = 204
    RULE_order_by_elements = 205
    RULE_for_update_clause = 206
    RULE_for_update_of_part = 207
    RULE_for_update_options = 208
    RULE_limit_clause = 209
    RULE_column_name_list = 210
    RULE_update_statement = 211
    RULE_update_set_clause = 212
    RULE_column_based_update_set_clause = 213
    RULE_delete_statement = 214
    RULE_insert_statement = 215
    RULE_single_table_insert = 216
    RULE_multi_table_insert = 217
    RULE_multi_table_element = 218
    RULE_conditional_insert_clause = 219
    RULE_conditional_insert_when_part = 220
    RULE_conditional_insert_else_part = 221
    RULE_insert_into_clause = 222
    RULE_values_clause = 223
    RULE_merge_statement = 224
    RULE_merge_update_clause = 225
    RULE_merge_element = 226
    RULE_merge_update_delete_part = 227
    RULE_merge_insert_clause = 228
    RULE_selected_tableview = 229
    RULE_lock_table_statement = 230
    RULE_wait_nowait_part = 231
    RULE_lock_table_element = 232
    RULE_lock_mode = 233
    RULE_general_table_ref = 234
    RULE_static_returning_clause = 235
    RULE_error_logging_clause = 236
    RULE_error_logging_into_part = 237
    RULE_error_logging_reject_part = 238
    RULE_dml_table_expression_clause = 239
    RULE_table_collection_expression = 240
    RULE_subquery_restriction_clause = 241
    RULE_sample_clause = 242
    RULE_seed_part = 243
    RULE_cursor_expression = 244
    RULE_expression_list = 245
    RULE_condition = 246
    RULE_expression = 247
    RULE_is_part = 248
    RULE_cursor_part = 249
    RULE_multiset_type = 250
    RULE_relational_operator = 251
    RULE_like_type = 252
    RULE_like_escape_part = 253
    RULE_between_elements = 254
    RULE_concatenation = 255
    RULE_binary_expression = 256
    RULE_interval_expression = 257
    RULE_model_expression = 258
    RULE_model_expression_element = 259
    RULE_single_column_for_loop = 260
    RULE_for_like_part = 261
    RULE_for_increment_decrement_type = 262
    RULE_multi_column_for_loop = 263
    RULE_unary_expression = 264
    RULE_case_statement = 265
    RULE_simple_case_statement = 266
    RULE_simple_case_when_part = 267
    RULE_searched_case_statement = 268
    RULE_searched_case_when_part = 269
    RULE_case_else_part = 270
    RULE_atom = 271
    RULE_expression_or_vector = 272
    RULE_vector_expr = 273
    RULE_quantified_expression = 274
    RULE_standard_function = 275
    RULE_aggregate_windowed_function = 276
    RULE_over_clause_keyword = 277
    RULE_within_or_over_clause_keyword = 278
    RULE_standard_prediction_function_keyword = 279
    RULE_over_clause = 280
    RULE_windowing_clause = 281
    RULE_windowing_type = 282
    RULE_windowing_elements = 283
    RULE_using_clause = 284
    RULE_using_element = 285
    RULE_collect_order_by_part = 286
    RULE_within_or_over_part = 287
    RULE_cost_matrix_clause = 288
    RULE_xml_passing_clause = 289
    RULE_xml_attributes_clause = 290
    RULE_xml_namespaces_clause = 291
    RULE_xml_table_column = 292
    RULE_xml_general_default_part = 293
    RULE_xml_multiuse_expression_element = 294
    RULE_xmlroot_param_version_part = 295
    RULE_xmlroot_param_standalone_part = 296
    RULE_xmlserialize_param_enconding_part = 297
    RULE_xmlserialize_param_version_part = 298
    RULE_xmlserialize_param_ident_part = 299
    RULE_sql_plus_command = 300
    RULE_whenever_command = 301
    RULE_set_command = 302
    RULE_exit_command = 303
    RULE_prompt_command = 304
    RULE_show_errors_command = 305
    RULE_partition_extension_clause = 306
    RULE_column_alias = 307
    RULE_table_alias = 308
    RULE_alias_quoted_string = 309
    RULE_where_clause = 310
    RULE_current_of_clause = 311
    RULE_into_clause = 312
    RULE_xml_column_name = 313
    RULE_cost_class_name = 314
    RULE_attribute_name = 315
    RULE_savepoint_name = 316
    RULE_rollback_segment_name = 317
    RULE_table_var_name = 318
    RULE_schema_name = 319
    RULE_routine_name = 320
    RULE_package_name = 321
    RULE_implementation_type_name = 322
    RULE_parameter_name = 323
    RULE_reference_model_name = 324
    RULE_main_model_name = 325
    RULE_aggregate_function_name = 326
    RULE_query_name = 327
    RULE_constraint_name = 328
    RULE_label_name = 329
    RULE_type_name = 330
    RULE_sequence_name = 331
    RULE_exception_name = 332
    RULE_function_name = 333
    RULE_procedure_name = 334
    RULE_trigger_name = 335
    RULE_variable_name = 336
    RULE_index_name = 337
    RULE_cursor_name = 338
    RULE_record_name = 339
    RULE_collection_name = 340
    RULE_link_name = 341
    RULE_column_name = 342
    RULE_tableview_name = 343
    RULE_dot_id = 344
    RULE_star = 345
    RULE_keep_clause = 346
    RULE_function_argument = 347
    RULE_function_argument_analytic = 348
    RULE_function_argument_modeling = 349
    RULE_respect_or_ignore_nulls = 350
    RULE_argument = 351
    RULE_type_spec = 352
    RULE_datatype = 353
    RULE_precision_part = 354
    RULE_native_datatype_element = 355
    RULE_bind_variable = 356
    RULE_general_element = 357
    RULE_table_element = 358
    RULE_constant = 359
    RULE_numeric = 360
    RULE_numeric_negative = 361
    RULE_quoted_string = 362
    RULE_r_id = 363
    RULE_id_expression = 364
    RULE_not_equal_op = 365
    RULE_greater_than_or_equals_op = 366
    RULE_less_than_or_equals_op = 367
    RULE_concatenation_op = 368
    RULE_outer_join_sign = 369
    RULE_regular_id = 370

    ruleNames =  [ "swallow_to_semi", "compilation_unit", "sql_script", 
                   "unit_statement", "drop_function", "alter_function", 
                   "create_function_body", "parallel_enable_clause", "partition_by_clause", 
                   "result_cache_clause", "relies_on_part", "streaming_clause", 
                   "drop_package", "alter_package", "create_package", "package_body", 
                   "package_spec", "package_obj_spec", "procedure_spec", 
                   "function_spec", "package_obj_body", "drop_procedure", 
                   "alter_procedure", "create_procedure_body", "drop_trigger", 
                   "alter_trigger", "create_trigger", "trigger_follows_clause", 
                   "trigger_when_clause", "simple_dml_trigger", "for_each_row", 
                   "compound_dml_trigger", "non_dml_trigger", "trigger_body", 
                   "routine_clause", "compound_trigger_block", "timing_point_section", 
                   "non_dml_event", "dml_event_clause", "dml_event_element", 
                   "dml_event_nested_clause", "referencing_clause", "referencing_element", 
                   "drop_type", "alter_type", "compile_type_clause", "replace_type_clause", 
                   "alter_method_spec", "alter_method_element", "alter_attribute_definition", 
                   "attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
                   "dependent_exceptions_part", "create_type", "type_definition", 
                   "object_type_def", "object_as_part", "object_under_part", 
                   "nested_table_type_def", "sqlj_object_type", "type_body", 
                   "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
                   "proc_decl_in_type", "func_decl_in_type", "constructor_declaration", 
                   "modifier_clause", "object_member_spec", "sqlj_object_type_attr", 
                   "element_spec", "element_spec_options", "subprogram_spec", 
                   "type_procedure_spec", "type_function_spec", "constructor_spec", 
                   "map_order_function_spec", "pragma_clause", "pragma_elements", 
                   "type_elements_parameter", "drop_sequence", "alter_sequence", 
                   "create_sequence", "sequence_spec", "sequence_start_clause", 
                   "invoker_rights_clause", "compiler_parameters_clause", 
                   "call_spec", "java_spec", "c_spec", "c_agent_in_clause", 
                   "c_parameters_clause", "parameter", "default_value_part", 
                   "declare_spec", "variable_declaration", "subtype_declaration", 
                   "cursor_declaration", "parameter_spec", "exception_declaration", 
                   "pragma_declaration", "record_declaration", "record_type_dec", 
                   "field_spec", "record_var_dec", "table_declaration", 
                   "table_type_dec", "table_indexed_by_part", "varray_type_def", 
                   "table_var_dec", "seq_of_statements", "label_declaration", 
                   "statement", "assignment_statement", "continue_statement", 
                   "exit_statement", "goto_statement", "if_statement", "elsif_part", 
                   "else_part", "loop_statement", "cursor_loop_param", "forall_statement", 
                   "bounds_clause", "between_bound", "lower_bound", "upper_bound", 
                   "null_statement", "raise_statement", "return_statement", 
                   "function_call", "body", "exception_handler", "trigger_block", 
                   "block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
                   "data_manipulation_language_statements", "cursor_manipulation_statements", 
                   "close_statement", "open_statement", "fetch_statement", 
                   "open_for_statement", "transaction_control_statements", 
                   "set_transaction_command", "set_constraint_command", 
                   "commit_statement", "write_clause", "rollback_statement", 
                   "savepoint_statement", "explain_statement", "select_statement", 
                   "subquery_factoring_clause", "factoring_element", "search_clause", 
                   "cycle_clause", "subquery", "subquery_operation_part", 
                   "query_block", "selected_element", "from_clause", "table_ref_pivot", 
                   "table_ref", "table_ref_aux", "join_clause", "join_on_part", 
                   "join_using_part", "join_type", "query_partition_clause", 
                   "flashback_query_clause", "pivot_clause", "pivot_element", 
                   "pivot_for_clause", "pivot_in_clause", "pivot_in_clause_element", 
                   "pivot_in_clause_elements", "unpivot_clause", "unpivot_in_clause", 
                   "unpivot_in_elements", "hierarchical_query_clause", "start_part", 
                   "group_by_clause", "group_by_elements", "rollup_cube_clause", 
                   "grouping_sets_clause", "grouping_sets_elements", "having_clause", 
                   "model_clause", "cell_reference_options", "return_rows_clause", 
                   "reference_model", "main_model", "model_column_clauses", 
                   "model_column_partition_part", "model_column_list", "model_column", 
                   "model_rules_clause", "model_rules_part", "model_rules_element", 
                   "cell_assignment", "model_iterate_clause", "until_part", 
                   "order_by_clause", "order_by_elements", "for_update_clause", 
                   "for_update_of_part", "for_update_options", "limit_clause", 
                   "column_name_list", "update_statement", "update_set_clause", 
                   "column_based_update_set_clause", "delete_statement", 
                   "insert_statement", "single_table_insert", "multi_table_insert", 
                   "multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
                   "conditional_insert_else_part", "insert_into_clause", 
                   "values_clause", "merge_statement", "merge_update_clause", 
                   "merge_element", "merge_update_delete_part", "merge_insert_clause", 
                   "selected_tableview", "lock_table_statement", "wait_nowait_part", 
                   "lock_table_element", "lock_mode", "general_table_ref", 
                   "static_returning_clause", "error_logging_clause", "error_logging_into_part", 
                   "error_logging_reject_part", "dml_table_expression_clause", 
                   "table_collection_expression", "subquery_restriction_clause", 
                   "sample_clause", "seed_part", "cursor_expression", "expression_list", 
                   "condition", "expression", "is_part", "cursor_part", 
                   "multiset_type", "relational_operator", "like_type", 
                   "like_escape_part", "between_elements", "concatenation", 
                   "binary_expression", "interval_expression", "model_expression", 
                   "model_expression_element", "single_column_for_loop", 
                   "for_like_part", "for_increment_decrement_type", "multi_column_for_loop", 
                   "unary_expression", "case_statement", "simple_case_statement", 
                   "simple_case_when_part", "searched_case_statement", "searched_case_when_part", 
                   "case_else_part", "atom", "expression_or_vector", "vector_expr", 
                   "quantified_expression", "standard_function", "aggregate_windowed_function", 
                   "over_clause_keyword", "within_or_over_clause_keyword", 
                   "standard_prediction_function_keyword", "over_clause", 
                   "windowing_clause", "windowing_type", "windowing_elements", 
                   "using_clause", "using_element", "collect_order_by_part", 
                   "within_or_over_part", "cost_matrix_clause", "xml_passing_clause", 
                   "xml_attributes_clause", "xml_namespaces_clause", "xml_table_column", 
                   "xml_general_default_part", "xml_multiuse_expression_element", 
                   "xmlroot_param_version_part", "xmlroot_param_standalone_part", 
                   "xmlserialize_param_enconding_part", "xmlserialize_param_version_part", 
                   "xmlserialize_param_ident_part", "sql_plus_command", 
                   "whenever_command", "set_command", "exit_command", "prompt_command", 
                   "show_errors_command", "partition_extension_clause", 
                   "column_alias", "table_alias", "alias_quoted_string", 
                   "where_clause", "current_of_clause", "into_clause", "xml_column_name", 
                   "cost_class_name", "attribute_name", "savepoint_name", 
                   "rollback_segment_name", "table_var_name", "schema_name", 
                   "routine_name", "package_name", "implementation_type_name", 
                   "parameter_name", "reference_model_name", "main_model_name", 
                   "aggregate_function_name", "query_name", "constraint_name", 
                   "label_name", "type_name", "sequence_name", "exception_name", 
                   "function_name", "procedure_name", "trigger_name", "variable_name", 
                   "index_name", "cursor_name", "record_name", "collection_name", 
                   "link_name", "column_name", "tableview_name", "dot_id", 
                   "star", "keep_clause", "function_argument", "function_argument_analytic", 
                   "function_argument_modeling", "respect_or_ignore_nulls", 
                   "argument", "type_spec", "datatype", "precision_part", 
                   "native_datatype_element", "bind_variable", "general_element", 
                   "table_element", "constant", "numeric", "numeric_negative", 
                   "quoted_string", "r_id", "id_expression", "not_equal_op", 
                   "greater_than_or_equals_op", "less_than_or_equals_op", 
                   "concatenation_op", "outer_join_sign", "regular_id" ]

    EOF = Token.EOF
    T__0=1
    A_LETTER=2
    ADD=3
    AFTER=4
    AGENT=5
    AGGREGATE=6
    ALL=7
    ALTER=8
    ANALYZE=9
    AND=10
    ANY=11
    ARRAY=12
    AS=13
    ASC=14
    ASSOCIATE=15
    AT=16
    ATTRIBUTE=17
    AUDIT=18
    AUTHID=19
    AUTO=20
    AUTOMATIC=21
    AUTONOMOUS_TRANSACTION=22
    BATCH=23
    BEFORE=24
    BEGIN=25
    BETWEEN=26
    BFILE=27
    BINARY_DOUBLE=28
    BINARY_FLOAT=29
    BINARY_INTEGER=30
    BLOB=31
    BLOCK=32
    BODY=33
    BOOLEAN=34
    BOTH=35
    BREADTH=36
    BULK=37
    BY=38
    BYTE=39
    C_LETTER=40
    CACHE=41
    CALL=42
    CANONICAL=43
    CASCADE=44
    CASE=45
    CAST=46
    CHAR=47
    CHAR_CS=48
    CHARACTER=49
    CHECK=50
    CHR=51
    CLOB=52
    CLOSE=53
    CLUSTER=54
    COLLECT=55
    COLUMNS=56
    COMMENT=57
    COMMIT=58
    COMMITTED=59
    COMPATIBILITY=60
    COMPILE=61
    COMPOUND=62
    CONNECT=63
    CONNECT_BY_ROOT=64
    CONSTANT=65
    CONSTRAINT=66
    CONSTRAINTS=67
    CONSTRUCTOR=68
    CONTENT=69
    CONTEXT=70
    CONTINUE=71
    CONVERT=72
    CORRUPT_XID=73
    CORRUPT_XID_ALL=74
    COST=75
    COUNT=76
    CREATE=77
    CROSS=78
    CUBE=79
    CURRENT=80
    CURRENT_USER=81
    CURSOR=82
    CUSTOMDATUM=83
    CYCLE=84
    DATA=85
    DATABASE=86
    DATE=87
    DAY=88
    DB_ROLE_CHANGE=89
    DBTIMEZONE=90
    DDL=91
    DEBUG=92
    DEC=93
    DECIMAL=94
    DECLARE=95
    DECOMPOSE=96
    DECREMENT=97
    DEFAULT=98
    DEFAULTS=99
    DEFERRED=100
    DEFINER=101
    DELETE=102
    DEPTH=103
    DESC=104
    DETERMINISTIC=105
    DIMENSION=106
    DISABLE=107
    DISASSOCIATE=108
    DISTINCT=109
    DOCUMENT=110
    DOUBLE=111
    DROP=112
    DSINTERVAL_UNCONSTRAINED=113
    EACH=114
    ELEMENT=115
    ELSE=116
    ELSIF=117
    EMPTY=118
    ENABLE=119
    ENCODING=120
    END=121
    ENTITYESCAPING=122
    ERR=123
    ERRORS=124
    ESCAPE=125
    EVALNAME=126
    EXCEPT=127
    EXCEPTION=128
    EXCEPTION_INIT=129
    EXCEPTIONS=130
    EXCLUDE=131
    EXCLUSIVE=132
    EXECUTE=133
    EXISTS=134
    EXIT=135
    EXPLAIN=136
    EXTERNAL=137
    EXTRACT=138
    FAILURE=139
    FALSE=140
    FETCH=141
    FINAL=142
    FIRST=143
    FIRST_VALUE=144
    FLOAT=145
    FOLLOWING=146
    FOLLOWS=147
    FOR=148
    FORALL=149
    FORCE=150
    FROM=151
    FULL=152
    FUNCTION=153
    GOTO=154
    GRANT=155
    GROUP=156
    GROUPING=157
    HASH=158
    HAVING=159
    HIDE=160
    HOUR=161
    IF=162
    IGNORE=163
    IMMEDIATE=164
    IN=165
    INCLUDE=166
    INCLUDING=167
    INCREMENT=168
    INDENT=169
    INDEX=170
    INDEXED=171
    INDICATOR=172
    INDICES=173
    INFINITE=174
    INLINE=175
    INNER=176
    INOUT=177
    INSERT=178
    INSTANTIABLE=179
    INSTEAD=180
    INT=181
    INTEGER=182
    INTERSECT=183
    INTERVAL=184
    INTO=185
    INVALIDATE=186
    IS=187
    ISOLATION=188
    ITERATE=189
    JAVA=190
    JOIN=191
    KEEP=192
    LANGUAGE=193
    LAST=194
    LAST_VALUE=195
    LEADING=196
    LEFT=197
    LEVEL=198
    LIBRARY=199
    LIKE=200
    LIKE2=201
    LIKE4=202
    LIKEC=203
    LIMIT=204
    LOCAL=205
    LOCK=206
    LOCKED=207
    LOG=208
    LOGOFF=209
    LOGON=210
    LONG=211
    LOOP=212
    MAIN=213
    MAP=214
    MATCHED=215
    MAXVALUE=216
    MEASURES=217
    MEMBER=218
    MERGE=219
    MINUS=220
    MINUTE=221
    MINVALUE=222
    MLSLABEL=223
    MODE=224
    MODEL=225
    MODIFY=226
    MONTH=227
    MULTISET=228
    NAME=229
    NAN=230
    NATURAL=231
    NATURALN=232
    NAV=233
    NCHAR=234
    NCHAR_CS=235
    NCLOB=236
    NESTED=237
    NEW=238
    NO=239
    NOAUDIT=240
    NOCACHE=241
    NOCOPY=242
    NOCYCLE=243
    NOENTITYESCAPING=244
    NOMAXVALUE=245
    NOMINVALUE=246
    NONE=247
    NOORDER=248
    NOSCHEMACHECK=249
    NOT=250
    NOWAIT=251
    NULL=252
    NULLS=253
    NUMBER=254
    NUMERIC=255
    NVARCHAR2=256
    OBJECT=257
    OF=258
    OFF=259
    OID=260
    OLD=261
    ON=262
    ONLY=263
    OPEN=264
    OPTION=265
    OR=266
    ORADATA=267
    ORDER=268
    ORDINALITY=269
    OSERROR=270
    OUT=271
    OUTER=272
    OVER=273
    OVERRIDING=274
    PACKAGE=275
    PARALLEL_ENABLE=276
    PARAMETERS=277
    PARENT=278
    PARTITION=279
    PASSING=280
    PATH=281
    PERCENT_ROWTYPE=282
    PERCENT_TYPE=283
    PIPELINED=284
    PIVOT=285
    PLAN=286
    PLS_INTEGER=287
    POSITIVE=288
    POSITIVEN=289
    PRAGMA=290
    PRECEDING=291
    PRECISION=292
    PRESENT=293
    PRIOR=294
    PROCEDURE=295
    RAISE=296
    RANGE=297
    RAW=298
    READ=299
    REAL=300
    RECORD=301
    REF=302
    REFERENCE=303
    REFERENCING=304
    REJECT=305
    RELIES_ON=306
    RENAME=307
    REPLACE=308
    RESPECT=309
    RESTRICT_REFERENCES=310
    RESULT=311
    RESULT_CACHE=312
    RETURN=313
    RETURNING=314
    REUSE=315
    REVERSE=316
    REVOKE=317
    RIGHT=318
    ROLLBACK=319
    ROLLUP=320
    ROW=321
    ROWID=322
    ROWS=323
    RULES=324
    SAMPLE=325
    SAVE=326
    SAVEPOINT=327
    SCHEMA=328
    SCHEMACHECK=329
    SCN=330
    SEARCH=331
    SECOND=332
    SEED=333
    SEGMENT=334
    SELECT=335
    SELF=336
    SEQUENCE=337
    SEQUENTIAL=338
    SERIALIZABLE=339
    SERIALLY_REUSABLE=340
    SERVERERROR=341
    SESSIONTIMEZONE=342
    SET=343
    SETS=344
    SETTINGS=345
    SHARE=346
    SHOW=347
    SHUTDOWN=348
    SIBLINGS=349
    SIGNTYPE=350
    SIMPLE_INTEGER=351
    SINGLE=352
    SIZE=353
    SKIP_=354
    SMALLINT=355
    SNAPSHOT=356
    SOME=357
    SPECIFICATION=358
    SQLDATA=359
    SQLERROR=360
    STANDALONE=361
    START=362
    STARTUP=363
    STATEMENT=364
    STATEMENT_ID=365
    STATIC=366
    STATISTICS=367
    STRING=368
    SUBMULTISET=369
    SUBPARTITION=370
    SUBSTITUTABLE=371
    SUBTYPE=372
    SUCCESS=373
    SUSPEND=374
    TABLE=375
    THE=376
    THEN=377
    TIME=378
    TIMESTAMP=379
    TIMESTAMP_LTZ_UNCONSTRAINED=380
    TIMESTAMP_TZ_UNCONSTRAINED=381
    TIMESTAMP_UNCONSTRAINED=382
    TIMEZONE_ABBR=383
    TIMEZONE_HOUR=384
    TIMEZONE_MINUTE=385
    TIMEZONE_REGION=386
    TO=387
    TRAILING=388
    TRANSACTION=389
    TRANSLATE=390
    TREAT=391
    TRIGGER=392
    TRIM=393
    TRUE=394
    TRUNCATE=395
    TYPE=396
    UNBOUNDED=397
    UNDER=398
    UNION=399
    UNIQUE=400
    UNLIMITED=401
    UNPIVOT=402
    UNTIL=403
    UPDATE=404
    UPDATED=405
    UPSERT=406
    UROWID=407
    USE=408
    USING=409
    VALIDATE=410
    VALUE=411
    VALUES=412
    VARCHAR=413
    VARCHAR2=414
    VARIABLE=415
    VARRAY=416
    VARYING=417
    VERSION=418
    VERSIONS=419
    WAIT=420
    WARNING=421
    WELLFORMED=422
    WHEN=423
    WHENEVER=424
    WHERE=425
    WHILE=426
    WITH=427
    WITHIN=428
    WORK=429
    WRITE=430
    XML=431
    XMLAGG=432
    XMLATTRIBUTES=433
    XMLCAST=434
    XMLCOLATTVAL=435
    XMLELEMENT=436
    XMLEXISTS=437
    XMLFOREST=438
    XMLNAMESPACES=439
    XMLPARSE=440
    XMLPI=441
    XMLQUERY=442
    XMLROOT=443
    XMLSERIALIZE=444
    XMLTABLE=445
    YEAR=446
    YES=447
    YMINTERVAL_UNCONSTRAINED=448
    ZONE=449
    PREDICTION=450
    PREDICTION_BOUNDS=451
    PREDICTION_COST=452
    PREDICTION_DETAILS=453
    PREDICTION_PROBABILITY=454
    PREDICTION_SET=455
    CUME_DIST=456
    DENSE_RANK=457
    LISTAGG=458
    PERCENT_RANK=459
    PERCENTILE_CONT=460
    PERCENTILE_DISC=461
    RANK=462
    AVG=463
    CORR=464
    LAG=465
    LEAD=466
    MAX=467
    MEDIAN=468
    MIN=469
    NTILE=470
    RATIO_TO_REPORT=471
    ROW_NUMBER=472
    SUM=473
    VARIANCE=474
    REGR_=475
    STDDEV=476
    VAR_=477
    COVAR_=478
    NATIONAL_CHAR_STRING_LIT=479
    BIT_STRING_LIT=480
    HEX_STRING_LIT=481
    DOUBLE_PERIOD=482
    PERIOD=483
    UNSIGNED_INTEGER=484
    APPROXIMATE_NUM_LIT=485
    CHAR_STRING=486
    DELIMITED_ID=487
    PERCENT=488
    AMPERSAND=489
    LEFT_PAREN=490
    RIGHT_PAREN=491
    DOUBLE_ASTERISK=492
    ASTERISK=493
    PLUS_SIGN=494
    MINUS_SIGN=495
    COMMA=496
    SOLIDUS=497
    AT_SIGN=498
    ASSIGN_OP=499
    BINDVAR=500
    COLON=501
    SEMICOLON=502
    LESS_THAN_OR_EQUALS_OP=503
    LESS_THAN_OP=504
    GREATER_THAN_OR_EQUALS_OP=505
    NOT_EQUAL_OP=506
    CARRET_OPERATOR_PART=507
    TILDE_OPERATOR_PART=508
    EXCLAMATION_OPERATOR_PART=509
    GREATER_THAN_OP=510
    CONCATENATION_OP=511
    VERTICAL_BAR=512
    EQUALS_OP=513
    LEFT_BRACKET=514
    RIGHT_BRACKET=515
    INTRODUCER=516
    SPACES=517
    SINGLE_LINE_COMMENT=518
    MULTI_LINE_COMMENT=519
    PROMPT=520
    REGULAR_ID=521
    ZV=522

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Swallow_to_semiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_swallow_to_semi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwallow_to_semi" ):
                listener.enterSwallow_to_semi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwallow_to_semi" ):
                listener.exitSwallow_to_semi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwallow_to_semi" ):
                return visitor.visitSwallow_to_semi(self)
            else:
                return visitor.visitChildren(self)




    def swallow_to_semi(self):

        localctx = plsqlParser.Swallow_to_semiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_swallow_to_semi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 742
                _la = self._input.LA(1)
                if _la <= 0 or _la==plsqlParser.SEMICOLON:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 745 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.T__0) | (1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ALTER) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.AND) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASC) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BEGIN) | (1 << plsqlParser.BETWEEN) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BREADTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BY) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CACHE) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHECK) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND) | (1 << plsqlParser.CONNECT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CREATE - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECLARE - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)) | (1 << (plsqlParser.DEFINER - 64)) | (1 << (plsqlParser.DELETE - 64)) | (1 << (plsqlParser.DEPTH - 64)) | (1 << (plsqlParser.DESC - 64)) | (1 << (plsqlParser.DETERMINISTIC - 64)) | (1 << (plsqlParser.DIMENSION - 64)) | (1 << (plsqlParser.DISABLE - 64)) | (1 << (plsqlParser.DISASSOCIATE - 64)) | (1 << (plsqlParser.DISTINCT - 64)) | (1 << (plsqlParser.DOCUMENT - 64)) | (1 << (plsqlParser.DOUBLE - 64)) | (1 << (plsqlParser.DROP - 64)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (plsqlParser.EACH - 64)) | (1 << (plsqlParser.ELEMENT - 64)) | (1 << (plsqlParser.ELSE - 64)) | (1 << (plsqlParser.ELSIF - 64)) | (1 << (plsqlParser.EMPTY - 64)) | (1 << (plsqlParser.ENABLE - 64)) | (1 << (plsqlParser.ENCODING - 64)) | (1 << (plsqlParser.END - 64)) | (1 << (plsqlParser.ENTITYESCAPING - 64)) | (1 << (plsqlParser.ERR - 64)) | (1 << (plsqlParser.ERRORS - 64)) | (1 << (plsqlParser.ESCAPE - 64)) | (1 << (plsqlParser.EVALNAME - 64)) | (1 << (plsqlParser.EXCEPT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXCLUSIVE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FETCH - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FOR - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FROM - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)) | (1 << (plsqlParser.GOTO - 128)) | (1 << (plsqlParser.GRANT - 128)) | (1 << (plsqlParser.GROUP - 128)) | (1 << (plsqlParser.GROUPING - 128)) | (1 << (plsqlParser.HASH - 128)) | (1 << (plsqlParser.HAVING - 128)) | (1 << (plsqlParser.HIDE - 128)) | (1 << (plsqlParser.HOUR - 128)) | (1 << (plsqlParser.IF - 128)) | (1 << (plsqlParser.IGNORE - 128)) | (1 << (plsqlParser.IMMEDIATE - 128)) | (1 << (plsqlParser.IN - 128)) | (1 << (plsqlParser.INCLUDE - 128)) | (1 << (plsqlParser.INCLUDING - 128)) | (1 << (plsqlParser.INCREMENT - 128)) | (1 << (plsqlParser.INDENT - 128)) | (1 << (plsqlParser.INDEX - 128)) | (1 << (plsqlParser.INDEXED - 128)) | (1 << (plsqlParser.INDICATOR - 128)) | (1 << (plsqlParser.INDICES - 128)) | (1 << (plsqlParser.INFINITE - 128)) | (1 << (plsqlParser.INLINE - 128)) | (1 << (plsqlParser.INNER - 128)) | (1 << (plsqlParser.INOUT - 128)) | (1 << (plsqlParser.INSERT - 128)) | (1 << (plsqlParser.INSTANTIABLE - 128)) | (1 << (plsqlParser.INSTEAD - 128)) | (1 << (plsqlParser.INT - 128)) | (1 << (plsqlParser.INTEGER - 128)) | (1 << (plsqlParser.INTERSECT - 128)) | (1 << (plsqlParser.INTERVAL - 128)) | (1 << (plsqlParser.INTO - 128)) | (1 << (plsqlParser.INVALIDATE - 128)) | (1 << (plsqlParser.IS - 128)) | (1 << (plsqlParser.ISOLATION - 128)) | (1 << (plsqlParser.ITERATE - 128)) | (1 << (plsqlParser.JAVA - 128)) | (1 << (plsqlParser.JOIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (plsqlParser.KEEP - 192)) | (1 << (plsqlParser.LANGUAGE - 192)) | (1 << (plsqlParser.LAST - 192)) | (1 << (plsqlParser.LAST_VALUE - 192)) | (1 << (plsqlParser.LEADING - 192)) | (1 << (plsqlParser.LEFT - 192)) | (1 << (plsqlParser.LEVEL - 192)) | (1 << (plsqlParser.LIBRARY - 192)) | (1 << (plsqlParser.LIKE - 192)) | (1 << (plsqlParser.LIKE2 - 192)) | (1 << (plsqlParser.LIKE4 - 192)) | (1 << (plsqlParser.LIKEC - 192)) | (1 << (plsqlParser.LIMIT - 192)) | (1 << (plsqlParser.LOCAL - 192)) | (1 << (plsqlParser.LOCK - 192)) | (1 << (plsqlParser.LOCKED - 192)) | (1 << (plsqlParser.LOG - 192)) | (1 << (plsqlParser.LOGOFF - 192)) | (1 << (plsqlParser.LOGON - 192)) | (1 << (plsqlParser.LONG - 192)) | (1 << (plsqlParser.LOOP - 192)) | (1 << (plsqlParser.MAIN - 192)) | (1 << (plsqlParser.MAP - 192)) | (1 << (plsqlParser.MATCHED - 192)) | (1 << (plsqlParser.MAXVALUE - 192)) | (1 << (plsqlParser.MEASURES - 192)) | (1 << (plsqlParser.MEMBER - 192)) | (1 << (plsqlParser.MERGE - 192)) | (1 << (plsqlParser.MINUS - 192)) | (1 << (plsqlParser.MINUTE - 192)) | (1 << (plsqlParser.MINVALUE - 192)) | (1 << (plsqlParser.MLSLABEL - 192)) | (1 << (plsqlParser.MODE - 192)) | (1 << (plsqlParser.MODEL - 192)) | (1 << (plsqlParser.MODIFY - 192)) | (1 << (plsqlParser.MONTH - 192)) | (1 << (plsqlParser.MULTISET - 192)) | (1 << (plsqlParser.NAME - 192)) | (1 << (plsqlParser.NAN - 192)) | (1 << (plsqlParser.NATURAL - 192)) | (1 << (plsqlParser.NATURALN - 192)) | (1 << (plsqlParser.NAV - 192)) | (1 << (plsqlParser.NCHAR - 192)) | (1 << (plsqlParser.NCHAR_CS - 192)) | (1 << (plsqlParser.NCLOB - 192)) | (1 << (plsqlParser.NESTED - 192)) | (1 << (plsqlParser.NEW - 192)) | (1 << (plsqlParser.NO - 192)) | (1 << (plsqlParser.NOAUDIT - 192)) | (1 << (plsqlParser.NOCACHE - 192)) | (1 << (plsqlParser.NOCOPY - 192)) | (1 << (plsqlParser.NOCYCLE - 192)) | (1 << (plsqlParser.NOENTITYESCAPING - 192)) | (1 << (plsqlParser.NOMAXVALUE - 192)) | (1 << (plsqlParser.NOMINVALUE - 192)) | (1 << (plsqlParser.NONE - 192)) | (1 << (plsqlParser.NOORDER - 192)) | (1 << (plsqlParser.NOSCHEMACHECK - 192)) | (1 << (plsqlParser.NOT - 192)) | (1 << (plsqlParser.NOWAIT - 192)) | (1 << (plsqlParser.NULL - 192)) | (1 << (plsqlParser.NULLS - 192)) | (1 << (plsqlParser.NUMBER - 192)) | (1 << (plsqlParser.NUMERIC - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (plsqlParser.NVARCHAR2 - 256)) | (1 << (plsqlParser.OBJECT - 256)) | (1 << (plsqlParser.OF - 256)) | (1 << (plsqlParser.OFF - 256)) | (1 << (plsqlParser.OID - 256)) | (1 << (plsqlParser.OLD - 256)) | (1 << (plsqlParser.ON - 256)) | (1 << (plsqlParser.ONLY - 256)) | (1 << (plsqlParser.OPEN - 256)) | (1 << (plsqlParser.OPTION - 256)) | (1 << (plsqlParser.OR - 256)) | (1 << (plsqlParser.ORADATA - 256)) | (1 << (plsqlParser.ORDER - 256)) | (1 << (plsqlParser.ORDINALITY - 256)) | (1 << (plsqlParser.OSERROR - 256)) | (1 << (plsqlParser.OUT - 256)) | (1 << (plsqlParser.OUTER - 256)) | (1 << (plsqlParser.OVER - 256)) | (1 << (plsqlParser.OVERRIDING - 256)) | (1 << (plsqlParser.PACKAGE - 256)) | (1 << (plsqlParser.PARALLEL_ENABLE - 256)) | (1 << (plsqlParser.PARAMETERS - 256)) | (1 << (plsqlParser.PARENT - 256)) | (1 << (plsqlParser.PARTITION - 256)) | (1 << (plsqlParser.PASSING - 256)) | (1 << (plsqlParser.PATH - 256)) | (1 << (plsqlParser.PERCENT_ROWTYPE - 256)) | (1 << (plsqlParser.PERCENT_TYPE - 256)) | (1 << (plsqlParser.PIPELINED - 256)) | (1 << (plsqlParser.PIVOT - 256)) | (1 << (plsqlParser.PLAN - 256)) | (1 << (plsqlParser.PLS_INTEGER - 256)) | (1 << (plsqlParser.POSITIVE - 256)) | (1 << (plsqlParser.POSITIVEN - 256)) | (1 << (plsqlParser.PRAGMA - 256)) | (1 << (plsqlParser.PRECEDING - 256)) | (1 << (plsqlParser.PRECISION - 256)) | (1 << (plsqlParser.PRESENT - 256)) | (1 << (plsqlParser.PRIOR - 256)) | (1 << (plsqlParser.PROCEDURE - 256)) | (1 << (plsqlParser.RAISE - 256)) | (1 << (plsqlParser.RANGE - 256)) | (1 << (plsqlParser.RAW - 256)) | (1 << (plsqlParser.READ - 256)) | (1 << (plsqlParser.REAL - 256)) | (1 << (plsqlParser.RECORD - 256)) | (1 << (plsqlParser.REF - 256)) | (1 << (plsqlParser.REFERENCE - 256)) | (1 << (plsqlParser.REFERENCING - 256)) | (1 << (plsqlParser.REJECT - 256)) | (1 << (plsqlParser.RELIES_ON - 256)) | (1 << (plsqlParser.RENAME - 256)) | (1 << (plsqlParser.REPLACE - 256)) | (1 << (plsqlParser.RESPECT - 256)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 256)) | (1 << (plsqlParser.RESULT - 256)) | (1 << (plsqlParser.RESULT_CACHE - 256)) | (1 << (plsqlParser.RETURN - 256)) | (1 << (plsqlParser.RETURNING - 256)) | (1 << (plsqlParser.REUSE - 256)) | (1 << (plsqlParser.REVERSE - 256)) | (1 << (plsqlParser.REVOKE - 256)) | (1 << (plsqlParser.RIGHT - 256)) | (1 << (plsqlParser.ROLLBACK - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (plsqlParser.ROLLUP - 320)) | (1 << (plsqlParser.ROW - 320)) | (1 << (plsqlParser.ROWID - 320)) | (1 << (plsqlParser.ROWS - 320)) | (1 << (plsqlParser.RULES - 320)) | (1 << (plsqlParser.SAMPLE - 320)) | (1 << (plsqlParser.SAVE - 320)) | (1 << (plsqlParser.SAVEPOINT - 320)) | (1 << (plsqlParser.SCHEMA - 320)) | (1 << (plsqlParser.SCHEMACHECK - 320)) | (1 << (plsqlParser.SCN - 320)) | (1 << (plsqlParser.SEARCH - 320)) | (1 << (plsqlParser.SECOND - 320)) | (1 << (plsqlParser.SEED - 320)) | (1 << (plsqlParser.SEGMENT - 320)) | (1 << (plsqlParser.SELECT - 320)) | (1 << (plsqlParser.SELF - 320)) | (1 << (plsqlParser.SEQUENCE - 320)) | (1 << (plsqlParser.SEQUENTIAL - 320)) | (1 << (plsqlParser.SERIALIZABLE - 320)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 320)) | (1 << (plsqlParser.SERVERERROR - 320)) | (1 << (plsqlParser.SESSIONTIMEZONE - 320)) | (1 << (plsqlParser.SET - 320)) | (1 << (plsqlParser.SETS - 320)) | (1 << (plsqlParser.SETTINGS - 320)) | (1 << (plsqlParser.SHARE - 320)) | (1 << (plsqlParser.SHOW - 320)) | (1 << (plsqlParser.SHUTDOWN - 320)) | (1 << (plsqlParser.SIBLINGS - 320)) | (1 << (plsqlParser.SIGNTYPE - 320)) | (1 << (plsqlParser.SIMPLE_INTEGER - 320)) | (1 << (plsqlParser.SINGLE - 320)) | (1 << (plsqlParser.SIZE - 320)) | (1 << (plsqlParser.SKIP_ - 320)) | (1 << (plsqlParser.SMALLINT - 320)) | (1 << (plsqlParser.SNAPSHOT - 320)) | (1 << (plsqlParser.SOME - 320)) | (1 << (plsqlParser.SPECIFICATION - 320)) | (1 << (plsqlParser.SQLDATA - 320)) | (1 << (plsqlParser.SQLERROR - 320)) | (1 << (plsqlParser.STANDALONE - 320)) | (1 << (plsqlParser.START - 320)) | (1 << (plsqlParser.STARTUP - 320)) | (1 << (plsqlParser.STATEMENT - 320)) | (1 << (plsqlParser.STATEMENT_ID - 320)) | (1 << (plsqlParser.STATIC - 320)) | (1 << (plsqlParser.STATISTICS - 320)) | (1 << (plsqlParser.STRING - 320)) | (1 << (plsqlParser.SUBMULTISET - 320)) | (1 << (plsqlParser.SUBPARTITION - 320)) | (1 << (plsqlParser.SUBSTITUTABLE - 320)) | (1 << (plsqlParser.SUBTYPE - 320)) | (1 << (plsqlParser.SUCCESS - 320)) | (1 << (plsqlParser.SUSPEND - 320)) | (1 << (plsqlParser.TABLE - 320)) | (1 << (plsqlParser.THE - 320)) | (1 << (plsqlParser.THEN - 320)) | (1 << (plsqlParser.TIME - 320)) | (1 << (plsqlParser.TIMESTAMP - 320)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMEZONE_ABBR - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (plsqlParser.TIMEZONE_HOUR - 384)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 384)) | (1 << (plsqlParser.TIMEZONE_REGION - 384)) | (1 << (plsqlParser.TO - 384)) | (1 << (plsqlParser.TRAILING - 384)) | (1 << (plsqlParser.TRANSACTION - 384)) | (1 << (plsqlParser.TRANSLATE - 384)) | (1 << (plsqlParser.TREAT - 384)) | (1 << (plsqlParser.TRIGGER - 384)) | (1 << (plsqlParser.TRIM - 384)) | (1 << (plsqlParser.TRUE - 384)) | (1 << (plsqlParser.TRUNCATE - 384)) | (1 << (plsqlParser.TYPE - 384)) | (1 << (plsqlParser.UNBOUNDED - 384)) | (1 << (plsqlParser.UNDER - 384)) | (1 << (plsqlParser.UNION - 384)) | (1 << (plsqlParser.UNIQUE - 384)) | (1 << (plsqlParser.UNLIMITED - 384)) | (1 << (plsqlParser.UNPIVOT - 384)) | (1 << (plsqlParser.UNTIL - 384)) | (1 << (plsqlParser.UPDATE - 384)) | (1 << (plsqlParser.UPDATED - 384)) | (1 << (plsqlParser.UPSERT - 384)) | (1 << (plsqlParser.UROWID - 384)) | (1 << (plsqlParser.USE - 384)) | (1 << (plsqlParser.USING - 384)) | (1 << (plsqlParser.VALIDATE - 384)) | (1 << (plsqlParser.VALUE - 384)) | (1 << (plsqlParser.VALUES - 384)) | (1 << (plsqlParser.VARCHAR - 384)) | (1 << (plsqlParser.VARCHAR2 - 384)) | (1 << (plsqlParser.VARIABLE - 384)) | (1 << (plsqlParser.VARRAY - 384)) | (1 << (plsqlParser.VARYING - 384)) | (1 << (plsqlParser.VERSION - 384)) | (1 << (plsqlParser.VERSIONS - 384)) | (1 << (plsqlParser.WAIT - 384)) | (1 << (plsqlParser.WARNING - 384)) | (1 << (plsqlParser.WELLFORMED - 384)) | (1 << (plsqlParser.WHEN - 384)) | (1 << (plsqlParser.WHENEVER - 384)) | (1 << (plsqlParser.WHERE - 384)) | (1 << (plsqlParser.WHILE - 384)) | (1 << (plsqlParser.WITH - 384)) | (1 << (plsqlParser.WITHIN - 384)) | (1 << (plsqlParser.WORK - 384)) | (1 << (plsqlParser.WRITE - 384)) | (1 << (plsqlParser.XML - 384)) | (1 << (plsqlParser.XMLAGG - 384)) | (1 << (plsqlParser.XMLATTRIBUTES - 384)) | (1 << (plsqlParser.XMLCAST - 384)) | (1 << (plsqlParser.XMLCOLATTVAL - 384)) | (1 << (plsqlParser.XMLELEMENT - 384)) | (1 << (plsqlParser.XMLEXISTS - 384)) | (1 << (plsqlParser.XMLFOREST - 384)) | (1 << (plsqlParser.XMLNAMESPACES - 384)) | (1 << (plsqlParser.XMLPARSE - 384)) | (1 << (plsqlParser.XMLPI - 384)) | (1 << (plsqlParser.XMLQUERY - 384)) | (1 << (plsqlParser.XMLROOT - 384)) | (1 << (plsqlParser.XMLSERIALIZE - 384)) | (1 << (plsqlParser.XMLTABLE - 384)) | (1 << (plsqlParser.YEAR - 384)) | (1 << (plsqlParser.YES - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (plsqlParser.ZONE - 448)) | (1 << (plsqlParser.PREDICTION - 448)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 448)) | (1 << (plsqlParser.PREDICTION_COST - 448)) | (1 << (plsqlParser.PREDICTION_DETAILS - 448)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (plsqlParser.PREDICTION_SET - 448)) | (1 << (plsqlParser.CUME_DIST - 448)) | (1 << (plsqlParser.DENSE_RANK - 448)) | (1 << (plsqlParser.LISTAGG - 448)) | (1 << (plsqlParser.PERCENT_RANK - 448)) | (1 << (plsqlParser.PERCENTILE_CONT - 448)) | (1 << (plsqlParser.PERCENTILE_DISC - 448)) | (1 << (plsqlParser.RANK - 448)) | (1 << (plsqlParser.AVG - 448)) | (1 << (plsqlParser.CORR - 448)) | (1 << (plsqlParser.LAG - 448)) | (1 << (plsqlParser.LEAD - 448)) | (1 << (plsqlParser.MAX - 448)) | (1 << (plsqlParser.MEDIAN - 448)) | (1 << (plsqlParser.MIN - 448)) | (1 << (plsqlParser.NTILE - 448)) | (1 << (plsqlParser.RATIO_TO_REPORT - 448)) | (1 << (plsqlParser.ROW_NUMBER - 448)) | (1 << (plsqlParser.SUM - 448)) | (1 << (plsqlParser.VARIANCE - 448)) | (1 << (plsqlParser.REGR_ - 448)) | (1 << (plsqlParser.STDDEV - 448)) | (1 << (plsqlParser.VAR_ - 448)) | (1 << (plsqlParser.COVAR_ - 448)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (plsqlParser.BIT_STRING_LIT - 448)) | (1 << (plsqlParser.HEX_STRING_LIT - 448)) | (1 << (plsqlParser.DOUBLE_PERIOD - 448)) | (1 << (plsqlParser.PERIOD - 448)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 448)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 448)) | (1 << (plsqlParser.CHAR_STRING - 448)) | (1 << (plsqlParser.DELIMITED_ID - 448)) | (1 << (plsqlParser.PERCENT - 448)) | (1 << (plsqlParser.AMPERSAND - 448)) | (1 << (plsqlParser.LEFT_PAREN - 448)) | (1 << (plsqlParser.RIGHT_PAREN - 448)) | (1 << (plsqlParser.DOUBLE_ASTERISK - 448)) | (1 << (plsqlParser.ASTERISK - 448)) | (1 << (plsqlParser.PLUS_SIGN - 448)) | (1 << (plsqlParser.MINUS_SIGN - 448)) | (1 << (plsqlParser.COMMA - 448)) | (1 << (plsqlParser.SOLIDUS - 448)) | (1 << (plsqlParser.AT_SIGN - 448)) | (1 << (plsqlParser.ASSIGN_OP - 448)) | (1 << (plsqlParser.BINDVAR - 448)) | (1 << (plsqlParser.COLON - 448)) | (1 << (plsqlParser.LESS_THAN_OR_EQUALS_OP - 448)) | (1 << (plsqlParser.LESS_THAN_OP - 448)) | (1 << (plsqlParser.GREATER_THAN_OR_EQUALS_OP - 448)) | (1 << (plsqlParser.NOT_EQUAL_OP - 448)) | (1 << (plsqlParser.CARRET_OPERATOR_PART - 448)) | (1 << (plsqlParser.TILDE_OPERATOR_PART - 448)) | (1 << (plsqlParser.EXCLAMATION_OPERATOR_PART - 448)) | (1 << (plsqlParser.GREATER_THAN_OP - 448)) | (1 << (plsqlParser.CONCATENATION_OP - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (plsqlParser.VERTICAL_BAR - 512)) | (1 << (plsqlParser.EQUALS_OP - 512)) | (1 << (plsqlParser.LEFT_BRACKET - 512)) | (1 << (plsqlParser.RIGHT_BRACKET - 512)) | (1 << (plsqlParser.INTRODUCER - 512)) | (1 << (plsqlParser.SPACES - 512)) | (1 << (plsqlParser.SINGLE_LINE_COMMENT - 512)) | (1 << (plsqlParser.MULTI_LINE_COMMENT - 512)) | (1 << (plsqlParser.PROMPT - 512)) | (1 << (plsqlParser.REGULAR_ID - 512)) | (1 << (plsqlParser.ZV - 512)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compilation_unitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(plsqlParser.EOF, 0)

        def unit_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Unit_statementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Unit_statementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_compilation_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit" ):
                listener.enterCompilation_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit" ):
                listener.exitCompilation_unit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilation_unit" ):
                return visitor.visitCompilation_unit(self)
            else:
                return visitor.visitChildren(self)




    def compilation_unit(self):

        localctx = plsqlParser.Compilation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_compilation_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.ALTER or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (plsqlParser.CREATE - 77)) | (1 << (plsqlParser.DELETE - 77)) | (1 << (plsqlParser.DROP - 77)) | (1 << (plsqlParser.EXPLAIN - 77)))) != 0) or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & ((1 << (plsqlParser.FUNCTION - 153)) | (1 << (plsqlParser.INSERT - 153)) | (1 << (plsqlParser.LOCK - 153)))) != 0) or _la==plsqlParser.MERGE or _la==plsqlParser.PROCEDURE or _la==plsqlParser.SELECT or _la==plsqlParser.UPDATE or _la==plsqlParser.WITH or _la==plsqlParser.LEFT_PAREN:
                self.state = 747
                self.unit_statement()
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 753
            self.match(plsqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_scriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(plsqlParser.EOF, 0)

        def unit_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Unit_statementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Unit_statementContext,i)


        def sql_plus_command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Sql_plus_commandContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Sql_plus_commandContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_sql_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_script" ):
                listener.enterSql_script(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_script" ):
                listener.exitSql_script(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_script" ):
                return visitor.visitSql_script(self)
            else:
                return visitor.visitChildren(self)




    def sql_script(self):

        localctx = plsqlParser.Sql_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_script)
        self._la = 0 # Token type
        try:
            self.state = 773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 757
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.ALTER, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DROP, plsqlParser.EXPLAIN, plsqlParser.FUNCTION, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.PROCEDURE, plsqlParser.SELECT, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                    self.state = 755
                    self.unit_statement()
                    pass
                elif token in [plsqlParser.EXIT, plsqlParser.SET, plsqlParser.SHOW, plsqlParser.WHENEVER, plsqlParser.SOLIDUS, plsqlParser.PROMPT]:
                    self.state = 756
                    self.sql_plus_command()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 759
                self.match(plsqlParser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.ALTER or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (plsqlParser.CREATE - 77)) | (1 << (plsqlParser.DELETE - 77)) | (1 << (plsqlParser.DROP - 77)) | (1 << (plsqlParser.EXIT - 77)) | (1 << (plsqlParser.EXPLAIN - 77)))) != 0) or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & ((1 << (plsqlParser.FUNCTION - 153)) | (1 << (plsqlParser.INSERT - 153)) | (1 << (plsqlParser.LOCK - 153)))) != 0) or _la==plsqlParser.MERGE or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (plsqlParser.PROCEDURE - 295)) | (1 << (plsqlParser.SELECT - 295)) | (1 << (plsqlParser.SET - 295)) | (1 << (plsqlParser.SHOW - 295)))) != 0) or ((((_la - 404)) & ~0x3f) == 0 and ((1 << (_la - 404)) & ((1 << (plsqlParser.UPDATE - 404)) | (1 << (plsqlParser.WHENEVER - 404)) | (1 << (plsqlParser.WITH - 404)))) != 0) or ((((_la - 490)) & ~0x3f) == 0 and ((1 << (_la - 490)) & ((1 << (plsqlParser.LEFT_PAREN - 490)) | (1 << (plsqlParser.SOLIDUS - 490)) | (1 << (plsqlParser.PROMPT - 490)))) != 0):
                    self.state = 767
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.ALTER, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DROP, plsqlParser.EXPLAIN, plsqlParser.FUNCTION, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.PROCEDURE, plsqlParser.SELECT, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                        self.state = 761
                        self.unit_statement()
                        self.state = 762
                        self.match(plsqlParser.SEMICOLON)
                        pass
                    elif token in [plsqlParser.EXIT, plsqlParser.SET, plsqlParser.SHOW, plsqlParser.WHENEVER, plsqlParser.SOLIDUS, plsqlParser.PROMPT]:
                        self.state = 764
                        self.sql_plus_command()
                        self.state = 765
                        self.match(plsqlParser.SEMICOLON)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 772
                self.match(plsqlParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_function(self):
            return self.getTypedRuleContext(plsqlParser.Alter_functionContext,0)


        def alter_package(self):
            return self.getTypedRuleContext(plsqlParser.Alter_packageContext,0)


        def alter_procedure(self):
            return self.getTypedRuleContext(plsqlParser.Alter_procedureContext,0)


        def alter_sequence(self):
            return self.getTypedRuleContext(plsqlParser.Alter_sequenceContext,0)


        def alter_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Alter_triggerContext,0)


        def alter_type(self):
            return self.getTypedRuleContext(plsqlParser.Alter_typeContext,0)


        def create_function_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_function_bodyContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_procedure_bodyContext,0)


        def create_package(self):
            return self.getTypedRuleContext(plsqlParser.Create_packageContext,0)


        def create_sequence(self):
            return self.getTypedRuleContext(plsqlParser.Create_sequenceContext,0)


        def create_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Create_triggerContext,0)


        def create_type(self):
            return self.getTypedRuleContext(plsqlParser.Create_typeContext,0)


        def drop_function(self):
            return self.getTypedRuleContext(plsqlParser.Drop_functionContext,0)


        def drop_package(self):
            return self.getTypedRuleContext(plsqlParser.Drop_packageContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(plsqlParser.Drop_procedureContext,0)


        def drop_sequence(self):
            return self.getTypedRuleContext(plsqlParser.Drop_sequenceContext,0)


        def drop_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Drop_triggerContext,0)


        def drop_type(self):
            return self.getTypedRuleContext(plsqlParser.Drop_typeContext,0)


        def data_manipulation_language_statements(self):
            return self.getTypedRuleContext(plsqlParser.Data_manipulation_language_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_unit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_statement" ):
                listener.enterUnit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_statement" ):
                listener.exitUnit_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_statement" ):
                return visitor.visitUnit_statement(self)
            else:
                return visitor.visitChildren(self)




    def unit_statement(self):

        localctx = plsqlParser.Unit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unit_statement)
        try:
            self.state = 794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 775
                self.alter_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self.alter_package()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 777
                self.alter_procedure()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 778
                self.alter_sequence()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 779
                self.alter_trigger()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 780
                self.alter_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 781
                self.create_function_body()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 782
                self.create_procedure_body()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 783
                self.create_package()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 784
                self.create_sequence()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 785
                self.create_trigger()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 786
                self.create_type()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 787
                self.drop_function()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 788
                self.drop_package()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 789
                self.drop_procedure()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 790
                self.drop_sequence()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 791
                self.drop_trigger()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 792
                self.drop_type()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 793
                self.data_manipulation_language_statements()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_function" ):
                listener.enterDrop_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_function" ):
                listener.exitDrop_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_function" ):
                return visitor.visitDrop_function(self)
            else:
                return visitor.visitChildren(self)




    def drop_function(self):

        localctx = plsqlParser.Drop_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_drop_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(plsqlParser.DROP)
            self.state = 797
            self.match(plsqlParser.FUNCTION)
            self.state = 798
            self.function_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_function" ):
                listener.enterAlter_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_function" ):
                listener.exitAlter_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_function" ):
                return visitor.visitAlter_function(self)
            else:
                return visitor.visitChildren(self)




    def alter_function(self):

        localctx = plsqlParser.Alter_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_alter_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(plsqlParser.ALTER)
            self.state = 801
            self.match(plsqlParser.FUNCTION)
            self.state = 802
            self.function_name()
            self.state = 803
            self.match(plsqlParser.COMPILE)
            self.state = 805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 804
                self.match(plsqlParser.DEBUG)


            self.state = 810
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 807
                    self.compiler_parameters_clause() 
                self.state = 812
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REUSE:
                self.state = 813
                self.match(plsqlParser.REUSE)
                self.state = 814
                self.match(plsqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_function_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def implementation_type_name(self):
            return self.getTypedRuleContext(plsqlParser.Implementation_type_nameContext,0)


        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ParameterContext,i)


        def invoker_rights_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Invoker_rights_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,i)


        def parallel_enable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Parallel_enable_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Parallel_enable_clauseContext,i)


        def result_cache_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Result_cache_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Result_cache_clauseContext,i)


        def DETERMINISTIC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DETERMINISTIC)
            else:
                return self.getToken(plsqlParser.DETERMINISTIC, i)

        def PIPELINED(self):
            return self.getToken(plsqlParser.PIPELINED, 0)

        def AGGREGATE(self):
            return self.getToken(plsqlParser.AGGREGATE, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_create_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_function_body" ):
                listener.enterCreate_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_function_body" ):
                listener.exitCreate_function_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_function_body" ):
                return visitor.visitCreate_function_body(self)
            else:
                return visitor.visitChildren(self)




    def create_function_body(self):

        localctx = plsqlParser.Create_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_create_function_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CREATE:
                self.state = 817
                self.match(plsqlParser.CREATE)
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.OR:
                    self.state = 818
                    self.match(plsqlParser.OR)
                    self.state = 819
                    self.match(plsqlParser.REPLACE)




            self.state = 824
            self.match(plsqlParser.FUNCTION)
            self.state = 825
            self.function_name()
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 826
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 827
                self.parameter()
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 828
                    self.match(plsqlParser.COMMA)
                    self.state = 829
                    self.parameter()
                    self.state = 834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 835
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 839
            self.match(plsqlParser.RETURN)
            self.state = 840
            self.type_spec()
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.AUTHID or _la==plsqlParser.DETERMINISTIC or _la==plsqlParser.PARALLEL_ENABLE or _la==plsqlParser.RESULT_CACHE:
                self.state = 845
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.AUTHID]:
                    self.state = 841
                    self.invoker_rights_clause()
                    pass
                elif token in [plsqlParser.PARALLEL_ENABLE]:
                    self.state = 842
                    self.parallel_enable_clause()
                    pass
                elif token in [plsqlParser.RESULT_CACHE]:
                    self.state = 843
                    self.result_cache_clause()
                    pass
                elif token in [plsqlParser.DETERMINISTIC]:
                    self.state = 844
                    self.match(plsqlParser.DETERMINISTIC)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PIPELINED:
                    self.state = 850
                    self.match(plsqlParser.PIPELINED)


                self.state = 853
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 865
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 855
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.DECLARE:
                        self.state = 854
                        self.match(plsqlParser.DECLARE)


                    self.state = 860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.PROCEDURE - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)) | (1 << (plsqlParser.BINDVAR - 449)) | (1 << (plsqlParser.COLON - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                        self.state = 857
                        self.declare_spec()
                        self.state = 862
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 863
                    self.body()
                    pass

                elif la_ == 2:
                    self.state = 864
                    self.call_spec()
                    pass


                pass

            elif la_ == 2:
                self.state = 867
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AGGREGATE or _la==plsqlParser.PIPELINED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 868
                self.match(plsqlParser.USING)
                self.state = 869
                self.implementation_type_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parallel_enable_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARALLEL_ENABLE(self):
            return self.getToken(plsqlParser.PARALLEL_ENABLE, 0)

        def partition_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partition_by_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_parallel_enable_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParallel_enable_clause" ):
                listener.enterParallel_enable_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParallel_enable_clause" ):
                listener.exitParallel_enable_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParallel_enable_clause" ):
                return visitor.visitParallel_enable_clause(self)
            else:
                return visitor.visitChildren(self)




    def parallel_enable_clause(self):

        localctx = plsqlParser.Parallel_enable_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_parallel_enable_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.match(plsqlParser.PARALLEL_ENABLE)
            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 873
                self.partition_by_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def ANY(self):
            return self.getToken(plsqlParser.ANY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def HASH(self):
            return self.getToken(plsqlParser.HASH, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def streaming_clause(self):
            return self.getTypedRuleContext(plsqlParser.Streaming_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_partition_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by_clause" ):
                listener.enterPartition_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by_clause" ):
                listener.exitPartition_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartition_by_clause" ):
                return visitor.visitPartition_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def partition_by_clause(self):

        localctx = plsqlParser.Partition_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_partition_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 877
            self.match(plsqlParser.PARTITION)
            self.state = 878
            self.expression(0)
            self.state = 879
            self.match(plsqlParser.BY)
            self.state = 893
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ANY]:
                self.state = 880
                self.match(plsqlParser.ANY)
                pass
            elif token in [plsqlParser.HASH, plsqlParser.RANGE]:
                self.state = 881
                _la = self._input.LA(1)
                if not(_la==plsqlParser.HASH or _la==plsqlParser.RANGE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 882
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 883
                self.column_name()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 884
                    self.match(plsqlParser.COMMA)
                    self.state = 885
                    self.column_name()
                    self.state = 890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 891
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CLUSTER or _la==plsqlParser.ORDER:
                self.state = 895
                self.streaming_clause()


            self.state = 898
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Result_cache_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def relies_on_part(self):
            return self.getTypedRuleContext(plsqlParser.Relies_on_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_result_cache_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_cache_clause" ):
                listener.enterResult_cache_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_cache_clause" ):
                listener.exitResult_cache_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_cache_clause" ):
                return visitor.visitResult_cache_clause(self)
            else:
                return visitor.visitChildren(self)




    def result_cache_clause(self):

        localctx = plsqlParser.Result_cache_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_result_cache_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(plsqlParser.RESULT_CACHE)
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RELIES_ON:
                self.state = 901
                self.relies_on_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relies_on_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELIES_ON(self):
            return self.getToken(plsqlParser.RELIES_ON, 0)

        def tableview_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Tableview_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_relies_on_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelies_on_part" ):
                listener.enterRelies_on_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelies_on_part" ):
                listener.exitRelies_on_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelies_on_part" ):
                return visitor.visitRelies_on_part(self)
            else:
                return visitor.visitChildren(self)




    def relies_on_part(self):

        localctx = plsqlParser.Relies_on_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_relies_on_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.match(plsqlParser.RELIES_ON)
            self.state = 905
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 906
            self.tableview_name()
            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 907
                self.match(plsqlParser.COMMA)
                self.state = 908
                self.tableview_name()
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 914
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Streaming_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def CLUSTER(self):
            return self.getToken(plsqlParser.CLUSTER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_streaming_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStreaming_clause" ):
                listener.enterStreaming_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStreaming_clause" ):
                listener.exitStreaming_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStreaming_clause" ):
                return visitor.visitStreaming_clause(self)
            else:
                return visitor.visitChildren(self)




    def streaming_clause(self):

        localctx = plsqlParser.Streaming_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_streaming_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CLUSTER or _la==plsqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 917
            self.expression(0)
            self.state = 918
            self.match(plsqlParser.BY)
            self.state = 919
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 920
            self.column_name()
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 921
                self.match(plsqlParser.COMMA)
                self.state = 922
                self.column_name()
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 928
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def PACKAGE(self):
            return self.getToken(plsqlParser.PACKAGE, 0)

        def package_name(self):
            return self.getTypedRuleContext(plsqlParser.Package_nameContext,0)


        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_drop_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_package" ):
                listener.enterDrop_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_package" ):
                listener.exitDrop_package(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_package" ):
                return visitor.visitDrop_package(self)
            else:
                return visitor.visitChildren(self)




    def drop_package(self):

        localctx = plsqlParser.Drop_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_drop_package)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(plsqlParser.DROP)
            self.state = 931
            self.match(plsqlParser.PACKAGE)
            self.state = 933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 932
                self.match(plsqlParser.BODY)


            self.state = 935
            self.package_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def PACKAGE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.PACKAGE)
            else:
                return self.getToken(plsqlParser.PACKAGE, i)

        def package_name(self):
            return self.getTypedRuleContext(plsqlParser.Package_nameContext,0)


        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def SPECIFICATION(self):
            return self.getToken(plsqlParser.SPECIFICATION, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_package" ):
                listener.enterAlter_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_package" ):
                listener.exitAlter_package(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_package" ):
                return visitor.visitAlter_package(self)
            else:
                return visitor.visitChildren(self)




    def alter_package(self):

        localctx = plsqlParser.Alter_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_alter_package)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.match(plsqlParser.ALTER)
            self.state = 938
            self.match(plsqlParser.PACKAGE)
            self.state = 939
            self.package_name()
            self.state = 940
            self.match(plsqlParser.COMPILE)
            self.state = 942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 941
                self.match(plsqlParser.DEBUG)


            self.state = 945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 944
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BODY or _la==plsqlParser.PACKAGE or _la==plsqlParser.SPECIFICATION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 950
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 947
                    self.compiler_parameters_clause() 
                self.state = 952
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REUSE:
                self.state = 953
                self.match(plsqlParser.REUSE)
                self.state = 954
                self.match(plsqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def PACKAGE(self):
            return self.getToken(plsqlParser.PACKAGE, 0)

        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def package_spec(self):
            return self.getTypedRuleContext(plsqlParser.Package_specContext,0)


        def package_body(self):
            return self.getTypedRuleContext(plsqlParser.Package_bodyContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_create_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_package" ):
                listener.enterCreate_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_package" ):
                listener.exitCreate_package(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_package" ):
                return visitor.visitCreate_package(self)
            else:
                return visitor.visitChildren(self)




    def create_package(self):

        localctx = plsqlParser.Create_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_create_package)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(plsqlParser.CREATE)
            self.state = 960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OR:
                self.state = 958
                self.match(plsqlParser.OR)
                self.state = 959
                self.match(plsqlParser.REPLACE)


            self.state = 962
            self.match(plsqlParser.PACKAGE)
            self.state = 965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 963
                self.package_spec()

            elif la_ == 2:
                self.state = 964
                self.package_body()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def package_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Package_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Package_nameContext,i)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def BEGIN(self):
            return self.getToken(plsqlParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def package_obj_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Package_obj_bodyContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Package_obj_bodyContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_body" ):
                listener.enterPackage_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_body" ):
                listener.exitPackage_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_body" ):
                return visitor.visitPackage_body(self)
            else:
                return visitor.visitChildren(self)




    def package_body(self):

        localctx = plsqlParser.Package_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_package_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.match(plsqlParser.BODY)
            self.state = 968
            self.package_name()
            self.state = 969
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.PROCEDURE - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)) | (1 << (plsqlParser.BINDVAR - 449)) | (1 << (plsqlParser.COLON - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 970
                self.package_obj_body()
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BEGIN]:
                self.state = 976
                self.match(plsqlParser.BEGIN)
                self.state = 977
                self.seq_of_statements()
                pass
            elif token in [plsqlParser.END]:
                self.state = 978
                self.match(plsqlParser.END)
                self.state = 980
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 979
                    self.package_name()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def package_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Package_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Package_nameContext,i)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def invoker_rights_clause(self):
            return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,0)


        def package_obj_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Package_obj_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Package_obj_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_spec" ):
                listener.enterPackage_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_spec" ):
                listener.exitPackage_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_spec" ):
                return visitor.visitPackage_spec(self)
            else:
                return visitor.visitChildren(self)




    def package_spec(self):

        localctx = plsqlParser.Package_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_package_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.package_name()
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTHID:
                self.state = 985
                self.invoker_rights_clause()


            self.state = 988
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.PROCEDURE - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)) | (1 << (plsqlParser.BINDVAR - 449)) | (1 << (plsqlParser.COLON - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 989
                self.package_obj_spec()
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 995
            self.match(plsqlParser.END)
            self.state = 997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 996
                self.package_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_obj_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Exception_declarationContext,0)


        def pragma_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Pragma_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Record_declarationContext,0)


        def table_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Table_declarationContext,0)


        def procedure_spec(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_specContext,0)


        def function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Function_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_obj_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_obj_spec" ):
                listener.enterPackage_obj_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_obj_spec" ):
                listener.exitPackage_obj_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_obj_spec" ):
                return visitor.visitPackage_obj_spec(self)
            else:
                return visitor.visitChildren(self)




    def package_obj_spec(self):

        localctx = plsqlParser.Package_obj_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_package_obj_spec)
        try:
            self.state = 1008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 999
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1000
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1001
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1002
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1003
                self.pragma_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1004
                self.record_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1005
                self.table_declaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1006
                self.procedure_spec()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1007
                self.function_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ParameterContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_procedure_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_spec" ):
                listener.enterProcedure_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_spec" ):
                listener.exitProcedure_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_spec" ):
                return visitor.visitProcedure_spec(self)
            else:
                return visitor.visitChildren(self)




    def procedure_spec(self):

        localctx = plsqlParser.Procedure_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_procedure_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.match(plsqlParser.PROCEDURE)
            self.state = 1011
            self.procedure_name()
            self.state = 1023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 1012
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1013
                self.parameter()
                self.state = 1018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1014
                    self.match(plsqlParser.COMMA)
                    self.state = 1015
                    self.parameter()
                    self.state = 1020
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1021
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 1025
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ParameterContext,i)


        def DETERMINISTIC(self):
            return self.getToken(plsqlParser.DETERMINISTIC, 0)

        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_spec" ):
                listener.enterFunction_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_spec" ):
                listener.exitFunction_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_spec" ):
                return visitor.visitFunction_spec(self)
            else:
                return visitor.visitChildren(self)




    def function_spec(self):

        localctx = plsqlParser.Function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(plsqlParser.FUNCTION)
            self.state = 1028
            self.function_name()
            self.state = 1040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 1029
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1030
                self.parameter()
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1031
                    self.match(plsqlParser.COMMA)
                    self.state = 1032
                    self.parameter()
                    self.state = 1037
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1038
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 1042
            self.match(plsqlParser.RETURN)
            self.state = 1043
            self.type_spec()
            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DETERMINISTIC:
                self.state = 1044
                self.match(plsqlParser.DETERMINISTIC)


            self.state = 1048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RESULT_CACHE:
                self.state = 1047
                self.match(plsqlParser.RESULT_CACHE)


            self.state = 1050
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_obj_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Exception_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Record_declarationContext,0)


        def table_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Table_declarationContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_procedure_bodyContext,0)


        def create_function_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_function_bodyContext,0)


        def procedure_spec(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_specContext,0)


        def function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Function_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_obj_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_obj_body" ):
                listener.enterPackage_obj_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_obj_body" ):
                listener.exitPackage_obj_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_obj_body" ):
                return visitor.visitPackage_obj_body(self)
            else:
                return visitor.visitChildren(self)




    def package_obj_body(self):

        localctx = plsqlParser.Package_obj_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_package_obj_body)
        try:
            self.state = 1062
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1052
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1054
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1055
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1056
                self.record_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1057
                self.table_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1058
                self.create_procedure_body()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1059
                self.create_function_body()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1060
                self.procedure_spec()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1061
                self.function_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure" ):
                listener.enterDrop_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure" ):
                listener.exitDrop_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_procedure" ):
                return visitor.visitDrop_procedure(self)
            else:
                return visitor.visitChildren(self)




    def drop_procedure(self):

        localctx = plsqlParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_drop_procedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(plsqlParser.DROP)
            self.state = 1065
            self.match(plsqlParser.PROCEDURE)
            self.state = 1066
            self.procedure_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_procedure" ):
                listener.enterAlter_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_procedure" ):
                listener.exitAlter_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_procedure" ):
                return visitor.visitAlter_procedure(self)
            else:
                return visitor.visitChildren(self)




    def alter_procedure(self):

        localctx = plsqlParser.Alter_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_alter_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(plsqlParser.ALTER)
            self.state = 1069
            self.match(plsqlParser.PROCEDURE)
            self.state = 1070
            self.procedure_name()
            self.state = 1071
            self.match(plsqlParser.COMPILE)
            self.state = 1073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 1072
                self.match(plsqlParser.DEBUG)


            self.state = 1078
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1075
                    self.compiler_parameters_clause() 
                self.state = 1080
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

            self.state = 1083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REUSE:
                self.state = 1081
                self.match(plsqlParser.REUSE)
                self.state = 1082
                self.match(plsqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_procedure_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ParameterContext,i)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,0)


        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_create_procedure_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_procedure_body" ):
                listener.enterCreate_procedure_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_procedure_body" ):
                listener.exitCreate_procedure_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_procedure_body" ):
                return visitor.visitCreate_procedure_body(self)
            else:
                return visitor.visitChildren(self)




    def create_procedure_body(self):

        localctx = plsqlParser.Create_procedure_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_create_procedure_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CREATE:
                self.state = 1085
                self.match(plsqlParser.CREATE)
                self.state = 1088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.OR:
                    self.state = 1086
                    self.match(plsqlParser.OR)
                    self.state = 1087
                    self.match(plsqlParser.REPLACE)




            self.state = 1092
            self.match(plsqlParser.PROCEDURE)
            self.state = 1093
            self.procedure_name()
            self.state = 1105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 1094
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1095
                self.parameter()
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1096
                    self.match(plsqlParser.COMMA)
                    self.state = 1097
                    self.parameter()
                    self.state = 1102
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1103
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTHID:
                self.state = 1107
                self.invoker_rights_clause()


            self.state = 1110
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 1111
                    self.match(plsqlParser.DECLARE)


                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.PROCEDURE - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)) | (1 << (plsqlParser.BINDVAR - 449)) | (1 << (plsqlParser.COLON - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 1114
                    self.declare_spec()
                    self.state = 1119
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1120
                self.body()
                pass

            elif la_ == 2:
                self.state = 1121
                self.call_spec()
                pass

            elif la_ == 3:
                self.state = 1122
                self.match(plsqlParser.EXTERNAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_trigger" ):
                listener.enterDrop_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_trigger" ):
                listener.exitDrop_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_trigger" ):
                return visitor.visitDrop_trigger(self)
            else:
                return visitor.visitChildren(self)




    def drop_trigger(self):

        localctx = plsqlParser.Drop_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_drop_trigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(plsqlParser.DROP)
            self.state = 1126
            self.match(plsqlParser.TRIGGER)
            self.state = 1127
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tn1 = None # Trigger_nameContext
            self.tn2 = None # Trigger_nameContext

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def trigger_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Trigger_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,i)


        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def ENABLE(self):
            return self.getToken(plsqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_alter_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_trigger" ):
                listener.enterAlter_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_trigger" ):
                listener.exitAlter_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_trigger" ):
                return visitor.visitAlter_trigger(self)
            else:
                return visitor.visitChildren(self)




    def alter_trigger(self):

        localctx = plsqlParser.Alter_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_alter_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.match(plsqlParser.ALTER)
            self.state = 1130
            self.match(plsqlParser.TRIGGER)
            self.state = 1131
            localctx.tn1 = self.trigger_name()
            self.state = 1150
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.DISABLE, plsqlParser.ENABLE]:
                self.state = 1132
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [plsqlParser.RENAME]:
                self.state = 1133
                self.match(plsqlParser.RENAME)
                self.state = 1134
                self.match(plsqlParser.TO)
                self.state = 1135
                localctx.tn2 = self.trigger_name()
                pass
            elif token in [plsqlParser.COMPILE]:
                self.state = 1136
                self.match(plsqlParser.COMPILE)
                self.state = 1138
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 1137
                    self.match(plsqlParser.DEBUG)


                self.state = 1143
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1140
                        self.compiler_parameters_clause() 
                    self.state = 1145
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.REUSE:
                    self.state = 1146
                    self.match(plsqlParser.REUSE)
                    self.state = 1147
                    self.match(plsqlParser.SETTINGS)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,0)


        def trigger_body(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_bodyContext,0)


        def simple_dml_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Simple_dml_triggerContext,0)


        def compound_dml_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Compound_dml_triggerContext,0)


        def non_dml_trigger(self):
            return self.getTypedRuleContext(plsqlParser.Non_dml_triggerContext,0)


        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def trigger_follows_clause(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_follows_clauseContext,0)


        def trigger_when_clause(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_when_clauseContext,0)


        def ENABLE(self):
            return self.getToken(plsqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_create_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger" ):
                listener.enterCreate_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger" ):
                listener.exitCreate_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_trigger" ):
                return visitor.visitCreate_trigger(self)
            else:
                return visitor.visitChildren(self)




    def create_trigger(self):

        localctx = plsqlParser.Create_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_create_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(plsqlParser.CREATE)
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OR:
                self.state = 1153
                self.match(plsqlParser.OR)
                self.state = 1154
                self.match(plsqlParser.REPLACE)


            self.state = 1157
            self.match(plsqlParser.TRIGGER)
            self.state = 1158
            self.trigger_name()
            self.state = 1162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 1159
                self.simple_dml_trigger()
                pass

            elif la_ == 2:
                self.state = 1160
                self.compound_dml_trigger()
                pass

            elif la_ == 3:
                self.state = 1161
                self.non_dml_trigger()
                pass


            self.state = 1165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 1164
                self.trigger_follows_clause()


            self.state = 1168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 1167
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DISABLE or _la==plsqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHEN:
                self.state = 1170
                self.trigger_when_clause()


            self.state = 1173
            self.trigger_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_follows_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOLLOWS(self):
            return self.getToken(plsqlParser.FOLLOWS, 0)

        def trigger_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Trigger_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_follows_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_follows_clause" ):
                listener.enterTrigger_follows_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_follows_clause" ):
                listener.exitTrigger_follows_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_follows_clause" ):
                return visitor.visitTrigger_follows_clause(self)
            else:
                return visitor.visitChildren(self)




    def trigger_follows_clause(self):

        localctx = plsqlParser.Trigger_follows_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_trigger_follows_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.match(plsqlParser.FOLLOWS)
            self.state = 1176
            self.trigger_name()
            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 1177
                self.match(plsqlParser.COMMA)
                self.state = 1178
                self.trigger_name()
                self.state = 1183
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_when_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_when_clause" ):
                listener.enterTrigger_when_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_when_clause" ):
                listener.exitTrigger_when_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_when_clause" ):
                return visitor.visitTrigger_when_clause(self)
            else:
                return visitor.visitChildren(self)




    def trigger_when_clause(self):

        localctx = plsqlParser.Trigger_when_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_trigger_when_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.match(plsqlParser.WHEN)
            self.state = 1185
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1186
            self.condition()
            self.state = 1187
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_event_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_event_clauseContext,0)


        def BEFORE(self):
            return self.getToken(plsqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(plsqlParser.AFTER, 0)

        def INSTEAD(self):
            return self.getToken(plsqlParser.INSTEAD, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def referencing_clause(self):
            return self.getTypedRuleContext(plsqlParser.Referencing_clauseContext,0)


        def for_each_row(self):
            return self.getTypedRuleContext(plsqlParser.For_each_rowContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_simple_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_dml_trigger" ):
                listener.enterSimple_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_dml_trigger" ):
                listener.exitSimple_dml_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_dml_trigger" ):
                return visitor.visitSimple_dml_trigger(self)
            else:
                return visitor.visitChildren(self)




    def simple_dml_trigger(self):

        localctx = plsqlParser.Simple_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_simple_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BEFORE]:
                self.state = 1189
                self.match(plsqlParser.BEFORE)
                pass
            elif token in [plsqlParser.AFTER]:
                self.state = 1190
                self.match(plsqlParser.AFTER)
                pass
            elif token in [plsqlParser.INSTEAD]:
                self.state = 1191
                self.match(plsqlParser.INSTEAD)
                self.state = 1192
                self.match(plsqlParser.OF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1195
            self.dml_event_clause()
            self.state = 1197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 1196
                self.referencing_clause()


            self.state = 1200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FOR:
                self.state = 1199
                self.for_each_row()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_each_rowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def EACH(self):
            return self.getToken(plsqlParser.EACH, 0)

        def ROW(self):
            return self.getToken(plsqlParser.ROW, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_for_each_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_each_row" ):
                listener.enterFor_each_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_each_row" ):
                listener.exitFor_each_row(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_each_row" ):
                return visitor.visitFor_each_row(self)
            else:
                return visitor.visitChildren(self)




    def for_each_row(self):

        localctx = plsqlParser.For_each_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_for_each_row)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1202
            self.match(plsqlParser.FOR)
            self.state = 1203
            self.match(plsqlParser.EACH)
            self.state = 1204
            self.match(plsqlParser.ROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def dml_event_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_event_clauseContext,0)


        def referencing_clause(self):
            return self.getTypedRuleContext(plsqlParser.Referencing_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_compound_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_dml_trigger" ):
                listener.enterCompound_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_dml_trigger" ):
                listener.exitCompound_dml_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_dml_trigger" ):
                return visitor.visitCompound_dml_trigger(self)
            else:
                return visitor.visitChildren(self)




    def compound_dml_trigger(self):

        localctx = plsqlParser.Compound_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_compound_dml_trigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self.match(plsqlParser.FOR)
            self.state = 1207
            self.dml_event_clause()
            self.state = 1209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 1208
                self.referencing_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_dml_event(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Non_dml_eventContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Non_dml_eventContext,i)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def BEFORE(self):
            return self.getToken(plsqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(plsqlParser.AFTER, 0)

        def DATABASE(self):
            return self.getToken(plsqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(plsqlParser.SCHEMA, 0)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OR)
            else:
                return self.getToken(plsqlParser.OR, i)

        def schema_name(self):
            return self.getTypedRuleContext(plsqlParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_non_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_dml_trigger" ):
                listener.enterNon_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_dml_trigger" ):
                listener.exitNon_dml_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_dml_trigger" ):
                return visitor.visitNon_dml_trigger(self)
            else:
                return visitor.visitChildren(self)




    def non_dml_trigger(self):

        localctx = plsqlParser.Non_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_non_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AFTER or _la==plsqlParser.BEFORE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1212
            self.non_dml_event()
            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.OR:
                self.state = 1213
                self.match(plsqlParser.OR)
                self.state = 1214
                self.non_dml_event()
                self.state = 1219
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1220
            self.match(plsqlParser.ON)
            self.state = 1228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 1221
                self.match(plsqlParser.DATABASE)
                pass

            elif la_ == 2:
                self.state = 1225
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 1222
                    self.schema_name()
                    self.state = 1223
                    self.match(plsqlParser.PERIOD)


                self.state = 1227
                self.match(plsqlParser.SCHEMA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOUND(self):
            return self.getToken(plsqlParser.COMPOUND, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def CALL(self):
            return self.getToken(plsqlParser.CALL, 0)

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def trigger_block(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_blockContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_body" ):
                listener.enterTrigger_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_body" ):
                listener.exitTrigger_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_body" ):
                return visitor.visitTrigger_body(self)
            else:
                return visitor.visitChildren(self)




    def trigger_body(self):

        localctx = plsqlParser.Trigger_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_trigger_body)
        try:
            self.state = 1235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1230
                self.match(plsqlParser.COMPOUND)
                self.state = 1231
                self.match(plsqlParser.TRIGGER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1232
                self.match(plsqlParser.CALL)
                self.state = 1233
                self.r_id()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1234
                self.trigger_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Routine_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routine_name(self):
            return self.getTypedRuleContext(plsqlParser.Routine_nameContext,0)


        def function_argument(self):
            return self.getTypedRuleContext(plsqlParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_routine_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine_clause" ):
                listener.enterRoutine_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine_clause" ):
                listener.exitRoutine_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutine_clause" ):
                return visitor.visitRoutine_clause(self)
            else:
                return visitor.visitChildren(self)




    def routine_clause(self):

        localctx = plsqlParser.Routine_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_routine_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.routine_name()
            self.state = 1239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 1238
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_trigger_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOUND(self):
            return self.getToken(plsqlParser.COMPOUND, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_nameContext,0)


        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def timing_point_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Timing_point_sectionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Timing_point_sectionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_compound_trigger_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_trigger_block" ):
                listener.enterCompound_trigger_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_trigger_block" ):
                listener.exitCompound_trigger_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_trigger_block" ):
                return visitor.visitCompound_trigger_block(self)
            else:
                return visitor.visitChildren(self)




    def compound_trigger_block(self):

        localctx = plsqlParser.Compound_trigger_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_compound_trigger_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1241
            self.match(plsqlParser.COMPOUND)
            self.state = 1242
            self.match(plsqlParser.TRIGGER)
            self.state = 1246
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1243
                    self.declare_spec() 
                self.state = 1248
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

            self.state = 1250 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1249
                self.timing_point_section()
                self.state = 1252 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.AFTER or _la==plsqlParser.BEFORE):
                    break

            self.state = 1254
            self.match(plsqlParser.END)
            self.state = 1255
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Timing_point_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bk = None # Token
            self.ak = None # Token

        def STATEMENT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.STATEMENT)
            else:
                return self.getToken(plsqlParser.STATEMENT, i)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def trigger_block(self):
            return self.getTypedRuleContext(plsqlParser.Trigger_blockContext,0)


        def BEFORE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.BEFORE)
            else:
                return self.getToken(plsqlParser.BEFORE, i)

        def EACH(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.EACH)
            else:
                return self.getToken(plsqlParser.EACH, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ROW)
            else:
                return self.getToken(plsqlParser.ROW, i)

        def AFTER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AFTER)
            else:
                return self.getToken(plsqlParser.AFTER, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_timing_point_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTiming_point_section" ):
                listener.enterTiming_point_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTiming_point_section" ):
                listener.exitTiming_point_section(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTiming_point_section" ):
                return visitor.visitTiming_point_section(self)
            else:
                return visitor.visitChildren(self)




    def timing_point_section(self):

        localctx = plsqlParser.Timing_point_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_timing_point_section)
        try:
            self.state = 1293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1257
                localctx.bk = self.match(plsqlParser.BEFORE)
                self.state = 1258
                self.match(plsqlParser.STATEMENT)
                self.state = 1259
                self.match(plsqlParser.IS)
                self.state = 1260
                self.trigger_block()
                self.state = 1261
                self.match(plsqlParser.BEFORE)
                self.state = 1262
                self.match(plsqlParser.STATEMENT)
                self.state = 1263
                self.match(plsqlParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1265
                localctx.bk = self.match(plsqlParser.BEFORE)
                self.state = 1266
                self.match(plsqlParser.EACH)
                self.state = 1267
                self.match(plsqlParser.ROW)
                self.state = 1268
                self.match(plsqlParser.IS)
                self.state = 1269
                self.trigger_block()
                self.state = 1270
                self.match(plsqlParser.BEFORE)
                self.state = 1271
                self.match(plsqlParser.EACH)
                self.state = 1272
                self.match(plsqlParser.ROW)
                self.state = 1273
                self.match(plsqlParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1275
                localctx.ak = self.match(plsqlParser.AFTER)
                self.state = 1276
                self.match(plsqlParser.STATEMENT)
                self.state = 1277
                self.match(plsqlParser.IS)
                self.state = 1278
                self.trigger_block()
                self.state = 1279
                self.match(plsqlParser.AFTER)
                self.state = 1280
                self.match(plsqlParser.STATEMENT)
                self.state = 1281
                self.match(plsqlParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1283
                localctx.ak = self.match(plsqlParser.AFTER)
                self.state = 1284
                self.match(plsqlParser.EACH)
                self.state = 1285
                self.match(plsqlParser.ROW)
                self.state = 1286
                self.match(plsqlParser.IS)
                self.state = 1287
                self.trigger_block()
                self.state = 1288
                self.match(plsqlParser.AFTER)
                self.state = 1289
                self.match(plsqlParser.EACH)
                self.state = 1290
                self.match(plsqlParser.ROW)
                self.state = 1291
                self.match(plsqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_dml_eventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(plsqlParser.ANALYZE, 0)

        def ASSOCIATE(self):
            return self.getToken(plsqlParser.ASSOCIATE, 0)

        def STATISTICS(self):
            return self.getToken(plsqlParser.STATISTICS, 0)

        def AUDIT(self):
            return self.getToken(plsqlParser.AUDIT, 0)

        def COMMENT(self):
            return self.getToken(plsqlParser.COMMENT, 0)

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def DISASSOCIATE(self):
            return self.getToken(plsqlParser.DISASSOCIATE, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def GRANT(self):
            return self.getToken(plsqlParser.GRANT, 0)

        def NOAUDIT(self):
            return self.getToken(plsqlParser.NOAUDIT, 0)

        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def REVOKE(self):
            return self.getToken(plsqlParser.REVOKE, 0)

        def TRUNCATE(self):
            return self.getToken(plsqlParser.TRUNCATE, 0)

        def DDL(self):
            return self.getToken(plsqlParser.DDL, 0)

        def STARTUP(self):
            return self.getToken(plsqlParser.STARTUP, 0)

        def SHUTDOWN(self):
            return self.getToken(plsqlParser.SHUTDOWN, 0)

        def DB_ROLE_CHANGE(self):
            return self.getToken(plsqlParser.DB_ROLE_CHANGE, 0)

        def LOGON(self):
            return self.getToken(plsqlParser.LOGON, 0)

        def LOGOFF(self):
            return self.getToken(plsqlParser.LOGOFF, 0)

        def SERVERERROR(self):
            return self.getToken(plsqlParser.SERVERERROR, 0)

        def SUSPEND(self):
            return self.getToken(plsqlParser.SUSPEND, 0)

        def DATABASE(self):
            return self.getToken(plsqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(plsqlParser.SCHEMA, 0)

        def FOLLOWS(self):
            return self.getToken(plsqlParser.FOLLOWS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_non_dml_event

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_dml_event" ):
                listener.enterNon_dml_event(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_dml_event" ):
                listener.exitNon_dml_event(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_dml_event" ):
                return visitor.visitNon_dml_event(self)
            else:
                return visitor.visitChildren(self)




    def non_dml_event(self):

        localctx = plsqlParser.Non_dml_eventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_non_dml_event)
        try:
            self.state = 1321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ALTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1295
                self.match(plsqlParser.ALTER)
                pass
            elif token in [plsqlParser.ANALYZE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1296
                self.match(plsqlParser.ANALYZE)
                pass
            elif token in [plsqlParser.ASSOCIATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1297
                self.match(plsqlParser.ASSOCIATE)
                self.state = 1298
                self.match(plsqlParser.STATISTICS)
                pass
            elif token in [plsqlParser.AUDIT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1299
                self.match(plsqlParser.AUDIT)
                pass
            elif token in [plsqlParser.COMMENT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1300
                self.match(plsqlParser.COMMENT)
                pass
            elif token in [plsqlParser.CREATE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1301
                self.match(plsqlParser.CREATE)
                pass
            elif token in [plsqlParser.DISASSOCIATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1302
                self.match(plsqlParser.DISASSOCIATE)
                self.state = 1303
                self.match(plsqlParser.STATISTICS)
                pass
            elif token in [plsqlParser.DROP]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1304
                self.match(plsqlParser.DROP)
                pass
            elif token in [plsqlParser.GRANT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1305
                self.match(plsqlParser.GRANT)
                pass
            elif token in [plsqlParser.NOAUDIT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1306
                self.match(plsqlParser.NOAUDIT)
                pass
            elif token in [plsqlParser.RENAME]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1307
                self.match(plsqlParser.RENAME)
                pass
            elif token in [plsqlParser.REVOKE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1308
                self.match(plsqlParser.REVOKE)
                pass
            elif token in [plsqlParser.TRUNCATE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1309
                self.match(plsqlParser.TRUNCATE)
                pass
            elif token in [plsqlParser.DDL]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1310
                self.match(plsqlParser.DDL)
                pass
            elif token in [plsqlParser.STARTUP]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1311
                self.match(plsqlParser.STARTUP)
                pass
            elif token in [plsqlParser.SHUTDOWN]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1312
                self.match(plsqlParser.SHUTDOWN)
                pass
            elif token in [plsqlParser.DB_ROLE_CHANGE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1313
                self.match(plsqlParser.DB_ROLE_CHANGE)
                pass
            elif token in [plsqlParser.LOGON]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1314
                self.match(plsqlParser.LOGON)
                pass
            elif token in [plsqlParser.LOGOFF]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1315
                self.match(plsqlParser.LOGOFF)
                pass
            elif token in [plsqlParser.SERVERERROR]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1316
                self.match(plsqlParser.SERVERERROR)
                pass
            elif token in [plsqlParser.SUSPEND]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1317
                self.match(plsqlParser.SUSPEND)
                pass
            elif token in [plsqlParser.DATABASE]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1318
                self.match(plsqlParser.DATABASE)
                pass
            elif token in [plsqlParser.SCHEMA]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1319
                self.match(plsqlParser.SCHEMA)
                pass
            elif token in [plsqlParser.FOLLOWS]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1320
                self.match(plsqlParser.FOLLOWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_event_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_event_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Dml_event_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Dml_event_elementContext,i)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OR)
            else:
                return self.getToken(plsqlParser.OR, i)

        def dml_event_nested_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_event_nested_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_dml_event_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_clause" ):
                listener.enterDml_event_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_clause" ):
                listener.exitDml_event_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_event_clause" ):
                return visitor.visitDml_event_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_event_clause(self):

        localctx = plsqlParser.Dml_event_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_dml_event_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.dml_event_element()
            self.state = 1328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.OR:
                self.state = 1324
                self.match(plsqlParser.OR)
                self.state = 1325
                self.dml_event_element()
                self.state = 1330
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1331
            self.match(plsqlParser.ON)
            self.state = 1333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 1332
                self.dml_event_nested_clause()


            self.state = 1335
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_event_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(plsqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_dml_event_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_element" ):
                listener.enterDml_event_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_element" ):
                listener.exitDml_event_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_event_element" ):
                return visitor.visitDml_event_element(self)
            else:
                return visitor.visitChildren(self)




    def dml_event_element(self):

        localctx = plsqlParser.Dml_event_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_dml_event_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DELETE or _la==plsqlParser.INSERT or _la==plsqlParser.UPDATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OF:
                self.state = 1338
                self.match(plsqlParser.OF)
                self.state = 1339
                self.column_name()
                self.state = 1344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1340
                    self.match(plsqlParser.COMMA)
                    self.state = 1341
                    self.column_name()
                    self.state = 1346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_event_nested_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NESTED(self):
            return self.getToken(plsqlParser.NESTED, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_dml_event_nested_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_nested_clause" ):
                listener.enterDml_event_nested_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_nested_clause" ):
                listener.exitDml_event_nested_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_event_nested_clause" ):
                return visitor.visitDml_event_nested_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_event_nested_clause(self):

        localctx = plsqlParser.Dml_event_nested_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_dml_event_nested_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self.match(plsqlParser.NESTED)
            self.state = 1350
            self.match(plsqlParser.TABLE)
            self.state = 1351
            self.tableview_name()
            self.state = 1352
            self.match(plsqlParser.OF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Referencing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCING(self):
            return self.getToken(plsqlParser.REFERENCING, 0)

        def referencing_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Referencing_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Referencing_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_referencing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferencing_clause" ):
                listener.enterReferencing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferencing_clause" ):
                listener.exitReferencing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferencing_clause" ):
                return visitor.visitReferencing_clause(self)
            else:
                return visitor.visitChildren(self)




    def referencing_clause(self):

        localctx = plsqlParser.Referencing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_referencing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.match(plsqlParser.REFERENCING)
            self.state = 1356 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1355
                    self.referencing_element()

                else:
                    raise NoViableAltException(self)
                self.state = 1358 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Referencing_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def NEW(self):
            return self.getToken(plsqlParser.NEW, 0)

        def OLD(self):
            return self.getToken(plsqlParser.OLD, 0)

        def PARENT(self):
            return self.getToken(plsqlParser.PARENT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_referencing_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferencing_element" ):
                listener.enterReferencing_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferencing_element" ):
                listener.exitReferencing_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferencing_element" ):
                return visitor.visitReferencing_element(self)
            else:
                return visitor.visitChildren(self)




    def referencing_element(self):

        localctx = plsqlParser.Referencing_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_referencing_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            _la = self._input.LA(1)
            if not(((((_la - 238)) & ~0x3f) == 0 and ((1 << (_la - 238)) & ((1 << (plsqlParser.NEW - 238)) | (1 << (plsqlParser.OLD - 238)) | (1 << (plsqlParser.PARENT - 238)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1361
            self.column_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def VALIDATE(self):
            return self.getToken(plsqlParser.VALIDATE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_drop_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type" ):
                listener.enterDrop_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type" ):
                listener.exitDrop_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_type" ):
                return visitor.visitDrop_type(self)
            else:
                return visitor.visitChildren(self)




    def drop_type(self):

        localctx = plsqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_drop_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self.match(plsqlParser.DROP)
            self.state = 1364
            self.match(plsqlParser.TYPE)
            self.state = 1366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 1365
                self.match(plsqlParser.BODY)


            self.state = 1368
            self.type_name()
            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FORCE or _la==plsqlParser.VALIDATE:
                self.state = 1369
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FORCE or _la==plsqlParser.VALIDATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def compile_type_clause(self):
            return self.getTypedRuleContext(plsqlParser.Compile_type_clauseContext,0)


        def replace_type_clause(self):
            return self.getTypedRuleContext(plsqlParser.Replace_type_clauseContext,0)


        def alter_method_spec(self):
            return self.getTypedRuleContext(plsqlParser.Alter_method_specContext,0)


        def alter_collection_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Alter_collection_clausesContext,0)


        def modifier_clause(self):
            return self.getTypedRuleContext(plsqlParser.Modifier_clauseContext,0)


        def dependent_handling_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dependent_handling_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_type" ):
                listener.enterAlter_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_type" ):
                listener.exitAlter_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_type" ):
                return visitor.visitAlter_type(self)
            else:
                return visitor.visitChildren(self)




    def alter_type(self):

        localctx = plsqlParser.Alter_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_alter_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.match(plsqlParser.ALTER)
            self.state = 1373
            self.match(plsqlParser.TYPE)
            self.state = 1374
            self.type_name()
            self.state = 1380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.COMPILE]:
                self.state = 1375
                self.compile_type_clause()
                pass
            elif token in [plsqlParser.REPLACE]:
                self.state = 1376
                self.replace_type_clause()
                pass
            elif token in [plsqlParser.ADD, plsqlParser.DROP]:
                self.state = 1377
                self.alter_method_spec()
                pass
            elif token in [plsqlParser.MODIFY]:
                self.state = 1378
                self.alter_collection_clauses()
                pass
            elif token in [plsqlParser.FINAL, plsqlParser.INSTANTIABLE, plsqlParser.NOT, plsqlParser.OVERRIDING]:
                self.state = 1379
                self.modifier_clause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CASCADE or _la==plsqlParser.INVALIDATE:
                self.state = 1382
                self.dependent_handling_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compile_type_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def SPECIFICATION(self):
            return self.getToken(plsqlParser.SPECIFICATION, 0)

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_compile_type_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompile_type_clause" ):
                listener.enterCompile_type_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompile_type_clause" ):
                listener.exitCompile_type_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompile_type_clause" ):
                return visitor.visitCompile_type_clause(self)
            else:
                return visitor.visitChildren(self)




    def compile_type_clause(self):

        localctx = plsqlParser.Compile_type_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_compile_type_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.match(plsqlParser.COMPILE)
            self.state = 1387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 1386
                self.match(plsqlParser.DEBUG)


            self.state = 1390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 1389
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BODY or _la==plsqlParser.SPECIFICATION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1395
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1392
                    self.compiler_parameters_clause() 
                self.state = 1397
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

            self.state = 1400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REUSE:
                self.state = 1398
                self.match(plsqlParser.REUSE)
                self.state = 1399
                self.match(plsqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Replace_type_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def OBJECT(self):
            return self.getToken(plsqlParser.OBJECT, 0)

        def object_member_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Object_member_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Object_member_specContext,i)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_replace_type_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplace_type_clause" ):
                listener.enterReplace_type_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplace_type_clause" ):
                listener.exitReplace_type_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplace_type_clause" ):
                return visitor.visitReplace_type_clause(self)
            else:
                return visitor.visitChildren(self)




    def replace_type_clause(self):

        localctx = plsqlParser.Replace_type_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_replace_type_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.match(plsqlParser.REPLACE)
            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTHID:
                self.state = 1403
                self.invoker_rights_clause()


            self.state = 1406
            self.match(plsqlParser.AS)
            self.state = 1407
            self.match(plsqlParser.OBJECT)
            self.state = 1408
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1409
            self.object_member_spec()
            self.state = 1414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 1410
                self.match(plsqlParser.COMMA)
                self.state = 1411
                self.object_member_spec()
                self.state = 1416
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1417
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_method_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_method_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Alter_method_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Alter_method_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_method_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_method_spec" ):
                listener.enterAlter_method_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_method_spec" ):
                listener.exitAlter_method_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_method_spec" ):
                return visitor.visitAlter_method_spec(self)
            else:
                return visitor.visitChildren(self)




    def alter_method_spec(self):

        localctx = plsqlParser.Alter_method_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_alter_method_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1419
            self.alter_method_element()
            self.state = 1424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 1420
                self.match(plsqlParser.COMMA)
                self.state = 1421
                self.alter_method_element()
                self.state = 1426
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_method_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def map_order_function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Map_order_function_specContext,0)


        def subprogram_spec(self):
            return self.getTypedRuleContext(plsqlParser.Subprogram_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_method_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_method_element" ):
                listener.enterAlter_method_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_method_element" ):
                listener.exitAlter_method_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_method_element" ):
                return visitor.visitAlter_method_element(self)
            else:
                return visitor.visitChildren(self)




    def alter_method_element(self):

        localctx = plsqlParser.Alter_method_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_alter_method_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            _la = self._input.LA(1)
            if not(_la==plsqlParser.ADD or _la==plsqlParser.DROP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1430
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MAP, plsqlParser.ORDER]:
                self.state = 1428
                self.map_order_function_spec()
                pass
            elif token in [plsqlParser.MEMBER, plsqlParser.STATIC]:
                self.state = 1429
                self.subprogram_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_attribute_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(plsqlParser.ATTRIBUTE, 0)

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def attribute_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Attribute_definitionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Attribute_definitionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_attribute_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_attribute_definition" ):
                listener.enterAlter_attribute_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_attribute_definition" ):
                listener.exitAlter_attribute_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_attribute_definition" ):
                return visitor.visitAlter_attribute_definition(self)
            else:
                return visitor.visitChildren(self)




    def alter_attribute_definition(self):

        localctx = plsqlParser.Alter_attribute_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_alter_attribute_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            _la = self._input.LA(1)
            if not(_la==plsqlParser.ADD or _la==plsqlParser.DROP or _la==plsqlParser.MODIFY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1433
            self.match(plsqlParser.ATTRIBUTE)
            self.state = 1446
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 1434
                self.attribute_definition()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 1435
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1436
                self.attribute_definition()
                self.state = 1441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1437
                    self.match(plsqlParser.COMMA)
                    self.state = 1438
                    self.attribute_definition()
                    self.state = 1443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1444
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_name(self):
            return self.getTypedRuleContext(plsqlParser.Attribute_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_attribute_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_definition" ):
                listener.enterAttribute_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_definition" ):
                listener.exitAttribute_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_definition" ):
                return visitor.visitAttribute_definition(self)
            else:
                return visitor.visitChildren(self)




    def attribute_definition(self):

        localctx = plsqlParser.Attribute_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_attribute_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1448
            self.attribute_name()
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 1449
                self.type_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_collection_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def LIMIT(self):
            return self.getToken(plsqlParser.LIMIT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def ELEMENT(self):
            return self.getToken(plsqlParser.ELEMENT, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_collection_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_collection_clauses" ):
                listener.enterAlter_collection_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_collection_clauses" ):
                listener.exitAlter_collection_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_collection_clauses" ):
                return visitor.visitAlter_collection_clauses(self)
            else:
                return visitor.visitChildren(self)




    def alter_collection_clauses(self):

        localctx = plsqlParser.Alter_collection_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_alter_collection_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1452
            self.match(plsqlParser.MODIFY)
            self.state = 1458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LIMIT]:
                self.state = 1453
                self.match(plsqlParser.LIMIT)
                self.state = 1454
                self.expression(0)
                pass
            elif token in [plsqlParser.ELEMENT]:
                self.state = 1455
                self.match(plsqlParser.ELEMENT)
                self.state = 1456
                self.match(plsqlParser.TYPE)
                self.state = 1457
                self.type_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dependent_handling_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INVALIDATE(self):
            return self.getToken(plsqlParser.INVALIDATE, 0)

        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def CONVERT(self):
            return self.getToken(plsqlParser.CONVERT, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(plsqlParser.SUBSTITUTABLE, 0)

        def INCLUDING(self):
            return self.getToken(plsqlParser.INCLUDING, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def DATA(self):
            return self.getToken(plsqlParser.DATA, 0)

        def dependent_exceptions_part(self):
            return self.getTypedRuleContext(plsqlParser.Dependent_exceptions_partContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_dependent_handling_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependent_handling_clause" ):
                listener.enterDependent_handling_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependent_handling_clause" ):
                listener.exitDependent_handling_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDependent_handling_clause" ):
                return visitor.visitDependent_handling_clause(self)
            else:
                return visitor.visitChildren(self)




    def dependent_handling_clause(self):

        localctx = plsqlParser.Dependent_handling_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_dependent_handling_clause)
        self._la = 0 # Token type
        try:
            self.state = 1476
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INVALIDATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1460
                self.match(plsqlParser.INVALIDATE)
                pass
            elif token in [plsqlParser.CASCADE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1461
                self.match(plsqlParser.CASCADE)
                self.state = 1471
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.CONVERT]:
                    self.state = 1462
                    self.match(plsqlParser.CONVERT)
                    self.state = 1463
                    self.match(plsqlParser.TO)
                    self.state = 1464
                    self.match(plsqlParser.SUBSTITUTABLE)
                    pass
                elif token in [plsqlParser.INCLUDING, plsqlParser.NOT]:
                    self.state = 1466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.NOT:
                        self.state = 1465
                        self.match(plsqlParser.NOT)


                    self.state = 1468
                    self.match(plsqlParser.INCLUDING)
                    self.state = 1469
                    self.match(plsqlParser.TABLE)
                    self.state = 1470
                    self.match(plsqlParser.DATA)
                    pass
                elif token in [plsqlParser.EOF, plsqlParser.ALTER, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DROP, plsqlParser.EXCEPTIONS, plsqlParser.EXPLAIN, plsqlParser.FORCE, plsqlParser.FUNCTION, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.PROCEDURE, plsqlParser.SELECT, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN, plsqlParser.SEMICOLON]:
                    pass
                else:
                    pass
                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.EXCEPTIONS or _la==plsqlParser.FORCE:
                    self.state = 1473
                    self.dependent_exceptions_part()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dependent_exceptions_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTIONS(self):
            return self.getToken(plsqlParser.EXCEPTIONS, 0)

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_dependent_exceptions_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependent_exceptions_part" ):
                listener.enterDependent_exceptions_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependent_exceptions_part" ):
                listener.exitDependent_exceptions_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDependent_exceptions_part" ):
                return visitor.visitDependent_exceptions_part(self)
            else:
                return visitor.visitChildren(self)




    def dependent_exceptions_part(self):

        localctx = plsqlParser.Dependent_exceptions_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_dependent_exceptions_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FORCE:
                self.state = 1478
                self.match(plsqlParser.FORCE)


            self.state = 1481
            self.match(plsqlParser.EXCEPTIONS)
            self.state = 1482
            self.match(plsqlParser.INTO)
            self.state = 1483
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_definition(self):
            return self.getTypedRuleContext(plsqlParser.Type_definitionContext,0)


        def type_body(self):
            return self.getTypedRuleContext(plsqlParser.Type_bodyContext,0)


        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_create_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type" ):
                listener.enterCreate_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type" ):
                listener.exitCreate_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_type" ):
                return visitor.visitCreate_type(self)
            else:
                return visitor.visitChildren(self)




    def create_type(self):

        localctx = plsqlParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_create_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self.match(plsqlParser.CREATE)
            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OR:
                self.state = 1486
                self.match(plsqlParser.OR)
                self.state = 1487
                self.match(plsqlParser.REPLACE)


            self.state = 1490
            self.match(plsqlParser.TYPE)
            self.state = 1493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 1491
                self.type_definition()
                pass

            elif la_ == 2:
                self.state = 1492
                self.type_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def OID(self):
            return self.getToken(plsqlParser.OID, 0)

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def object_type_def(self):
            return self.getTypedRuleContext(plsqlParser.Object_type_defContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_definition" ):
                listener.enterType_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_definition" ):
                listener.exitType_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_definition" ):
                return visitor.visitType_definition(self)
            else:
                return visitor.visitChildren(self)




    def type_definition(self):

        localctx = plsqlParser.Type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_type_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495
            self.type_name()
            self.state = 1498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.OID:
                self.state = 1496
                self.match(plsqlParser.OID)
                self.state = 1497
                self.match(plsqlParser.CHAR_STRING)


            self.state = 1501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS or _la==plsqlParser.AUTHID or _la==plsqlParser.IS or _la==plsqlParser.UNDER:
                self.state = 1500
                self.object_type_def()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_as_part(self):
            return self.getTypedRuleContext(plsqlParser.Object_as_partContext,0)


        def object_under_part(self):
            return self.getTypedRuleContext(plsqlParser.Object_under_partContext,0)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(plsqlParser.Invoker_rights_clauseContext,0)


        def sqlj_object_type(self):
            return self.getTypedRuleContext(plsqlParser.Sqlj_object_typeContext,0)


        def object_member_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Object_member_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Object_member_specContext,i)


        def modifier_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Modifier_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Modifier_clauseContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_object_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_def" ):
                listener.enterObject_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_def" ):
                listener.exitObject_type_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_type_def" ):
                return visitor.visitObject_type_def(self)
            else:
                return visitor.visitChildren(self)




    def object_type_def(self):

        localctx = plsqlParser.Object_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_object_type_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTHID:
                self.state = 1503
                self.invoker_rights_clause()


            self.state = 1508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.AS, plsqlParser.IS]:
                self.state = 1506
                self.object_as_part()
                pass
            elif token in [plsqlParser.UNDER]:
                self.state = 1507
                self.object_under_part()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.EXTERNAL:
                self.state = 1510
                self.sqlj_object_type()


            self.state = 1524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1513
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1514
                self.object_member_spec()
                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1515
                    self.match(plsqlParser.COMMA)
                    self.state = 1516
                    self.object_member_spec()
                    self.state = 1521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1522
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 1529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.FINAL or _la==plsqlParser.INSTANTIABLE or _la==plsqlParser.NOT or _la==plsqlParser.OVERRIDING:
                self.state = 1526
                self.modifier_clause()
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_as_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def OBJECT(self):
            return self.getToken(plsqlParser.OBJECT, 0)

        def varray_type_def(self):
            return self.getTypedRuleContext(plsqlParser.Varray_type_defContext,0)


        def nested_table_type_def(self):
            return self.getTypedRuleContext(plsqlParser.Nested_table_type_defContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_object_as_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_as_part" ):
                listener.enterObject_as_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_as_part" ):
                listener.exitObject_as_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_as_part" ):
                return visitor.visitObject_as_part(self)
            else:
                return visitor.visitChildren(self)




    def object_as_part(self):

        localctx = plsqlParser.Object_as_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_object_as_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.OBJECT]:
                self.state = 1533
                self.match(plsqlParser.OBJECT)
                pass
            elif token in [plsqlParser.VARRAY, plsqlParser.VARYING]:
                self.state = 1534
                self.varray_type_def()
                pass
            elif token in [plsqlParser.TABLE]:
                self.state = 1535
                self.nested_table_type_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_under_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(plsqlParser.UNDER, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_object_under_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_under_part" ):
                listener.enterObject_under_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_under_part" ):
                listener.exitObject_under_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_under_part" ):
                return visitor.visitObject_under_part(self)
            else:
                return visitor.visitChildren(self)




    def object_under_part(self):

        localctx = plsqlParser.Object_under_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_object_under_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            self.match(plsqlParser.UNDER)
            self.state = 1539
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nested_table_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_nested_table_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNested_table_type_def" ):
                listener.enterNested_table_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNested_table_type_def" ):
                listener.exitNested_table_type_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNested_table_type_def" ):
                return visitor.visitNested_table_type_def(self)
            else:
                return visitor.visitChildren(self)




    def nested_table_type_def(self):

        localctx = plsqlParser.Nested_table_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_nested_table_type_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1541
            self.match(plsqlParser.TABLE)
            self.state = 1542
            self.match(plsqlParser.OF)
            self.state = 1543
            self.type_spec()
            self.state = 1546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1544
                self.match(plsqlParser.NOT)
                self.state = 1545
                self.match(plsqlParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sqlj_object_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def LANGUAGE(self):
            return self.getToken(plsqlParser.LANGUAGE, 0)

        def JAVA(self):
            return self.getToken(plsqlParser.JAVA, 0)

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def SQLDATA(self):
            return self.getToken(plsqlParser.SQLDATA, 0)

        def CUSTOMDATUM(self):
            return self.getToken(plsqlParser.CUSTOMDATUM, 0)

        def ORADATA(self):
            return self.getToken(plsqlParser.ORADATA, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_sqlj_object_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlj_object_type" ):
                listener.enterSqlj_object_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlj_object_type" ):
                listener.exitSqlj_object_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlj_object_type" ):
                return visitor.visitSqlj_object_type(self)
            else:
                return visitor.visitChildren(self)




    def sqlj_object_type(self):

        localctx = plsqlParser.Sqlj_object_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_sqlj_object_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self.match(plsqlParser.EXTERNAL)
            self.state = 1549
            self.match(plsqlParser.NAME)
            self.state = 1550
            self.expression(0)
            self.state = 1551
            self.match(plsqlParser.LANGUAGE)
            self.state = 1552
            self.match(plsqlParser.JAVA)
            self.state = 1553
            self.match(plsqlParser.USING)
            self.state = 1554
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CUSTOMDATUM or _la==plsqlParser.ORADATA or _la==plsqlParser.SQLDATA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def type_body_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_body_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_body_elementsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_type_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_body" ):
                listener.enterType_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_body" ):
                listener.exitType_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_body" ):
                return visitor.visitType_body(self)
            else:
                return visitor.visitChildren(self)




    def type_body(self):

        localctx = plsqlParser.Type_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_type_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1556
            self.match(plsqlParser.BODY)
            self.state = 1557
            self.type_name()
            self.state = 1558
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1560 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1559
                self.type_body_elements()
                self.state = 1562 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & ((1 << (plsqlParser.MAP - 214)) | (1 << (plsqlParser.MEMBER - 214)) | (1 << (plsqlParser.ORDER - 214)))) != 0) or _la==plsqlParser.STATIC):
                    break

            self.state = 1564
            self.match(plsqlParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_body_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def map_order_func_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Map_order_func_declarationContext,0)


        def subprog_decl_in_type(self):
            return self.getTypedRuleContext(plsqlParser.Subprog_decl_in_typeContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_type_body_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_body_elements" ):
                listener.enterType_body_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_body_elements" ):
                listener.exitType_body_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_body_elements" ):
                return visitor.visitType_body_elements(self)
            else:
                return visitor.visitChildren(self)




    def type_body_elements(self):

        localctx = plsqlParser.Type_body_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_type_body_elements)
        try:
            self.state = 1568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MAP, plsqlParser.ORDER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1566
                self.map_order_func_declaration()
                pass
            elif token in [plsqlParser.MEMBER, plsqlParser.STATIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1567
                self.subprog_decl_in_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Map_order_func_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def func_decl_in_type(self):
            return self.getTypedRuleContext(plsqlParser.Func_decl_in_typeContext,0)


        def MAP(self):
            return self.getToken(plsqlParser.MAP, 0)

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_map_order_func_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_order_func_declaration" ):
                listener.enterMap_order_func_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_order_func_declaration" ):
                listener.exitMap_order_func_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMap_order_func_declaration" ):
                return visitor.visitMap_order_func_declaration(self)
            else:
                return visitor.visitChildren(self)




    def map_order_func_declaration(self):

        localctx = plsqlParser.Map_order_func_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_map_order_func_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MAP or _la==plsqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1571
            self.match(plsqlParser.MEMBER)
            self.state = 1572
            self.func_decl_in_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subprog_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def STATIC(self):
            return self.getToken(plsqlParser.STATIC, 0)

        def proc_decl_in_type(self):
            return self.getTypedRuleContext(plsqlParser.Proc_decl_in_typeContext,0)


        def func_decl_in_type(self):
            return self.getTypedRuleContext(plsqlParser.Func_decl_in_typeContext,0)


        def constructor_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Constructor_declarationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subprog_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubprog_decl_in_type" ):
                listener.enterSubprog_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubprog_decl_in_type" ):
                listener.exitSubprog_decl_in_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubprog_decl_in_type" ):
                return visitor.visitSubprog_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def subprog_decl_in_type(self):

        localctx = plsqlParser.Subprog_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_subprog_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1574
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MEMBER or _la==plsqlParser.STATIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1578
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.PROCEDURE]:
                self.state = 1575
                self.proc_decl_in_type()
                pass
            elif token in [plsqlParser.FUNCTION]:
                self.state = 1576
                self.func_decl_in_type()
                pass
            elif token in [plsqlParser.CONSTRUCTOR, plsqlParser.FINAL, plsqlParser.INSTANTIABLE]:
                self.state = 1577
                self.constructor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Proc_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_proc_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_decl_in_type" ):
                listener.enterProc_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_decl_in_type" ):
                listener.exitProc_decl_in_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_decl_in_type" ):
                return visitor.visitProc_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def proc_decl_in_type(self):

        localctx = plsqlParser.Proc_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_proc_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1580
            self.match(plsqlParser.PROCEDURE)
            self.state = 1581
            self.procedure_name()
            self.state = 1582
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1583
            self.type_elements_parameter()
            self.state = 1588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 1584
                self.match(plsqlParser.COMMA)
                self.state = 1585
                self.type_elements_parameter()
                self.state = 1590
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1591
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 1592
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1593
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 1595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 1594
                    self.match(plsqlParser.DECLARE)


                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.PROCEDURE - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)) | (1 << (plsqlParser.BINDVAR - 449)) | (1 << (plsqlParser.COLON - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 1597
                    self.declare_spec()
                    self.state = 1602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1603
                self.body()
                self.state = 1604
                self.match(plsqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_func_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_decl_in_type" ):
                listener.enterFunc_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_decl_in_type" ):
                listener.exitFunc_decl_in_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_decl_in_type" ):
                return visitor.visitFunc_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def func_decl_in_type(self):

        localctx = plsqlParser.Func_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_func_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.match(plsqlParser.FUNCTION)
            self.state = 1609
            self.function_name()
            self.state = 1621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 1610
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1611
                self.type_elements_parameter()
                self.state = 1616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1612
                    self.match(plsqlParser.COMMA)
                    self.state = 1613
                    self.type_elements_parameter()
                    self.state = 1618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1619
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 1623
            self.match(plsqlParser.RETURN)
            self.state = 1624
            self.type_spec()
            self.state = 1625
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1626
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 1628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 1627
                    self.match(plsqlParser.DECLARE)


                self.state = 1633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.PROCEDURE - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)) | (1 << (plsqlParser.BINDVAR - 449)) | (1 << (plsqlParser.COLON - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 1630
                    self.declare_spec()
                    self.state = 1635
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1636
                self.body()
                self.state = 1637
                self.match(plsqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(plsqlParser.CONSTRUCTOR, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_specContext,i)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def SELF(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SELF)
            else:
                return self.getToken(plsqlParser.SELF, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def RESULT(self):
            return self.getToken(plsqlParser.RESULT, 0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def FINAL(self):
            return self.getToken(plsqlParser.FINAL, 0)

        def INSTANTIABLE(self):
            return self.getToken(plsqlParser.INSTANTIABLE, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def OUT(self):
            return self.getToken(plsqlParser.OUT, 0)

        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructor_declaration" ):
                return visitor.visitConstructor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def constructor_declaration(self):

        localctx = plsqlParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FINAL:
                self.state = 1641
                self.match(plsqlParser.FINAL)


            self.state = 1645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INSTANTIABLE:
                self.state = 1644
                self.match(plsqlParser.INSTANTIABLE)


            self.state = 1647
            self.match(plsqlParser.CONSTRUCTOR)
            self.state = 1648
            self.match(plsqlParser.FUNCTION)
            self.state = 1649
            self.type_spec()
            self.state = 1667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 1650
                self.match(plsqlParser.LEFT_PAREN)

                self.state = 1651
                self.match(plsqlParser.SELF)
                self.state = 1652
                self.match(plsqlParser.IN)
                self.state = 1653
                self.match(plsqlParser.OUT)
                self.state = 1654
                self.type_spec()
                self.state = 1655
                self.match(plsqlParser.COMMA)
                self.state = 1657
                self.type_elements_parameter()
                self.state = 1662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1658
                    self.match(plsqlParser.COMMA)
                    self.state = 1659
                    self.type_elements_parameter()
                    self.state = 1664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1665
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 1669
            self.match(plsqlParser.RETURN)
            self.state = 1670
            self.match(plsqlParser.SELF)
            self.state = 1671
            self.match(plsqlParser.AS)
            self.state = 1672
            self.match(plsqlParser.RESULT)
            self.state = 1673
            _la = self._input.LA(1)
            if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1674
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 1676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 1675
                    self.match(plsqlParser.DECLARE)


                self.state = 1681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.PROCEDURE - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)) | (1 << (plsqlParser.BINDVAR - 449)) | (1 << (plsqlParser.COLON - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 1678
                    self.declare_spec()
                    self.state = 1683
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1684
                self.body()
                self.state = 1685
                self.match(plsqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modifier_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTANTIABLE(self):
            return self.getToken(plsqlParser.INSTANTIABLE, 0)

        def FINAL(self):
            return self.getToken(plsqlParser.FINAL, 0)

        def OVERRIDING(self):
            return self.getToken(plsqlParser.OVERRIDING, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_modifier_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier_clause" ):
                listener.enterModifier_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier_clause" ):
                listener.exitModifier_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier_clause" ):
                return visitor.visitModifier_clause(self)
            else:
                return visitor.visitChildren(self)




    def modifier_clause(self):

        localctx = plsqlParser.Modifier_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_modifier_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 1689
                self.match(plsqlParser.NOT)


            self.state = 1692
            _la = self._input.LA(1)
            if not(_la==plsqlParser.FINAL or _la==plsqlParser.INSTANTIABLE or _la==plsqlParser.OVERRIDING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_member_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def sqlj_object_type_attr(self):
            return self.getTypedRuleContext(plsqlParser.Sqlj_object_type_attrContext,0)


        def element_spec(self):
            return self.getTypedRuleContext(plsqlParser.Element_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_object_member_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_member_spec" ):
                listener.enterObject_member_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_member_spec" ):
                listener.exitObject_member_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_member_spec" ):
                return visitor.visitObject_member_spec(self)
            else:
                return visitor.visitChildren(self)




    def object_member_spec(self):

        localctx = plsqlParser.Object_member_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_object_member_spec)
        self._la = 0 # Token type
        try:
            self.state = 1700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1694
                self.r_id()
                self.state = 1695
                self.type_spec()
                self.state = 1697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.EXTERNAL:
                    self.state = 1696
                    self.sqlj_object_type_attr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1699
                self.element_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sqlj_object_type_attrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_sqlj_object_type_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlj_object_type_attr" ):
                listener.enterSqlj_object_type_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlj_object_type_attr" ):
                listener.exitSqlj_object_type_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlj_object_type_attr" ):
                return visitor.visitSqlj_object_type_attr(self)
            else:
                return visitor.visitChildren(self)




    def sqlj_object_type_attr(self):

        localctx = plsqlParser.Sqlj_object_type_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_sqlj_object_type_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1702
            self.match(plsqlParser.EXTERNAL)
            self.state = 1703
            self.match(plsqlParser.NAME)
            self.state = 1704
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifier_clause(self):
            return self.getTypedRuleContext(plsqlParser.Modifier_clauseContext,0)


        def element_spec_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Element_spec_optionsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Element_spec_optionsContext,i)


        def pragma_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pragma_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_element_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_spec" ):
                listener.enterElement_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_spec" ):
                listener.exitElement_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_spec" ):
                return visitor.visitElement_spec(self)
            else:
                return visitor.visitChildren(self)




    def element_spec(self):

        localctx = plsqlParser.Element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_element_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1706
                self.modifier_clause()


            self.state = 1710 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1709
                self.element_spec_options()
                self.state = 1712 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.CONSTRUCTOR or _la==plsqlParser.FINAL or _la==plsqlParser.INSTANTIABLE or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & ((1 << (plsqlParser.MAP - 214)) | (1 << (plsqlParser.MEMBER - 214)) | (1 << (plsqlParser.ORDER - 214)))) != 0) or _la==plsqlParser.STATIC):
                    break

            self.state = 1716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1714
                self.match(plsqlParser.COMMA)
                self.state = 1715
                self.pragma_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_spec_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subprogram_spec(self):
            return self.getTypedRuleContext(plsqlParser.Subprogram_specContext,0)


        def constructor_spec(self):
            return self.getTypedRuleContext(plsqlParser.Constructor_specContext,0)


        def map_order_function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Map_order_function_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_element_spec_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_spec_options" ):
                listener.enterElement_spec_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_spec_options" ):
                listener.exitElement_spec_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_spec_options" ):
                return visitor.visitElement_spec_options(self)
            else:
                return visitor.visitChildren(self)




    def element_spec_options(self):

        localctx = plsqlParser.Element_spec_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_element_spec_options)
        try:
            self.state = 1721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MEMBER, plsqlParser.STATIC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1718
                self.subprogram_spec()
                pass
            elif token in [plsqlParser.CONSTRUCTOR, plsqlParser.FINAL, plsqlParser.INSTANTIABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1719
                self.constructor_spec()
                pass
            elif token in [plsqlParser.MAP, plsqlParser.ORDER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1720
                self.map_order_function_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subprogram_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def STATIC(self):
            return self.getToken(plsqlParser.STATIC, 0)

        def type_procedure_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_procedure_specContext,0)


        def type_function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_function_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subprogram_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubprogram_spec" ):
                listener.enterSubprogram_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubprogram_spec" ):
                listener.exitSubprogram_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubprogram_spec" ):
                return visitor.visitSubprogram_spec(self)
            else:
                return visitor.visitChildren(self)




    def subprogram_spec(self):

        localctx = plsqlParser.Subprogram_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_subprogram_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MEMBER or _la==plsqlParser.STATIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.PROCEDURE]:
                self.state = 1724
                self.type_procedure_spec()
                pass
            elif token in [plsqlParser.FUNCTION]:
                self.state = 1725
                self.type_function_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_procedure_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(plsqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(plsqlParser.Procedure_nameContext,0)


        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_type_procedure_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_procedure_spec" ):
                listener.enterType_procedure_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_procedure_spec" ):
                listener.exitType_procedure_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_procedure_spec" ):
                return visitor.visitType_procedure_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_procedure_spec(self):

        localctx = plsqlParser.Type_procedure_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_type_procedure_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1728
            self.match(plsqlParser.PROCEDURE)
            self.state = 1729
            self.procedure_name()
            self.state = 1730
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1731
            self.type_elements_parameter()
            self.state = 1736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 1732
                self.match(plsqlParser.COMMA)
                self.state = 1733
                self.type_elements_parameter()
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1739
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 1742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS or _la==plsqlParser.IS:
                self.state = 1740
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1741
                self.call_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(plsqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def SELF(self):
            return self.getToken(plsqlParser.SELF, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def RESULT(self):
            return self.getToken(plsqlParser.RESULT, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def VARIABLE(self):
            return self.getToken(plsqlParser.VARIABLE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_type_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_function_spec" ):
                listener.enterType_function_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_function_spec" ):
                listener.exitType_function_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_function_spec" ):
                return visitor.visitType_function_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_function_spec(self):

        localctx = plsqlParser.Type_function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_type_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1744
            self.match(plsqlParser.FUNCTION)
            self.state = 1745
            self.function_name()
            self.state = 1757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 1746
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 1747
                self.type_elements_parameter()
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1748
                    self.match(plsqlParser.COMMA)
                    self.state = 1749
                    self.type_elements_parameter()
                    self.state = 1754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1755
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 1759
            self.match(plsqlParser.RETURN)
            self.state = 1764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1760
                self.type_spec()
                pass

            elif la_ == 2:
                self.state = 1761
                self.match(plsqlParser.SELF)
                self.state = 1762
                self.match(plsqlParser.AS)
                self.state = 1763
                self.match(plsqlParser.RESULT)
                pass


            self.state = 1774
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.AS, plsqlParser.IS]:
                self.state = 1766
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1767
                self.call_spec()
                pass
            elif token in [plsqlParser.EXTERNAL]:
                self.state = 1768
                self.match(plsqlParser.EXTERNAL)
                self.state = 1770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.VARIABLE:
                    self.state = 1769
                    self.match(plsqlParser.VARIABLE)


                self.state = 1772
                self.match(plsqlParser.NAME)
                self.state = 1773
                self.expression(0)
                pass
            elif token in [plsqlParser.EOF, plsqlParser.ALTER, plsqlParser.CASCADE, plsqlParser.CONSTRUCTOR, plsqlParser.CREATE, plsqlParser.DELETE, plsqlParser.DROP, plsqlParser.EXPLAIN, plsqlParser.FINAL, plsqlParser.FUNCTION, plsqlParser.INSERT, plsqlParser.INSTANTIABLE, plsqlParser.INVALIDATE, plsqlParser.LOCK, plsqlParser.MAP, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.ORDER, plsqlParser.PROCEDURE, plsqlParser.SELECT, plsqlParser.STATIC, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN, plsqlParser.RIGHT_PAREN, plsqlParser.COMMA, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(plsqlParser.CONSTRUCTOR, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_specContext,i)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def SELF(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SELF)
            else:
                return self.getToken(plsqlParser.SELF, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.AS)
            else:
                return self.getToken(plsqlParser.AS, i)

        def RESULT(self):
            return self.getToken(plsqlParser.RESULT, 0)

        def FINAL(self):
            return self.getToken(plsqlParser.FINAL, 0)

        def INSTANTIABLE(self):
            return self.getToken(plsqlParser.INSTANTIABLE, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_elements_parameterContext,i)


        def call_spec(self):
            return self.getTypedRuleContext(plsqlParser.Call_specContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def OUT(self):
            return self.getToken(plsqlParser.OUT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_constructor_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_spec" ):
                listener.enterConstructor_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_spec" ):
                listener.exitConstructor_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructor_spec" ):
                return visitor.visitConstructor_spec(self)
            else:
                return visitor.visitChildren(self)




    def constructor_spec(self):

        localctx = plsqlParser.Constructor_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_constructor_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FINAL:
                self.state = 1776
                self.match(plsqlParser.FINAL)


            self.state = 1780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INSTANTIABLE:
                self.state = 1779
                self.match(plsqlParser.INSTANTIABLE)


            self.state = 1782
            self.match(plsqlParser.CONSTRUCTOR)
            self.state = 1783
            self.match(plsqlParser.FUNCTION)
            self.state = 1784
            self.type_spec()
            self.state = 1802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 1785
                self.match(plsqlParser.LEFT_PAREN)

                self.state = 1786
                self.match(plsqlParser.SELF)
                self.state = 1787
                self.match(plsqlParser.IN)
                self.state = 1788
                self.match(plsqlParser.OUT)
                self.state = 1789
                self.type_spec()
                self.state = 1790
                self.match(plsqlParser.COMMA)
                self.state = 1792
                self.type_elements_parameter()
                self.state = 1797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1793
                    self.match(plsqlParser.COMMA)
                    self.state = 1794
                    self.type_elements_parameter()
                    self.state = 1799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1800
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 1804
            self.match(plsqlParser.RETURN)
            self.state = 1805
            self.match(plsqlParser.SELF)
            self.state = 1806
            self.match(plsqlParser.AS)
            self.state = 1807
            self.match(plsqlParser.RESULT)
            self.state = 1810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS or _la==plsqlParser.IS:
                self.state = 1808
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AS or _la==plsqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1809
                self.call_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Map_order_function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def type_function_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_function_specContext,0)


        def MAP(self):
            return self.getToken(plsqlParser.MAP, 0)

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_map_order_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_order_function_spec" ):
                listener.enterMap_order_function_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_order_function_spec" ):
                listener.exitMap_order_function_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMap_order_function_spec" ):
                return visitor.visitMap_order_function_spec(self)
            else:
                return visitor.visitChildren(self)




    def map_order_function_spec(self):

        localctx = plsqlParser.Map_order_function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_map_order_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MAP or _la==plsqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1813
            self.match(plsqlParser.MEMBER)
            self.state = 1814
            self.type_function_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(plsqlParser.PRAGMA, 0)

        def RESTRICT_REFERENCES(self):
            return self.getToken(plsqlParser.RESTRICT_REFERENCES, 0)

        def pragma_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Pragma_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Pragma_elementsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_pragma_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_clause" ):
                listener.enterPragma_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_clause" ):
                listener.exitPragma_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_clause" ):
                return visitor.visitPragma_clause(self)
            else:
                return visitor.visitChildren(self)




    def pragma_clause(self):

        localctx = plsqlParser.Pragma_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pragma_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1816
            self.match(plsqlParser.PRAGMA)
            self.state = 1817
            self.match(plsqlParser.RESTRICT_REFERENCES)
            self.state = 1818
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1819
            self.pragma_elements()
            self.state = 1824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 1820
                self.match(plsqlParser.COMMA)
                self.state = 1821
                self.pragma_elements()
                self.state = 1826
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1827
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_pragma_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_elements" ):
                listener.enterPragma_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_elements" ):
                listener.exitPragma_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_elements" ):
                return visitor.visitPragma_elements(self)
            else:
                return visitor.visitChildren(self)




    def pragma_elements(self):

        localctx = plsqlParser.Pragma_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pragma_elements)
        try:
            self.state = 1831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1829
                self.r_id()
                pass
            elif token in [plsqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1830
                self.match(plsqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_elements_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(plsqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_type_elements_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_elements_parameter" ):
                listener.enterType_elements_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_elements_parameter" ):
                listener.exitType_elements_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_elements_parameter" ):
                return visitor.visitType_elements_parameter(self)
            else:
                return visitor.visitChildren(self)




    def type_elements_parameter(self):

        localctx = plsqlParser.Type_elements_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_type_elements_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1833
            self.parameter_name()
            self.state = 1834
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(plsqlParser.DROP, 0)

        def SEQUENCE(self):
            return self.getToken(plsqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(plsqlParser.Sequence_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_drop_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_sequence" ):
                listener.enterDrop_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_sequence" ):
                listener.exitDrop_sequence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_sequence" ):
                return visitor.visitDrop_sequence(self)
            else:
                return visitor.visitChildren(self)




    def drop_sequence(self):

        localctx = plsqlParser.Drop_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_drop_sequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.match(plsqlParser.DROP)
            self.state = 1837
            self.match(plsqlParser.SEQUENCE)
            self.state = 1838
            self.sequence_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def SEQUENCE(self):
            return self.getToken(plsqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(plsqlParser.Sequence_nameContext,0)


        def sequence_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Sequence_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Sequence_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_alter_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_sequence" ):
                listener.enterAlter_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_sequence" ):
                listener.exitAlter_sequence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_sequence" ):
                return visitor.visitAlter_sequence(self)
            else:
                return visitor.visitChildren(self)




    def alter_sequence(self):

        localctx = plsqlParser.Alter_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_alter_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1840
            self.match(plsqlParser.ALTER)
            self.state = 1841
            self.match(plsqlParser.SEQUENCE)
            self.state = 1842
            self.sequence_name()
            self.state = 1844 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1843
                self.sequence_spec()
                self.state = 1846 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.CACHE or _la==plsqlParser.CYCLE or ((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & ((1 << (plsqlParser.INCREMENT - 168)) | (1 << (plsqlParser.MAXVALUE - 168)) | (1 << (plsqlParser.MINVALUE - 168)))) != 0) or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & ((1 << (plsqlParser.NOCACHE - 241)) | (1 << (plsqlParser.NOCYCLE - 241)) | (1 << (plsqlParser.NOMAXVALUE - 241)) | (1 << (plsqlParser.NOMINVALUE - 241)) | (1 << (plsqlParser.NOORDER - 241)) | (1 << (plsqlParser.ORDER - 241)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def SEQUENCE(self):
            return self.getToken(plsqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(plsqlParser.Sequence_nameContext,0)


        def sequence_start_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Sequence_start_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Sequence_start_clauseContext,i)


        def sequence_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Sequence_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Sequence_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_create_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_sequence" ):
                listener.enterCreate_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_sequence" ):
                listener.exitCreate_sequence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_sequence" ):
                return visitor.visitCreate_sequence(self)
            else:
                return visitor.visitChildren(self)




    def create_sequence(self):

        localctx = plsqlParser.Create_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_create_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1848
            self.match(plsqlParser.CREATE)
            self.state = 1849
            self.match(plsqlParser.SEQUENCE)
            self.state = 1850
            self.sequence_name()
            self.state = 1855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.CACHE or _la==plsqlParser.CYCLE or ((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & ((1 << (plsqlParser.INCREMENT - 168)) | (1 << (plsqlParser.MAXVALUE - 168)) | (1 << (plsqlParser.MINVALUE - 168)))) != 0) or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & ((1 << (plsqlParser.NOCACHE - 241)) | (1 << (plsqlParser.NOCYCLE - 241)) | (1 << (plsqlParser.NOMAXVALUE - 241)) | (1 << (plsqlParser.NOMINVALUE - 241)) | (1 << (plsqlParser.NOORDER - 241)) | (1 << (plsqlParser.ORDER - 241)))) != 0) or _la==plsqlParser.START:
                self.state = 1853
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.START]:
                    self.state = 1851
                    self.sequence_start_clause()
                    pass
                elif token in [plsqlParser.CACHE, plsqlParser.CYCLE, plsqlParser.INCREMENT, plsqlParser.MAXVALUE, plsqlParser.MINVALUE, plsqlParser.NOCACHE, plsqlParser.NOCYCLE, plsqlParser.NOMAXVALUE, plsqlParser.NOMINVALUE, plsqlParser.NOORDER, plsqlParser.ORDER]:
                    self.state = 1852
                    self.sequence_spec()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1857
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(plsqlParser.INCREMENT, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def MAXVALUE(self):
            return self.getToken(plsqlParser.MAXVALUE, 0)

        def NOMAXVALUE(self):
            return self.getToken(plsqlParser.NOMAXVALUE, 0)

        def MINVALUE(self):
            return self.getToken(plsqlParser.MINVALUE, 0)

        def NOMINVALUE(self):
            return self.getToken(plsqlParser.NOMINVALUE, 0)

        def CYCLE(self):
            return self.getToken(plsqlParser.CYCLE, 0)

        def NOCYCLE(self):
            return self.getToken(plsqlParser.NOCYCLE, 0)

        def CACHE(self):
            return self.getToken(plsqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(plsqlParser.NOCACHE, 0)

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def NOORDER(self):
            return self.getToken(plsqlParser.NOORDER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_sequence_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_spec" ):
                listener.enterSequence_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_spec" ):
                listener.exitSequence_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_spec" ):
                return visitor.visitSequence_spec(self)
            else:
                return visitor.visitChildren(self)




    def sequence_spec(self):

        localctx = plsqlParser.Sequence_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_sequence_spec)
        try:
            self.state = 1874
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INCREMENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1858
                self.match(plsqlParser.INCREMENT)
                self.state = 1859
                self.match(plsqlParser.BY)
                self.state = 1860
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1861
                self.match(plsqlParser.MAXVALUE)
                self.state = 1862
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.NOMAXVALUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1863
                self.match(plsqlParser.NOMAXVALUE)
                pass
            elif token in [plsqlParser.MINVALUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1864
                self.match(plsqlParser.MINVALUE)
                self.state = 1865
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.NOMINVALUE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1866
                self.match(plsqlParser.NOMINVALUE)
                pass
            elif token in [plsqlParser.CYCLE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1867
                self.match(plsqlParser.CYCLE)
                pass
            elif token in [plsqlParser.NOCYCLE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1868
                self.match(plsqlParser.NOCYCLE)
                pass
            elif token in [plsqlParser.CACHE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1869
                self.match(plsqlParser.CACHE)
                self.state = 1870
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [plsqlParser.NOCACHE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1871
                self.match(plsqlParser.NOCACHE)
                pass
            elif token in [plsqlParser.ORDER]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1872
                self.match(plsqlParser.ORDER)
                pass
            elif token in [plsqlParser.NOORDER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1873
                self.match(plsqlParser.NOORDER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_start_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(plsqlParser.START, 0)

        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_sequence_start_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_start_clause" ):
                listener.enterSequence_start_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_start_clause" ):
                listener.exitSequence_start_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_start_clause" ):
                return visitor.visitSequence_start_clause(self)
            else:
                return visitor.visitChildren(self)




    def sequence_start_clause(self):

        localctx = plsqlParser.Sequence_start_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_sequence_start_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1876
            self.match(plsqlParser.START)
            self.state = 1877
            self.match(plsqlParser.WITH)
            self.state = 1878
            self.match(plsqlParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Invoker_rights_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHID(self):
            return self.getToken(plsqlParser.AUTHID, 0)

        def CURRENT_USER(self):
            return self.getToken(plsqlParser.CURRENT_USER, 0)

        def DEFINER(self):
            return self.getToken(plsqlParser.DEFINER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_invoker_rights_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvoker_rights_clause" ):
                listener.enterInvoker_rights_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvoker_rights_clause" ):
                listener.exitInvoker_rights_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvoker_rights_clause" ):
                return visitor.visitInvoker_rights_clause(self)
            else:
                return visitor.visitChildren(self)




    def invoker_rights_clause(self):

        localctx = plsqlParser.Invoker_rights_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_invoker_rights_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1880
            self.match(plsqlParser.AUTHID)
            self.state = 1881
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CURRENT_USER or _la==plsqlParser.DEFINER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compiler_parameters_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_compiler_parameters_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompiler_parameters_clause" ):
                listener.enterCompiler_parameters_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompiler_parameters_clause" ):
                listener.exitCompiler_parameters_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompiler_parameters_clause" ):
                return visitor.visitCompiler_parameters_clause(self)
            else:
                return visitor.visitChildren(self)




    def compiler_parameters_clause(self):

        localctx = plsqlParser.Compiler_parameters_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_compiler_parameters_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1883
            self.r_id()
            self.state = 1884
            self.match(plsqlParser.EQUALS_OP)
            self.state = 1885
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Call_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(plsqlParser.LANGUAGE, 0)

        def java_spec(self):
            return self.getTypedRuleContext(plsqlParser.Java_specContext,0)


        def c_spec(self):
            return self.getTypedRuleContext(plsqlParser.C_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_call_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_spec" ):
                listener.enterCall_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_spec" ):
                listener.exitCall_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall_spec" ):
                return visitor.visitCall_spec(self)
            else:
                return visitor.visitChildren(self)




    def call_spec(self):

        localctx = plsqlParser.Call_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_call_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1887
            self.match(plsqlParser.LANGUAGE)
            self.state = 1890
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.JAVA]:
                self.state = 1888
                self.java_spec()
                pass
            elif token in [plsqlParser.C_LETTER]:
                self.state = 1889
                self.c_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JAVA(self):
            return self.getToken(plsqlParser.JAVA, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_java_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_spec" ):
                listener.enterJava_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_spec" ):
                listener.exitJava_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJava_spec" ):
                return visitor.visitJava_spec(self)
            else:
                return visitor.visitChildren(self)




    def java_spec(self):

        localctx = plsqlParser.Java_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_java_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1892
            self.match(plsqlParser.JAVA)
            self.state = 1893
            self.match(plsqlParser.NAME)
            self.state = 1894
            self.match(plsqlParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class C_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C_LETTER(self):
            return self.getToken(plsqlParser.C_LETTER, 0)

        def LIBRARY(self):
            return self.getToken(plsqlParser.LIBRARY, 0)

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def c_agent_in_clause(self):
            return self.getTypedRuleContext(plsqlParser.C_agent_in_clauseContext,0)


        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def CONTEXT(self):
            return self.getToken(plsqlParser.CONTEXT, 0)

        def c_parameters_clause(self):
            return self.getTypedRuleContext(plsqlParser.C_parameters_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_c_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_spec" ):
                listener.enterC_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_spec" ):
                listener.exitC_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_spec" ):
                return visitor.visitC_spec(self)
            else:
                return visitor.visitChildren(self)




    def c_spec(self):

        localctx = plsqlParser.C_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_c_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1896
            self.match(plsqlParser.C_LETTER)
            self.state = 1899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NAME:
                self.state = 1897
                self.match(plsqlParser.NAME)
                self.state = 1898
                self.match(plsqlParser.CHAR_STRING)


            self.state = 1901
            self.match(plsqlParser.LIBRARY)
            self.state = 1902
            self.r_id()
            self.state = 1904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1903
                self.c_agent_in_clause()


            self.state = 1908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1906
                self.match(plsqlParser.WITH)
                self.state = 1907
                self.match(plsqlParser.CONTEXT)


            self.state = 1911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1910
                self.c_parameters_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class C_agent_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AGENT(self):
            return self.getToken(plsqlParser.AGENT, 0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_c_agent_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_agent_in_clause" ):
                listener.enterC_agent_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_agent_in_clause" ):
                listener.exitC_agent_in_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_agent_in_clause" ):
                return visitor.visitC_agent_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def c_agent_in_clause(self):

        localctx = plsqlParser.C_agent_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_c_agent_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            self.match(plsqlParser.AGENT)
            self.state = 1914
            self.match(plsqlParser.IN)
            self.state = 1915
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1916
            self.expression(0)
            self.state = 1921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 1917
                self.match(plsqlParser.COMMA)
                self.state = 1918
                self.expression(0)
                self.state = 1923
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1924
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class C_parameters_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERS(self):
            return self.getToken(plsqlParser.PARAMETERS, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_c_parameters_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_parameters_clause" ):
                listener.enterC_parameters_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_parameters_clause" ):
                listener.exitC_parameters_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_parameters_clause" ):
                return visitor.visitC_parameters_clause(self)
            else:
                return visitor.visitChildren(self)




    def c_parameters_clause(self):

        localctx = plsqlParser.C_parameters_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_c_parameters_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1926
            self.match(plsqlParser.PARAMETERS)
            self.state = 1927
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 1939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALL, plsqlParser.ANALYZE, plsqlParser.ANY, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONNECT_BY_ROOT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DISTINCT, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXISTS, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FALSE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NOT, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PRIOR, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUE, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.PLUS_SIGN, plsqlParser.MINUS_SIGN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                self.state = 1928
                self.expression(0)
                self.state = 1933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 1929
                    self.match(plsqlParser.COMMA)
                    self.state = 1930
                    self.expression(0)
                    self.state = 1935
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [plsqlParser.PERIOD]:
                self.state = 1936
                self.match(plsqlParser.PERIOD)
                self.state = 1937
                self.match(plsqlParser.PERIOD)
                self.state = 1938
                self.match(plsqlParser.PERIOD)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1941
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(plsqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(plsqlParser.Default_value_partContext,0)


        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.IN)
            else:
                return self.getToken(plsqlParser.IN, i)

        def OUT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OUT)
            else:
                return self.getToken(plsqlParser.OUT, i)

        def INOUT(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.INOUT)
            else:
                return self.getToken(plsqlParser.INOUT, i)

        def NOCOPY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NOCOPY)
            else:
                return self.getToken(plsqlParser.NOCOPY, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = plsqlParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1943
            self.parameter_name()
            self.state = 1947
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1944
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.IN or _la==plsqlParser.INOUT or _la==plsqlParser.NOCOPY or _la==plsqlParser.OUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 1949
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

            self.state = 1951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 1950
                self.type_spec()


            self.state = 1954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP:
                self.state = 1953
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_value_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def ASSIGN_OP(self):
            return self.getToken(plsqlParser.ASSIGN_OP, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_default_value_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_part" ):
                listener.enterDefault_value_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_part" ):
                listener.exitDefault_value_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_value_part" ):
                return visitor.visitDefault_value_part(self)
            else:
                return visitor.visitChildren(self)




    def default_value_part(self):

        localctx = plsqlParser.Default_value_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_default_value_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1956
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1957
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Exception_declarationContext,0)


        def pragma_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Pragma_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Record_declarationContext,0)


        def table_declaration(self):
            return self.getTypedRuleContext(plsqlParser.Table_declarationContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_procedure_bodyContext,0)


        def create_function_body(self):
            return self.getTypedRuleContext(plsqlParser.Create_function_bodyContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_declare_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_spec" ):
                listener.enterDeclare_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_spec" ):
                listener.exitDeclare_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_spec" ):
                return visitor.visitDeclare_spec(self)
            else:
                return visitor.visitChildren(self)




    def declare_spec(self):

        localctx = plsqlParser.Declare_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_declare_spec)
        try:
            self.state = 1968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1959
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1960
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1961
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1962
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1963
                self.pragma_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1964
                self.record_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1965
                self.table_declaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1966
                self.create_procedure_body()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1967
                self.create_function_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(plsqlParser.Variable_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def CONSTANT(self):
            return self.getToken(plsqlParser.CONSTANT, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def default_value_part(self):
            return self.getTypedRuleContext(plsqlParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declaration" ):
                listener.enterVariable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declaration" ):
                listener.exitVariable_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_declaration" ):
                return visitor.visitVariable_declaration(self)
            else:
                return visitor.visitChildren(self)




    def variable_declaration(self):

        localctx = plsqlParser.Variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_variable_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1970
            self.variable_name()
            self.state = 1972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1971
                self.match(plsqlParser.CONSTANT)


            self.state = 1974
            self.type_spec()
            self.state = 1977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 1975
                self.match(plsqlParser.NOT)
                self.state = 1976
                self.match(plsqlParser.NULL)


            self.state = 1980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP:
                self.state = 1979
                self.default_value_part()


            self.state = 1982
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subtype_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBTYPE(self):
            return self.getToken(plsqlParser.SUBTYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_subtype_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtype_declaration" ):
                listener.enterSubtype_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtype_declaration" ):
                listener.exitSubtype_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtype_declaration" ):
                return visitor.visitSubtype_declaration(self)
            else:
                return visitor.visitChildren(self)




    def subtype_declaration(self):

        localctx = plsqlParser.Subtype_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_subtype_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            self.match(plsqlParser.SUBTYPE)
            self.state = 1985
            self.type_name()
            self.state = 1986
            self.match(plsqlParser.IS)
            self.state = 1987
            self.type_spec()
            self.state = 1993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RANGE:
                self.state = 1988
                self.match(plsqlParser.RANGE)
                self.state = 1989
                self.expression(0)
                self.state = 1990
                self.match(plsqlParser.T__0)
                self.state = 1991
                self.expression(0)


            self.state = 1997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 1995
                self.match(plsqlParser.NOT)
                self.state = 1996
                self.match(plsqlParser.NULL)


            self.state = 1999
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Parameter_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Parameter_specContext,i)


        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_declaration" ):
                listener.enterCursor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_declaration" ):
                listener.exitCursor_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_declaration" ):
                return visitor.visitCursor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def cursor_declaration(self):

        localctx = plsqlParser.Cursor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_cursor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2001
            self.match(plsqlParser.CURSOR)
            self.state = 2002
            self.cursor_name()
            self.state = 2014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 2003
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2004
                self.parameter_spec()
                self.state = 2009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 2005
                    self.match(plsqlParser.COMMA)
                    self.state = 2006
                    self.parameter_spec()
                    self.state = 2011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2012
                self.match(plsqlParser.RIGHT_PAREN)


            self.state = 2018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RETURN:
                self.state = 2016
                self.match(plsqlParser.RETURN)
                self.state = 2017
                self.type_spec()


            self.state = 2022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.IS:
                self.state = 2020
                self.match(plsqlParser.IS)
                self.state = 2021
                self.select_statement()


            self.state = 2024
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(plsqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(plsqlParser.Default_value_partContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_spec" ):
                listener.enterParameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_spec" ):
                listener.exitParameter_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_spec" ):
                return visitor.visitParameter_spec(self)
            else:
                return visitor.visitChildren(self)




    def parameter_spec(self):

        localctx = plsqlParser.Parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_parameter_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self.parameter_name()
            self.state = 2031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.IN - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 2028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.IN:
                    self.state = 2027
                    self.match(plsqlParser.IN)


                self.state = 2030
                self.type_spec()


            self.state = 2034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP:
                self.state = 2033
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exception_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exception_name(self):
            return self.getTypedRuleContext(plsqlParser.Exception_nameContext,0)


        def EXCEPTION(self):
            return self.getToken(plsqlParser.EXCEPTION, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_exception_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_declaration" ):
                listener.enterException_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_declaration" ):
                listener.exitException_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_declaration" ):
                return visitor.visitException_declaration(self)
            else:
                return visitor.visitChildren(self)




    def exception_declaration(self):

        localctx = plsqlParser.Exception_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_exception_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2036
            self.exception_name()
            self.state = 2037
            self.match(plsqlParser.EXCEPTION)
            self.state = 2038
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.id1 = None # R_idContext

        def PRAGMA(self):
            return self.getToken(plsqlParser.PRAGMA, 0)

        def SERIALLY_REUSABLE(self):
            return self.getToken(plsqlParser.SERIALLY_REUSABLE, 0)

        def AUTONOMOUS_TRANSACTION(self):
            return self.getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0)

        def EXCEPTION_INIT(self):
            return self.getToken(plsqlParser.EXCEPTION_INIT, 0)

        def exception_name(self):
            return self.getTypedRuleContext(plsqlParser.Exception_nameContext,0)


        def numeric_negative(self):
            return self.getTypedRuleContext(plsqlParser.Numeric_negativeContext,0)


        def INLINE(self):
            return self.getToken(plsqlParser.INLINE, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def RESTRICT_REFERENCES(self):
            return self.getToken(plsqlParser.RESTRICT_REFERENCES, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(plsqlParser.R_idContext,i)


        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_pragma_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_declaration" ):
                listener.enterPragma_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_declaration" ):
                listener.exitPragma_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_declaration" ):
                return visitor.visitPragma_declaration(self)
            else:
                return visitor.visitChildren(self)




    def pragma_declaration(self):

        localctx = plsqlParser.Pragma_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_pragma_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2040
            self.match(plsqlParser.PRAGMA)
            self.state = 2071
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SERIALLY_REUSABLE]:
                self.state = 2041
                self.match(plsqlParser.SERIALLY_REUSABLE)
                pass
            elif token in [plsqlParser.AUTONOMOUS_TRANSACTION]:
                self.state = 2042
                self.match(plsqlParser.AUTONOMOUS_TRANSACTION)
                pass
            elif token in [plsqlParser.EXCEPTION_INIT]:
                self.state = 2043
                self.match(plsqlParser.EXCEPTION_INIT)
                self.state = 2044
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2045
                self.exception_name()
                self.state = 2046
                self.match(plsqlParser.COMMA)
                self.state = 2047
                self.numeric_negative()
                self.state = 2048
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.INLINE]:
                self.state = 2050
                self.match(plsqlParser.INLINE)
                self.state = 2051
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2052
                localctx.id1 = self.r_id()
                self.state = 2053
                self.match(plsqlParser.COMMA)
                self.state = 2054
                self.expression(0)
                self.state = 2055
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.RESTRICT_REFERENCES]:
                self.state = 2057
                self.match(plsqlParser.RESTRICT_REFERENCES)
                self.state = 2058
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2061
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                    self.state = 2059
                    self.r_id()
                    pass
                elif token in [plsqlParser.DEFAULT]:
                    self.state = 2060
                    self.match(plsqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2065 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2063
                    self.match(plsqlParser.COMMA)
                    self.state = 2064
                    self.r_id()
                    self.state = 2067 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.COMMA):
                        break

                self.state = 2069
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2073
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Record_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_type_dec(self):
            return self.getTypedRuleContext(plsqlParser.Record_type_decContext,0)


        def record_var_dec(self):
            return self.getTypedRuleContext(plsqlParser.Record_var_decContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_record_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_declaration" ):
                listener.enterRecord_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_declaration" ):
                listener.exitRecord_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_declaration" ):
                return visitor.visitRecord_declaration(self)
            else:
                return visitor.visitChildren(self)




    def record_declaration(self):

        localctx = plsqlParser.Record_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_record_declaration)
        try:
            self.state = 2077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2075
                self.record_type_dec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2076
                self.record_var_dec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Record_type_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def RECORD(self):
            return self.getToken(plsqlParser.RECORD, 0)

        def field_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Field_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Field_specContext,i)


        def REF(self):
            return self.getToken(plsqlParser.REF, 0)

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_record_type_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_type_dec" ):
                listener.enterRecord_type_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_type_dec" ):
                listener.exitRecord_type_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_type_dec" ):
                return visitor.visitRecord_type_dec(self)
            else:
                return visitor.visitChildren(self)




    def record_type_dec(self):

        localctx = plsqlParser.Record_type_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_record_type_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2079
            self.match(plsqlParser.TYPE)
            self.state = 2080
            self.type_name()
            self.state = 2081
            self.match(plsqlParser.IS)
            self.state = 2100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.RECORD]:
                self.state = 2082
                self.match(plsqlParser.RECORD)
                self.state = 2083
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2084
                self.field_spec()
                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 2085
                    self.match(plsqlParser.COMMA)
                    self.state = 2086
                    self.field_spec()
                    self.state = 2091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2092
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.REF]:
                self.state = 2094
                self.match(plsqlParser.REF)
                self.state = 2095
                self.match(plsqlParser.CURSOR)
                self.state = 2098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.RETURN:
                    self.state = 2096
                    self.match(plsqlParser.RETURN)
                    self.state = 2097
                    self.type_spec()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2102
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def default_value_part(self):
            return self.getTypedRuleContext(plsqlParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_field_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_spec" ):
                listener.enterField_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_spec" ):
                listener.exitField_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_spec" ):
                return visitor.visitField_spec(self)
            else:
                return visitor.visitChildren(self)




    def field_spec(self):

        localctx = plsqlParser.Field_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_field_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2104
            self.column_name()
            self.state = 2106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 2105
                self.type_spec()


            self.state = 2110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 2108
                self.match(plsqlParser.NOT)
                self.state = 2109
                self.match(plsqlParser.NULL)


            self.state = 2113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT or _la==plsqlParser.ASSIGN_OP:
                self.state = 2112
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Record_var_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_name(self):
            return self.getTypedRuleContext(plsqlParser.Record_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def PERCENT_ROWTYPE(self):
            return self.getToken(plsqlParser.PERCENT_ROWTYPE, 0)

        def PERCENT_TYPE(self):
            return self.getToken(plsqlParser.PERCENT_TYPE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_record_var_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_var_dec" ):
                listener.enterRecord_var_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_var_dec" ):
                listener.exitRecord_var_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_var_dec" ):
                return visitor.visitRecord_var_dec(self)
            else:
                return visitor.visitChildren(self)




    def record_var_dec(self):

        localctx = plsqlParser.Record_var_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_record_var_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2115
            self.record_name()
            self.state = 2116
            self.type_name()
            self.state = 2117
            _la = self._input.LA(1)
            if not(_la==plsqlParser.PERCENT_ROWTYPE or _la==plsqlParser.PERCENT_TYPE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2118
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_type_dec(self):
            return self.getTypedRuleContext(plsqlParser.Table_type_decContext,0)


        def table_var_dec(self):
            return self.getTypedRuleContext(plsqlParser.Table_var_decContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_declaration" ):
                listener.enterTable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_declaration" ):
                listener.exitTable_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_declaration" ):
                return visitor.visitTable_declaration(self)
            else:
                return visitor.visitChildren(self)




    def table_declaration(self):

        localctx = plsqlParser.Table_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_table_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 2120
                self.table_type_dec()
                pass

            elif la_ == 2:
                self.state = 2121
                self.table_var_dec()
                pass


            self.state = 2124
            self.match(plsqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_type_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(plsqlParser.IS, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def varray_type_def(self):
            return self.getTypedRuleContext(plsqlParser.Varray_type_defContext,0)


        def table_indexed_by_part(self):
            return self.getTypedRuleContext(plsqlParser.Table_indexed_by_partContext,0)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_type_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_dec" ):
                listener.enterTable_type_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_dec" ):
                listener.exitTable_type_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_type_dec" ):
                return visitor.visitTable_type_dec(self)
            else:
                return visitor.visitChildren(self)




    def table_type_dec(self):

        localctx = plsqlParser.Table_type_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_table_type_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2126
            self.match(plsqlParser.TYPE)
            self.state = 2127
            self.type_name()
            self.state = 2128
            self.match(plsqlParser.IS)
            self.state = 2140
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.TABLE]:
                self.state = 2129
                self.match(plsqlParser.TABLE)
                self.state = 2130
                self.match(plsqlParser.OF)
                self.state = 2131
                self.type_spec()
                self.state = 2133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.INDEX or _la==plsqlParser.INDEXED:
                    self.state = 2132
                    self.table_indexed_by_part()


                self.state = 2137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NOT:
                    self.state = 2135
                    self.match(plsqlParser.NOT)
                    self.state = 2136
                    self.match(plsqlParser.NULL)


                pass
            elif token in [plsqlParser.VARRAY, plsqlParser.VARYING]:
                self.state = 2139
                self.varray_type_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_indexed_by_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.idx1 = None # Token
            self.idx2 = None # Token

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def INDEXED(self):
            return self.getToken(plsqlParser.INDEXED, 0)

        def INDEX(self):
            return self.getToken(plsqlParser.INDEX, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_indexed_by_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_indexed_by_part" ):
                listener.enterTable_indexed_by_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_indexed_by_part" ):
                listener.exitTable_indexed_by_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_indexed_by_part" ):
                return visitor.visitTable_indexed_by_part(self)
            else:
                return visitor.visitChildren(self)




    def table_indexed_by_part(self):

        localctx = plsqlParser.Table_indexed_by_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_table_indexed_by_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INDEXED]:
                self.state = 2142
                localctx.idx1 = self.match(plsqlParser.INDEXED)
                pass
            elif token in [plsqlParser.INDEX]:
                self.state = 2143
                localctx.idx2 = self.match(plsqlParser.INDEX)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2146
            self.match(plsqlParser.BY)
            self.state = 2147
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Varray_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def VARRAY(self):
            return self.getToken(plsqlParser.VARRAY, 0)

        def VARYING(self):
            return self.getToken(plsqlParser.VARYING, 0)

        def ARRAY(self):
            return self.getToken(plsqlParser.ARRAY, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_varray_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarray_type_def" ):
                listener.enterVarray_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarray_type_def" ):
                listener.exitVarray_type_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarray_type_def" ):
                return visitor.visitVarray_type_def(self)
            else:
                return visitor.visitChildren(self)




    def varray_type_def(self):

        localctx = plsqlParser.Varray_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_varray_type_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.VARRAY]:
                self.state = 2149
                self.match(plsqlParser.VARRAY)
                pass
            elif token in [plsqlParser.VARYING]:
                self.state = 2150
                self.match(plsqlParser.VARYING)
                self.state = 2151
                self.match(plsqlParser.ARRAY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2154
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2155
            self.expression(0)
            self.state = 2156
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2157
            self.match(plsqlParser.OF)
            self.state = 2158
            self.type_spec()
            self.state = 2161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 2159
                self.match(plsqlParser.NOT)
                self.state = 2160
                self.match(plsqlParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_var_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_var_name(self):
            return self.getTypedRuleContext(plsqlParser.Table_var_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_var_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_var_dec" ):
                listener.enterTable_var_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_var_dec" ):
                listener.exitTable_var_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_var_dec" ):
                return visitor.visitTable_var_dec(self)
            else:
                return visitor.visitChildren(self)




    def table_var_dec(self):

        localctx = plsqlParser.Table_var_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_table_var_dec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2163
            self.table_var_name()
            self.state = 2164
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Seq_of_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.StatementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.StatementContext,i)


        def label_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Label_declarationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Label_declarationContext,i)


        def EOF(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.EOF)
            else:
                return self.getToken(plsqlParser.EOF, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_seq_of_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeq_of_statements" ):
                listener.enterSeq_of_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeq_of_statements" ):
                listener.exitSeq_of_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeq_of_statements" ):
                return visitor.visitSeq_of_statements(self)
            else:
                return visitor.visitChildren(self)




    def seq_of_statements(self):

        localctx = plsqlParser.Seq_of_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_seq_of_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2170 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2170
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALTER, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BEGIN, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CREATE, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECLARE, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DELETE, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FETCH, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FOR, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GOTO, plsqlParser.GRANT, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IF, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSERT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCK, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PROCEDURE, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELECT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATE, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITH, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                        self.state = 2166
                        self.statement()
                        self.state = 2167
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.EOF or _la==plsqlParser.SEMICOLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [plsqlParser.LESS_THAN_OP]:
                        self.state = 2169
                        self.label_declaration()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2172 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Label_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ltp1 = None # Token

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_label_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_declaration" ):
                listener.enterLabel_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_declaration" ):
                listener.exitLabel_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel_declaration" ):
                return visitor.visitLabel_declaration(self)
            else:
                return visitor.visitChildren(self)




    def label_declaration(self):

        localctx = plsqlParser.Label_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_label_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2174
            localctx.ltp1 = self.match(plsqlParser.LESS_THAN_OP)
            self.state = 2175
            self.match(plsqlParser.LESS_THAN_OP)
            self.state = 2176
            self.label_name()
            self.state = 2177
            self.match(plsqlParser.GREATER_THAN_OP)
            self.state = 2178
            self.match(plsqlParser.GREATER_THAN_OP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(plsqlParser.CREATE, 0)

        def swallow_to_semi(self):
            return self.getTypedRuleContext(plsqlParser.Swallow_to_semiContext,0)


        def ALTER(self):
            return self.getToken(plsqlParser.ALTER, 0)

        def GRANT(self):
            return self.getToken(plsqlParser.GRANT, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def TRUNCATE(self):
            return self.getToken(plsqlParser.TRUNCATE, 0)

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def block(self):
            return self.getTypedRuleContext(plsqlParser.BlockContext,0)


        def assignment_statement(self):
            return self.getTypedRuleContext(plsqlParser.Assignment_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(plsqlParser.Continue_statementContext,0)


        def exit_statement(self):
            return self.getTypedRuleContext(plsqlParser.Exit_statementContext,0)


        def goto_statement(self):
            return self.getTypedRuleContext(plsqlParser.Goto_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(plsqlParser.If_statementContext,0)


        def loop_statement(self):
            return self.getTypedRuleContext(plsqlParser.Loop_statementContext,0)


        def forall_statement(self):
            return self.getTypedRuleContext(plsqlParser.Forall_statementContext,0)


        def null_statement(self):
            return self.getTypedRuleContext(plsqlParser.Null_statementContext,0)


        def raise_statement(self):
            return self.getTypedRuleContext(plsqlParser.Raise_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(plsqlParser.Return_statementContext,0)


        def case_statement(self):
            return self.getTypedRuleContext(plsqlParser.Case_statementContext,0)


        def sql_statement(self):
            return self.getTypedRuleContext(plsqlParser.Sql_statementContext,0)


        def function_call(self):
            return self.getTypedRuleContext(plsqlParser.Function_callContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = plsqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_statement)
        try:
            self.state = 2206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2180
                self.match(plsqlParser.CREATE)
                self.state = 2181
                self.swallow_to_semi()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2182
                self.match(plsqlParser.ALTER)
                self.state = 2183
                self.swallow_to_semi()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2184
                self.match(plsqlParser.GRANT)
                self.state = 2186
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 2185
                    self.match(plsqlParser.ALL)


                self.state = 2188
                self.swallow_to_semi()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2189
                self.match(plsqlParser.TRUNCATE)
                self.state = 2190
                self.swallow_to_semi()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2191
                self.body()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2192
                self.block()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2193
                self.assignment_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2194
                self.continue_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2195
                self.exit_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2196
                self.goto_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2197
                self.if_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2198
                self.loop_statement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2199
                self.forall_statement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2200
                self.null_statement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2201
                self.raise_statement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2202
                self.return_statement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2203
                self.case_statement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2204
                self.sql_statement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2205
                self.function_call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignment_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN_OP(self):
            return self.getToken(plsqlParser.ASSIGN_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def general_element(self):
            return self.getTypedRuleContext(plsqlParser.General_elementContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_assignment_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_statement" ):
                listener.enterAssignment_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_statement" ):
                listener.exitAssignment_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_statement" ):
                return visitor.visitAssignment_statement(self)
            else:
                return visitor.visitChildren(self)




    def assignment_statement(self):

        localctx = plsqlParser.Assignment_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_assignment_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 2208
                self.general_element()
                pass
            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                self.state = 2209
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2212
            self.match(plsqlParser.ASSIGN_OP)
            self.state = 2213
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(plsqlParser.CONTINUE, 0)

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_continue_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_statement" ):
                return visitor.visitContinue_statement(self)
            else:
                return visitor.visitChildren(self)




    def continue_statement(self):

        localctx = plsqlParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_continue_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2215
            self.match(plsqlParser.CONTINUE)
            self.state = 2217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 2216
                self.label_name()


            self.state = 2221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHEN:
                self.state = 2219
                self.match(plsqlParser.WHEN)
                self.state = 2220
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(plsqlParser.EXIT, 0)

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_exit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_statement" ):
                listener.enterExit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_statement" ):
                listener.exitExit_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit_statement" ):
                return visitor.visitExit_statement(self)
            else:
                return visitor.visitChildren(self)




    def exit_statement(self):

        localctx = plsqlParser.Exit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_exit_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2223
            self.match(plsqlParser.EXIT)
            self.state = 2225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 2224
                self.label_name()


            self.state = 2229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHEN:
                self.state = 2227
                self.match(plsqlParser.WHEN)
                self.state = 2228
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Goto_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(plsqlParser.GOTO, 0)

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_goto_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoto_statement" ):
                return visitor.visitGoto_statement(self)
            else:
                return visitor.visitChildren(self)




    def goto_statement(self):

        localctx = plsqlParser.Goto_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_goto_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2231
            self.match(plsqlParser.GOTO)
            self.state = 2232
            self.label_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.IF)
            else:
                return self.getToken(plsqlParser.IF, i)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def elsif_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Elsif_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Elsif_partContext,i)


        def else_part(self):
            return self.getTypedRuleContext(plsqlParser.Else_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)




    def if_statement(self):

        localctx = plsqlParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2234
            self.match(plsqlParser.IF)
            self.state = 2235
            self.condition()
            self.state = 2236
            self.match(plsqlParser.THEN)
            self.state = 2237
            self.seq_of_statements()
            self.state = 2241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.ELSIF:
                self.state = 2238
                self.elsif_part()
                self.state = 2243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELSE:
                self.state = 2244
                self.else_part()


            self.state = 2247
            self.match(plsqlParser.END)
            self.state = 2248
            self.match(plsqlParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elsif_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSIF(self):
            return self.getToken(plsqlParser.ELSIF, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_elsif_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElsif_part" ):
                listener.enterElsif_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElsif_part" ):
                listener.exitElsif_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElsif_part" ):
                return visitor.visitElsif_part(self)
            else:
                return visitor.visitChildren(self)




    def elsif_part(self):

        localctx = plsqlParser.Elsif_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_elsif_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2250
            self.match(plsqlParser.ELSIF)
            self.state = 2251
            self.condition()
            self.state = 2252
            self.match(plsqlParser.THEN)
            self.state = 2253
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(plsqlParser.ELSE, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_part" ):
                listener.enterElse_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_part" ):
                listener.exitElse_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_part" ):
                return visitor.visitElse_part(self)
            else:
                return visitor.visitChildren(self)




    def else_part(self):

        localctx = plsqlParser.Else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_else_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2255
            self.match(plsqlParser.ELSE)
            self.state = 2256
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Loop_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LOOP)
            else:
                return self.getToken(plsqlParser.LOOP, i)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Label_nameContext,i)


        def WHILE(self):
            return self.getToken(plsqlParser.WHILE, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def cursor_loop_param(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_loop_paramContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_loop_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_statement" ):
                listener.enterLoop_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_statement" ):
                listener.exitLoop_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_statement" ):
                return visitor.visitLoop_statement(self)
            else:
                return visitor.visitChildren(self)




    def loop_statement(self):

        localctx = plsqlParser.Loop_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_loop_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 2258
                self.label_name()


            self.state = 2265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.WHILE]:
                self.state = 2261
                self.match(plsqlParser.WHILE)
                self.state = 2262
                self.condition()
                pass
            elif token in [plsqlParser.FOR]:
                self.state = 2263
                self.match(plsqlParser.FOR)
                self.state = 2264
                self.cursor_loop_param()
                pass
            elif token in [plsqlParser.LOOP]:
                pass
            else:
                pass
            self.state = 2267
            self.match(plsqlParser.LOOP)
            self.state = 2268
            self.seq_of_statements()
            self.state = 2269
            self.match(plsqlParser.END)
            self.state = 2270
            self.match(plsqlParser.LOOP)
            self.state = 2272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 2271
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_loop_paramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def lower_bound(self):
            return self.getTypedRuleContext(plsqlParser.Lower_boundContext,0)


        def upper_bound(self):
            return self.getTypedRuleContext(plsqlParser.Upper_boundContext,0)


        def REVERSE(self):
            return self.getToken(plsqlParser.REVERSE, 0)

        def record_name(self):
            return self.getTypedRuleContext(plsqlParser.Record_nameContext,0)


        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_loop_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_loop_param" ):
                listener.enterCursor_loop_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_loop_param" ):
                listener.exitCursor_loop_param(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_loop_param" ):
                return visitor.visitCursor_loop_param(self)
            else:
                return visitor.visitChildren(self)




    def cursor_loop_param(self):

        localctx = plsqlParser.Cursor_loop_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_cursor_loop_param)
        self._la = 0 # Token type
        try:
            self.state = 2295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2274
                self.index_name()
                self.state = 2275
                self.match(plsqlParser.IN)
                self.state = 2277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 2276
                    self.match(plsqlParser.REVERSE)


                self.state = 2279
                self.lower_bound()
                self.state = 2280
                self.match(plsqlParser.T__0)
                self.state = 2281
                self.upper_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2283
                self.record_name()
                self.state = 2284
                self.match(plsqlParser.IN)
                self.state = 2293
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                    self.state = 2285
                    self.cursor_name()
                    self.state = 2287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.LEFT_PAREN:
                        self.state = 2286
                        self.expression_list()


                    pass
                elif token in [plsqlParser.LEFT_PAREN]:
                    self.state = 2289
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 2290
                    self.select_statement()
                    self.state = 2291
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Forall_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORALL(self):
            return self.getToken(plsqlParser.FORALL, 0)

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def bounds_clause(self):
            return self.getTypedRuleContext(plsqlParser.Bounds_clauseContext,0)


        def sql_statement(self):
            return self.getTypedRuleContext(plsqlParser.Sql_statementContext,0)


        def SAVE(self):
            return self.getToken(plsqlParser.SAVE, 0)

        def EXCEPTIONS(self):
            return self.getToken(plsqlParser.EXCEPTIONS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_forall_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForall_statement" ):
                listener.enterForall_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForall_statement" ):
                listener.exitForall_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForall_statement" ):
                return visitor.visitForall_statement(self)
            else:
                return visitor.visitChildren(self)




    def forall_statement(self):

        localctx = plsqlParser.Forall_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_forall_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2297
            self.match(plsqlParser.FORALL)
            self.state = 2298
            self.index_name()
            self.state = 2299
            self.match(plsqlParser.IN)
            self.state = 2300
            self.bounds_clause()
            self.state = 2301
            self.sql_statement()
            self.state = 2304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SAVE:
                self.state = 2302
                self.match(plsqlParser.SAVE)
                self.state = 2303
                self.match(plsqlParser.EXCEPTIONS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bounds_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lower_bound(self):
            return self.getTypedRuleContext(plsqlParser.Lower_boundContext,0)


        def upper_bound(self):
            return self.getTypedRuleContext(plsqlParser.Upper_boundContext,0)


        def INDICES(self):
            return self.getToken(plsqlParser.INDICES, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def collection_name(self):
            return self.getTypedRuleContext(plsqlParser.Collection_nameContext,0)


        def between_bound(self):
            return self.getTypedRuleContext(plsqlParser.Between_boundContext,0)


        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def index_name(self):
            return self.getTypedRuleContext(plsqlParser.Index_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_bounds_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBounds_clause" ):
                listener.enterBounds_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBounds_clause" ):
                listener.exitBounds_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBounds_clause" ):
                return visitor.visitBounds_clause(self)
            else:
                return visitor.visitChildren(self)




    def bounds_clause(self):

        localctx = plsqlParser.Bounds_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_bounds_clause)
        self._la = 0 # Token type
        try:
            self.state = 2319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2306
                self.lower_bound()
                self.state = 2307
                self.match(plsqlParser.T__0)
                self.state = 2308
                self.upper_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2310
                self.match(plsqlParser.INDICES)
                self.state = 2311
                self.match(plsqlParser.OF)
                self.state = 2312
                self.collection_name()
                self.state = 2314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.BETWEEN:
                    self.state = 2313
                    self.between_bound()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2316
                self.match(plsqlParser.VALUES)
                self.state = 2317
                self.match(plsqlParser.OF)
                self.state = 2318
                self.index_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Between_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(plsqlParser.BETWEEN, 0)

        def lower_bound(self):
            return self.getTypedRuleContext(plsqlParser.Lower_boundContext,0)


        def AND(self):
            return self.getToken(plsqlParser.AND, 0)

        def upper_bound(self):
            return self.getTypedRuleContext(plsqlParser.Upper_boundContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_between_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_bound" ):
                listener.enterBetween_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_bound" ):
                listener.exitBetween_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween_bound" ):
                return visitor.visitBetween_bound(self)
            else:
                return visitor.visitChildren(self)




    def between_bound(self):

        localctx = plsqlParser.Between_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_between_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2321
            self.match(plsqlParser.BETWEEN)
            self.state = 2322
            self.lower_bound()
            self.state = 2323
            self.match(plsqlParser.AND)
            self.state = 2324
            self.upper_bound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lower_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lower_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLower_bound" ):
                listener.enterLower_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLower_bound" ):
                listener.exitLower_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLower_bound" ):
                return visitor.visitLower_bound(self)
            else:
                return visitor.visitChildren(self)




    def lower_bound(self):

        localctx = plsqlParser.Lower_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_lower_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2326
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Upper_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_upper_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpper_bound" ):
                listener.enterUpper_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpper_bound" ):
                listener.exitUpper_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpper_bound" ):
                return visitor.visitUpper_bound(self)
            else:
                return visitor.visitChildren(self)




    def upper_bound(self):

        localctx = plsqlParser.Upper_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_upper_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2328
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_null_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_statement" ):
                listener.enterNull_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_statement" ):
                listener.exitNull_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_statement" ):
                return visitor.visitNull_statement(self)
            else:
                return visitor.visitChildren(self)




    def null_statement(self):

        localctx = plsqlParser.Null_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_null_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.match(plsqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(plsqlParser.RAISE, 0)

        def exception_name(self):
            return self.getTypedRuleContext(plsqlParser.Exception_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_raise_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_statement" ):
                listener.enterRaise_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_statement" ):
                listener.exitRaise_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_statement" ):
                return visitor.visitRaise_statement(self)
            else:
                return visitor.visitChildren(self)




    def raise_statement(self):

        localctx = plsqlParser.Raise_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_raise_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2332
            self.match(plsqlParser.RAISE)
            self.state = 2334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 2333
                self.exception_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_statement" ):
                return visitor.visitReturn_statement(self)
            else:
                return visitor.visitChildren(self)




    def return_statement(self):

        localctx = plsqlParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2336
            self.match(plsqlParser.RETURN)
            self.state = 2338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)) | (1 << (plsqlParser.DEFINER - 64)) | (1 << (plsqlParser.DETERMINISTIC - 64)) | (1 << (plsqlParser.DIMENSION - 64)) | (1 << (plsqlParser.DISABLE - 64)) | (1 << (plsqlParser.DISASSOCIATE - 64)) | (1 << (plsqlParser.DISTINCT - 64)) | (1 << (plsqlParser.DOCUMENT - 64)) | (1 << (plsqlParser.DOUBLE - 64)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (plsqlParser.EACH - 64)) | (1 << (plsqlParser.ELEMENT - 64)) | (1 << (plsqlParser.EMPTY - 64)) | (1 << (plsqlParser.ENABLE - 64)) | (1 << (plsqlParser.ENCODING - 64)) | (1 << (plsqlParser.ENTITYESCAPING - 64)) | (1 << (plsqlParser.ERR - 64)) | (1 << (plsqlParser.ERRORS - 64)) | (1 << (plsqlParser.ESCAPE - 64)) | (1 << (plsqlParser.EVALNAME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)) | (1 << (plsqlParser.GROUPING - 128)) | (1 << (plsqlParser.HASH - 128)) | (1 << (plsqlParser.HIDE - 128)) | (1 << (plsqlParser.HOUR - 128)) | (1 << (plsqlParser.IGNORE - 128)) | (1 << (plsqlParser.IMMEDIATE - 128)) | (1 << (plsqlParser.INCLUDE - 128)) | (1 << (plsqlParser.INCLUDING - 128)) | (1 << (plsqlParser.INCREMENT - 128)) | (1 << (plsqlParser.INDENT - 128)) | (1 << (plsqlParser.INDEXED - 128)) | (1 << (plsqlParser.INDICATOR - 128)) | (1 << (plsqlParser.INDICES - 128)) | (1 << (plsqlParser.INFINITE - 128)) | (1 << (plsqlParser.INLINE - 128)) | (1 << (plsqlParser.INNER - 128)) | (1 << (plsqlParser.INOUT - 128)) | (1 << (plsqlParser.INSTANTIABLE - 128)) | (1 << (plsqlParser.INSTEAD - 128)) | (1 << (plsqlParser.INT - 128)) | (1 << (plsqlParser.INTEGER - 128)) | (1 << (plsqlParser.INTERVAL - 128)) | (1 << (plsqlParser.INVALIDATE - 128)) | (1 << (plsqlParser.ISOLATION - 128)) | (1 << (plsqlParser.ITERATE - 128)) | (1 << (plsqlParser.JAVA - 128)) | (1 << (plsqlParser.JOIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (plsqlParser.KEEP - 192)) | (1 << (plsqlParser.LANGUAGE - 192)) | (1 << (plsqlParser.LAST - 192)) | (1 << (plsqlParser.LAST_VALUE - 192)) | (1 << (plsqlParser.LEADING - 192)) | (1 << (plsqlParser.LEFT - 192)) | (1 << (plsqlParser.LEVEL - 192)) | (1 << (plsqlParser.LIBRARY - 192)) | (1 << (plsqlParser.LIKE2 - 192)) | (1 << (plsqlParser.LIKE4 - 192)) | (1 << (plsqlParser.LIKEC - 192)) | (1 << (plsqlParser.LIMIT - 192)) | (1 << (plsqlParser.LOCAL - 192)) | (1 << (plsqlParser.LOCKED - 192)) | (1 << (plsqlParser.LOG - 192)) | (1 << (plsqlParser.LOGOFF - 192)) | (1 << (plsqlParser.LOGON - 192)) | (1 << (plsqlParser.LONG - 192)) | (1 << (plsqlParser.LOOP - 192)) | (1 << (plsqlParser.MAIN - 192)) | (1 << (plsqlParser.MAP - 192)) | (1 << (plsqlParser.MATCHED - 192)) | (1 << (plsqlParser.MAXVALUE - 192)) | (1 << (plsqlParser.MEASURES - 192)) | (1 << (plsqlParser.MEMBER - 192)) | (1 << (plsqlParser.MERGE - 192)) | (1 << (plsqlParser.MINUTE - 192)) | (1 << (plsqlParser.MINVALUE - 192)) | (1 << (plsqlParser.MLSLABEL - 192)) | (1 << (plsqlParser.MODEL - 192)) | (1 << (plsqlParser.MODIFY - 192)) | (1 << (plsqlParser.MONTH - 192)) | (1 << (plsqlParser.MULTISET - 192)) | (1 << (plsqlParser.NAME - 192)) | (1 << (plsqlParser.NAN - 192)) | (1 << (plsqlParser.NATURAL - 192)) | (1 << (plsqlParser.NATURALN - 192)) | (1 << (plsqlParser.NAV - 192)) | (1 << (plsqlParser.NCHAR - 192)) | (1 << (plsqlParser.NCHAR_CS - 192)) | (1 << (plsqlParser.NCLOB - 192)) | (1 << (plsqlParser.NESTED - 192)) | (1 << (plsqlParser.NEW - 192)) | (1 << (plsqlParser.NO - 192)) | (1 << (plsqlParser.NOAUDIT - 192)) | (1 << (plsqlParser.NOCOPY - 192)) | (1 << (plsqlParser.NOCYCLE - 192)) | (1 << (plsqlParser.NOENTITYESCAPING - 192)) | (1 << (plsqlParser.NONE - 192)) | (1 << (plsqlParser.NOSCHEMACHECK - 192)) | (1 << (plsqlParser.NOT - 192)) | (1 << (plsqlParser.NULL - 192)) | (1 << (plsqlParser.NULLS - 192)) | (1 << (plsqlParser.NUMBER - 192)) | (1 << (plsqlParser.NUMERIC - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (plsqlParser.NVARCHAR2 - 256)) | (1 << (plsqlParser.OBJECT - 256)) | (1 << (plsqlParser.OFF - 256)) | (1 << (plsqlParser.OID - 256)) | (1 << (plsqlParser.OLD - 256)) | (1 << (plsqlParser.ONLY - 256)) | (1 << (plsqlParser.OPEN - 256)) | (1 << (plsqlParser.ORADATA - 256)) | (1 << (plsqlParser.ORDINALITY - 256)) | (1 << (plsqlParser.OSERROR - 256)) | (1 << (plsqlParser.OUT - 256)) | (1 << (plsqlParser.OUTER - 256)) | (1 << (plsqlParser.OVER - 256)) | (1 << (plsqlParser.OVERRIDING - 256)) | (1 << (plsqlParser.PACKAGE - 256)) | (1 << (plsqlParser.PARALLEL_ENABLE - 256)) | (1 << (plsqlParser.PARAMETERS - 256)) | (1 << (plsqlParser.PARENT - 256)) | (1 << (plsqlParser.PARTITION - 256)) | (1 << (plsqlParser.PASSING - 256)) | (1 << (plsqlParser.PATH - 256)) | (1 << (plsqlParser.PIPELINED - 256)) | (1 << (plsqlParser.PLAN - 256)) | (1 << (plsqlParser.PLS_INTEGER - 256)) | (1 << (plsqlParser.POSITIVE - 256)) | (1 << (plsqlParser.POSITIVEN - 256)) | (1 << (plsqlParser.PRAGMA - 256)) | (1 << (plsqlParser.PRECEDING - 256)) | (1 << (plsqlParser.PRECISION - 256)) | (1 << (plsqlParser.PRESENT - 256)) | (1 << (plsqlParser.PRIOR - 256)) | (1 << (plsqlParser.RAISE - 256)) | (1 << (plsqlParser.RANGE - 256)) | (1 << (plsqlParser.RAW - 256)) | (1 << (plsqlParser.READ - 256)) | (1 << (plsqlParser.REAL - 256)) | (1 << (plsqlParser.RECORD - 256)) | (1 << (plsqlParser.REF - 256)) | (1 << (plsqlParser.REFERENCE - 256)) | (1 << (plsqlParser.REFERENCING - 256)) | (1 << (plsqlParser.REJECT - 256)) | (1 << (plsqlParser.RELIES_ON - 256)) | (1 << (plsqlParser.RENAME - 256)) | (1 << (plsqlParser.REPLACE - 256)) | (1 << (plsqlParser.RESPECT - 256)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 256)) | (1 << (plsqlParser.RESULT - 256)) | (1 << (plsqlParser.RESULT_CACHE - 256)) | (1 << (plsqlParser.RETURN - 256)) | (1 << (plsqlParser.RETURNING - 256)) | (1 << (plsqlParser.REUSE - 256)) | (1 << (plsqlParser.REVERSE - 256)) | (1 << (plsqlParser.RIGHT - 256)) | (1 << (plsqlParser.ROLLBACK - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (plsqlParser.ROLLUP - 320)) | (1 << (plsqlParser.ROW - 320)) | (1 << (plsqlParser.ROWID - 320)) | (1 << (plsqlParser.ROWS - 320)) | (1 << (plsqlParser.RULES - 320)) | (1 << (plsqlParser.SAMPLE - 320)) | (1 << (plsqlParser.SAVE - 320)) | (1 << (plsqlParser.SAVEPOINT - 320)) | (1 << (plsqlParser.SCHEMA - 320)) | (1 << (plsqlParser.SCHEMACHECK - 320)) | (1 << (plsqlParser.SCN - 320)) | (1 << (plsqlParser.SECOND - 320)) | (1 << (plsqlParser.SEED - 320)) | (1 << (plsqlParser.SEGMENT - 320)) | (1 << (plsqlParser.SELF - 320)) | (1 << (plsqlParser.SEQUENTIAL - 320)) | (1 << (plsqlParser.SERIALIZABLE - 320)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 320)) | (1 << (plsqlParser.SERVERERROR - 320)) | (1 << (plsqlParser.SESSIONTIMEZONE - 320)) | (1 << (plsqlParser.SET - 320)) | (1 << (plsqlParser.SETS - 320)) | (1 << (plsqlParser.SETTINGS - 320)) | (1 << (plsqlParser.SHOW - 320)) | (1 << (plsqlParser.SHUTDOWN - 320)) | (1 << (plsqlParser.SIBLINGS - 320)) | (1 << (plsqlParser.SIGNTYPE - 320)) | (1 << (plsqlParser.SIMPLE_INTEGER - 320)) | (1 << (plsqlParser.SINGLE - 320)) | (1 << (plsqlParser.SIZE - 320)) | (1 << (plsqlParser.SKIP_ - 320)) | (1 << (plsqlParser.SMALLINT - 320)) | (1 << (plsqlParser.SNAPSHOT - 320)) | (1 << (plsqlParser.SOME - 320)) | (1 << (plsqlParser.SPECIFICATION - 320)) | (1 << (plsqlParser.SQLDATA - 320)) | (1 << (plsqlParser.SQLERROR - 320)) | (1 << (plsqlParser.STANDALONE - 320)) | (1 << (plsqlParser.STARTUP - 320)) | (1 << (plsqlParser.STATEMENT - 320)) | (1 << (plsqlParser.STATEMENT_ID - 320)) | (1 << (plsqlParser.STATIC - 320)) | (1 << (plsqlParser.STATISTICS - 320)) | (1 << (plsqlParser.STRING - 320)) | (1 << (plsqlParser.SUBMULTISET - 320)) | (1 << (plsqlParser.SUBPARTITION - 320)) | (1 << (plsqlParser.SUBSTITUTABLE - 320)) | (1 << (plsqlParser.SUBTYPE - 320)) | (1 << (plsqlParser.SUCCESS - 320)) | (1 << (plsqlParser.SUSPEND - 320)) | (1 << (plsqlParser.TIME - 320)) | (1 << (plsqlParser.TIMESTAMP - 320)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMEZONE_ABBR - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (plsqlParser.TIMEZONE_HOUR - 384)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 384)) | (1 << (plsqlParser.TIMEZONE_REGION - 384)) | (1 << (plsqlParser.TRAILING - 384)) | (1 << (plsqlParser.TRANSACTION - 384)) | (1 << (plsqlParser.TRANSLATE - 384)) | (1 << (plsqlParser.TREAT - 384)) | (1 << (plsqlParser.TRIGGER - 384)) | (1 << (plsqlParser.TRIM - 384)) | (1 << (plsqlParser.TRUE - 384)) | (1 << (plsqlParser.TRUNCATE - 384)) | (1 << (plsqlParser.TYPE - 384)) | (1 << (plsqlParser.UNBOUNDED - 384)) | (1 << (plsqlParser.UNDER - 384)) | (1 << (plsqlParser.UNLIMITED - 384)) | (1 << (plsqlParser.UNTIL - 384)) | (1 << (plsqlParser.UPDATED - 384)) | (1 << (plsqlParser.UPSERT - 384)) | (1 << (plsqlParser.UROWID - 384)) | (1 << (plsqlParser.USE - 384)) | (1 << (plsqlParser.VALIDATE - 384)) | (1 << (plsqlParser.VALUE - 384)) | (1 << (plsqlParser.VARCHAR - 384)) | (1 << (plsqlParser.VARCHAR2 - 384)) | (1 << (plsqlParser.VARIABLE - 384)) | (1 << (plsqlParser.VARRAY - 384)) | (1 << (plsqlParser.VARYING - 384)) | (1 << (plsqlParser.VERSION - 384)) | (1 << (plsqlParser.VERSIONS - 384)) | (1 << (plsqlParser.WAIT - 384)) | (1 << (plsqlParser.WARNING - 384)) | (1 << (plsqlParser.WELLFORMED - 384)) | (1 << (plsqlParser.WHENEVER - 384)) | (1 << (plsqlParser.WHILE - 384)) | (1 << (plsqlParser.WITHIN - 384)) | (1 << (plsqlParser.WORK - 384)) | (1 << (plsqlParser.WRITE - 384)) | (1 << (plsqlParser.XML - 384)) | (1 << (plsqlParser.XMLAGG - 384)) | (1 << (plsqlParser.XMLATTRIBUTES - 384)) | (1 << (plsqlParser.XMLCAST - 384)) | (1 << (plsqlParser.XMLCOLATTVAL - 384)) | (1 << (plsqlParser.XMLELEMENT - 384)) | (1 << (plsqlParser.XMLEXISTS - 384)) | (1 << (plsqlParser.XMLFOREST - 384)) | (1 << (plsqlParser.XMLNAMESPACES - 384)) | (1 << (plsqlParser.XMLPARSE - 384)) | (1 << (plsqlParser.XMLPI - 384)) | (1 << (plsqlParser.XMLQUERY - 384)) | (1 << (plsqlParser.XMLROOT - 384)) | (1 << (plsqlParser.XMLSERIALIZE - 384)) | (1 << (plsqlParser.XMLTABLE - 384)) | (1 << (plsqlParser.YEAR - 384)) | (1 << (plsqlParser.YES - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (plsqlParser.ZONE - 448)) | (1 << (plsqlParser.PREDICTION - 448)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 448)) | (1 << (plsqlParser.PREDICTION_COST - 448)) | (1 << (plsqlParser.PREDICTION_DETAILS - 448)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (plsqlParser.PREDICTION_SET - 448)) | (1 << (plsqlParser.CUME_DIST - 448)) | (1 << (plsqlParser.DENSE_RANK - 448)) | (1 << (plsqlParser.LISTAGG - 448)) | (1 << (plsqlParser.PERCENT_RANK - 448)) | (1 << (plsqlParser.PERCENTILE_CONT - 448)) | (1 << (plsqlParser.PERCENTILE_DISC - 448)) | (1 << (plsqlParser.RANK - 448)) | (1 << (plsqlParser.AVG - 448)) | (1 << (plsqlParser.CORR - 448)) | (1 << (plsqlParser.LAG - 448)) | (1 << (plsqlParser.LEAD - 448)) | (1 << (plsqlParser.MAX - 448)) | (1 << (plsqlParser.MEDIAN - 448)) | (1 << (plsqlParser.MIN - 448)) | (1 << (plsqlParser.NTILE - 448)) | (1 << (plsqlParser.RATIO_TO_REPORT - 448)) | (1 << (plsqlParser.ROW_NUMBER - 448)) | (1 << (plsqlParser.SUM - 448)) | (1 << (plsqlParser.VARIANCE - 448)) | (1 << (plsqlParser.REGR_ - 448)) | (1 << (plsqlParser.STDDEV - 448)) | (1 << (plsqlParser.VAR_ - 448)) | (1 << (plsqlParser.COVAR_ - 448)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 448)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 448)) | (1 << (plsqlParser.CHAR_STRING - 448)) | (1 << (plsqlParser.DELIMITED_ID - 448)) | (1 << (plsqlParser.LEFT_PAREN - 448)) | (1 << (plsqlParser.PLUS_SIGN - 448)) | (1 << (plsqlParser.MINUS_SIGN - 448)) | (1 << (plsqlParser.BINDVAR - 448)) | (1 << (plsqlParser.COLON - 448)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 2337
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routine_name(self):
            return self.getTypedRuleContext(plsqlParser.Routine_nameContext,0)


        def CALL(self):
            return self.getToken(plsqlParser.CALL, 0)

        def function_argument(self):
            return self.getTypedRuleContext(plsqlParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call" ):
                return visitor.visitFunction_call(self)
            else:
                return visitor.visitChildren(self)




    def function_call(self):

        localctx = plsqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 2340
                self.match(plsqlParser.CALL)


            self.state = 2343
            self.routine_name()
            self.state = 2345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 2344
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(plsqlParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def EXCEPTION(self):
            return self.getToken(plsqlParser.EXCEPTION, 0)

        def label_name(self):
            return self.getTypedRuleContext(plsqlParser.Label_nameContext,0)


        def exception_handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Exception_handlerContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Exception_handlerContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = plsqlParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2347
            self.match(plsqlParser.BEGIN)
            self.state = 2348
            self.seq_of_statements()
            self.state = 2355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.EXCEPTION:
                self.state = 2349
                self.match(plsqlParser.EXCEPTION)
                self.state = 2351 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2350
                    self.exception_handler()
                    self.state = 2353 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.WHEN):
                        break



            self.state = 2357
            self.match(plsqlParser.END)
            self.state = 2359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.state = 2358
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exception_handlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def exception_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Exception_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Exception_nameContext,i)


        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.OR)
            else:
                return self.getToken(plsqlParser.OR, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_exception_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_handler" ):
                listener.enterException_handler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_handler" ):
                listener.exitException_handler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_handler" ):
                return visitor.visitException_handler(self)
            else:
                return visitor.visitChildren(self)




    def exception_handler(self):

        localctx = plsqlParser.Exception_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_exception_handler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2361
            self.match(plsqlParser.WHEN)
            self.state = 2362
            self.exception_name()
            self.state = 2367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.OR:
                self.state = 2363
                self.match(plsqlParser.OR)
                self.state = 2364
                self.exception_name()
                self.state = 2369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2370
            self.match(plsqlParser.THEN)
            self.state = 2371
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_block" ):
                listener.enterTrigger_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_block" ):
                listener.exitTrigger_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_block" ):
                return visitor.visitTrigger_block(self)
            else:
                return visitor.visitChildren(self)




    def trigger_block(self):

        localctx = plsqlParser.Trigger_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_trigger_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECLARE - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.PROCEDURE - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)) | (1 << (plsqlParser.BINDVAR - 449)) | (1 << (plsqlParser.COLON - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 2374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DECLARE:
                    self.state = 2373
                    self.match(plsqlParser.DECLARE)


                self.state = 2377 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2376
                    self.declare_spec()
                    self.state = 2379 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.PROCEDURE - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)) | (1 << (plsqlParser.BINDVAR - 449)) | (1 << (plsqlParser.COLON - 449)))) != 0) or _la==plsqlParser.REGULAR_ID):
                        break



            self.state = 2383
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(plsqlParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(plsqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = plsqlParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DECLARE:
                self.state = 2385
                self.match(plsqlParser.DECLARE)


            self.state = 2389 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2388
                self.declare_spec()
                self.state = 2391 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CREATE - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.PROCEDURE - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)) | (1 << (plsqlParser.BINDVAR - 449)) | (1 << (plsqlParser.COLON - 449)))) != 0) or _la==plsqlParser.REGULAR_ID):
                    break

            self.state = 2393
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def execute_immediate(self):
            return self.getTypedRuleContext(plsqlParser.Execute_immediateContext,0)


        def data_manipulation_language_statements(self):
            return self.getTypedRuleContext(plsqlParser.Data_manipulation_language_statementsContext,0)


        def cursor_manipulation_statements(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_manipulation_statementsContext,0)


        def transaction_control_statements(self):
            return self.getTypedRuleContext(plsqlParser.Transaction_control_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_sql_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_statement" ):
                listener.enterSql_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_statement" ):
                listener.exitSql_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_statement" ):
                return visitor.visitSql_statement(self)
            else:
                return visitor.visitChildren(self)




    def sql_statement(self):

        localctx = plsqlParser.Sql_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_sql_statement)
        try:
            self.state = 2399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2395
                self.execute_immediate()
                pass
            elif token in [plsqlParser.DELETE, plsqlParser.EXPLAIN, plsqlParser.INSERT, plsqlParser.LOCK, plsqlParser.MERGE, plsqlParser.SELECT, plsqlParser.UPDATE, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2396
                self.data_manipulation_language_statements()
                pass
            elif token in [plsqlParser.CLOSE, plsqlParser.FETCH, plsqlParser.OPEN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2397
                self.cursor_manipulation_statements()
                pass
            elif token in [plsqlParser.COMMIT, plsqlParser.ROLLBACK, plsqlParser.SAVEPOINT, plsqlParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2398
                self.transaction_control_statements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_immediateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(plsqlParser.EXECUTE, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Into_clauseContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(plsqlParser.Using_clauseContext,0)


        def dynamic_returning_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dynamic_returning_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_execute_immediate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_immediate" ):
                listener.enterExecute_immediate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_immediate" ):
                listener.exitExecute_immediate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_immediate" ):
                return visitor.visitExecute_immediate(self)
            else:
                return visitor.visitChildren(self)




    def execute_immediate(self):

        localctx = plsqlParser.Execute_immediateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_execute_immediate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2401
            self.match(plsqlParser.EXECUTE)
            self.state = 2402
            self.match(plsqlParser.IMMEDIATE)
            self.state = 2403
            self.expression(0)
            self.state = 2413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BULK, plsqlParser.INTO]:
                self.state = 2404
                self.into_clause()
                self.state = 2406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.USING:
                    self.state = 2405
                    self.using_clause()


                pass
            elif token in [plsqlParser.USING]:
                self.state = 2408
                self.using_clause()
                self.state = 2410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.RETURN or _la==plsqlParser.RETURNING:
                    self.state = 2409
                    self.dynamic_returning_clause()


                pass
            elif token in [plsqlParser.RETURN, plsqlParser.RETURNING]:
                self.state = 2412
                self.dynamic_returning_clause()
                pass
            elif token in [plsqlParser.EOF, plsqlParser.SAVE, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dynamic_returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Into_clauseContext,0)


        def RETURNING(self):
            return self.getToken(plsqlParser.RETURNING, 0)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_dynamic_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_returning_clause" ):
                listener.enterDynamic_returning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_returning_clause" ):
                listener.exitDynamic_returning_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamic_returning_clause" ):
                return visitor.visitDynamic_returning_clause(self)
            else:
                return visitor.visitChildren(self)




    def dynamic_returning_clause(self):

        localctx = plsqlParser.Dynamic_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_dynamic_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2415
            _la = self._input.LA(1)
            if not(_la==plsqlParser.RETURN or _la==plsqlParser.RETURNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2416
            self.into_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Data_manipulation_language_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def merge_statement(self):
            return self.getTypedRuleContext(plsqlParser.Merge_statementContext,0)


        def lock_table_statement(self):
            return self.getTypedRuleContext(plsqlParser.Lock_table_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(plsqlParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(plsqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(plsqlParser.Insert_statementContext,0)


        def explain_statement(self):
            return self.getTypedRuleContext(plsqlParser.Explain_statementContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_data_manipulation_language_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_manipulation_language_statements" ):
                listener.enterData_manipulation_language_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_manipulation_language_statements" ):
                listener.exitData_manipulation_language_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_manipulation_language_statements" ):
                return visitor.visitData_manipulation_language_statements(self)
            else:
                return visitor.visitChildren(self)




    def data_manipulation_language_statements(self):

        localctx = plsqlParser.Data_manipulation_language_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_data_manipulation_language_statements)
        try:
            self.state = 2425
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MERGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2418
                self.merge_statement()
                pass
            elif token in [plsqlParser.LOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2419
                self.lock_table_statement()
                pass
            elif token in [plsqlParser.SELECT, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2420
                self.select_statement()
                pass
            elif token in [plsqlParser.UPDATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2421
                self.update_statement()
                pass
            elif token in [plsqlParser.DELETE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2422
                self.delete_statement()
                pass
            elif token in [plsqlParser.INSERT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2423
                self.insert_statement()
                pass
            elif token in [plsqlParser.EXPLAIN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2424
                self.explain_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_manipulation_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def close_statement(self):
            return self.getTypedRuleContext(plsqlParser.Close_statementContext,0)


        def open_statement(self):
            return self.getTypedRuleContext(plsqlParser.Open_statementContext,0)


        def fetch_statement(self):
            return self.getTypedRuleContext(plsqlParser.Fetch_statementContext,0)


        def open_for_statement(self):
            return self.getTypedRuleContext(plsqlParser.Open_for_statementContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_manipulation_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_manipulation_statements" ):
                listener.enterCursor_manipulation_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_manipulation_statements" ):
                listener.exitCursor_manipulation_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_manipulation_statements" ):
                return visitor.visitCursor_manipulation_statements(self)
            else:
                return visitor.visitChildren(self)




    def cursor_manipulation_statements(self):

        localctx = plsqlParser.Cursor_manipulation_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_cursor_manipulation_statements)
        try:
            self.state = 2431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2427
                self.close_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2428
                self.open_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2429
                self.fetch_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2430
                self.open_for_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Close_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(plsqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_close_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClose_statement" ):
                listener.enterClose_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClose_statement" ):
                listener.exitClose_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClose_statement" ):
                return visitor.visitClose_statement(self)
            else:
                return visitor.visitChildren(self)




    def close_statement(self):

        localctx = plsqlParser.Close_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_close_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2433
            self.match(plsqlParser.CLOSE)
            self.state = 2434
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Open_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(plsqlParser.OPEN, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_open_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_statement" ):
                listener.enterOpen_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_statement" ):
                listener.exitOpen_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_statement" ):
                return visitor.visitOpen_statement(self)
            else:
                return visitor.visitChildren(self)




    def open_statement(self):

        localctx = plsqlParser.Open_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_open_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2436
            self.match(plsqlParser.OPEN)
            self.state = 2437
            self.cursor_name()
            self.state = 2439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 2438
                self.expression_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.it1 = None # Token

        def FETCH(self):
            return self.getToken(plsqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Variable_nameContext,i)


        def BULK(self):
            return self.getToken(plsqlParser.BULK, 0)

        def COLLECT(self):
            return self.getToken(plsqlParser.COLLECT, 0)

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_fetch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_statement" ):
                listener.enterFetch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_statement" ):
                listener.exitFetch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetch_statement" ):
                return visitor.visitFetch_statement(self)
            else:
                return visitor.visitChildren(self)




    def fetch_statement(self):

        localctx = plsqlParser.Fetch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_fetch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2441
            self.match(plsqlParser.FETCH)
            self.state = 2442
            self.cursor_name()
            self.state = 2463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INTO]:
                self.state = 2443
                localctx.it1 = self.match(plsqlParser.INTO)
                self.state = 2444
                self.variable_name()
                self.state = 2449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 2445
                    self.match(plsqlParser.COMMA)
                    self.state = 2446
                    self.variable_name()
                    self.state = 2451
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [plsqlParser.BULK]:
                self.state = 2452
                self.match(plsqlParser.BULK)
                self.state = 2453
                self.match(plsqlParser.COLLECT)
                self.state = 2454
                self.match(plsqlParser.INTO)
                self.state = 2455
                self.variable_name()
                self.state = 2460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 2456
                    self.match(plsqlParser.COMMA)
                    self.state = 2457
                    self.variable_name()
                    self.state = 2462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Open_for_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(plsqlParser.OPEN, 0)

        def variable_name(self):
            return self.getTypedRuleContext(plsqlParser.Variable_nameContext,0)


        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(plsqlParser.Using_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_open_for_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_for_statement" ):
                listener.enterOpen_for_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_for_statement" ):
                listener.exitOpen_for_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_for_statement" ):
                return visitor.visitOpen_for_statement(self)
            else:
                return visitor.visitChildren(self)




    def open_for_statement(self):

        localctx = plsqlParser.Open_for_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_open_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2465
            self.match(plsqlParser.OPEN)
            self.state = 2466
            self.variable_name()
            self.state = 2467
            self.match(plsqlParser.FOR)
            self.state = 2470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.state = 2468
                self.select_statement()
                pass

            elif la_ == 2:
                self.state = 2469
                self.expression(0)
                pass


            self.state = 2473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.USING:
                self.state = 2472
                self.using_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_control_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_transaction_command(self):
            return self.getTypedRuleContext(plsqlParser.Set_transaction_commandContext,0)


        def set_constraint_command(self):
            return self.getTypedRuleContext(plsqlParser.Set_constraint_commandContext,0)


        def commit_statement(self):
            return self.getTypedRuleContext(plsqlParser.Commit_statementContext,0)


        def rollback_statement(self):
            return self.getTypedRuleContext(plsqlParser.Rollback_statementContext,0)


        def savepoint_statement(self):
            return self.getTypedRuleContext(plsqlParser.Savepoint_statementContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_transaction_control_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_control_statements" ):
                listener.enterTransaction_control_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_control_statements" ):
                listener.exitTransaction_control_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransaction_control_statements" ):
                return visitor.visitTransaction_control_statements(self)
            else:
                return visitor.visitChildren(self)




    def transaction_control_statements(self):

        localctx = plsqlParser.Transaction_control_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_transaction_control_statements)
        try:
            self.state = 2480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2475
                self.set_transaction_command()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2476
                self.set_constraint_command()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2477
                self.commit_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2478
                self.rollback_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2479
                self.savepoint_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_transaction_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def TRANSACTION(self):
            return self.getToken(plsqlParser.TRANSACTION, 0)

        def READ(self):
            return self.getToken(plsqlParser.READ, 0)

        def ISOLATION(self):
            return self.getToken(plsqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(plsqlParser.LEVEL, 0)

        def USE(self):
            return self.getToken(plsqlParser.USE, 0)

        def ROLLBACK(self):
            return self.getToken(plsqlParser.ROLLBACK, 0)

        def SEGMENT(self):
            return self.getToken(plsqlParser.SEGMENT, 0)

        def rollback_segment_name(self):
            return self.getTypedRuleContext(plsqlParser.Rollback_segment_nameContext,0)


        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(plsqlParser.WRITE, 0)

        def SERIALIZABLE(self):
            return self.getToken(plsqlParser.SERIALIZABLE, 0)

        def COMMITTED(self):
            return self.getToken(plsqlParser.COMMITTED, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_set_transaction_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_transaction_command" ):
                listener.enterSet_transaction_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_transaction_command" ):
                listener.exitSet_transaction_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_transaction_command" ):
                return visitor.visitSet_transaction_command(self)
            else:
                return visitor.visitChildren(self)




    def set_transaction_command(self):

        localctx = plsqlParser.Set_transaction_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_set_transaction_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2482
            self.match(plsqlParser.SET)
            self.state = 2483
            self.match(plsqlParser.TRANSACTION)
            self.state = 2497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.READ]:
                self.state = 2484
                self.match(plsqlParser.READ)
                self.state = 2485
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ONLY or _la==plsqlParser.WRITE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [plsqlParser.ISOLATION]:
                self.state = 2486
                self.match(plsqlParser.ISOLATION)
                self.state = 2487
                self.match(plsqlParser.LEVEL)
                self.state = 2491
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.SERIALIZABLE]:
                    self.state = 2488
                    self.match(plsqlParser.SERIALIZABLE)
                    pass
                elif token in [plsqlParser.READ]:
                    self.state = 2489
                    self.match(plsqlParser.READ)
                    self.state = 2490
                    self.match(plsqlParser.COMMITTED)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [plsqlParser.USE]:
                self.state = 2493
                self.match(plsqlParser.USE)
                self.state = 2494
                self.match(plsqlParser.ROLLBACK)
                self.state = 2495
                self.match(plsqlParser.SEGMENT)
                self.state = 2496
                self.rollback_segment_name()
                pass
            elif token in [plsqlParser.EOF, plsqlParser.NAME, plsqlParser.SAVE, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 2501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NAME:
                self.state = 2499
                self.match(plsqlParser.NAME)
                self.state = 2500
                self.quoted_string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_constraint_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(plsqlParser.CONSTRAINTS, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(plsqlParser.DEFERRED, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def constraint_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Constraint_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_set_constraint_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_constraint_command" ):
                listener.enterSet_constraint_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_constraint_command" ):
                listener.exitSet_constraint_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_constraint_command" ):
                return visitor.visitSet_constraint_command(self)
            else:
                return visitor.visitChildren(self)




    def set_constraint_command(self):

        localctx = plsqlParser.Set_constraint_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_set_constraint_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2503
            self.match(plsqlParser.SET)
            self.state = 2504
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CONSTRAINT or _la==plsqlParser.CONSTRAINTS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.ALL]:
                self.state = 2505
                self.match(plsqlParser.ALL)
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 2506
                self.constraint_name()
                self.state = 2511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 2507
                    self.match(plsqlParser.COMMA)
                    self.state = 2508
                    self.constraint_name()
                    self.state = 2513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2516
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DEFERRED or _la==plsqlParser.IMMEDIATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Commit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(plsqlParser.WORK, 0)

        def COMMENT(self):
            return self.getToken(plsqlParser.COMMENT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def write_clause(self):
            return self.getTypedRuleContext(plsqlParser.Write_clauseContext,0)


        def CORRUPT_XID(self):
            return self.getToken(plsqlParser.CORRUPT_XID, 0)

        def CORRUPT_XID_ALL(self):
            return self.getToken(plsqlParser.CORRUPT_XID_ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_commit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_statement" ):
                listener.enterCommit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_statement" ):
                listener.exitCommit_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommit_statement" ):
                return visitor.visitCommit_statement(self)
            else:
                return visitor.visitChildren(self)




    def commit_statement(self):

        localctx = plsqlParser.Commit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_commit_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2518
            self.match(plsqlParser.COMMIT)
            self.state = 2520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WORK:
                self.state = 2519
                self.match(plsqlParser.WORK)


            self.state = 2535
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.COMMENT]:
                self.state = 2522
                self.match(plsqlParser.COMMENT)
                self.state = 2523
                self.expression(0)
                pass
            elif token in [plsqlParser.FORCE]:
                self.state = 2524
                self.match(plsqlParser.FORCE)
                self.state = 2533
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                if la_ == 1:
                    self.state = 2525
                    self.match(plsqlParser.CORRUPT_XID)
                    self.state = 2526
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 2527
                    self.match(plsqlParser.CORRUPT_XID_ALL)
                    pass

                elif la_ == 3:
                    self.state = 2528
                    self.expression(0)
                    self.state = 2531
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 2529
                        self.match(plsqlParser.COMMA)
                        self.state = 2530
                        self.expression(0)


                    pass


                pass
            elif token in [plsqlParser.EOF, plsqlParser.SAVE, plsqlParser.WRITE, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 2538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WRITE:
                self.state = 2537
                self.write_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Write_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(plsqlParser.WRITE, 0)

        def WAIT(self):
            return self.getToken(plsqlParser.WAIT, 0)

        def NOWAIT(self):
            return self.getToken(plsqlParser.NOWAIT, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def BATCH(self):
            return self.getToken(plsqlParser.BATCH, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_write_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_clause" ):
                listener.enterWrite_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_clause" ):
                listener.exitWrite_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWrite_clause" ):
                return visitor.visitWrite_clause(self)
            else:
                return visitor.visitChildren(self)




    def write_clause(self):

        localctx = plsqlParser.Write_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_write_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2540
            self.match(plsqlParser.WRITE)
            self.state = 2542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOWAIT or _la==plsqlParser.WAIT:
                self.state = 2541
                _la = self._input.LA(1)
                if not(_la==plsqlParser.NOWAIT or _la==plsqlParser.WAIT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BATCH or _la==plsqlParser.IMMEDIATE:
                self.state = 2544
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BATCH or _la==plsqlParser.IMMEDIATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollback_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(plsqlParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(plsqlParser.WORK, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(plsqlParser.Savepoint_nameContext,0)


        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def SAVEPOINT(self):
            return self.getToken(plsqlParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_rollback_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_statement" ):
                listener.enterRollback_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_statement" ):
                listener.exitRollback_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback_statement" ):
                return visitor.visitRollback_statement(self)
            else:
                return visitor.visitChildren(self)




    def rollback_statement(self):

        localctx = plsqlParser.Rollback_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_rollback_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2547
            self.match(plsqlParser.ROLLBACK)
            self.state = 2549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WORK:
                self.state = 2548
                self.match(plsqlParser.WORK)


            self.state = 2558
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.TO]:
                self.state = 2551
                self.match(plsqlParser.TO)
                self.state = 2553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
                if la_ == 1:
                    self.state = 2552
                    self.match(plsqlParser.SAVEPOINT)


                self.state = 2555
                self.savepoint_name()
                pass
            elif token in [plsqlParser.FORCE]:
                self.state = 2556
                self.match(plsqlParser.FORCE)
                self.state = 2557
                self.quoted_string()
                pass
            elif token in [plsqlParser.EOF, plsqlParser.SAVE, plsqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(plsqlParser.SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(plsqlParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_savepoint_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_statement" ):
                listener.enterSavepoint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_statement" ):
                listener.exitSavepoint_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepoint_statement" ):
                return visitor.visitSavepoint_statement(self)
            else:
                return visitor.visitChildren(self)




    def savepoint_statement(self):

        localctx = plsqlParser.Savepoint_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_savepoint_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2560
            self.match(plsqlParser.SAVEPOINT)
            self.state = 2561
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explain_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(plsqlParser.EXPLAIN, 0)

        def PLAN(self):
            return self.getToken(plsqlParser.PLAN, 0)

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(plsqlParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(plsqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(plsqlParser.Insert_statementContext,0)


        def merge_statement(self):
            return self.getTypedRuleContext(plsqlParser.Merge_statementContext,0)


        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def STATEMENT_ID(self):
            return self.getToken(plsqlParser.STATEMENT_ID, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_explain_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_statement" ):
                listener.enterExplain_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_statement" ):
                listener.exitExplain_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain_statement" ):
                return visitor.visitExplain_statement(self)
            else:
                return visitor.visitChildren(self)




    def explain_statement(self):

        localctx = plsqlParser.Explain_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_explain_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2563
            self.match(plsqlParser.EXPLAIN)
            self.state = 2564
            self.match(plsqlParser.PLAN)
            self.state = 2569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SET:
                self.state = 2565
                self.match(plsqlParser.SET)
                self.state = 2566
                self.match(plsqlParser.STATEMENT_ID)
                self.state = 2567
                self.match(plsqlParser.EQUALS_OP)
                self.state = 2568
                self.quoted_string()


            self.state = 2573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.INTO:
                self.state = 2571
                self.match(plsqlParser.INTO)
                self.state = 2572
                self.tableview_name()


            self.state = 2575
            self.match(plsqlParser.FOR)
            self.state = 2581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SELECT, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                self.state = 2576
                self.select_statement()
                pass
            elif token in [plsqlParser.UPDATE]:
                self.state = 2577
                self.update_statement()
                pass
            elif token in [plsqlParser.DELETE]:
                self.state = 2578
                self.delete_statement()
                pass
            elif token in [plsqlParser.INSERT]:
                self.state = 2579
                self.insert_statement()
                pass
            elif token in [plsqlParser.MERGE]:
                self.state = 2580
                self.merge_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def subquery_factoring_clause(self):
            return self.getTypedRuleContext(plsqlParser.Subquery_factoring_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_statement" ):
                return visitor.visitSelect_statement(self)
            else:
                return visitor.visitChildren(self)




    def select_statement(self):

        localctx = plsqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WITH:
                self.state = 2583
                self.subquery_factoring_clause()


            self.state = 2586
            self.subquery(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subquery_factoring_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def factoring_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Factoring_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Factoring_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_subquery_factoring_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_factoring_clause" ):
                listener.enterSubquery_factoring_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_factoring_clause" ):
                listener.exitSubquery_factoring_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_factoring_clause" ):
                return visitor.visitSubquery_factoring_clause(self)
            else:
                return visitor.visitChildren(self)




    def subquery_factoring_clause(self):

        localctx = plsqlParser.Subquery_factoring_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_subquery_factoring_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            self.match(plsqlParser.WITH)
            self.state = 2589
            self.factoring_element()
            self.state = 2594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 2590
                self.match(plsqlParser.COMMA)
                self.state = 2591
                self.factoring_element()
                self.state = 2596
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factoring_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_name(self):
            return self.getTypedRuleContext(plsqlParser.Query_nameContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(plsqlParser.Column_name_listContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def search_clause(self):
            return self.getTypedRuleContext(plsqlParser.Search_clauseContext,0)


        def cycle_clause(self):
            return self.getTypedRuleContext(plsqlParser.Cycle_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_factoring_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactoring_element" ):
                listener.enterFactoring_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactoring_element" ):
                listener.exitFactoring_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactoring_element" ):
                return visitor.visitFactoring_element(self)
            else:
                return visitor.visitChildren(self)




    def factoring_element(self):

        localctx = plsqlParser.Factoring_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_factoring_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2597
            self.query_name()
            self.state = 2599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 2598
                self.column_name_list()


            self.state = 2601
            self.match(plsqlParser.AS)
            self.state = 2602
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2603
            self.subquery(0)
            self.state = 2605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ORDER:
                self.state = 2604
                self.order_by_clause()


            self.state = 2607
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SEARCH:
                self.state = 2608
                self.search_clause()


            self.state = 2612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CYCLE:
                self.state = 2611
                self.cycle_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEARCH(self):
            return self.getToken(plsqlParser.SEARCH, 0)

        def FIRST(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.FIRST)
            else:
                return self.getToken(plsqlParser.FIRST, i)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def DEPTH(self):
            return self.getToken(plsqlParser.DEPTH, 0)

        def BREADTH(self):
            return self.getToken(plsqlParser.BREADTH, 0)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ASC)
            else:
                return self.getToken(plsqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DESC)
            else:
                return self.getToken(plsqlParser.DESC, i)

        def NULLS(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NULLS)
            else:
                return self.getToken(plsqlParser.NULLS, i)

        def LAST(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.LAST)
            else:
                return self.getToken(plsqlParser.LAST, i)

        def getRuleIndex(self):
            return plsqlParser.RULE_search_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_clause" ):
                listener.enterSearch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_clause" ):
                listener.exitSearch_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_clause" ):
                return visitor.visitSearch_clause(self)
            else:
                return visitor.visitChildren(self)




    def search_clause(self):

        localctx = plsqlParser.Search_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_search_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2614
            self.match(plsqlParser.SEARCH)
            self.state = 2615
            _la = self._input.LA(1)
            if not(_la==plsqlParser.BREADTH or _la==plsqlParser.DEPTH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2616
            self.match(plsqlParser.FIRST)
            self.state = 2617
            self.match(plsqlParser.BY)
            self.state = 2618
            self.column_name()
            self.state = 2620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ASC:
                self.state = 2619
                self.match(plsqlParser.ASC)


            self.state = 2623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DESC:
                self.state = 2622
                self.match(plsqlParser.DESC)


            self.state = 2627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 2625
                self.match(plsqlParser.NULLS)
                self.state = 2626
                self.match(plsqlParser.FIRST)


            self.state = 2631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NULLS:
                self.state = 2629
                self.match(plsqlParser.NULLS)
                self.state = 2630
                self.match(plsqlParser.LAST)


            self.state = 2651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 2633
                self.match(plsqlParser.COMMA)
                self.state = 2634
                self.column_name()
                self.state = 2636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ASC:
                    self.state = 2635
                    self.match(plsqlParser.ASC)


                self.state = 2639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DESC:
                    self.state = 2638
                    self.match(plsqlParser.DESC)


                self.state = 2643
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                if la_ == 1:
                    self.state = 2641
                    self.match(plsqlParser.NULLS)
                    self.state = 2642
                    self.match(plsqlParser.FIRST)


                self.state = 2647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NULLS:
                    self.state = 2645
                    self.match(plsqlParser.NULLS)
                    self.state = 2646
                    self.match(plsqlParser.LAST)


                self.state = 2653
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2654
            self.match(plsqlParser.SET)
            self.state = 2655
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cycle_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CYCLE(self):
            return self.getToken(plsqlParser.CYCLE, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_cycle_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCycle_clause" ):
                listener.enterCycle_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCycle_clause" ):
                listener.exitCycle_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCycle_clause" ):
                return visitor.visitCycle_clause(self)
            else:
                return visitor.visitChildren(self)




    def cycle_clause(self):

        localctx = plsqlParser.Cycle_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_cycle_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2657
            self.match(plsqlParser.CYCLE)
            self.state = 2658
            self.column_name()
            self.state = 2663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 2659
                self.match(plsqlParser.COMMA)
                self.state = 2660
                self.column_name()
                self.state = 2665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2666
            self.match(plsqlParser.SET)
            self.state = 2667
            self.column_name()
            self.state = 2668
            self.match(plsqlParser.TO)
            self.state = 2669
            self.expression(0)
            self.state = 2670
            self.match(plsqlParser.DEFAULT)
            self.state = 2671
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_subquery

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SubqueryParenContext(SubqueryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.SubqueryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryParen" ):
                listener.enterSubqueryParen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryParen" ):
                listener.exitSubqueryParen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryParen" ):
                return visitor.visitSubqueryParen(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreSubqueryContext(SubqueryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.SubqueryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query_block(self):
            return self.getTypedRuleContext(plsqlParser.Query_blockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreSubquery" ):
                listener.enterIgnoreSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreSubquery" ):
                listener.exitIgnoreSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreSubquery" ):
                return visitor.visitIgnoreSubquery(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryCompoundContext(SubqueryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.SubqueryContext
            super().__init__(parser)
            self.left = None # SubqueryContext
            self.op = None # Subquery_operation_partContext
            self.right = None # SubqueryContext
            self.copyFrom(ctx)

        def subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.SubqueryContext)
            else:
                return self.getTypedRuleContext(plsqlParser.SubqueryContext,i)

        def subquery_operation_part(self):
            return self.getTypedRuleContext(plsqlParser.Subquery_operation_partContext,0)

        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryCompound" ):
                listener.enterSubqueryCompound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryCompound" ):
                listener.exitSubqueryCompound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryCompound" ):
                return visitor.visitSubqueryCompound(self)
            else:
                return visitor.visitChildren(self)



    def subquery(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.SubqueryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 316
        self.enterRecursionRule(localctx, 316, self.RULE_subquery, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2679
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LEFT_PAREN]:
                localctx = plsqlParser.SubqueryParenContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2674
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2675
                self.subquery(0)
                self.state = 2676
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.SELECT]:
                localctx = plsqlParser.IgnoreSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2678
                self.query_block()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2689
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,290,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = plsqlParser.SubqueryCompoundContext(self, plsqlParser.SubqueryContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_subquery)
                    self.state = 2681
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2682
                    localctx.op = self.subquery_operation_part()
                    self.state = 2683
                    localctx.right = self.subquery(0)
                    self.state = 2685
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                    if la_ == 1:
                        self.state = 2684
                        self.order_by_clause()

             
                self.state = 2691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Subquery_operation_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(plsqlParser.UNION, 0)

        def INTERSECT(self):
            return self.getToken(plsqlParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(plsqlParser.EXCEPT, 0)

        def MINUS(self):
            return self.getToken(plsqlParser.MINUS, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_subquery_operation_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_operation_part" ):
                listener.enterSubquery_operation_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_operation_part" ):
                listener.exitSubquery_operation_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_operation_part" ):
                return visitor.visitSubquery_operation_part(self)
            else:
                return visitor.visitChildren(self)




    def subquery_operation_part(self):

        localctx = plsqlParser.Subquery_operation_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_subquery_operation_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2692
            _la = self._input.LA(1)
            if not(_la==plsqlParser.EXCEPT or _la==plsqlParser.INTERSECT or _la==plsqlParser.MINUS or _la==plsqlParser.UNION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ALL:
                self.state = 2693
                self.match(plsqlParser.ALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pref = None # Token
            self._selected_element = None # Selected_elementContext
            self.target_list = list() # of Selected_elementContexts

        def SELECT(self):
            return self.getToken(plsqlParser.SELECT, 0)

        def from_clause(self):
            return self.getTypedRuleContext(plsqlParser.From_clauseContext,0)


        def selected_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Selected_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Selected_elementContext,i)


        def into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Into_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def hierarchical_query_clause(self):
            return self.getTypedRuleContext(plsqlParser.Hierarchical_query_clauseContext,0)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Group_by_clauseContext,i)


        def having_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Having_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Having_clauseContext,i)


        def model_clause(self):
            return self.getTypedRuleContext(plsqlParser.Model_clauseContext,0)


        def for_update_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.For_update_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.For_update_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,i)


        def limit_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Limit_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Limit_clauseContext,i)


        def DISTINCT(self):
            return self.getToken(plsqlParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_query_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_block" ):
                listener.enterQuery_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_block" ):
                listener.exitQuery_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_block" ):
                return visitor.visitQuery_block(self)
            else:
                return visitor.visitChildren(self)




    def query_block(self):

        localctx = plsqlParser.Query_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_query_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2696
            self.match(plsqlParser.SELECT)
            self.state = 2698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 2697
                localctx.pref = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ALL or _la==plsqlParser.DISTINCT or _la==plsqlParser.UNIQUE):
                    localctx.pref = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2700
            localctx._selected_element = self.selected_element()
            localctx.target_list.append(localctx._selected_element)
            self.state = 2705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 2701
                self.match(plsqlParser.COMMA)
                self.state = 2702
                localctx._selected_element = self.selected_element()
                localctx.target_list.append(localctx._selected_element)
                self.state = 2707
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BULK or _la==plsqlParser.INTO:
                self.state = 2708
                self.into_clause()


            self.state = 2711
            self.from_clause()
            self.state = 2713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2712
                self.where_clause()


            self.state = 2716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 2715
                self.hierarchical_query_clause()


            self.state = 2722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,298,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2720
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.GROUP]:
                        self.state = 2718
                        self.group_by_clause()
                        pass
                    elif token in [plsqlParser.HAVING]:
                        self.state = 2719
                        self.having_clause()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)

            self.state = 2726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 2725
                self.model_clause()


            self.state = 2733
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,301,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2731
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.FOR]:
                        self.state = 2728
                        self.for_update_clause()
                        pass
                    elif token in [plsqlParser.ORDER]:
                        self.state = 2729
                        self.order_by_clause()
                        pass
                    elif token in [plsqlParser.LIMIT]:
                        self.state = 2730
                        self.limit_clause()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2735
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,301,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selected_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_selected_element

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Alias_exprContext(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Selected_elementContext
            super().__init__(parser)
            self.expr = None # ExpressionContext
            self.alias = None # Column_aliasContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_expr" ):
                listener.enterAlias_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_expr" ):
                listener.exitAlias_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias_expr" ):
                return visitor.visitAlias_expr(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreTableview_nameContext(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Selected_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreTableview_name" ):
                listener.enterIgnoreTableview_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreTableview_name" ):
                listener.exitIgnoreTableview_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreTableview_name" ):
                return visitor.visitIgnoreTableview_name(self)
            else:
                return visitor.visitChildren(self)


    class StarTableContext(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Selected_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)

        def star(self):
            return self.getTypedRuleContext(plsqlParser.StarContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStarTable" ):
                listener.enterStarTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStarTable" ):
                listener.exitStarTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStarTable" ):
                return visitor.visitStarTable(self)
            else:
                return visitor.visitChildren(self)


    class Star1Context(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Selected_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def star(self):
            return self.getTypedRuleContext(plsqlParser.StarContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar1" ):
                listener.enterStar1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar1" ):
                listener.exitStar1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar1" ):
                return visitor.visitStar1(self)
            else:
                return visitor.visitChildren(self)



    def selected_element(self):

        localctx = plsqlParser.Selected_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_selected_element)
        try:
            self.state = 2746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.Star1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2736
                self.star()
                pass

            elif la_ == 2:
                localctx = plsqlParser.StarTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2737
                self.dot_id()
                self.state = 2738
                self.match(plsqlParser.PERIOD)
                self.state = 2739
                self.star()
                pass

            elif la_ == 3:
                localctx = plsqlParser.IgnoreTableview_nameContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2741
                self.tableview_name()
                pass

            elif la_ == 4:
                localctx = plsqlParser.Alias_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2742
                localctx.expr = self.expression(0)
                self.state = 2744
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
                if la_ == 1:
                    self.state = 2743
                    localctx.alias = self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)

        def table_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Table_refContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Table_refContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_clause" ):
                return visitor.visitFrom_clause(self)
            else:
                return visitor.visitChildren(self)




    def from_clause(self):

        localctx = plsqlParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2748
            self.match(plsqlParser.FROM)
            self.state = 2749
            self.table_ref(0)
            self.state = 2754
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,304,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2750
                    self.match(plsqlParser.COMMA)
                    self.state = 2751
                    self.table_ref(0) 
                self.state = 2756
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,304,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_ref_pivotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref(self):
            return self.getTypedRuleContext(plsqlParser.Table_refContext,0)


        def pivot_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_clauseContext,0)


        def unpivot_clause(self):
            return self.getTypedRuleContext(plsqlParser.Unpivot_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_ref_pivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_pivot" ):
                listener.enterTable_ref_pivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_pivot" ):
                listener.exitTable_ref_pivot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_ref_pivot" ):
                return visitor.visitTable_ref_pivot(self)
            else:
                return visitor.visitChildren(self)




    def table_ref_pivot(self):

        localctx = plsqlParser.Table_ref_pivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_table_ref_pivot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2757
            self.table_ref(0)
            self.state = 2760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.PIVOT]:
                self.state = 2758
                self.pivot_clause()
                pass
            elif token in [plsqlParser.UNPIVOT]:
                self.state = 2759
                self.unpivot_clause()
                pass
            elif token in [plsqlParser.EOF]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_table_ref

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprContext(Table_refContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Table_refContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_ref(self):
            return self.getTypedRuleContext(plsqlParser.Table_refContext,0)

        def join_clause(self):
            return self.getTypedRuleContext(plsqlParser.Join_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinExpr" ):
                listener.enterJoinExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinExpr" ):
                listener.exitJoinExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExpr" ):
                return visitor.visitJoinExpr(self)
            else:
                return visitor.visitChildren(self)


    class TableRefSimpleContext(Table_refContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Table_refContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_ref_aux(self):
            return self.getTypedRuleContext(plsqlParser.Table_ref_auxContext,0)

        def flashback_query_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Flashback_query_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Flashback_query_clauseContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRefSimple" ):
                listener.enterTableRefSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRefSimple" ):
                listener.exitTableRefSimple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRefSimple" ):
                return visitor.visitTableRefSimple(self)
            else:
                return visitor.visitChildren(self)


    class TableRefAuxContext(Table_refContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Table_refContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_ref_aux(self):
            return self.getTypedRuleContext(plsqlParser.Table_ref_auxContext,0)

        def flashback_query_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Flashback_query_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Flashback_query_clauseContext,i)

        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRefAux" ):
                listener.enterTableRefAux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRefAux" ):
                listener.exitTableRefAux(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRefAux" ):
                return visitor.visitTableRefAux(self)
            else:
                return visitor.visitChildren(self)



    def table_ref(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.Table_refContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 328
        self.enterRecursionRule(localctx, 328, self.RULE_table_ref, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.TableRefSimpleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2763
                self.table_ref_aux()
                self.state = 2767
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2764
                        self.flashback_query_clause() 
                    self.state = 2769
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

                pass

            elif la_ == 2:
                localctx = plsqlParser.TableRefAuxContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2770
                self.table_ref_aux()
                self.state = 2774
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,307,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2771
                        self.flashback_query_clause() 
                    self.state = 2776
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,307,self._ctx)

                self.state = 2778
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                if la_ == 1:
                    self.state = 2777
                    self.table_alias()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2786
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,310,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = plsqlParser.JoinExprContext(self, plsqlParser.Table_refContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_table_ref)
                    self.state = 2782
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 2783
                    self.join_clause() 
                self.state = 2788
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,310,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Table_ref_auxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_table_expression_clauseContext,0)


        def pivot_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_clauseContext,0)


        def unpivot_clause(self):
            return self.getTypedRuleContext(plsqlParser.Unpivot_clauseContext,0)


        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_ref_aux

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_aux" ):
                listener.enterTable_ref_aux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_aux" ):
                listener.exitTable_ref_aux(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_ref_aux" ):
                return visitor.visitTable_ref_aux(self)
            else:
                return visitor.visitChildren(self)




    def table_ref_aux(self):

        localctx = plsqlParser.Table_ref_auxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_table_ref_aux)
        try:
            self.state = 2799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2789
                self.dml_table_expression_clause()
                self.state = 2792
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                if la_ == 1:
                    self.state = 2790
                    self.pivot_clause()

                elif la_ == 2:
                    self.state = 2791
                    self.unpivot_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2794
                self.match(plsqlParser.ONLY)
                self.state = 2795
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2796
                self.dml_table_expression_clause()
                self.state = 2797
                self.match(plsqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(plsqlParser.JOIN, 0)

        def table_ref(self):
            return self.getTypedRuleContext(plsqlParser.Table_refContext,0)


        def query_partition_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Query_partition_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Query_partition_clauseContext,i)


        def join_type(self):
            return self.getTypedRuleContext(plsqlParser.Join_typeContext,0)


        def join_on_part(self):
            return self.getTypedRuleContext(plsqlParser.Join_on_partContext,0)


        def join_using_part(self):
            return self.getTypedRuleContext(plsqlParser.Join_using_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_clause" ):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)




    def join_clause(self):

        localctx = plsqlParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION:
                self.state = 2801
                self.query_partition_clause()


            self.state = 2805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.CROSS or ((((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & ((1 << (plsqlParser.FULL - 152)) | (1 << (plsqlParser.INNER - 152)) | (1 << (plsqlParser.LEFT - 152)))) != 0) or _la==plsqlParser.NATURAL or _la==plsqlParser.RIGHT:
                self.state = 2804
                self.join_type()


            self.state = 2807
            self.match(plsqlParser.JOIN)
            self.state = 2808
            self.table_ref(0)
            self.state = 2810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.state = 2809
                self.query_partition_clause()


            self.state = 2814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.state = 2812
                self.join_on_part()

            elif la_ == 2:
                self.state = 2813
                self.join_using_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_on_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_join_on_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_on_part" ):
                listener.enterJoin_on_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_on_part" ):
                listener.exitJoin_on_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_on_part" ):
                return visitor.visitJoin_on_part(self)
            else:
                return visitor.visitChildren(self)




    def join_on_part(self):

        localctx = plsqlParser.Join_on_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_join_on_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2816
            self.match(plsqlParser.ON)
            self.state = 2817
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_using_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_join_using_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_using_part" ):
                listener.enterJoin_using_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_using_part" ):
                listener.exitJoin_using_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_using_part" ):
                return visitor.visitJoin_using_part(self)
            else:
                return visitor.visitChildren(self)




    def join_using_part(self):

        localctx = plsqlParser.Join_using_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_join_using_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2819
            self.match(plsqlParser.USING)
            self.state = 2820
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2821
            self.column_name()
            self.state = 2826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 2822
                self.match(plsqlParser.COMMA)
                self.state = 2823
                self.column_name()
                self.state = 2828
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2829
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(plsqlParser.CROSS, 0)

        def INNER(self):
            return self.getToken(plsqlParser.INNER, 0)

        def NATURAL(self):
            return self.getToken(plsqlParser.NATURAL, 0)

        def FULL(self):
            return self.getToken(plsqlParser.FULL, 0)

        def LEFT(self):
            return self.getToken(plsqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(plsqlParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(plsqlParser.OUTER, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_type" ):
                return visitor.visitJoin_type(self)
            else:
                return visitor.visitChildren(self)




    def join_type(self):

        localctx = plsqlParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.state = 2842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CROSS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2831
                self.match(plsqlParser.CROSS)
                pass
            elif token in [plsqlParser.FULL, plsqlParser.INNER, plsqlParser.LEFT, plsqlParser.NATURAL, plsqlParser.RIGHT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NATURAL:
                    self.state = 2832
                    self.match(plsqlParser.NATURAL)


                self.state = 2840
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.INNER]:
                    self.state = 2835
                    self.match(plsqlParser.INNER)
                    pass
                elif token in [plsqlParser.FULL, plsqlParser.LEFT, plsqlParser.RIGHT]:
                    self.state = 2836
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.FULL or _la==plsqlParser.LEFT or _la==plsqlParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2838
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.OUTER:
                        self.state = 2837
                        self.match(plsqlParser.OUTER)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_partition_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_query_partition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_partition_clause" ):
                listener.enterQuery_partition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_partition_clause" ):
                listener.exitQuery_partition_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_partition_clause" ):
                return visitor.visitQuery_partition_clause(self)
            else:
                return visitor.visitChildren(self)




    def query_partition_clause(self):

        localctx = plsqlParser.Query_partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_query_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2844
            self.match(plsqlParser.PARTITION)
            self.state = 2845
            self.match(plsqlParser.BY)
            self.state = 2859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
            if la_ == 1:
                self.state = 2846
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2847
                self.subquery(0)
                self.state = 2848
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 2850
                self.expression_list()
                pass

            elif la_ == 3:
                self.state = 2851
                self.expression(0)
                self.state = 2856
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2852
                        self.match(plsqlParser.COMMA)
                        self.state = 2853
                        self.expression(0) 
                    self.state = 2858
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flashback_query_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSIONS(self):
            return self.getToken(plsqlParser.VERSIONS, 0)

        def BETWEEN(self):
            return self.getToken(plsqlParser.BETWEEN, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def SCN(self):
            return self.getToken(plsqlParser.SCN, 0)

        def TIMESTAMP(self):
            return self.getToken(plsqlParser.TIMESTAMP, 0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def SNAPSHOT(self):
            return self.getToken(plsqlParser.SNAPSHOT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_flashback_query_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlashback_query_clause" ):
                listener.enterFlashback_query_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlashback_query_clause" ):
                listener.exitFlashback_query_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlashback_query_clause" ):
                return visitor.visitFlashback_query_clause(self)
            else:
                return visitor.visitChildren(self)




    def flashback_query_clause(self):

        localctx = plsqlParser.Flashback_query_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_flashback_query_clause)
        self._la = 0 # Token type
        try:
            self.state = 2869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.VERSIONS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2861
                self.match(plsqlParser.VERSIONS)
                self.state = 2862
                self.match(plsqlParser.BETWEEN)
                self.state = 2863
                _la = self._input.LA(1)
                if not(_la==plsqlParser.SCN or _la==plsqlParser.TIMESTAMP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2864
                self.expression(0)
                pass
            elif token in [plsqlParser.AS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2865
                self.match(plsqlParser.AS)
                self.state = 2866
                self.match(plsqlParser.OF)
                self.state = 2867
                _la = self._input.LA(1)
                if not(((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (plsqlParser.SCN - 330)) | (1 << (plsqlParser.SNAPSHOT - 330)) | (1 << (plsqlParser.TIMESTAMP - 330)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2868
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(plsqlParser.PIVOT, 0)

        def pivot_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Pivot_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Pivot_elementContext,i)


        def pivot_for_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_for_clauseContext,0)


        def pivot_in_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_in_clauseContext,0)


        def XML(self):
            return self.getToken(plsqlParser.XML, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_clause" ):
                listener.enterPivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_clause" ):
                listener.exitPivot_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_clause" ):
                return visitor.visitPivot_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_clause(self):

        localctx = plsqlParser.Pivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_pivot_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2871
            self.match(plsqlParser.PIVOT)
            self.state = 2873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.XML:
                self.state = 2872
                self.match(plsqlParser.XML)


            self.state = 2875
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2876
            self.pivot_element()
            self.state = 2881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 2877
                self.match(plsqlParser.COMMA)
                self.state = 2878
                self.pivot_element()
                self.state = 2883
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2884
            self.pivot_for_clause()
            self.state = 2885
            self.pivot_in_clause()
            self.state = 2886
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function_name(self):
            return self.getTypedRuleContext(plsqlParser.Aggregate_function_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_element" ):
                listener.enterPivot_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_element" ):
                listener.exitPivot_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_element" ):
                return visitor.visitPivot_element(self)
            else:
                return visitor.visitChildren(self)




    def pivot_element(self):

        localctx = plsqlParser.Pivot_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_pivot_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2888
            self.aggregate_function_name()
            self.state = 2889
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2890
            self.expression(0)
            self.state = 2891
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 2893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 449)) | (1 << (plsqlParser.CHAR_STRING - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 2892
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_for_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_for_clause" ):
                listener.enterPivot_for_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_for_clause" ):
                listener.exitPivot_for_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_for_clause" ):
                return visitor.visitPivot_for_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_for_clause(self):

        localctx = plsqlParser.Pivot_for_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_pivot_for_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2895
            self.match(plsqlParser.FOR)
            self.state = 2908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 2896
                self.column_name()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 2897
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2898
                self.column_name()
                self.state = 2903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 2899
                    self.match(plsqlParser.COMMA)
                    self.state = 2900
                    self.column_name()
                    self.state = 2905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2906
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ANY)
            else:
                return self.getToken(plsqlParser.ANY, i)

        def pivot_in_clause_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Pivot_in_clause_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Pivot_in_clause_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause" ):
                listener.enterPivot_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause" ):
                listener.exitPivot_in_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause" ):
                return visitor.visitPivot_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause(self):

        localctx = plsqlParser.Pivot_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_pivot_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2910
            self.match(plsqlParser.IN)
            self.state = 2911
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2929
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.state = 2912
                self.subquery(0)
                pass

            elif la_ == 2:
                self.state = 2913
                self.match(plsqlParser.ANY)
                self.state = 2918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 2914
                    self.match(plsqlParser.COMMA)
                    self.state = 2915
                    self.match(plsqlParser.ANY)
                    self.state = 2920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2921
                self.pivot_in_clause_element()
                self.state = 2926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 2922
                    self.match(plsqlParser.COMMA)
                    self.state = 2923
                    self.pivot_in_clause_element()
                    self.state = 2928
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2931
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_in_clause_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot_in_clause_elements(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_in_clause_elementsContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_in_clause_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause_element" ):
                listener.enterPivot_in_clause_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause_element" ):
                listener.exitPivot_in_clause_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause_element" ):
                return visitor.visitPivot_in_clause_element(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause_element(self):

        localctx = plsqlParser.Pivot_in_clause_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_pivot_in_clause_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2933
            self.pivot_in_clause_elements()
            self.state = 2935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 449)) | (1 << (plsqlParser.CHAR_STRING - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 2934
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_in_clause_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_pivot_in_clause_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause_elements" ):
                listener.enterPivot_in_clause_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause_elements" ):
                listener.exitPivot_in_clause_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause_elements" ):
                return visitor.visitPivot_in_clause_elements(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause_elements(self):

        localctx = plsqlParser.Pivot_in_clause_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_pivot_in_clause_elements)
        try:
            self.state = 2939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2937
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2938
                self.expression_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unpivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(plsqlParser.UNPIVOT, 0)

        def pivot_for_clause(self):
            return self.getTypedRuleContext(plsqlParser.Pivot_for_clauseContext,0)


        def unpivot_in_clause(self):
            return self.getTypedRuleContext(plsqlParser.Unpivot_in_clauseContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def NULLS(self):
            return self.getToken(plsqlParser.NULLS, 0)

        def INCLUDE(self):
            return self.getToken(plsqlParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(plsqlParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_unpivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_clause" ):
                listener.enterUnpivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_clause" ):
                listener.exitUnpivot_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_clause" ):
                return visitor.visitUnpivot_clause(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_clause(self):

        localctx = plsqlParser.Unpivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_unpivot_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2941
            self.match(plsqlParser.UNPIVOT)
            self.state = 2944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.EXCLUDE or _la==plsqlParser.INCLUDE:
                self.state = 2942
                _la = self._input.LA(1)
                if not(_la==plsqlParser.EXCLUDE or _la==plsqlParser.INCLUDE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2943
                self.match(plsqlParser.NULLS)


            self.state = 2946
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 2947
                self.column_name()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 2948
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2949
                self.column_name()
                self.state = 2954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 2950
                    self.match(plsqlParser.COMMA)
                    self.state = 2951
                    self.column_name()
                    self.state = 2956
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2957
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2961
            self.pivot_for_clause()
            self.state = 2962
            self.unpivot_in_clause()
            self.state = 2963
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unpivot_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def unpivot_in_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Unpivot_in_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Unpivot_in_elementsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_unpivot_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_in_clause" ):
                listener.enterUnpivot_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_in_clause" ):
                listener.exitUnpivot_in_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_in_clause" ):
                return visitor.visitUnpivot_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_in_clause(self):

        localctx = plsqlParser.Unpivot_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_unpivot_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2965
            self.match(plsqlParser.IN)
            self.state = 2966
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 2967
            self.unpivot_in_elements()
            self.state = 2972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 2968
                self.match(plsqlParser.COMMA)
                self.state = 2969
                self.unpivot_in_elements()
                self.state = 2974
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2975
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unpivot_in_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConstantContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_unpivot_in_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_in_elements" ):
                listener.enterUnpivot_in_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_in_elements" ):
                listener.exitUnpivot_in_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_in_elements" ):
                return visitor.visitUnpivot_in_elements(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_in_elements(self):

        localctx = plsqlParser.Unpivot_in_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_unpivot_in_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2989
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 2977
                self.column_name()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 2978
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 2979
                self.column_name()
                self.state = 2984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 2980
                    self.match(plsqlParser.COMMA)
                    self.state = 2981
                    self.column_name()
                    self.state = 2986
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2987
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS:
                self.state = 2991
                self.match(plsqlParser.AS)
                self.state = 3004
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.DATE, plsqlParser.DBTIMEZONE, plsqlParser.DEFAULT, plsqlParser.FALSE, plsqlParser.INTERVAL, plsqlParser.MAXVALUE, plsqlParser.MINVALUE, plsqlParser.NULL, plsqlParser.SESSIONTIMEZONE, plsqlParser.TIMESTAMP, plsqlParser.TRUE, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING]:
                    self.state = 2992
                    self.constant()
                    pass
                elif token in [plsqlParser.LEFT_PAREN]:
                    self.state = 2993
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 2994
                    self.constant()
                    self.state = 2999
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==plsqlParser.COMMA:
                        self.state = 2995
                        self.match(plsqlParser.COMMA)
                        self.state = 2996
                        self.constant()
                        self.state = 3001
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3002
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Hierarchical_query_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT(self):
            return self.getToken(plsqlParser.CONNECT, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def NOCYCLE(self):
            return self.getToken(plsqlParser.NOCYCLE, 0)

        def start_part(self):
            return self.getTypedRuleContext(plsqlParser.Start_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_hierarchical_query_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHierarchical_query_clause" ):
                listener.enterHierarchical_query_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHierarchical_query_clause" ):
                listener.exitHierarchical_query_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHierarchical_query_clause" ):
                return visitor.visitHierarchical_query_clause(self)
            else:
                return visitor.visitChildren(self)




    def hierarchical_query_clause(self):

        localctx = plsqlParser.Hierarchical_query_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_hierarchical_query_clause)
        try:
            self.state = 3025
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CONNECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3008
                self.match(plsqlParser.CONNECT)
                self.state = 3009
                self.match(plsqlParser.BY)
                self.state = 3011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
                if la_ == 1:
                    self.state = 3010
                    self.match(plsqlParser.NOCYCLE)


                self.state = 3013
                self.condition()
                self.state = 3015
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
                if la_ == 1:
                    self.state = 3014
                    self.start_part()


                pass
            elif token in [plsqlParser.START]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3017
                self.start_part()
                self.state = 3018
                self.match(plsqlParser.CONNECT)
                self.state = 3019
                self.match(plsqlParser.BY)
                self.state = 3021
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
                if la_ == 1:
                    self.state = 3020
                    self.match(plsqlParser.NOCYCLE)


                self.state = 3023
                self.condition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Start_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(plsqlParser.START, 0)

        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_start_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_part" ):
                listener.enterStart_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_part" ):
                listener.exitStart_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStart_part" ):
                return visitor.visitStart_part(self)
            else:
                return visitor.visitChildren(self)




    def start_part(self):

        localctx = plsqlParser.Start_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_start_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3027
            self.match(plsqlParser.START)
            self.state = 3028
            self.match(plsqlParser.WITH)
            self.state = 3029
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(plsqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def group_by_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Group_by_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Group_by_elementsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_clause" ):
                return visitor.visitGroup_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_by_clause(self):

        localctx = plsqlParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_group_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3031
            self.match(plsqlParser.GROUP)
            self.state = 3032
            self.match(plsqlParser.BY)
            self.state = 3033
            self.group_by_elements()
            self.state = 3038
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,348,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3034
                    self.match(plsqlParser.COMMA)
                    self.state = 3035
                    self.group_by_elements() 
                self.state = 3040
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,348,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grouping_sets_clause(self):
            return self.getTypedRuleContext(plsqlParser.Grouping_sets_clauseContext,0)


        def rollup_cube_clause(self):
            return self.getTypedRuleContext(plsqlParser.Rollup_cube_clauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_group_by_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_elements" ):
                listener.enterGroup_by_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_elements" ):
                listener.exitGroup_by_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_elements" ):
                return visitor.visitGroup_by_elements(self)
            else:
                return visitor.visitChildren(self)




    def group_by_elements(self):

        localctx = plsqlParser.Group_by_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_group_by_elements)
        try:
            self.state = 3044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3041
                self.grouping_sets_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3042
                self.rollup_cube_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3043
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollup_cube_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grouping_sets_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Grouping_sets_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Grouping_sets_elementsContext,i)


        def ROLLUP(self):
            return self.getToken(plsqlParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(plsqlParser.CUBE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_rollup_cube_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_cube_clause" ):
                listener.enterRollup_cube_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_cube_clause" ):
                listener.exitRollup_cube_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollup_cube_clause" ):
                return visitor.visitRollup_cube_clause(self)
            else:
                return visitor.visitChildren(self)




    def rollup_cube_clause(self):

        localctx = plsqlParser.Rollup_cube_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_rollup_cube_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3046
            _la = self._input.LA(1)
            if not(_la==plsqlParser.CUBE or _la==plsqlParser.ROLLUP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3047
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3048
            self.grouping_sets_elements()
            self.state = 3053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 3049
                self.match(plsqlParser.COMMA)
                self.state = 3050
                self.grouping_sets_elements()
                self.state = 3055
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3056
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grouping_sets_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(plsqlParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(plsqlParser.SETS, 0)

        def grouping_sets_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Grouping_sets_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Grouping_sets_elementsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_grouping_sets_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_clause" ):
                listener.enterGrouping_sets_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_clause" ):
                listener.exitGrouping_sets_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_sets_clause" ):
                return visitor.visitGrouping_sets_clause(self)
            else:
                return visitor.visitChildren(self)




    def grouping_sets_clause(self):

        localctx = plsqlParser.Grouping_sets_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_grouping_sets_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3058
            self.match(plsqlParser.GROUPING)
            self.state = 3059
            self.match(plsqlParser.SETS)
            self.state = 3060
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3061
            self.grouping_sets_elements()
            self.state = 3066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 3062
                self.match(plsqlParser.COMMA)
                self.state = 3063
                self.grouping_sets_elements()
                self.state = 3068
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3069
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grouping_sets_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rollup_cube_clause(self):
            return self.getTypedRuleContext(plsqlParser.Rollup_cube_clauseContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_grouping_sets_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_elements" ):
                listener.enterGrouping_sets_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_elements" ):
                listener.exitGrouping_sets_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_sets_elements" ):
                return visitor.visitGrouping_sets_elements(self)
            else:
                return visitor.visitChildren(self)




    def grouping_sets_elements(self):

        localctx = plsqlParser.Grouping_sets_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_grouping_sets_elements)
        try:
            self.state = 3074
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3071
                self.rollup_cube_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3072
                self.expression_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3073
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(plsqlParser.HAVING, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHaving_clause" ):
                return visitor.visitHaving_clause(self)
            else:
                return visitor.visitChildren(self)




    def having_clause(self):

        localctx = plsqlParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3076
            self.match(plsqlParser.HAVING)
            self.state = 3077
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODEL(self):
            return self.getToken(plsqlParser.MODEL, 0)

        def main_model(self):
            return self.getTypedRuleContext(plsqlParser.Main_modelContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Cell_reference_optionsContext,i)


        def return_rows_clause(self):
            return self.getTypedRuleContext(plsqlParser.Return_rows_clauseContext,0)


        def reference_model(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Reference_modelContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Reference_modelContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_clause" ):
                listener.enterModel_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_clause" ):
                listener.exitModel_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_clause" ):
                return visitor.visitModel_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_clause(self):

        localctx = plsqlParser.Model_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_model_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3079
            self.match(plsqlParser.MODEL)
            self.state = 3083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.IGNORE or _la==plsqlParser.KEEP or _la==plsqlParser.UNIQUE:
                self.state = 3080
                self.cell_reference_options()
                self.state = 3085
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RETURN:
                self.state = 3086
                self.return_rows_clause()


            self.state = 3092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.REFERENCE:
                self.state = 3089
                self.reference_model()
                self.state = 3094
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3095
            self.main_model()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cell_reference_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAV(self):
            return self.getToken(plsqlParser.NAV, 0)

        def IGNORE(self):
            return self.getToken(plsqlParser.IGNORE, 0)

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def DIMENSION(self):
            return self.getToken(plsqlParser.DIMENSION, 0)

        def SINGLE(self):
            return self.getToken(plsqlParser.SINGLE, 0)

        def REFERENCE(self):
            return self.getToken(plsqlParser.REFERENCE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_cell_reference_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCell_reference_options" ):
                listener.enterCell_reference_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCell_reference_options" ):
                listener.exitCell_reference_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCell_reference_options" ):
                return visitor.visitCell_reference_options(self)
            else:
                return visitor.visitChildren(self)




    def cell_reference_options(self):

        localctx = plsqlParser.Cell_reference_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_cell_reference_options)
        self._la = 0 # Token type
        try:
            self.state = 3105
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.IGNORE, plsqlParser.KEEP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3097
                _la = self._input.LA(1)
                if not(_la==plsqlParser.IGNORE or _la==plsqlParser.KEEP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3098
                self.match(plsqlParser.NAV)
                pass
            elif token in [plsqlParser.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3099
                self.match(plsqlParser.UNIQUE)
                self.state = 3103
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.DIMENSION]:
                    self.state = 3100
                    self.match(plsqlParser.DIMENSION)
                    pass
                elif token in [plsqlParser.SINGLE]:
                    self.state = 3101
                    self.match(plsqlParser.SINGLE)
                    self.state = 3102
                    self.match(plsqlParser.REFERENCE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_rows_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def UPDATED(self):
            return self.getToken(plsqlParser.UPDATED, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_return_rows_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_rows_clause" ):
                listener.enterReturn_rows_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_rows_clause" ):
                listener.exitReturn_rows_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_rows_clause" ):
                return visitor.visitReturn_rows_clause(self)
            else:
                return visitor.visitChildren(self)




    def return_rows_clause(self):

        localctx = plsqlParser.Return_rows_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_return_rows_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3107
            self.match(plsqlParser.RETURN)
            self.state = 3108
            _la = self._input.LA(1)
            if not(_la==plsqlParser.ALL or _la==plsqlParser.UPDATED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3109
            self.match(plsqlParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reference_modelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(plsqlParser.REFERENCE, 0)

        def reference_model_name(self):
            return self.getTypedRuleContext(plsqlParser.Reference_model_nameContext,0)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def model_column_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Model_column_clausesContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Cell_reference_optionsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_reference_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_model" ):
                listener.enterReference_model(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_model" ):
                listener.exitReference_model(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_model" ):
                return visitor.visitReference_model(self)
            else:
                return visitor.visitChildren(self)




    def reference_model(self):

        localctx = plsqlParser.Reference_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_reference_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3111
            self.match(plsqlParser.REFERENCE)
            self.state = 3112
            self.reference_model_name()
            self.state = 3113
            self.match(plsqlParser.ON)
            self.state = 3114
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3115
            self.subquery(0)
            self.state = 3116
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 3117
            self.model_column_clauses()
            self.state = 3121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.IGNORE or _la==plsqlParser.KEEP or _la==plsqlParser.UNIQUE:
                self.state = 3118
                self.cell_reference_options()
                self.state = 3123
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Main_modelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_column_clauses(self):
            return self.getTypedRuleContext(plsqlParser.Model_column_clausesContext,0)


        def model_rules_clause(self):
            return self.getTypedRuleContext(plsqlParser.Model_rules_clauseContext,0)


        def MAIN(self):
            return self.getToken(plsqlParser.MAIN, 0)

        def main_model_name(self):
            return self.getTypedRuleContext(plsqlParser.Main_model_nameContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Cell_reference_optionsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_main_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_model" ):
                listener.enterMain_model(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_model" ):
                listener.exitMain_model(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain_model" ):
                return visitor.visitMain_model(self)
            else:
                return visitor.visitChildren(self)




    def main_model(self):

        localctx = plsqlParser.Main_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_main_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.MAIN:
                self.state = 3124
                self.match(plsqlParser.MAIN)
                self.state = 3125
                self.main_model_name()


            self.state = 3128
            self.model_column_clauses()
            self.state = 3132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.IGNORE or _la==plsqlParser.KEEP or _la==plsqlParser.UNIQUE:
                self.state = 3129
                self.cell_reference_options()
                self.state = 3134
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3135
            self.model_rules_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIMENSION(self):
            return self.getToken(plsqlParser.DIMENSION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def model_column_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Model_column_listContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Model_column_listContext,i)


        def MEASURES(self):
            return self.getToken(plsqlParser.MEASURES, 0)

        def model_column_partition_part(self):
            return self.getTypedRuleContext(plsqlParser.Model_column_partition_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_column_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_clauses" ):
                listener.enterModel_column_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_clauses" ):
                listener.exitModel_column_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_clauses" ):
                return visitor.visitModel_column_clauses(self)
            else:
                return visitor.visitChildren(self)




    def model_column_clauses(self):

        localctx = plsqlParser.Model_column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_model_column_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION:
                self.state = 3137
                self.model_column_partition_part()


            self.state = 3140
            self.match(plsqlParser.DIMENSION)
            self.state = 3141
            self.match(plsqlParser.BY)
            self.state = 3142
            self.model_column_list()
            self.state = 3143
            self.match(plsqlParser.MEASURES)
            self.state = 3144
            self.model_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_column_partition_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def model_column_list(self):
            return self.getTypedRuleContext(plsqlParser.Model_column_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_column_partition_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_partition_part" ):
                listener.enterModel_column_partition_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_partition_part" ):
                listener.exitModel_column_partition_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_partition_part" ):
                return visitor.visitModel_column_partition_part(self)
            else:
                return visitor.visitChildren(self)




    def model_column_partition_part(self):

        localctx = plsqlParser.Model_column_partition_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_model_column_partition_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3146
            self.match(plsqlParser.PARTITION)
            self.state = 3147
            self.match(plsqlParser.BY)
            self.state = 3148
            self.model_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Model_columnContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Model_columnContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_list" ):
                listener.enterModel_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_list" ):
                listener.exitModel_column_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_list" ):
                return visitor.visitModel_column_list(self)
            else:
                return visitor.visitChildren(self)




    def model_column_list(self):

        localctx = plsqlParser.Model_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_model_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3150
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3151
            self.model_column()
            self.state = 3156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 3152
                self.match(plsqlParser.COMMA)
                self.state = 3153
                self.model_column()
                self.state = 3158
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3159
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column" ):
                listener.enterModel_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column" ):
                listener.exitModel_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column" ):
                return visitor.visitModel_column(self)
            else:
                return visitor.visitChildren(self)




    def model_column(self):

        localctx = plsqlParser.Model_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_model_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3161
            self.expression(0)
            self.state = 3163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 449)) | (1 << (plsqlParser.CHAR_STRING - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 3162
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_rules_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_rules_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Model_rules_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Model_rules_elementContext,i)


        def model_rules_part(self):
            return self.getTypedRuleContext(plsqlParser.Model_rules_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_rules_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_clause" ):
                listener.enterModel_rules_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_clause" ):
                listener.exitModel_rules_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_clause" ):
                return visitor.visitModel_rules_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_clause(self):

        localctx = plsqlParser.Model_rules_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_model_rules_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RULES:
                self.state = 3165
                self.model_rules_part()


            self.state = 3168
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3169
            self.model_rules_element()
            self.state = 3174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 3170
                self.match(plsqlParser.COMMA)
                self.state = 3171
                self.model_rules_element()
                self.state = 3176
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3177
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_rules_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULES(self):
            return self.getToken(plsqlParser.RULES, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(plsqlParser.UPSERT, 0)

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def model_iterate_clause(self):
            return self.getTypedRuleContext(plsqlParser.Model_iterate_clauseContext,0)


        def AUTOMATIC(self):
            return self.getToken(plsqlParser.AUTOMATIC, 0)

        def SEQUENTIAL(self):
            return self.getToken(plsqlParser.SEQUENTIAL, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_model_rules_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_part" ):
                listener.enterModel_rules_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_part" ):
                listener.exitModel_rules_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_part" ):
                return visitor.visitModel_rules_part(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_part(self):

        localctx = plsqlParser.Model_rules_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_model_rules_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3179
            self.match(plsqlParser.RULES)
            self.state = 3185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.UPDATE]:
                self.state = 3180
                self.match(plsqlParser.UPDATE)
                pass
            elif token in [plsqlParser.UPSERT]:
                self.state = 3181
                self.match(plsqlParser.UPSERT)
                self.state = 3183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ALL:
                    self.state = 3182
                    self.match(plsqlParser.ALL)


                pass
            elif token in [plsqlParser.AUTOMATIC, plsqlParser.ITERATE, plsqlParser.SEQUENTIAL, plsqlParser.LEFT_PAREN]:
                pass
            else:
                pass
            self.state = 3189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AUTOMATIC or _la==plsqlParser.SEQUENTIAL:
                self.state = 3187
                _la = self._input.LA(1)
                if not(_la==plsqlParser.AUTOMATIC or _la==plsqlParser.SEQUENTIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3188
                self.match(plsqlParser.ORDER)


            self.state = 3192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ITERATE:
                self.state = 3191
                self.model_iterate_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_rules_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cell_assignment(self):
            return self.getTypedRuleContext(plsqlParser.Cell_assignmentContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(plsqlParser.UPSERT, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_model_rules_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_element" ):
                listener.enterModel_rules_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_element" ):
                listener.exitModel_rules_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_element" ):
                return visitor.visitModel_rules_element(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_element(self):

        localctx = plsqlParser.Model_rules_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_model_rules_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 3194
                self.match(plsqlParser.UPDATE)

            elif la_ == 2:
                self.state = 3195
                self.match(plsqlParser.UPSERT)
                self.state = 3197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
                if la_ == 1:
                    self.state = 3196
                    self.match(plsqlParser.ALL)




            self.state = 3201
            self.cell_assignment()
            self.state = 3203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ORDER:
                self.state = 3202
                self.order_by_clause()


            self.state = 3205
            self.match(plsqlParser.EQUALS_OP)
            self.state = 3206
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cell_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_expression(self):
            return self.getTypedRuleContext(plsqlParser.Model_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cell_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCell_assignment" ):
                listener.enterCell_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCell_assignment" ):
                listener.exitCell_assignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCell_assignment" ):
                return visitor.visitCell_assignment(self)
            else:
                return visitor.visitChildren(self)




    def cell_assignment(self):

        localctx = plsqlParser.Cell_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_cell_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3208
            self.model_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_iterate_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE(self):
            return self.getToken(plsqlParser.ITERATE, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def until_part(self):
            return self.getTypedRuleContext(plsqlParser.Until_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_iterate_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_iterate_clause" ):
                listener.enterModel_iterate_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_iterate_clause" ):
                listener.exitModel_iterate_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_iterate_clause" ):
                return visitor.visitModel_iterate_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_iterate_clause(self):

        localctx = plsqlParser.Model_iterate_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_model_iterate_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3210
            self.match(plsqlParser.ITERATE)
            self.state = 3211
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3212
            self.expression(0)
            self.state = 3213
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 3215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.UNTIL:
                self.state = 3214
                self.until_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Until_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNTIL(self):
            return self.getToken(plsqlParser.UNTIL, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_until_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntil_part" ):
                listener.enterUntil_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntil_part" ):
                listener.exitUntil_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntil_part" ):
                return visitor.visitUntil_part(self)
            else:
                return visitor.visitChildren(self)




    def until_part(self):

        localctx = plsqlParser.Until_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_until_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3217
            self.match(plsqlParser.UNTIL)
            self.state = 3218
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3219
            self.condition()
            self.state = 3220
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def order_by_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Order_by_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Order_by_elementsContext,i)


        def SIBLINGS(self):
            return self.getToken(plsqlParser.SIBLINGS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = plsqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3222
            self.match(plsqlParser.ORDER)
            self.state = 3224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.SIBLINGS:
                self.state = 3223
                self.match(plsqlParser.SIBLINGS)


            self.state = 3226
            self.match(plsqlParser.BY)
            self.state = 3227
            self.order_by_elements()
            self.state = 3232
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,375,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3228
                    self.match(plsqlParser.COMMA)
                    self.state = 3229
                    self.order_by_elements() 
                self.state = 3234
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,375,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token
            self.nulls = None # Token

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(plsqlParser.NULLS, 0)

        def ASC(self):
            return self.getToken(plsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(plsqlParser.DESC, 0)

        def FIRST(self):
            return self.getToken(plsqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(plsqlParser.LAST, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_order_by_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_elements" ):
                listener.enterOrder_by_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_elements" ):
                listener.exitOrder_by_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_elements" ):
                return visitor.visitOrder_by_elements(self)
            else:
                return visitor.visitChildren(self)




    def order_by_elements(self):

        localctx = plsqlParser.Order_by_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_order_by_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3235
            self.expression(0)
            self.state = 3237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
            if la_ == 1:
                self.state = 3236
                localctx.direction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ASC or _la==plsqlParser.DESC):
                    localctx.direction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.state = 3239
                self.match(plsqlParser.NULLS)
                self.state = 3240
                localctx.nulls = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FIRST or _la==plsqlParser.LAST):
                    localctx.nulls = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_update_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def for_update_of_part(self):
            return self.getTypedRuleContext(plsqlParser.For_update_of_partContext,0)


        def for_update_options(self):
            return self.getTypedRuleContext(plsqlParser.For_update_optionsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_for_update_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_clause" ):
                listener.enterFor_update_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_clause" ):
                listener.exitFor_update_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_clause" ):
                return visitor.visitFor_update_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_update_clause(self):

        localctx = plsqlParser.For_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_for_update_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3243
            self.match(plsqlParser.FOR)
            self.state = 3244
            self.match(plsqlParser.UPDATE)
            self.state = 3246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.state = 3245
                self.for_update_of_part()


            self.state = 3249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
            if la_ == 1:
                self.state = 3248
                self.for_update_options()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_update_of_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_for_update_of_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_of_part" ):
                listener.enterFor_update_of_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_of_part" ):
                listener.exitFor_update_of_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_of_part" ):
                return visitor.visitFor_update_of_part(self)
            else:
                return visitor.visitChildren(self)




    def for_update_of_part(self):

        localctx = plsqlParser.For_update_of_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_for_update_of_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3251
            self.match(plsqlParser.OF)
            self.state = 3252
            self.column_name()
            self.state = 3257
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,380,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3253
                    self.match(plsqlParser.COMMA)
                    self.state = 3254
                    self.column_name() 
                self.state = 3259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,380,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_update_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP_(self):
            return self.getToken(plsqlParser.SKIP_, 0)

        def LOCKED(self):
            return self.getToken(plsqlParser.LOCKED, 0)

        def NOWAIT(self):
            return self.getToken(plsqlParser.NOWAIT, 0)

        def WAIT(self):
            return self.getToken(plsqlParser.WAIT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_for_update_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_options" ):
                listener.enterFor_update_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_options" ):
                listener.exitFor_update_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_options" ):
                return visitor.visitFor_update_options(self)
            else:
                return visitor.visitChildren(self)




    def for_update_options(self):

        localctx = plsqlParser.For_update_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_for_update_options)
        try:
            self.state = 3265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SKIP_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3260
                self.match(plsqlParser.SKIP_)
                self.state = 3261
                self.match(plsqlParser.LOCKED)
                pass
            elif token in [plsqlParser.NOWAIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3262
                self.match(plsqlParser.NOWAIT)
                pass
            elif token in [plsqlParser.WAIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3263
                self.match(plsqlParser.WAIT)
                self.state = 3264
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(plsqlParser.LIMIT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimit_clause" ):
                return visitor.visitLimit_clause(self)
            else:
                return visitor.visitChildren(self)




    def limit_clause(self):

        localctx = plsqlParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_limit_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3267
            self.match(plsqlParser.LIMIT)
            self.state = 3268
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name_list" ):
                return visitor.visitColumn_name_list(self)
            else:
                return visitor.visitChildren(self)




    def column_name_list(self):

        localctx = plsqlParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3270
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3271
            self.column_name()
            self.state = 3276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 3272
                self.match(plsqlParser.COMMA)
                self.state = 3273
                self.column_name()
                self.state = 3278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3279
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(plsqlParser.General_table_refContext,0)


        def update_set_clause(self):
            return self.getTypedRuleContext(plsqlParser.Update_set_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(plsqlParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_statement" ):
                return visitor.visitUpdate_statement(self)
            else:
                return visitor.visitChildren(self)




    def update_statement(self):

        localctx = plsqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3281
            self.match(plsqlParser.UPDATE)
            self.state = 3282
            self.general_table_ref()
            self.state = 3283
            self.update_set_clause()
            self.state = 3285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHERE:
                self.state = 3284
                self.where_clause()


            self.state = 3288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RETURN or _la==plsqlParser.RETURNING:
                self.state = 3287
                self.static_returning_clause()


            self.state = 3291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 3290
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def column_based_update_set_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_based_update_set_clauseContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_based_update_set_clauseContext,i)


        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_update_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_set_clause" ):
                listener.enterUpdate_set_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_set_clause" ):
                listener.exitUpdate_set_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_set_clause" ):
                return visitor.visitUpdate_set_clause(self)
            else:
                return visitor.visitChildren(self)




    def update_set_clause(self):

        localctx = plsqlParser.Update_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_update_set_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3293
            self.match(plsqlParser.SET)
            self.state = 3309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.state = 3294
                self.column_based_update_set_clause()
                self.state = 3299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 3295
                    self.match(plsqlParser.COMMA)
                    self.state = 3296
                    self.column_based_update_set_clause()
                    self.state = 3301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3302
                self.match(plsqlParser.VALUE)
                self.state = 3303
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3304
                self.r_id()
                self.state = 3305
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 3306
                self.match(plsqlParser.EQUALS_OP)
                self.state = 3307
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_based_update_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_column_based_update_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_based_update_set_clause" ):
                listener.enterColumn_based_update_set_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_based_update_set_clause" ):
                listener.exitColumn_based_update_set_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_based_update_set_clause" ):
                return visitor.visitColumn_based_update_set_clause(self)
            else:
                return visitor.visitChildren(self)




    def column_based_update_set_clause(self):

        localctx = plsqlParser.Column_based_update_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_column_based_update_set_clause)
        self._la = 0 # Token type
        try:
            self.state = 3328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3311
                self.column_name()
                self.state = 3312
                self.match(plsqlParser.EQUALS_OP)
                self.state = 3313
                self.expression(0)
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3315
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3316
                self.column_name()
                self.state = 3321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 3317
                    self.match(plsqlParser.COMMA)
                    self.state = 3318
                    self.column_name()
                    self.state = 3323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3324
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 3325
                self.match(plsqlParser.EQUALS_OP)
                self.state = 3326
                self.subquery(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(plsqlParser.General_table_refContext,0)


        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)

        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(plsqlParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement" ):
                return visitor.visitDelete_statement(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement(self):

        localctx = plsqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3330
            self.match(plsqlParser.DELETE)
            self.state = 3332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FROM:
                self.state = 3331
                self.match(plsqlParser.FROM)


            self.state = 3334
            self.general_table_ref()
            self.state = 3336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHERE:
                self.state = 3335
                self.where_clause()


            self.state = 3339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.RETURN or _la==plsqlParser.RETURNING:
                self.state = 3338
                self.static_returning_clause()


            self.state = 3342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 3341
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(plsqlParser.INSERT, 0)

        def single_table_insert(self):
            return self.getTypedRuleContext(plsqlParser.Single_table_insertContext,0)


        def multi_table_insert(self):
            return self.getTypedRuleContext(plsqlParser.Multi_table_insertContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement" ):
                return visitor.visitInsert_statement(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement(self):

        localctx = plsqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_insert_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3344
            self.match(plsqlParser.INSERT)
            self.state = 3347
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INTO]:
                self.state = 3345
                self.single_table_insert()
                pass
            elif token in [plsqlParser.ALL, plsqlParser.FIRST, plsqlParser.WHEN]:
                self.state = 3346
                self.multi_table_insert()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_table_insertContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Insert_into_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(plsqlParser.Values_clauseContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(plsqlParser.Static_returning_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_single_table_insert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_table_insert" ):
                listener.enterSingle_table_insert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_table_insert" ):
                listener.exitSingle_table_insert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_table_insert" ):
                return visitor.visitSingle_table_insert(self)
            else:
                return visitor.visitChildren(self)




    def single_table_insert(self):

        localctx = plsqlParser.Single_table_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_single_table_insert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3349
            self.insert_into_clause()
            self.state = 3355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.VALUES]:
                self.state = 3350
                self.values_clause()
                self.state = 3352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.RETURN or _la==plsqlParser.RETURNING:
                    self.state = 3351
                    self.static_returning_clause()


                pass
            elif token in [plsqlParser.SELECT, plsqlParser.WITH, plsqlParser.LEFT_PAREN]:
                self.state = 3354
                self.select_statement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 3357
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multi_table_insertContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def conditional_insert_clause(self):
            return self.getTypedRuleContext(plsqlParser.Conditional_insert_clauseContext,0)


        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_multi_table_insert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_table_insert" ):
                listener.enterMulti_table_insert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_table_insert" ):
                listener.exitMulti_table_insert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_table_insert" ):
                return visitor.visitMulti_table_insert(self)
            else:
                return visitor.visitChildren(self)




    def multi_table_insert(self):

        localctx = plsqlParser.Multi_table_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_multi_table_insert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
            if la_ == 1:
                self.state = 3360
                self.match(plsqlParser.ALL)
                self.state = 3362 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3361
                    self.multi_table_element()
                    self.state = 3364 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==plsqlParser.INTO):
                        break

                pass

            elif la_ == 2:
                self.state = 3366
                self.conditional_insert_clause()
                pass


            self.state = 3369
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multi_table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Insert_into_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(plsqlParser.Values_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_multi_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_table_element" ):
                listener.enterMulti_table_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_table_element" ):
                listener.exitMulti_table_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_table_element" ):
                return visitor.visitMulti_table_element(self)
            else:
                return visitor.visitChildren(self)




    def multi_table_element(self):

        localctx = plsqlParser.Multi_table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_multi_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3371
            self.insert_into_clause()
            self.state = 3373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.VALUES:
                self.state = 3372
                self.values_clause()


            self.state = 3376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 3375
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_insert_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_insert_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Conditional_insert_when_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Conditional_insert_when_partContext,i)


        def conditional_insert_else_part(self):
            return self.getTypedRuleContext(plsqlParser.Conditional_insert_else_partContext,0)


        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def FIRST(self):
            return self.getToken(plsqlParser.FIRST, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_conditional_insert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_clause" ):
                listener.enterConditional_insert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_clause" ):
                listener.exitConditional_insert_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_clause" ):
                return visitor.visitConditional_insert_clause(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_clause(self):

        localctx = plsqlParser.Conditional_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_conditional_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ALL or _la==plsqlParser.FIRST:
                self.state = 3378
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ALL or _la==plsqlParser.FIRST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3382 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3381
                self.conditional_insert_when_part()
                self.state = 3384 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.WHEN):
                    break

            self.state = 3387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELSE:
                self.state = 3386
                self.conditional_insert_else_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_insert_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_conditional_insert_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_when_part" ):
                listener.enterConditional_insert_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_when_part" ):
                listener.exitConditional_insert_when_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_when_part" ):
                return visitor.visitConditional_insert_when_part(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_when_part(self):

        localctx = plsqlParser.Conditional_insert_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_conditional_insert_when_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3389
            self.match(plsqlParser.WHEN)
            self.state = 3390
            self.condition()
            self.state = 3391
            self.match(plsqlParser.THEN)
            self.state = 3393 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3392
                self.multi_table_element()
                self.state = 3395 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.INTO):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_insert_else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(plsqlParser.ELSE, 0)

        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_conditional_insert_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_else_part" ):
                listener.enterConditional_insert_else_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_else_part" ):
                listener.exitConditional_insert_else_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_else_part" ):
                return visitor.visitConditional_insert_else_part(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_else_part(self):

        localctx = plsqlParser.Conditional_insert_else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_conditional_insert_else_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3397
            self.match(plsqlParser.ELSE)
            self.state = 3399 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3398
                self.multi_table_element()
                self.state = 3401 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.INTO):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(plsqlParser.General_table_refContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(plsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_insert_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_into_clause" ):
                listener.enterInsert_into_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_into_clause" ):
                listener.exitInsert_into_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_into_clause" ):
                return visitor.visitInsert_into_clause(self)
            else:
                return visitor.visitChildren(self)




    def insert_into_clause(self):

        localctx = plsqlParser.Insert_into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_insert_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3403
            self.match(plsqlParser.INTO)
            self.state = 3404
            self.general_table_ref()
            self.state = 3406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
            if la_ == 1:
                self.state = 3405
                self.column_name_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Values_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_values_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_clause" ):
                listener.enterValues_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_clause" ):
                listener.exitValues_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValues_clause" ):
                return visitor.visitValues_clause(self)
            else:
                return visitor.visitChildren(self)




    def values_clause(self):

        localctx = plsqlParser.Values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_values_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3408
            self.match(plsqlParser.VALUES)
            self.state = 3409
            self.expression_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(plsqlParser.MERGE, 0)

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def selected_tableview(self):
            return self.getTypedRuleContext(plsqlParser.Selected_tableviewContext,0)


        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def condition(self):
            return self.getTypedRuleContext(plsqlParser.ConditionContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def merge_update_clause(self):
            return self.getTypedRuleContext(plsqlParser.Merge_update_clauseContext,0)


        def merge_insert_clause(self):
            return self.getTypedRuleContext(plsqlParser.Merge_insert_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_statement" ):
                listener.enterMerge_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_statement" ):
                listener.exitMerge_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_statement" ):
                return visitor.visitMerge_statement(self)
            else:
                return visitor.visitChildren(self)




    def merge_statement(self):

        localctx = plsqlParser.Merge_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_merge_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3411
            self.match(plsqlParser.MERGE)
            self.state = 3412
            self.match(plsqlParser.INTO)
            self.state = 3413
            self.tableview_name()
            self.state = 3415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 449)) | (1 << (plsqlParser.CHAR_STRING - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 3414
                self.table_alias()


            self.state = 3417
            self.match(plsqlParser.USING)
            self.state = 3418
            self.selected_tableview()
            self.state = 3419
            self.match(plsqlParser.ON)
            self.state = 3420
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3421
            self.condition()
            self.state = 3422
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 3431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
            if la_ == 1:
                self.state = 3423
                self.merge_update_clause()
                self.state = 3425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.WHEN:
                    self.state = 3424
                    self.merge_insert_clause()



            elif la_ == 2:
                self.state = 3427
                self.merge_insert_clause()
                self.state = 3429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.WHEN:
                    self.state = 3428
                    self.merge_update_clause()




            self.state = 3434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LOG:
                self.state = 3433
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_update_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(plsqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def merge_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Merge_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Merge_elementContext,i)


        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def merge_update_delete_part(self):
            return self.getTypedRuleContext(plsqlParser.Merge_update_delete_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_update_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_clause" ):
                listener.enterMerge_update_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_clause" ):
                listener.exitMerge_update_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_update_clause" ):
                return visitor.visitMerge_update_clause(self)
            else:
                return visitor.visitChildren(self)




    def merge_update_clause(self):

        localctx = plsqlParser.Merge_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_merge_update_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3436
            self.match(plsqlParser.WHEN)
            self.state = 3437
            self.match(plsqlParser.MATCHED)
            self.state = 3438
            self.match(plsqlParser.THEN)
            self.state = 3439
            self.match(plsqlParser.UPDATE)
            self.state = 3440
            self.match(plsqlParser.SET)
            self.state = 3441
            self.merge_element()
            self.state = 3446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 3442
                self.match(plsqlParser.COMMA)
                self.state = 3443
                self.merge_element()
                self.state = 3448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHERE:
                self.state = 3449
                self.where_clause()


            self.state = 3453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.state = 3452
                self.merge_update_delete_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_element" ):
                listener.enterMerge_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_element" ):
                listener.exitMerge_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_element" ):
                return visitor.visitMerge_element(self)
            else:
                return visitor.visitChildren(self)




    def merge_element(self):

        localctx = plsqlParser.Merge_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_merge_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3455
            self.column_name()
            self.state = 3456
            self.match(plsqlParser.EQUALS_OP)
            self.state = 3457
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_update_delete_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(plsqlParser.DELETE, 0)

        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_update_delete_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_delete_part" ):
                listener.enterMerge_update_delete_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_delete_part" ):
                listener.exitMerge_update_delete_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_update_delete_part" ):
                return visitor.visitMerge_update_delete_part(self)
            else:
                return visitor.visitChildren(self)




    def merge_update_delete_part(self):

        localctx = plsqlParser.Merge_update_delete_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_merge_update_delete_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3459
            self.match(plsqlParser.DELETE)
            self.state = 3460
            self.where_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_insert_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(plsqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def INSERT(self):
            return self.getToken(plsqlParser.INSERT, 0)

        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(plsqlParser.Column_name_listContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(plsqlParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_merge_insert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_insert_clause" ):
                listener.enterMerge_insert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_insert_clause" ):
                listener.exitMerge_insert_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_insert_clause" ):
                return visitor.visitMerge_insert_clause(self)
            else:
                return visitor.visitChildren(self)




    def merge_insert_clause(self):

        localctx = plsqlParser.Merge_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_merge_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3462
            self.match(plsqlParser.WHEN)
            self.state = 3463
            self.match(plsqlParser.NOT)
            self.state = 3464
            self.match(plsqlParser.MATCHED)
            self.state = 3465
            self.match(plsqlParser.THEN)
            self.state = 3466
            self.match(plsqlParser.INSERT)
            self.state = 3468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.LEFT_PAREN:
                self.state = 3467
                self.column_name_list()


            self.state = 3470
            self.match(plsqlParser.VALUES)
            self.state = 3471
            self.expression_list()
            self.state = 3473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.WHERE:
                self.state = 3472
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selected_tableviewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_selected_tableview

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_tableview" ):
                listener.enterSelected_tableview(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_tableview" ):
                listener.exitSelected_tableview(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelected_tableview" ):
                return visitor.visitSelected_tableview(self)
            else:
                return visitor.visitChildren(self)




    def selected_tableview(self):

        localctx = plsqlParser.Selected_tableviewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_selected_tableview)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3480
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 3475
                self.tableview_name()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 3476
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3477
                self.select_statement()
                self.state = 3478
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 449)) | (1 << (plsqlParser.CHAR_STRING - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 3482
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_table_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(plsqlParser.LOCK, 0)

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def lock_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Lock_table_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Lock_table_elementContext,i)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def lock_mode(self):
            return self.getTypedRuleContext(plsqlParser.Lock_modeContext,0)


        def MODE(self):
            return self.getToken(plsqlParser.MODE, 0)

        def wait_nowait_part(self):
            return self.getTypedRuleContext(plsqlParser.Wait_nowait_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lock_table_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_table_statement" ):
                listener.enterLock_table_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_table_statement" ):
                listener.exitLock_table_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_table_statement" ):
                return visitor.visitLock_table_statement(self)
            else:
                return visitor.visitChildren(self)




    def lock_table_statement(self):

        localctx = plsqlParser.Lock_table_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_lock_table_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3485
            self.match(plsqlParser.LOCK)
            self.state = 3486
            self.match(plsqlParser.TABLE)
            self.state = 3487
            self.lock_table_element()
            self.state = 3492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 3488
                self.match(plsqlParser.COMMA)
                self.state = 3489
                self.lock_table_element()
                self.state = 3494
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3495
            self.match(plsqlParser.IN)
            self.state = 3496
            self.lock_mode()
            self.state = 3497
            self.match(plsqlParser.MODE)
            self.state = 3499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOWAIT or _la==plsqlParser.WAIT:
                self.state = 3498
                self.wait_nowait_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wait_nowait_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(plsqlParser.WAIT, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def NOWAIT(self):
            return self.getToken(plsqlParser.NOWAIT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_wait_nowait_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_nowait_part" ):
                listener.enterWait_nowait_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_nowait_part" ):
                listener.exitWait_nowait_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWait_nowait_part" ):
                return visitor.visitWait_nowait_part(self)
            else:
                return visitor.visitChildren(self)




    def wait_nowait_part(self):

        localctx = plsqlParser.Wait_nowait_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_wait_nowait_part)
        try:
            self.state = 3504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.WAIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3501
                self.match(plsqlParser.WAIT)
                self.state = 3502
                self.expression(0)
                pass
            elif token in [plsqlParser.NOWAIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3503
                self.match(plsqlParser.NOWAIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def partition_extension_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partition_extension_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_lock_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_table_element" ):
                listener.enterLock_table_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_table_element" ):
                listener.exitLock_table_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_table_element" ):
                return visitor.visitLock_table_element(self)
            else:
                return visitor.visitChildren(self)




    def lock_table_element(self):

        localctx = plsqlParser.Lock_table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_lock_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3506
            self.tableview_name()
            self.state = 3508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION or _la==plsqlParser.SUBPARTITION:
                self.state = 3507
                self.partition_extension_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_modeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(plsqlParser.ROW, 0)

        def SHARE(self):
            return self.getToken(plsqlParser.SHARE, 0)

        def EXCLUSIVE(self):
            return self.getToken(plsqlParser.EXCLUSIVE, 0)

        def UPDATE(self):
            return self.getToken(plsqlParser.UPDATE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_lock_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_mode" ):
                listener.enterLock_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_mode" ):
                listener.exitLock_mode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_mode" ):
                return visitor.visitLock_mode(self)
            else:
                return visitor.visitChildren(self)




    def lock_mode(self):

        localctx = plsqlParser.Lock_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_lock_mode)
        self._la = 0 # Token type
        try:
            self.state = 3522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3510
                self.match(plsqlParser.ROW)
                self.state = 3511
                self.match(plsqlParser.SHARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3512
                self.match(plsqlParser.ROW)
                self.state = 3513
                self.match(plsqlParser.EXCLUSIVE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3514
                self.match(plsqlParser.SHARE)
                self.state = 3516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.UPDATE:
                    self.state = 3515
                    self.match(plsqlParser.UPDATE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3518
                self.match(plsqlParser.SHARE)
                self.state = 3519
                self.match(plsqlParser.ROW)
                self.state = 3520
                self.match(plsqlParser.EXCLUSIVE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3521
                self.match(plsqlParser.EXCLUSIVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class General_table_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(plsqlParser.Dml_table_expression_clauseContext,0)


        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def table_alias(self):
            return self.getTypedRuleContext(plsqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_general_table_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_table_ref" ):
                listener.enterGeneral_table_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_table_ref" ):
                listener.exitGeneral_table_ref(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_table_ref" ):
                return visitor.visitGeneral_table_ref(self)
            else:
                return visitor.visitChildren(self)




    def general_table_ref(self):

        localctx = plsqlParser.General_table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_general_table_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
            if la_ == 1:
                self.state = 3524
                self.dml_table_expression_clause()
                pass

            elif la_ == 2:
                self.state = 3525
                self.match(plsqlParser.ONLY)
                self.state = 3526
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3527
                self.dml_table_expression_clause()
                self.state = 3528
                self.match(plsqlParser.RIGHT_PAREN)
                pass


            self.state = 3533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.state = 3532
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def into_clause(self):
            return self.getTypedRuleContext(plsqlParser.Into_clauseContext,0)


        def RETURNING(self):
            return self.getToken(plsqlParser.RETURNING, 0)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_static_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_returning_clause" ):
                listener.enterStatic_returning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_returning_clause" ):
                listener.exitStatic_returning_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatic_returning_clause" ):
                return visitor.visitStatic_returning_clause(self)
            else:
                return visitor.visitChildren(self)




    def static_returning_clause(self):

        localctx = plsqlParser.Static_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_static_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3535
            _la = self._input.LA(1)
            if not(_la==plsqlParser.RETURN or _la==plsqlParser.RETURNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3536
            self.expression(0)
            self.state = 3541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 3537
                self.match(plsqlParser.COMMA)
                self.state = 3538
                self.expression(0)
                self.state = 3543
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3544
            self.into_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_logging_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(plsqlParser.LOG, 0)

        def ERRORS(self):
            return self.getToken(plsqlParser.ERRORS, 0)

        def error_logging_into_part(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_into_partContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def error_logging_reject_part(self):
            return self.getTypedRuleContext(plsqlParser.Error_logging_reject_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_error_logging_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_clause" ):
                listener.enterError_logging_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_clause" ):
                listener.exitError_logging_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_clause" ):
                return visitor.visitError_logging_clause(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_clause(self):

        localctx = plsqlParser.Error_logging_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_error_logging_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3546
            self.match(plsqlParser.LOG)
            self.state = 3547
            self.match(plsqlParser.ERRORS)
            self.state = 3549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
            if la_ == 1:
                self.state = 3548
                self.error_logging_into_part()


            self.state = 3552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.state = 3551
                self.expression(0)


            self.state = 3555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.REJECT:
                self.state = 3554
                self.error_logging_reject_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_logging_into_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_error_logging_into_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_into_part" ):
                listener.enterError_logging_into_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_into_part" ):
                listener.exitError_logging_into_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_into_part" ):
                return visitor.visitError_logging_into_part(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_into_part(self):

        localctx = plsqlParser.Error_logging_into_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_error_logging_into_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3557
            self.match(plsqlParser.INTO)
            self.state = 3558
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_logging_reject_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REJECT(self):
            return self.getToken(plsqlParser.REJECT, 0)

        def LIMIT(self):
            return self.getToken(plsqlParser.LIMIT, 0)

        def UNLIMITED(self):
            return self.getToken(plsqlParser.UNLIMITED, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_error_logging_reject_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_reject_part" ):
                listener.enterError_logging_reject_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_reject_part" ):
                listener.exitError_logging_reject_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_reject_part" ):
                return visitor.visitError_logging_reject_part(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_reject_part(self):

        localctx = plsqlParser.Error_logging_reject_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_error_logging_reject_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3560
            self.match(plsqlParser.REJECT)
            self.state = 3561
            self.match(plsqlParser.LIMIT)
            self.state = 3564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.state = 3562
                self.match(plsqlParser.UNLIMITED)
                pass

            elif la_ == 2:
                self.state = 3563
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_table_expression_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_collection_expression(self):
            return self.getTypedRuleContext(plsqlParser.Table_collection_expressionContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(plsqlParser.Select_statementContext,0)


        def subquery_restriction_clause(self):
            return self.getTypedRuleContext(plsqlParser.Subquery_restriction_clauseContext,0)


        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def sample_clause(self):
            return self.getTypedRuleContext(plsqlParser.Sample_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_dml_table_expression_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_table_expression_clause" ):
                listener.enterDml_table_expression_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_table_expression_clause" ):
                listener.exitDml_table_expression_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_table_expression_clause" ):
                return visitor.visitDml_table_expression_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_table_expression_clause(self):

        localctx = plsqlParser.Dml_table_expression_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_dml_table_expression_clause)
        self._la = 0 # Token type
        try:
            self.state = 3578
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.TABLE, plsqlParser.THE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3566
                self.table_collection_expression()
                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3567
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3568
                self.select_statement()
                self.state = 3570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.WITH:
                    self.state = 3569
                    self.subquery_restriction_clause()


                self.state = 3572
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3574
                self.tableview_name()
                self.state = 3576
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
                if la_ == 1:
                    self.state = 3575
                    self.sample_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_collection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(plsqlParser.TABLE, 0)

        def THE(self):
            return self.getToken(plsqlParser.THE, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_collection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_collection_expression" ):
                listener.enterTable_collection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_collection_expression" ):
                listener.exitTable_collection_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_collection_expression" ):
                return visitor.visitTable_collection_expression(self)
            else:
                return visitor.visitChildren(self)




    def table_collection_expression(self):

        localctx = plsqlParser.Table_collection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_table_collection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3580
            _la = self._input.LA(1)
            if not(_la==plsqlParser.TABLE or _la==plsqlParser.THE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
            if la_ == 1:
                self.state = 3581
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3582
                self.subquery(0)
                self.state = 3583
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 3585
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3586
                self.expression(0)
                self.state = 3587
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 3591
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
                if la_ == 1:
                    self.state = 3588
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 3589
                    self.match(plsqlParser.PLUS_SIGN)
                    self.state = 3590
                    self.match(plsqlParser.RIGHT_PAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subquery_restriction_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def READ(self):
            return self.getToken(plsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def CHECK(self):
            return self.getToken(plsqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(plsqlParser.OPTION, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(plsqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_subquery_restriction_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_restriction_clause" ):
                listener.enterSubquery_restriction_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_restriction_clause" ):
                listener.exitSubquery_restriction_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_restriction_clause" ):
                return visitor.visitSubquery_restriction_clause(self)
            else:
                return visitor.visitChildren(self)




    def subquery_restriction_clause(self):

        localctx = plsqlParser.Subquery_restriction_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_subquery_restriction_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3595
            self.match(plsqlParser.WITH)
            self.state = 3604
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.READ]:
                self.state = 3596
                self.match(plsqlParser.READ)
                self.state = 3597
                self.match(plsqlParser.ONLY)
                pass
            elif token in [plsqlParser.CHECK]:
                self.state = 3598
                self.match(plsqlParser.CHECK)
                self.state = 3599
                self.match(plsqlParser.OPTION)
                self.state = 3602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CONSTRAINT:
                    self.state = 3600
                    self.match(plsqlParser.CONSTRAINT)
                    self.state = 3601
                    self.constraint_name()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sample_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(plsqlParser.SAMPLE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def BLOCK(self):
            return self.getToken(plsqlParser.BLOCK, 0)

        def seed_part(self):
            return self.getTypedRuleContext(plsqlParser.Seed_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_sample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_clause" ):
                listener.enterSample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_clause" ):
                listener.exitSample_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample_clause" ):
                return visitor.visitSample_clause(self)
            else:
                return visitor.visitChildren(self)




    def sample_clause(self):

        localctx = plsqlParser.Sample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_sample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3606
            self.match(plsqlParser.SAMPLE)
            self.state = 3608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BLOCK:
                self.state = 3607
                self.match(plsqlParser.BLOCK)


            self.state = 3610
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3611
            self.expression(0)
            self.state = 3614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMMA:
                self.state = 3612
                self.match(plsqlParser.COMMA)
                self.state = 3613
                self.expression(0)


            self.state = 3616
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 3618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                self.state = 3617
                self.seed_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Seed_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEED(self):
            return self.getToken(plsqlParser.SEED, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_seed_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeed_part" ):
                listener.enterSeed_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeed_part" ):
                listener.exitSeed_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeed_part" ):
                return visitor.visitSeed_part(self)
            else:
                return visitor.visitChildren(self)




    def seed_part(self):

        localctx = plsqlParser.Seed_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_seed_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3620
            self.match(plsqlParser.SEED)
            self.state = 3621
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3622
            self.expression(0)
            self.state = 3623
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_expression" ):
                listener.enterCursor_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_expression" ):
                listener.exitCursor_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_expression" ):
                return visitor.visitCursor_expression(self)
            else:
                return visitor.visitChildren(self)




    def cursor_expression(self):

        localctx = plsqlParser.Cursor_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_cursor_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3625
            self.match(plsqlParser.CURSOR)
            self.state = 3626
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3627
            self.subquery(0)
            self.state = 3628
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_list" ):
                return visitor.visitExpression_list(self)
            else:
                return visitor.visitChildren(self)




    def expression_list(self):

        localctx = plsqlParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3630
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)) | (1 << (plsqlParser.DEFINER - 64)) | (1 << (plsqlParser.DETERMINISTIC - 64)) | (1 << (plsqlParser.DIMENSION - 64)) | (1 << (plsqlParser.DISABLE - 64)) | (1 << (plsqlParser.DISASSOCIATE - 64)) | (1 << (plsqlParser.DISTINCT - 64)) | (1 << (plsqlParser.DOCUMENT - 64)) | (1 << (plsqlParser.DOUBLE - 64)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (plsqlParser.EACH - 64)) | (1 << (plsqlParser.ELEMENT - 64)) | (1 << (plsqlParser.EMPTY - 64)) | (1 << (plsqlParser.ENABLE - 64)) | (1 << (plsqlParser.ENCODING - 64)) | (1 << (plsqlParser.ENTITYESCAPING - 64)) | (1 << (plsqlParser.ERR - 64)) | (1 << (plsqlParser.ERRORS - 64)) | (1 << (plsqlParser.ESCAPE - 64)) | (1 << (plsqlParser.EVALNAME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)) | (1 << (plsqlParser.GROUPING - 128)) | (1 << (plsqlParser.HASH - 128)) | (1 << (plsqlParser.HIDE - 128)) | (1 << (plsqlParser.HOUR - 128)) | (1 << (plsqlParser.IGNORE - 128)) | (1 << (plsqlParser.IMMEDIATE - 128)) | (1 << (plsqlParser.INCLUDE - 128)) | (1 << (plsqlParser.INCLUDING - 128)) | (1 << (plsqlParser.INCREMENT - 128)) | (1 << (plsqlParser.INDENT - 128)) | (1 << (plsqlParser.INDEXED - 128)) | (1 << (plsqlParser.INDICATOR - 128)) | (1 << (plsqlParser.INDICES - 128)) | (1 << (plsqlParser.INFINITE - 128)) | (1 << (plsqlParser.INLINE - 128)) | (1 << (plsqlParser.INNER - 128)) | (1 << (plsqlParser.INOUT - 128)) | (1 << (plsqlParser.INSTANTIABLE - 128)) | (1 << (plsqlParser.INSTEAD - 128)) | (1 << (plsqlParser.INT - 128)) | (1 << (plsqlParser.INTEGER - 128)) | (1 << (plsqlParser.INTERVAL - 128)) | (1 << (plsqlParser.INVALIDATE - 128)) | (1 << (plsqlParser.ISOLATION - 128)) | (1 << (plsqlParser.ITERATE - 128)) | (1 << (plsqlParser.JAVA - 128)) | (1 << (plsqlParser.JOIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (plsqlParser.KEEP - 192)) | (1 << (plsqlParser.LANGUAGE - 192)) | (1 << (plsqlParser.LAST - 192)) | (1 << (plsqlParser.LAST_VALUE - 192)) | (1 << (plsqlParser.LEADING - 192)) | (1 << (plsqlParser.LEFT - 192)) | (1 << (plsqlParser.LEVEL - 192)) | (1 << (plsqlParser.LIBRARY - 192)) | (1 << (plsqlParser.LIKE2 - 192)) | (1 << (plsqlParser.LIKE4 - 192)) | (1 << (plsqlParser.LIKEC - 192)) | (1 << (plsqlParser.LIMIT - 192)) | (1 << (plsqlParser.LOCAL - 192)) | (1 << (plsqlParser.LOCKED - 192)) | (1 << (plsqlParser.LOG - 192)) | (1 << (plsqlParser.LOGOFF - 192)) | (1 << (plsqlParser.LOGON - 192)) | (1 << (plsqlParser.LONG - 192)) | (1 << (plsqlParser.LOOP - 192)) | (1 << (plsqlParser.MAIN - 192)) | (1 << (plsqlParser.MAP - 192)) | (1 << (plsqlParser.MATCHED - 192)) | (1 << (plsqlParser.MAXVALUE - 192)) | (1 << (plsqlParser.MEASURES - 192)) | (1 << (plsqlParser.MEMBER - 192)) | (1 << (plsqlParser.MERGE - 192)) | (1 << (plsqlParser.MINUTE - 192)) | (1 << (plsqlParser.MINVALUE - 192)) | (1 << (plsqlParser.MLSLABEL - 192)) | (1 << (plsqlParser.MODEL - 192)) | (1 << (plsqlParser.MODIFY - 192)) | (1 << (plsqlParser.MONTH - 192)) | (1 << (plsqlParser.MULTISET - 192)) | (1 << (plsqlParser.NAME - 192)) | (1 << (plsqlParser.NAN - 192)) | (1 << (plsqlParser.NATURAL - 192)) | (1 << (plsqlParser.NATURALN - 192)) | (1 << (plsqlParser.NAV - 192)) | (1 << (plsqlParser.NCHAR - 192)) | (1 << (plsqlParser.NCHAR_CS - 192)) | (1 << (plsqlParser.NCLOB - 192)) | (1 << (plsqlParser.NESTED - 192)) | (1 << (plsqlParser.NEW - 192)) | (1 << (plsqlParser.NO - 192)) | (1 << (plsqlParser.NOAUDIT - 192)) | (1 << (plsqlParser.NOCOPY - 192)) | (1 << (plsqlParser.NOCYCLE - 192)) | (1 << (plsqlParser.NOENTITYESCAPING - 192)) | (1 << (plsqlParser.NONE - 192)) | (1 << (plsqlParser.NOSCHEMACHECK - 192)) | (1 << (plsqlParser.NOT - 192)) | (1 << (plsqlParser.NULL - 192)) | (1 << (plsqlParser.NULLS - 192)) | (1 << (plsqlParser.NUMBER - 192)) | (1 << (plsqlParser.NUMERIC - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (plsqlParser.NVARCHAR2 - 256)) | (1 << (plsqlParser.OBJECT - 256)) | (1 << (plsqlParser.OFF - 256)) | (1 << (plsqlParser.OID - 256)) | (1 << (plsqlParser.OLD - 256)) | (1 << (plsqlParser.ONLY - 256)) | (1 << (plsqlParser.OPEN - 256)) | (1 << (plsqlParser.ORADATA - 256)) | (1 << (plsqlParser.ORDINALITY - 256)) | (1 << (plsqlParser.OSERROR - 256)) | (1 << (plsqlParser.OUT - 256)) | (1 << (plsqlParser.OUTER - 256)) | (1 << (plsqlParser.OVER - 256)) | (1 << (plsqlParser.OVERRIDING - 256)) | (1 << (plsqlParser.PACKAGE - 256)) | (1 << (plsqlParser.PARALLEL_ENABLE - 256)) | (1 << (plsqlParser.PARAMETERS - 256)) | (1 << (plsqlParser.PARENT - 256)) | (1 << (plsqlParser.PARTITION - 256)) | (1 << (plsqlParser.PASSING - 256)) | (1 << (plsqlParser.PATH - 256)) | (1 << (plsqlParser.PIPELINED - 256)) | (1 << (plsqlParser.PLAN - 256)) | (1 << (plsqlParser.PLS_INTEGER - 256)) | (1 << (plsqlParser.POSITIVE - 256)) | (1 << (plsqlParser.POSITIVEN - 256)) | (1 << (plsqlParser.PRAGMA - 256)) | (1 << (plsqlParser.PRECEDING - 256)) | (1 << (plsqlParser.PRECISION - 256)) | (1 << (plsqlParser.PRESENT - 256)) | (1 << (plsqlParser.PRIOR - 256)) | (1 << (plsqlParser.RAISE - 256)) | (1 << (plsqlParser.RANGE - 256)) | (1 << (plsqlParser.RAW - 256)) | (1 << (plsqlParser.READ - 256)) | (1 << (plsqlParser.REAL - 256)) | (1 << (plsqlParser.RECORD - 256)) | (1 << (plsqlParser.REF - 256)) | (1 << (plsqlParser.REFERENCE - 256)) | (1 << (plsqlParser.REFERENCING - 256)) | (1 << (plsqlParser.REJECT - 256)) | (1 << (plsqlParser.RELIES_ON - 256)) | (1 << (plsqlParser.RENAME - 256)) | (1 << (plsqlParser.REPLACE - 256)) | (1 << (plsqlParser.RESPECT - 256)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 256)) | (1 << (plsqlParser.RESULT - 256)) | (1 << (plsqlParser.RESULT_CACHE - 256)) | (1 << (plsqlParser.RETURN - 256)) | (1 << (plsqlParser.RETURNING - 256)) | (1 << (plsqlParser.REUSE - 256)) | (1 << (plsqlParser.REVERSE - 256)) | (1 << (plsqlParser.RIGHT - 256)) | (1 << (plsqlParser.ROLLBACK - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (plsqlParser.ROLLUP - 320)) | (1 << (plsqlParser.ROW - 320)) | (1 << (plsqlParser.ROWID - 320)) | (1 << (plsqlParser.ROWS - 320)) | (1 << (plsqlParser.RULES - 320)) | (1 << (plsqlParser.SAMPLE - 320)) | (1 << (plsqlParser.SAVE - 320)) | (1 << (plsqlParser.SAVEPOINT - 320)) | (1 << (plsqlParser.SCHEMA - 320)) | (1 << (plsqlParser.SCHEMACHECK - 320)) | (1 << (plsqlParser.SCN - 320)) | (1 << (plsqlParser.SECOND - 320)) | (1 << (plsqlParser.SEED - 320)) | (1 << (plsqlParser.SEGMENT - 320)) | (1 << (plsqlParser.SELF - 320)) | (1 << (plsqlParser.SEQUENTIAL - 320)) | (1 << (plsqlParser.SERIALIZABLE - 320)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 320)) | (1 << (plsqlParser.SERVERERROR - 320)) | (1 << (plsqlParser.SESSIONTIMEZONE - 320)) | (1 << (plsqlParser.SET - 320)) | (1 << (plsqlParser.SETS - 320)) | (1 << (plsqlParser.SETTINGS - 320)) | (1 << (plsqlParser.SHOW - 320)) | (1 << (plsqlParser.SHUTDOWN - 320)) | (1 << (plsqlParser.SIBLINGS - 320)) | (1 << (plsqlParser.SIGNTYPE - 320)) | (1 << (plsqlParser.SIMPLE_INTEGER - 320)) | (1 << (plsqlParser.SINGLE - 320)) | (1 << (plsqlParser.SIZE - 320)) | (1 << (plsqlParser.SKIP_ - 320)) | (1 << (plsqlParser.SMALLINT - 320)) | (1 << (plsqlParser.SNAPSHOT - 320)) | (1 << (plsqlParser.SOME - 320)) | (1 << (plsqlParser.SPECIFICATION - 320)) | (1 << (plsqlParser.SQLDATA - 320)) | (1 << (plsqlParser.SQLERROR - 320)) | (1 << (plsqlParser.STANDALONE - 320)) | (1 << (plsqlParser.STARTUP - 320)) | (1 << (plsqlParser.STATEMENT - 320)) | (1 << (plsqlParser.STATEMENT_ID - 320)) | (1 << (plsqlParser.STATIC - 320)) | (1 << (plsqlParser.STATISTICS - 320)) | (1 << (plsqlParser.STRING - 320)) | (1 << (plsqlParser.SUBMULTISET - 320)) | (1 << (plsqlParser.SUBPARTITION - 320)) | (1 << (plsqlParser.SUBSTITUTABLE - 320)) | (1 << (plsqlParser.SUBTYPE - 320)) | (1 << (plsqlParser.SUCCESS - 320)) | (1 << (plsqlParser.SUSPEND - 320)) | (1 << (plsqlParser.TIME - 320)) | (1 << (plsqlParser.TIMESTAMP - 320)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMEZONE_ABBR - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (plsqlParser.TIMEZONE_HOUR - 384)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 384)) | (1 << (plsqlParser.TIMEZONE_REGION - 384)) | (1 << (plsqlParser.TRAILING - 384)) | (1 << (plsqlParser.TRANSACTION - 384)) | (1 << (plsqlParser.TRANSLATE - 384)) | (1 << (plsqlParser.TREAT - 384)) | (1 << (plsqlParser.TRIGGER - 384)) | (1 << (plsqlParser.TRIM - 384)) | (1 << (plsqlParser.TRUE - 384)) | (1 << (plsqlParser.TRUNCATE - 384)) | (1 << (plsqlParser.TYPE - 384)) | (1 << (plsqlParser.UNBOUNDED - 384)) | (1 << (plsqlParser.UNDER - 384)) | (1 << (plsqlParser.UNLIMITED - 384)) | (1 << (plsqlParser.UNTIL - 384)) | (1 << (plsqlParser.UPDATED - 384)) | (1 << (plsqlParser.UPSERT - 384)) | (1 << (plsqlParser.UROWID - 384)) | (1 << (plsqlParser.USE - 384)) | (1 << (plsqlParser.VALIDATE - 384)) | (1 << (plsqlParser.VALUE - 384)) | (1 << (plsqlParser.VARCHAR - 384)) | (1 << (plsqlParser.VARCHAR2 - 384)) | (1 << (plsqlParser.VARIABLE - 384)) | (1 << (plsqlParser.VARRAY - 384)) | (1 << (plsqlParser.VARYING - 384)) | (1 << (plsqlParser.VERSION - 384)) | (1 << (plsqlParser.VERSIONS - 384)) | (1 << (plsqlParser.WAIT - 384)) | (1 << (plsqlParser.WARNING - 384)) | (1 << (plsqlParser.WELLFORMED - 384)) | (1 << (plsqlParser.WHENEVER - 384)) | (1 << (plsqlParser.WHILE - 384)) | (1 << (plsqlParser.WITHIN - 384)) | (1 << (plsqlParser.WORK - 384)) | (1 << (plsqlParser.WRITE - 384)) | (1 << (plsqlParser.XML - 384)) | (1 << (plsqlParser.XMLAGG - 384)) | (1 << (plsqlParser.XMLATTRIBUTES - 384)) | (1 << (plsqlParser.XMLCAST - 384)) | (1 << (plsqlParser.XMLCOLATTVAL - 384)) | (1 << (plsqlParser.XMLELEMENT - 384)) | (1 << (plsqlParser.XMLEXISTS - 384)) | (1 << (plsqlParser.XMLFOREST - 384)) | (1 << (plsqlParser.XMLNAMESPACES - 384)) | (1 << (plsqlParser.XMLPARSE - 384)) | (1 << (plsqlParser.XMLPI - 384)) | (1 << (plsqlParser.XMLQUERY - 384)) | (1 << (plsqlParser.XMLROOT - 384)) | (1 << (plsqlParser.XMLSERIALIZE - 384)) | (1 << (plsqlParser.XMLTABLE - 384)) | (1 << (plsqlParser.YEAR - 384)) | (1 << (plsqlParser.YES - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (plsqlParser.ZONE - 448)) | (1 << (plsqlParser.PREDICTION - 448)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 448)) | (1 << (plsqlParser.PREDICTION_COST - 448)) | (1 << (plsqlParser.PREDICTION_DETAILS - 448)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (plsqlParser.PREDICTION_SET - 448)) | (1 << (plsqlParser.CUME_DIST - 448)) | (1 << (plsqlParser.DENSE_RANK - 448)) | (1 << (plsqlParser.LISTAGG - 448)) | (1 << (plsqlParser.PERCENT_RANK - 448)) | (1 << (plsqlParser.PERCENTILE_CONT - 448)) | (1 << (plsqlParser.PERCENTILE_DISC - 448)) | (1 << (plsqlParser.RANK - 448)) | (1 << (plsqlParser.AVG - 448)) | (1 << (plsqlParser.CORR - 448)) | (1 << (plsqlParser.LAG - 448)) | (1 << (plsqlParser.LEAD - 448)) | (1 << (plsqlParser.MAX - 448)) | (1 << (plsqlParser.MEDIAN - 448)) | (1 << (plsqlParser.MIN - 448)) | (1 << (plsqlParser.NTILE - 448)) | (1 << (plsqlParser.RATIO_TO_REPORT - 448)) | (1 << (plsqlParser.ROW_NUMBER - 448)) | (1 << (plsqlParser.SUM - 448)) | (1 << (plsqlParser.VARIANCE - 448)) | (1 << (plsqlParser.REGR_ - 448)) | (1 << (plsqlParser.STDDEV - 448)) | (1 << (plsqlParser.VAR_ - 448)) | (1 << (plsqlParser.COVAR_ - 448)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 448)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 448)) | (1 << (plsqlParser.CHAR_STRING - 448)) | (1 << (plsqlParser.DELIMITED_ID - 448)) | (1 << (plsqlParser.LEFT_PAREN - 448)) | (1 << (plsqlParser.PLUS_SIGN - 448)) | (1 << (plsqlParser.MINUS_SIGN - 448)) | (1 << (plsqlParser.BINDVAR - 448)) | (1 << (plsqlParser.COLON - 448)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 3631
                self.expression(0)


            self.state = 3638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 3634
                self.match(plsqlParser.COMMA)
                self.state = 3635
                self.expression(0)
                self.state = 3640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3641
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = plsqlParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3643
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IgnoreExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def binary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreExpr" ):
                listener.enterIgnoreExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreExpr" ):
                listener.exitIgnoreExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreExpr" ):
                return visitor.visitIgnoreExpr(self)
            else:
                return visitor.visitChildren(self)


    class AndExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(plsqlParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndExpr" ):
                return visitor.visitAndExpr(self)
            else:
                return visitor.visitChildren(self)


    class LikeExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Like_typeContext
            self._expression = None # ExpressionContext
            self.right = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def like_type(self):
            return self.getTypedRuleContext(plsqlParser.Like_typeContext,0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(plsqlParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeExpr" ):
                listener.enterLikeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeExpr" ):
                listener.exitLikeExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikeExpr" ):
                return visitor.visitLikeExpr(self)
            else:
                return visitor.visitChildren(self)


    class RelExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Relational_operatorContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def relational_operator(self):
            return self.getTypedRuleContext(plsqlParser.Relational_operatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelExpr" ):
                listener.enterRelExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelExpr" ):
                listener.exitRelExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelExpr" ):
                return visitor.visitRelExpr(self)
            else:
                return visitor.visitChildren(self)


    class MemberExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # Binary_expressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def binary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,0)

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)
        def SUBMULTISET(self):
            return self.getToken(plsqlParser.SUBMULTISET, 0)
        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberExpr" ):
                listener.enterMemberExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberExpr" ):
                listener.exitMemberExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberExpr" ):
                return visitor.visitMemberExpr(self)
            else:
                return visitor.visitChildren(self)


    class BetweenExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self._expression = None # ExpressionContext
            self.right = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def AND(self):
            return self.getToken(plsqlParser.AND, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def BETWEEN(self):
            return self.getToken(plsqlParser.BETWEEN, 0)
        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenExpr" ):
                listener.enterBetweenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenExpr" ):
                listener.exitBetweenExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetweenExpr" ):
                return visitor.visitBetweenExpr(self)
            else:
                return visitor.visitChildren(self)


    class CursorExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # Cursor_partContext
            self.copyFrom(ctx)

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)
        def cursor_part(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorExpr" ):
                listener.enterCursorExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorExpr" ):
                listener.exitCursorExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursorExpr" ):
                return visitor.visitCursorExpr(self)
            else:
                return visitor.visitChildren(self)


    class IsExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # Is_partContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def IS(self):
            return self.getToken(plsqlParser.IS, 0)
        def is_part(self):
            return self.getTypedRuleContext(plsqlParser.Is_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpr" ):
                listener.enterIsExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpr" ):
                listener.exitIsExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsExpr" ):
                return visitor.visitIsExpr(self)
            else:
                return visitor.visitChildren(self)


    class NotExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)
        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpr" ):
                listener.enterNotExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpr" ):
                listener.exitNotExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpr" ):
                return visitor.visitNotExpr(self)
            else:
                return visitor.visitChildren(self)


    class InExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)

        def IN(self):
            return self.getToken(plsqlParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)

        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInExpr" ):
                listener.enterInExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInExpr" ):
                listener.exitInExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInExpr" ):
                return visitor.visitInExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpr" ):
                listener.enterParenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpr" ):
                listener.exitParenExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpr" ):
                return visitor.visitParenExpr(self)
            else:
                return visitor.visitChildren(self)


    class OrExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def OR(self):
            return self.getToken(plsqlParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrExpr" ):
                return visitor.visitOrExpr(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 494
        self.enterRecursionRule(localctx, 494, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.CursorExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3646
                localctx.op = self.match(plsqlParser.CURSOR)
                self.state = 3647
                localctx.expr = self.cursor_part()
                pass

            elif la_ == 2:
                localctx = plsqlParser.NotExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3648
                localctx.op = self.match(plsqlParser.NOT)
                self.state = 3649
                localctx.expr = self.expression(5)
                pass

            elif la_ == 3:
                localctx = plsqlParser.IgnoreExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3650
                self.binary_expression(0)
                pass

            elif la_ == 4:
                localctx = plsqlParser.ParenExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3651
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3652
                self.expression(0)
                self.state = 3653
                self.match(plsqlParser.RIGHT_PAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3709
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,453,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3707
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
                    if la_ == 1:
                        localctx = plsqlParser.BetweenExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3657
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 3659
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.NOT:
                            self.state = 3658
                            self.match(plsqlParser.NOT)


                        self.state = 3661
                        localctx.op = self.match(plsqlParser.BETWEEN)
                        self.state = 3662
                        localctx._expression = self.expression(0)
                        localctx.right.append(localctx._expression)
                        self.state = 3663
                        self.match(plsqlParser.AND)
                        self.state = 3664
                        localctx._expression = self.expression(11)
                        localctx.right.append(localctx._expression)
                        pass

                    elif la_ == 2:
                        localctx = plsqlParser.RelExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3666
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 3667
                        localctx.op = self.relational_operator()
                        self.state = 3668
                        localctx.right = self.expression(9)
                        pass

                    elif la_ == 3:
                        localctx = plsqlParser.AndExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3670
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3671
                        localctx.op = self.match(plsqlParser.AND)
                        self.state = 3672
                        localctx.right = self.expression(5)
                        pass

                    elif la_ == 4:
                        localctx = plsqlParser.OrExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3673
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 3674
                        localctx.op = self.match(plsqlParser.OR)
                        self.state = 3675
                        localctx.right = self.expression(4)
                        pass

                    elif la_ == 5:
                        localctx = plsqlParser.IsExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3676
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 3677
                        localctx.op = self.match(plsqlParser.IS)
                        self.state = 3678
                        localctx.right = self.is_part()
                        pass

                    elif la_ == 6:
                        localctx = plsqlParser.InExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3679
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 3681
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.NOT:
                            self.state = 3680
                            self.match(plsqlParser.NOT)


                        self.state = 3683
                        localctx.op = self.match(plsqlParser.IN)
                        self.state = 3689
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
                        if la_ == 1:
                            self.state = 3684
                            self.match(plsqlParser.LEFT_PAREN)
                            self.state = 3685
                            self.subquery(0)
                            self.state = 3686
                            self.match(plsqlParser.RIGHT_PAREN)
                            pass

                        elif la_ == 2:
                            self.state = 3688
                            self.expression_list()
                            pass


                        pass

                    elif la_ == 7:
                        localctx = plsqlParser.LikeExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3691
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 3693
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.NOT:
                            self.state = 3692
                            self.match(plsqlParser.NOT)


                        self.state = 3695
                        localctx.op = self.like_type()
                        self.state = 3696
                        localctx._expression = self.expression(0)
                        localctx.right.append(localctx._expression)
                        self.state = 3699
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
                        if la_ == 1:
                            self.state = 3697
                            self.match(plsqlParser.ESCAPE)
                            self.state = 3698
                            localctx._expression = self.expression(0)
                            localctx.right.append(localctx._expression)


                        pass

                    elif la_ == 8:
                        localctx = plsqlParser.MemberExprContext(self, plsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3701
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 3702
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.MEMBER or _la==plsqlParser.SUBMULTISET):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3704
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==plsqlParser.OF:
                            self.state = 3703
                            self.match(plsqlParser.OF)


                        self.state = 3706
                        localctx.right = self.binary_expression(0)
                        pass

             
                self.state = 3711
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,453,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Is_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def NAN(self):
            return self.getToken(plsqlParser.NAN, 0)

        def PRESENT(self):
            return self.getToken(plsqlParser.PRESENT, 0)

        def INFINITE(self):
            return self.getToken(plsqlParser.INFINITE, 0)

        def A_LETTER(self):
            return self.getToken(plsqlParser.A_LETTER, 0)

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def EMPTY(self):
            return self.getToken(plsqlParser.EMPTY, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Type_specContext,i)


        def NOT(self):
            return self.getToken(plsqlParser.NOT, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_is_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_part" ):
                listener.enterIs_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_part" ):
                listener.exitIs_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIs_part" ):
                return visitor.visitIs_part(self)
            else:
                return visitor.visitChildren(self)




    def is_part(self):

        localctx = plsqlParser.Is_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_is_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.NOT:
                self.state = 3712
                self.match(plsqlParser.NOT)


            self.state = 3740
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NULL]:
                self.state = 3715
                self.match(plsqlParser.NULL)
                pass
            elif token in [plsqlParser.NAN]:
                self.state = 3716
                self.match(plsqlParser.NAN)
                pass
            elif token in [plsqlParser.PRESENT]:
                self.state = 3717
                self.match(plsqlParser.PRESENT)
                pass
            elif token in [plsqlParser.INFINITE]:
                self.state = 3718
                self.match(plsqlParser.INFINITE)
                pass
            elif token in [plsqlParser.A_LETTER]:
                self.state = 3719
                self.match(plsqlParser.A_LETTER)
                self.state = 3720
                self.match(plsqlParser.SET)
                pass
            elif token in [plsqlParser.EMPTY]:
                self.state = 3721
                self.match(plsqlParser.EMPTY)
                pass
            elif token in [plsqlParser.OF]:
                self.state = 3722
                self.match(plsqlParser.OF)
                self.state = 3724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.TYPE:
                    self.state = 3723
                    self.match(plsqlParser.TYPE)


                self.state = 3726
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3728
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
                if la_ == 1:
                    self.state = 3727
                    self.match(plsqlParser.ONLY)


                self.state = 3730
                self.type_spec()
                self.state = 3735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 3731
                    self.match(plsqlParser.COMMA)
                    self.state = 3732
                    self.type_spec()
                    self.state = 3737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3738
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_part" ):
                listener.enterCursor_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_part" ):
                listener.exitCursor_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_part" ):
                return visitor.visitCursor_part(self)
            else:
                return visitor.visitChildren(self)




    def cursor_part(self):

        localctx = plsqlParser.Cursor_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_cursor_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3742
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3743
            self.subquery(0)
            self.state = 3744
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multiset_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def SUBMULTISET(self):
            return self.getToken(plsqlParser.SUBMULTISET, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_multiset_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiset_type" ):
                listener.enterMultiset_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiset_type" ):
                listener.exitMultiset_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiset_type" ):
                return visitor.visitMultiset_type(self)
            else:
                return visitor.visitChildren(self)




    def multiset_type(self):

        localctx = plsqlParser.Multiset_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_multiset_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3746
            _la = self._input.LA(1)
            if not(_la==plsqlParser.MEMBER or _la==plsqlParser.SUBMULTISET):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relational_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_equal_op(self):
            return self.getTypedRuleContext(plsqlParser.Not_equal_opContext,0)


        def less_than_or_equals_op(self):
            return self.getTypedRuleContext(plsqlParser.Less_than_or_equals_opContext,0)


        def greater_than_or_equals_op(self):
            return self.getTypedRuleContext(plsqlParser.Greater_than_or_equals_opContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_relational_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_operator" ):
                listener.enterRelational_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_operator" ):
                listener.exitRelational_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_operator" ):
                return visitor.visitRelational_operator(self)
            else:
                return visitor.visitChildren(self)




    def relational_operator(self):

        localctx = plsqlParser.Relational_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_relational_operator)
        try:
            self.state = 3754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3748
                self.match(plsqlParser.EQUALS_OP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3749
                self.not_equal_op()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3750
                self.match(plsqlParser.LESS_THAN_OP)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3751
                self.match(plsqlParser.GREATER_THAN_OP)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3752
                self.less_than_or_equals_op()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3753
                self.greater_than_or_equals_op()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Like_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(plsqlParser.LIKE, 0)

        def LIKEC(self):
            return self.getToken(plsqlParser.LIKEC, 0)

        def LIKE2(self):
            return self.getToken(plsqlParser.LIKE2, 0)

        def LIKE4(self):
            return self.getToken(plsqlParser.LIKE4, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_like_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike_type" ):
                listener.enterLike_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike_type" ):
                listener.exitLike_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike_type" ):
                return visitor.visitLike_type(self)
            else:
                return visitor.visitChildren(self)




    def like_type(self):

        localctx = plsqlParser.Like_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_like_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3756
            _la = self._input.LA(1)
            if not(((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & ((1 << (plsqlParser.LIKE - 200)) | (1 << (plsqlParser.LIKE2 - 200)) | (1 << (plsqlParser.LIKE4 - 200)) | (1 << (plsqlParser.LIKEC - 200)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Like_escape_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ESCAPE(self):
            return self.getToken(plsqlParser.ESCAPE, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_like_escape_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike_escape_part" ):
                listener.enterLike_escape_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike_escape_part" ):
                listener.exitLike_escape_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike_escape_part" ):
                return visitor.visitLike_escape_part(self)
            else:
                return visitor.visitChildren(self)




    def like_escape_part(self):

        localctx = plsqlParser.Like_escape_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_like_escape_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3758
            self.match(plsqlParser.ESCAPE)
            self.state = 3759
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Between_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConcatenationContext,i)


        def AND(self):
            return self.getToken(plsqlParser.AND, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_between_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_elements" ):
                listener.enterBetween_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_elements" ):
                listener.exitBetween_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween_elements" ):
                return visitor.visitBetween_elements(self)
            else:
                return visitor.visitChildren(self)




    def between_elements(self):

        localctx = plsqlParser.Between_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_between_elements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3761
            self.concatenation()
            self.state = 3762
            self.match(plsqlParser.AND)
            self.state = 3763
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConcatenationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_concatenation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation" ):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)




    def concatenation(self):

        localctx = plsqlParser.ConcatenationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_concatenation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3765
            self.binary_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Binary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_binary_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class BinaryExprContext(Binary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Binary_expressionContext
            super().__init__(parser)
            self.left = None # Binary_expressionContext
            self.op = None # Token
            self.right = None # Binary_expressionContext
            self.copyFrom(ctx)

        def binary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Binary_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,i)

        def CONCATENATION_OP(self):
            return self.getToken(plsqlParser.CONCATENATION_OP, 0)
        def AT(self):
            return self.getToken(plsqlParser.AT, 0)
        def interval_expression(self):
            return self.getTypedRuleContext(plsqlParser.Interval_expressionContext,0)

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)
        def TIME(self):
            return self.getToken(plsqlParser.TIME, 0)
        def ZONE(self):
            return self.getToken(plsqlParser.ZONE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpr" ):
                listener.enterBinaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpr" ):
                listener.exitBinaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryExpr" ):
                return visitor.visitBinaryExpr(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreBinaryExprContext(Binary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Binary_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Unary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreBinaryExpr" ):
                listener.enterIgnoreBinaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreBinaryExpr" ):
                listener.exitIgnoreBinaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreBinaryExpr" ):
                return visitor.visitIgnoreBinaryExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenBinaryExprContext(Binary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Binary_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def binary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Binary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenBinaryExpr" ):
                listener.enterParenBinaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenBinaryExpr" ):
                listener.exitParenBinaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenBinaryExpr" ):
                return visitor.visitParenBinaryExpr(self)
            else:
                return visitor.visitChildren(self)



    def binary_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.Binary_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 512
        self.enterRecursionRule(localctx, 512, self.RULE_binary_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.ParenBinaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3768
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3769
                self.binary_expression(0)
                self.state = 3770
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                localctx = plsqlParser.IgnoreBinaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3772
                self.unary_expression(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3797
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,464,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3795
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
                    if la_ == 1:
                        localctx = plsqlParser.BinaryExprContext(self, plsqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 3775
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3776
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & ((1 << (plsqlParser.PERCENT - 488)) | (1 << (plsqlParser.ASTERISK - 488)) | (1 << (plsqlParser.SOLIDUS - 488)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3777
                        localctx.right = self.binary_expression(6)
                        pass

                    elif la_ == 2:
                        localctx = plsqlParser.BinaryExprContext(self, plsqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 3778
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3779
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.PLUS_SIGN or _la==plsqlParser.MINUS_SIGN):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3780
                        localctx.right = self.binary_expression(5)
                        pass

                    elif la_ == 3:
                        localctx = plsqlParser.BinaryExprContext(self, plsqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 3781
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 3782
                        localctx.op = self.match(plsqlParser.CONCATENATION_OP)
                        self.state = 3783
                        localctx.right = self.binary_expression(4)
                        pass

                    elif la_ == 4:
                        localctx = plsqlParser.BinaryExprContext(self, plsqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 3784
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3793
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.AT]:
                            self.state = 3785
                            self.match(plsqlParser.AT)
                            self.state = 3790
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [plsqlParser.LOCAL]:
                                self.state = 3786
                                self.match(plsqlParser.LOCAL)
                                pass
                            elif token in [plsqlParser.TIME]:
                                self.state = 3787
                                self.match(plsqlParser.TIME)
                                self.state = 3788
                                self.match(plsqlParser.ZONE)
                                self.state = 3789
                                self.binary_expression(0)
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass
                        elif token in [plsqlParser.DAY, plsqlParser.YEAR]:
                            self.state = 3792
                            self.interval_expression()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 3799
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,464,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Interval_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(plsqlParser.DAY, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def SECOND(self):
            return self.getToken(plsqlParser.SECOND, 0)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConcatenationContext,i)


        def YEAR(self):
            return self.getToken(plsqlParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(plsqlParser.MONTH, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_interval_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expression" ):
                listener.enterInterval_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expression" ):
                listener.exitInterval_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval_expression" ):
                return visitor.visitInterval_expression(self)
            else:
                return visitor.visitChildren(self)




    def interval_expression(self):

        localctx = plsqlParser.Interval_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_interval_expression)
        self._la = 0 # Token type
        try:
            self.state = 3824
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.DAY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3800
                self.match(plsqlParser.DAY)
                self.state = 3805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.LEFT_PAREN:
                    self.state = 3801
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 3802
                    self.concatenation()
                    self.state = 3803
                    self.match(plsqlParser.RIGHT_PAREN)


                self.state = 3807
                self.match(plsqlParser.TO)
                self.state = 3808
                self.match(plsqlParser.SECOND)
                self.state = 3813
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,466,self._ctx)
                if la_ == 1:
                    self.state = 3809
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 3810
                    self.concatenation()
                    self.state = 3811
                    self.match(plsqlParser.RIGHT_PAREN)


                pass
            elif token in [plsqlParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3815
                self.match(plsqlParser.YEAR)
                self.state = 3820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.LEFT_PAREN:
                    self.state = 3816
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 3817
                    self.concatenation()
                    self.state = 3818
                    self.match(plsqlParser.RIGHT_PAREN)


                self.state = 3822
                self.match(plsqlParser.TO)
                self.state = 3823
                self.match(plsqlParser.MONTH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Unary_expressionContext,0)


        def model_expression_element(self):
            return self.getTypedRuleContext(plsqlParser.Model_expression_elementContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_expression" ):
                listener.enterModel_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_expression" ):
                listener.exitModel_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_expression" ):
                return visitor.visitModel_expression(self)
            else:
                return visitor.visitChildren(self)




    def model_expression(self):

        localctx = plsqlParser.Model_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_model_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3826
            self.unary_expression(0)
            self.state = 3827
            self.match(plsqlParser.LEFT_BRACKET)
            self.state = 3828
            self.model_expression_element()
            self.state = 3829
            self.match(plsqlParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_expression_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.ANY)
            else:
                return self.getToken(plsqlParser.ANY, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def single_column_for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Single_column_for_loopContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Single_column_for_loopContext,i)


        def multi_column_for_loop(self):
            return self.getTypedRuleContext(plsqlParser.Multi_column_for_loopContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_model_expression_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_expression_element" ):
                listener.enterModel_expression_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_expression_element" ):
                listener.exitModel_expression_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_expression_element" ):
                return visitor.visitModel_expression_element(self)
            else:
                return visitor.visitChildren(self)




    def model_expression_element(self):

        localctx = plsqlParser.Model_expression_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_model_expression_element)
        self._la = 0 # Token type
        try:
            self.state = 3854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3833
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
                if la_ == 1:
                    self.state = 3831
                    self.match(plsqlParser.ANY)
                    pass

                elif la_ == 2:
                    self.state = 3832
                    self.expression(0)
                    pass


                self.state = 3842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 3835
                    self.match(plsqlParser.COMMA)
                    self.state = 3838
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
                    if la_ == 1:
                        self.state = 3836
                        self.match(plsqlParser.ANY)
                        pass

                    elif la_ == 2:
                        self.state = 3837
                        self.expression(0)
                        pass


                    self.state = 3844
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3845
                self.single_column_for_loop()
                self.state = 3850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 3846
                    self.match(plsqlParser.COMMA)
                    self.state = 3847
                    self.single_column_for_loop()
                    self.state = 3852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3853
                self.multi_column_for_loop()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_column_for_loopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ex1 = None # ExpressionContext
            self.ex2 = None # ExpressionContext
            self.ex3 = None # ExpressionContext

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def for_increment_decrement_type(self):
            return self.getTypedRuleContext(plsqlParser.For_increment_decrement_typeContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def for_like_part(self):
            return self.getTypedRuleContext(plsqlParser.For_like_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_single_column_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_column_for_loop" ):
                listener.enterSingle_column_for_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_column_for_loop" ):
                listener.exitSingle_column_for_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_column_for_loop" ):
                return visitor.visitSingle_column_for_loop(self)
            else:
                return visitor.visitChildren(self)




    def single_column_for_loop(self):

        localctx = plsqlParser.Single_column_for_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_single_column_for_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3856
            self.match(plsqlParser.FOR)
            self.state = 3857
            self.column_name()
            self.state = 3870
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.IN]:
                self.state = 3858
                self.match(plsqlParser.IN)
                self.state = 3859
                self.expression_list()
                pass
            elif token in [plsqlParser.FROM, plsqlParser.LIKE]:
                self.state = 3861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.LIKE:
                    self.state = 3860
                    self.for_like_part()


                self.state = 3863
                self.match(plsqlParser.FROM)
                self.state = 3864
                localctx.ex1 = self.expression(0)
                self.state = 3865
                self.match(plsqlParser.TO)
                self.state = 3866
                localctx.ex2 = self.expression(0)
                self.state = 3867
                self.for_increment_decrement_type()
                self.state = 3868
                localctx.ex3 = self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_like_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(plsqlParser.LIKE, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_for_like_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_like_part" ):
                listener.enterFor_like_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_like_part" ):
                listener.exitFor_like_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_like_part" ):
                return visitor.visitFor_like_part(self)
            else:
                return visitor.visitChildren(self)




    def for_like_part(self):

        localctx = plsqlParser.For_like_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_for_like_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3872
            self.match(plsqlParser.LIKE)
            self.state = 3873
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_increment_decrement_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(plsqlParser.INCREMENT, 0)

        def DECREMENT(self):
            return self.getToken(plsqlParser.DECREMENT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_for_increment_decrement_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_increment_decrement_type" ):
                listener.enterFor_increment_decrement_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_increment_decrement_type" ):
                listener.exitFor_increment_decrement_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_increment_decrement_type" ):
                return visitor.visitFor_increment_decrement_type(self)
            else:
                return visitor.visitChildren(self)




    def for_increment_decrement_type(self):

        localctx = plsqlParser.For_increment_decrement_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_for_increment_decrement_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3875
            _la = self._input.LA(1)
            if not(_la==plsqlParser.DECREMENT or _la==plsqlParser.INCREMENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multi_column_for_loopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_nameContext,i)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Expression_listContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_multi_column_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_column_for_loop" ):
                listener.enterMulti_column_for_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_column_for_loop" ):
                listener.exitMulti_column_for_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_column_for_loop" ):
                return visitor.visitMulti_column_for_loop(self)
            else:
                return visitor.visitChildren(self)




    def multi_column_for_loop(self):

        localctx = plsqlParser.Multi_column_for_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_multi_column_for_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3877
            self.match(plsqlParser.FOR)
            self.state = 3878
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3879
            self.column_name()
            self.state = 3884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 3880
                self.match(plsqlParser.COMMA)
                self.state = 3881
                self.column_name()
                self.state = 3886
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3887
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 3888
            self.match(plsqlParser.IN)
            self.state = 3889
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 3902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
            if la_ == 1:
                self.state = 3890
                self.subquery(0)
                pass

            elif la_ == 2:
                self.state = 3891
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 3892
                self.expression_list()
                self.state = 3897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 3893
                    self.match(plsqlParser.COMMA)
                    self.state = 3894
                    self.expression_list()
                    self.state = 3899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3900
                self.match(plsqlParser.RIGHT_PAREN)
                pass


            self.state = 3904
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_unary_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IgnoreUnaryExprContext(Unary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Unary_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def case_statement(self):
            return self.getTypedRuleContext(plsqlParser.Case_statementContext,0)

        def quantified_expression(self):
            return self.getTypedRuleContext(plsqlParser.Quantified_expressionContext,0)

        def standard_function(self):
            return self.getTypedRuleContext(plsqlParser.Standard_functionContext,0)

        def atom(self):
            return self.getTypedRuleContext(plsqlParser.AtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreUnaryExpr" ):
                listener.enterIgnoreUnaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreUnaryExpr" ):
                listener.exitIgnoreUnaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreUnaryExpr" ):
                return visitor.visitIgnoreUnaryExpr(self)
            else:
                return visitor.visitChildren(self)


    class UnaryExprContext(Unary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Unary_expressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def unary_expression(self):
            return self.getTypedRuleContext(plsqlParser.Unary_expressionContext,0)

        def PRIOR(self):
            return self.getToken(plsqlParser.PRIOR, 0)
        def CONNECT_BY_ROOT(self):
            return self.getToken(plsqlParser.CONNECT_BY_ROOT, 0)
        def NEW(self):
            return self.getToken(plsqlParser.NEW, 0)
        def DISTINCT(self):
            return self.getToken(plsqlParser.DISTINCT, 0)
        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)
        def model_expression_element(self):
            return self.getTypedRuleContext(plsqlParser.Model_expression_elementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpr" ):
                listener.enterUnaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpr" ):
                listener.exitUnaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpr" ):
                return visitor.visitUnaryExpr(self)
            else:
                return visitor.visitChildren(self)



    def unary_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = plsqlParser.Unary_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 528
        self.enterRecursionRule(localctx, 528, self.RULE_unary_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3907
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==plsqlParser.PLUS_SIGN or _la==plsqlParser.MINUS_SIGN):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3908
                self.unary_expression(10)
                pass

            elif la_ == 2:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3909
                localctx.op = self.match(plsqlParser.PRIOR)
                self.state = 3910
                self.unary_expression(9)
                pass

            elif la_ == 3:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3911
                localctx.op = self.match(plsqlParser.CONNECT_BY_ROOT)
                self.state = 3912
                self.unary_expression(8)
                pass

            elif la_ == 4:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3913
                localctx.op = self.match(plsqlParser.NEW)
                self.state = 3914
                self.unary_expression(7)
                pass

            elif la_ == 5:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3915
                localctx.op = self.match(plsqlParser.DISTINCT)
                self.state = 3916
                self.unary_expression(6)
                pass

            elif la_ == 6:
                localctx = plsqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3917
                localctx.op = self.match(plsqlParser.ALL)
                self.state = 3918
                self.unary_expression(5)
                pass

            elif la_ == 7:
                localctx = plsqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3919
                self.case_statement()
                pass

            elif la_ == 8:
                localctx = plsqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3920
                self.quantified_expression()
                pass

            elif la_ == 9:
                localctx = plsqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3921
                self.standard_function()
                pass

            elif la_ == 10:
                localctx = plsqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3922
                self.atom()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3932
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,480,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = plsqlParser.UnaryExprContext(self, plsqlParser.Unary_expressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_unary_expression)
                    self.state = 3925
                    if not self.precpred(self._ctx, 11):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                    self.state = 3926
                    localctx.op = self.match(plsqlParser.LEFT_BRACKET)
                    self.state = 3927
                    self.model_expression_element()
                    self.state = 3928
                    self.match(plsqlParser.RIGHT_BRACKET) 
                self.state = 3934
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,480,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def searched_case_statement(self):
            return self.getTypedRuleContext(plsqlParser.Searched_case_statementContext,0)


        def simple_case_statement(self):
            return self.getTypedRuleContext(plsqlParser.Simple_case_statementContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_statement" ):
                listener.enterCase_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_statement" ):
                listener.exitCase_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_statement" ):
                return visitor.visitCase_statement(self)
            else:
                return visitor.visitChildren(self)




    def case_statement(self):

        localctx = plsqlParser.Case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_case_statement)
        try:
            self.state = 3937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3935
                self.searched_case_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3936
                self.simple_case_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ck1 = None # Token

        def atom(self):
            return self.getTypedRuleContext(plsqlParser.AtomContext,0)


        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CASE)
            else:
                return self.getToken(plsqlParser.CASE, i)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Label_nameContext,i)


        def simple_case_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Simple_case_when_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Simple_case_when_partContext,i)


        def case_else_part(self):
            return self.getTypedRuleContext(plsqlParser.Case_else_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_simple_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_case_statement" ):
                listener.enterSimple_case_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_case_statement" ):
                listener.exitSimple_case_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_case_statement" ):
                return visitor.visitSimple_case_statement(self)
            else:
                return visitor.visitChildren(self)




    def simple_case_statement(self):

        localctx = plsqlParser.Simple_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_simple_case_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 3939
                self.label_name()


            self.state = 3942
            localctx.ck1 = self.match(plsqlParser.CASE)
            self.state = 3943
            self.atom()
            self.state = 3945 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3944
                self.simple_case_when_part()
                self.state = 3947 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.WHEN):
                    break

            self.state = 3950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELSE:
                self.state = 3949
                self.case_else_part()


            self.state = 3952
            self.match(plsqlParser.END)
            self.state = 3954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
            if la_ == 1:
                self.state = 3953
                self.match(plsqlParser.CASE)


            self.state = 3957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.state = 3956
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_case_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # ExpressionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_simple_case_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_case_when_part" ):
                listener.enterSimple_case_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_case_when_part" ):
                listener.exitSimple_case_when_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_case_when_part" ):
                return visitor.visitSimple_case_when_part(self)
            else:
                return visitor.visitChildren(self)




    def simple_case_when_part(self):

        localctx = plsqlParser.Simple_case_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_simple_case_when_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3959
            self.match(plsqlParser.WHEN)
            self.state = 3960
            localctx.whenExpr = self.expression(0)
            self.state = 3961
            self.match(plsqlParser.THEN)
            self.state = 3964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
            if la_ == 1:
                self.state = 3962
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 3963
                localctx.thenExpr = self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Searched_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ck1 = None # Token

        def END(self):
            return self.getToken(plsqlParser.END, 0)

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.CASE)
            else:
                return self.getToken(plsqlParser.CASE, i)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Label_nameContext,i)


        def searched_case_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Searched_case_when_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Searched_case_when_partContext,i)


        def case_else_part(self):
            return self.getTypedRuleContext(plsqlParser.Case_else_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_searched_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_statement" ):
                listener.enterSearched_case_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_statement" ):
                listener.exitSearched_case_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearched_case_statement" ):
                return visitor.visitSearched_case_statement(self)
            else:
                return visitor.visitChildren(self)




    def searched_case_statement(self):

        localctx = plsqlParser.Searched_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_searched_case_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 3966
                self.label_name()


            self.state = 3969
            localctx.ck1 = self.match(plsqlParser.CASE)
            self.state = 3971 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3970
                self.searched_case_when_part()
                self.state = 3973 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==plsqlParser.WHEN):
                    break

            self.state = 3976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ELSE:
                self.state = 3975
                self.case_else_part()


            self.state = 3978
            self.match(plsqlParser.END)
            self.state = 3980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,491,self._ctx)
            if la_ == 1:
                self.state = 3979
                self.match(plsqlParser.CASE)


            self.state = 3983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
            if la_ == 1:
                self.state = 3982
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Searched_case_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # ExpressionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(plsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(plsqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_searched_case_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_when_part" ):
                listener.enterSearched_case_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_when_part" ):
                listener.exitSearched_case_when_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearched_case_when_part" ):
                return visitor.visitSearched_case_when_part(self)
            else:
                return visitor.visitChildren(self)




    def searched_case_when_part(self):

        localctx = plsqlParser.Searched_case_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_searched_case_when_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3985
            self.match(plsqlParser.WHEN)
            self.state = 3986
            localctx.whenExpr = self.expression(0)
            self.state = 3987
            self.match(plsqlParser.THEN)
            self.state = 3990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,493,self._ctx)
            if la_ == 1:
                self.state = 3988
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 3989
                localctx.thenExpr = self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(plsqlParser.ELSE, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(plsqlParser.Seq_of_statementsContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_case_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_else_part" ):
                listener.enterCase_else_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_else_part" ):
                listener.exitCase_else_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_else_part" ):
                return visitor.visitCase_else_part(self)
            else:
                return visitor.visitChildren(self)




    def case_else_part(self):

        localctx = plsqlParser.Case_else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_case_else_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3992
            self.match(plsqlParser.ELSE)
            self.state = 3995
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
            if la_ == 1:
                self.state = 3993
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 3994
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_element(self):
            return self.getTypedRuleContext(plsqlParser.Table_elementContext,0)


        def outer_join_sign(self):
            return self.getTypedRuleContext(plsqlParser.Outer_join_signContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def constant(self):
            return self.getTypedRuleContext(plsqlParser.ConstantContext,0)


        def general_element(self):
            return self.getTypedRuleContext(plsqlParser.General_elementContext,0)


        def atom(self):
            return self.getTypedRuleContext(plsqlParser.AtomContext,0)


        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = plsqlParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_atom)
        try:
            self.state = 4014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3997
                self.table_element()
                self.state = 3998
                self.outer_join_sign()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4000
                self.bind_variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4001
                self.constant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4002
                self.general_element()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4003
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4004
                self.atom()
                self.state = 4005
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4012
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
                if la_ == 1:
                    self.state = 4007
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 4008
                    self.subquery(0)
                    self.state = 4009
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 4011
                    self.expression_list()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_or_vectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def vector_expr(self):
            return self.getTypedRuleContext(plsqlParser.Vector_exprContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_expression_or_vector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_or_vector" ):
                listener.enterExpression_or_vector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_or_vector" ):
                listener.exitExpression_or_vector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_or_vector" ):
                return visitor.visitExpression_or_vector(self)
            else:
                return visitor.visitChildren(self)




    def expression_or_vector(self):

        localctx = plsqlParser.Expression_or_vectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_expression_or_vector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4016
            self.expression(0)
            self.state = 4018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMMA:
                self.state = 4017
                self.vector_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Vector_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_vector_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expr" ):
                listener.enterVector_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expr" ):
                listener.exitVector_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVector_expr" ):
                return visitor.visitVector_expr(self)
            else:
                return visitor.visitChildren(self)




    def vector_expr(self):

        localctx = plsqlParser.Vector_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_vector_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4020
            self.match(plsqlParser.COMMA)
            self.state = 4021
            self.expression(0)
            self.state = 4026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4022
                self.match(plsqlParser.COMMA)
                self.state = 4023
                self.expression(0)
                self.state = 4028
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Quantified_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOME(self):
            return self.getToken(plsqlParser.SOME, 0)

        def EXISTS(self):
            return self.getToken(plsqlParser.EXISTS, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def ANY(self):
            return self.getToken(plsqlParser.ANY, 0)

        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_quantified_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantified_expression" ):
                listener.enterQuantified_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantified_expression" ):
                listener.exitQuantified_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantified_expression" ):
                return visitor.visitQuantified_expression(self)
            else:
                return visitor.visitChildren(self)




    def quantified_expression(self):

        localctx = plsqlParser.Quantified_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_quantified_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4029
            _la = self._input.LA(1)
            if not(_la==plsqlParser.ALL or _la==plsqlParser.ANY or _la==plsqlParser.EXISTS or _la==plsqlParser.SOME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
            if la_ == 1:
                self.state = 4030
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4031
                self.subquery(0)
                self.state = 4032
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 4034
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4035
                self.expression(0)
                self.state = 4036
                self.match(plsqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Standard_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_standard_function

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AggregateCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(plsqlParser.Aggregate_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateCall" ):
                listener.enterAggregateCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateCall" ):
                listener.exitAggregateCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateCall" ):
                return visitor.visitAggregateCall(self)
            else:
                return visitor.visitChildren(self)


    class TodoCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.name = None # Within_or_over_clause_keywordContext
            self.copyFrom(ctx)

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)

        def function_argument_modeling(self):
            return self.getTypedRuleContext(plsqlParser.Function_argument_modelingContext,0)

        def using_clause(self):
            return self.getTypedRuleContext(plsqlParser.Using_clauseContext,0)

        def AS(self):
            return self.getToken(plsqlParser.AS, 0)
        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)

        def CAST(self):
            return self.getToken(plsqlParser.CAST, 0)
        def XMLCAST(self):
            return self.getToken(plsqlParser.XMLCAST, 0)
        def MULTISET(self):
            return self.getToken(plsqlParser.MULTISET, 0)
        def subquery(self):
            return self.getTypedRuleContext(plsqlParser.SubqueryContext,0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)

        def CHR(self):
            return self.getToken(plsqlParser.CHR, 0)
        def USING(self):
            return self.getToken(plsqlParser.USING, 0)
        def NCHAR_CS(self):
            return self.getToken(plsqlParser.NCHAR_CS, 0)
        def COLLECT(self):
            return self.getToken(plsqlParser.COLLECT, 0)
        def collect_order_by_part(self):
            return self.getTypedRuleContext(plsqlParser.Collect_order_by_partContext,0)

        def DISTINCT(self):
            return self.getToken(plsqlParser.DISTINCT, 0)
        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)
        def function_argument(self):
            return self.getTypedRuleContext(plsqlParser.Function_argumentContext,0)

        def within_or_over_clause_keyword(self):
            return self.getTypedRuleContext(plsqlParser.Within_or_over_clause_keywordContext,0)

        def within_or_over_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Within_or_over_partContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Within_or_over_partContext,i)

        def DECOMPOSE(self):
            return self.getToken(plsqlParser.DECOMPOSE, 0)
        def CANONICAL(self):
            return self.getToken(plsqlParser.CANONICAL, 0)
        def COMPATIBILITY(self):
            return self.getToken(plsqlParser.COMPATIBILITY, 0)
        def FROM(self):
            return self.getToken(plsqlParser.FROM, 0)
        def EXTRACT(self):
            return self.getToken(plsqlParser.EXTRACT, 0)
        def function_argument_analytic(self):
            return self.getTypedRuleContext(plsqlParser.Function_argument_analyticContext,0)

        def over_clause(self):
            return self.getTypedRuleContext(plsqlParser.Over_clauseContext,0)

        def FIRST_VALUE(self):
            return self.getToken(plsqlParser.FIRST_VALUE, 0)
        def LAST_VALUE(self):
            return self.getToken(plsqlParser.LAST_VALUE, 0)
        def respect_or_ignore_nulls(self):
            return self.getTypedRuleContext(plsqlParser.Respect_or_ignore_nullsContext,0)

        def standard_prediction_function_keyword(self):
            return self.getTypedRuleContext(plsqlParser.Standard_prediction_function_keywordContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def cost_matrix_clause(self):
            return self.getTypedRuleContext(plsqlParser.Cost_matrix_clauseContext,0)

        def TRANSLATE(self):
            return self.getToken(plsqlParser.TRANSLATE, 0)
        def CHAR_CS(self):
            return self.getToken(plsqlParser.CHAR_CS, 0)
        def TREAT(self):
            return self.getToken(plsqlParser.TREAT, 0)
        def REF(self):
            return self.getToken(plsqlParser.REF, 0)
        def TRIM(self):
            return self.getToken(plsqlParser.TRIM, 0)
        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)

        def LEADING(self):
            return self.getToken(plsqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(plsqlParser.TRAILING, 0)
        def BOTH(self):
            return self.getToken(plsqlParser.BOTH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTodoCall" ):
                listener.enterTodoCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTodoCall" ):
                listener.exitTodoCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTodoCall" ):
                return visitor.visitTodoCall(self)
            else:
                return visitor.visitChildren(self)


    class XmlCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.Standard_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def XMLAGG(self):
            return self.getToken(plsqlParser.XMLAGG, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)

        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)

        def general_element(self):
            return self.getTypedRuleContext(plsqlParser.General_elementContext,0)

        def xml_multiuse_expression_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Xml_multiuse_expression_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Xml_multiuse_expression_elementContext,i)

        def XMLCOLATTVAL(self):
            return self.getToken(plsqlParser.XMLCOLATTVAL, 0)
        def XMLFOREST(self):
            return self.getToken(plsqlParser.XMLFOREST, 0)
        def XMLELEMENT(self):
            return self.getToken(plsqlParser.XMLELEMENT, 0)
        def xml_attributes_clause(self):
            return self.getTypedRuleContext(plsqlParser.Xml_attributes_clauseContext,0)

        def ENTITYESCAPING(self):
            return self.getToken(plsqlParser.ENTITYESCAPING, 0)
        def NOENTITYESCAPING(self):
            return self.getToken(plsqlParser.NOENTITYESCAPING, 0)
        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)
        def EVALNAME(self):
            return self.getToken(plsqlParser.EVALNAME, 0)
        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_aliasContext,i)

        def XMLEXISTS(self):
            return self.getToken(plsqlParser.XMLEXISTS, 0)
        def xml_passing_clause(self):
            return self.getTypedRuleContext(plsqlParser.Xml_passing_clauseContext,0)

        def XMLPARSE(self):
            return self.getToken(plsqlParser.XMLPARSE, 0)
        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConcatenationContext,i)

        def DOCUMENT(self):
            return self.getToken(plsqlParser.DOCUMENT, 0)
        def CONTENT(self):
            return self.getToken(plsqlParser.CONTENT, 0)
        def WELLFORMED(self):
            return self.getToken(plsqlParser.WELLFORMED, 0)
        def XMLPI(self):
            return self.getToken(plsqlParser.XMLPI, 0)
        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)

        def XMLQUERY(self):
            return self.getToken(plsqlParser.XMLQUERY, 0)
        def RETURNING(self):
            return self.getToken(plsqlParser.RETURNING, 0)
        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)
        def ON(self):
            return self.getToken(plsqlParser.ON, 0)
        def EMPTY(self):
            return self.getToken(plsqlParser.EMPTY, 0)
        def XMLROOT(self):
            return self.getToken(plsqlParser.XMLROOT, 0)
        def xmlroot_param_version_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlroot_param_version_partContext,0)

        def xmlroot_param_standalone_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlroot_param_standalone_partContext,0)

        def XMLSERIALIZE(self):
            return self.getToken(plsqlParser.XMLSERIALIZE, 0)
        def AS(self):
            return self.getToken(plsqlParser.AS, 0)
        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)

        def xmlserialize_param_enconding_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlserialize_param_enconding_partContext,0)

        def xmlserialize_param_version_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlserialize_param_version_partContext,0)

        def xmlserialize_param_ident_part(self):
            return self.getTypedRuleContext(plsqlParser.Xmlserialize_param_ident_partContext,0)

        def DEFAULTS(self):
            return self.getToken(plsqlParser.DEFAULTS, 0)
        def HIDE(self):
            return self.getToken(plsqlParser.HIDE, 0)
        def SHOW(self):
            return self.getToken(plsqlParser.SHOW, 0)
        def XMLTABLE(self):
            return self.getToken(plsqlParser.XMLTABLE, 0)
        def xml_namespaces_clause(self):
            return self.getTypedRuleContext(plsqlParser.Xml_namespaces_clauseContext,0)

        def COLUMNS(self):
            return self.getToken(plsqlParser.COLUMNS, 0)
        def xml_table_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Xml_table_columnContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Xml_table_columnContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlCall" ):
                listener.enterXmlCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlCall" ):
                listener.exitXmlCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlCall" ):
                return visitor.visitXmlCall(self)
            else:
                return visitor.visitChildren(self)



    def standard_function(self):

        localctx = plsqlParser.Standard_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_standard_function)
        self._la = 0 # Token type
        try:
            self.state = 4337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.AggregateCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4040
                self.aggregate_windowed_function()
                pass

            elif la_ == 2:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4041
                self.regular_id()
                self.state = 4042
                self.function_argument_modeling()
                self.state = 4044
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
                if la_ == 1:
                    self.state = 4043
                    self.using_clause()


                pass

            elif la_ == 3:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4046
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CAST or _la==plsqlParser.XMLCAST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4047
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4054
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
                if la_ == 1:
                    self.state = 4048
                    self.match(plsqlParser.MULTISET)
                    self.state = 4049
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 4050
                    self.subquery(0)
                    self.state = 4051
                    self.match(plsqlParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 4053
                    self.concatenation()
                    pass


                self.state = 4056
                self.match(plsqlParser.AS)
                self.state = 4057
                self.type_spec()
                self.state = 4058
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4060
                self.match(plsqlParser.CHR)
                self.state = 4061
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4062
                self.concatenation()
                self.state = 4063
                self.match(plsqlParser.USING)
                self.state = 4064
                self.match(plsqlParser.NCHAR_CS)
                self.state = 4065
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 5:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4067
                self.match(plsqlParser.COLLECT)
                self.state = 4068
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4070
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
                if la_ == 1:
                    self.state = 4069
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.DISTINCT or _la==plsqlParser.UNIQUE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4072
                self.concatenation()
                self.state = 4074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ORDER:
                    self.state = 4073
                    self.collect_order_by_part()


                self.state = 4076
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4078
                localctx.name = self.within_or_over_clause_keyword()
                self.state = 4079
                self.function_argument()
                self.state = 4081 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4080
                        self.within_or_over_part()

                    else:
                        raise NoViableAltException(self)
                    self.state = 4083 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,504,self._ctx)

                pass

            elif la_ == 7:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 4085
                self.match(plsqlParser.DECOMPOSE)
                self.state = 4086
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4087
                self.concatenation()
                self.state = 4089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.CANONICAL or _la==plsqlParser.COMPATIBILITY:
                    self.state = 4088
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.CANONICAL or _la==plsqlParser.COMPATIBILITY):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4091
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 8:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 4093
                localctx.name = self.match(plsqlParser.EXTRACT)
                self.state = 4094
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4095
                self.regular_id()
                self.state = 4096
                self.match(plsqlParser.FROM)
                self.state = 4097
                self.concatenation()
                self.state = 4098
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 9:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 4100
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FIRST_VALUE or _la==plsqlParser.LAST_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4101
                self.function_argument_analytic()
                self.state = 4103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.IGNORE or _la==plsqlParser.RESPECT:
                    self.state = 4102
                    self.respect_or_ignore_nulls()


                self.state = 4105
                self.over_clause()
                pass

            elif la_ == 10:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 4107
                self.standard_prediction_function_keyword()
                self.state = 4108
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4109
                self.expression(0)
                self.state = 4114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4110
                    self.match(plsqlParser.COMMA)
                    self.state = 4111
                    self.expression(0)
                    self.state = 4116
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COST:
                    self.state = 4117
                    self.cost_matrix_clause()


                self.state = 4121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.USING:
                    self.state = 4120
                    self.using_clause()


                self.state = 4123
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 11:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 4125
                self.match(plsqlParser.TRANSLATE)
                self.state = 4126
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4127
                self.expression(0)
                self.state = 4130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.USING:
                    self.state = 4128
                    self.match(plsqlParser.USING)
                    self.state = 4129
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.CHAR_CS or _la==plsqlParser.NCHAR_CS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4132
                    self.match(plsqlParser.COMMA)
                    self.state = 4133
                    self.expression(0)
                    self.state = 4138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4139
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 12:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 4141
                self.match(plsqlParser.TREAT)
                self.state = 4142
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4143
                self.expression(0)
                self.state = 4144
                self.match(plsqlParser.AS)
                self.state = 4146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,512,self._ctx)
                if la_ == 1:
                    self.state = 4145
                    self.match(plsqlParser.REF)


                self.state = 4148
                self.type_spec()
                self.state = 4149
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 13:
                localctx = plsqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 4151
                self.match(plsqlParser.TRIM)
                self.state = 4152
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4160
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,515,self._ctx)
                if la_ == 1:
                    self.state = 4154
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.BOTH or _la==plsqlParser.LEADING or _la==plsqlParser.TRAILING:
                        self.state = 4153
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.BOTH or _la==plsqlParser.LEADING or _la==plsqlParser.TRAILING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.NATIONAL_CHAR_STRING_LIT or _la==plsqlParser.CHAR_STRING:
                        self.state = 4156
                        self.quoted_string()


                    self.state = 4159
                    self.match(plsqlParser.FROM)


                self.state = 4162
                self.concatenation()
                self.state = 4163
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 14:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 4165
                self.match(plsqlParser.XMLAGG)
                self.state = 4166
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4167
                self.expression(0)
                self.state = 4169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ORDER:
                    self.state = 4168
                    self.order_by_clause()


                self.state = 4171
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 4174
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,517,self._ctx)
                if la_ == 1:
                    self.state = 4172
                    self.match(plsqlParser.PERIOD)
                    self.state = 4173
                    self.general_element()


                pass

            elif la_ == 15:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 4176
                _la = self._input.LA(1)
                if not(_la==plsqlParser.XMLCOLATTVAL or _la==plsqlParser.XMLFOREST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4177
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4178
                self.xml_multiuse_expression_element()
                self.state = 4183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4179
                    self.match(plsqlParser.COMMA)
                    self.state = 4180
                    self.xml_multiuse_expression_element()
                    self.state = 4185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4186
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 4189
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
                if la_ == 1:
                    self.state = 4187
                    self.match(plsqlParser.PERIOD)
                    self.state = 4188
                    self.general_element()


                pass

            elif la_ == 16:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 4191
                self.match(plsqlParser.XMLELEMENT)
                self.state = 4192
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4194
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,520,self._ctx)
                if la_ == 1:
                    self.state = 4193
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.ENTITYESCAPING or _la==plsqlParser.NOENTITYESCAPING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
                if la_ == 1:
                    self.state = 4196
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.EVALNAME or _la==plsqlParser.NAME):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4199
                self.expression(0)
                self.state = 4202
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
                if la_ == 1:
                    self.state = 4200
                    self.match(plsqlParser.COMMA)
                    self.state = 4201
                    self.xml_attributes_clause()


                self.state = 4211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4204
                    self.match(plsqlParser.COMMA)
                    self.state = 4205
                    self.expression(0)
                    self.state = 4207
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 449)) | (1 << (plsqlParser.CHAR_STRING - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                        self.state = 4206
                        self.column_alias()


                    self.state = 4213
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4214
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 4217
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,525,self._ctx)
                if la_ == 1:
                    self.state = 4215
                    self.match(plsqlParser.PERIOD)
                    self.state = 4216
                    self.general_element()


                pass

            elif la_ == 17:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 4219
                self.match(plsqlParser.XMLEXISTS)
                self.state = 4220
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4221
                self.expression(0)
                self.state = 4223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PASSING:
                    self.state = 4222
                    self.xml_passing_clause()


                self.state = 4225
                self.match(plsqlParser.RIGHT_PAREN)
                pass

            elif la_ == 18:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 4227
                self.match(plsqlParser.XMLPARSE)
                self.state = 4228
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4229
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CONTENT or _la==plsqlParser.DOCUMENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4230
                self.concatenation()
                self.state = 4232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.WELLFORMED:
                    self.state = 4231
                    self.match(plsqlParser.WELLFORMED)


                self.state = 4234
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 4237
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,528,self._ctx)
                if la_ == 1:
                    self.state = 4235
                    self.match(plsqlParser.PERIOD)
                    self.state = 4236
                    self.general_element()


                pass

            elif la_ == 19:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 4239
                self.match(plsqlParser.XMLPI)
                self.state = 4240
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4245
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.NAME]:
                    self.state = 4241
                    self.match(plsqlParser.NAME)
                    self.state = 4242
                    self.r_id()
                    pass
                elif token in [plsqlParser.EVALNAME]:
                    self.state = 4243
                    self.match(plsqlParser.EVALNAME)
                    self.state = 4244
                    self.concatenation()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 4247
                    self.match(plsqlParser.COMMA)
                    self.state = 4248
                    self.concatenation()


                self.state = 4251
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 4254
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
                if la_ == 1:
                    self.state = 4252
                    self.match(plsqlParser.PERIOD)
                    self.state = 4253
                    self.general_element()


                pass

            elif la_ == 20:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 4256
                self.match(plsqlParser.XMLQUERY)
                self.state = 4257
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4258
                self.concatenation()
                self.state = 4260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PASSING:
                    self.state = 4259
                    self.xml_passing_clause()


                self.state = 4262
                self.match(plsqlParser.RETURNING)
                self.state = 4263
                self.match(plsqlParser.CONTENT)
                self.state = 4267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.NULL:
                    self.state = 4264
                    self.match(plsqlParser.NULL)
                    self.state = 4265
                    self.match(plsqlParser.ON)
                    self.state = 4266
                    self.match(plsqlParser.EMPTY)


                self.state = 4269
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 4272
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,534,self._ctx)
                if la_ == 1:
                    self.state = 4270
                    self.match(plsqlParser.PERIOD)
                    self.state = 4271
                    self.general_element()


                pass

            elif la_ == 21:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 4274
                self.match(plsqlParser.XMLROOT)
                self.state = 4275
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4276
                self.concatenation()
                self.state = 4279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
                if la_ == 1:
                    self.state = 4277
                    self.match(plsqlParser.COMMA)
                    self.state = 4278
                    self.xmlroot_param_version_part()


                self.state = 4283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 4281
                    self.match(plsqlParser.COMMA)
                    self.state = 4282
                    self.xmlroot_param_standalone_part()


                self.state = 4285
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 4288
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,537,self._ctx)
                if la_ == 1:
                    self.state = 4286
                    self.match(plsqlParser.PERIOD)
                    self.state = 4287
                    self.general_element()


                pass

            elif la_ == 22:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 4290
                self.match(plsqlParser.XMLSERIALIZE)
                self.state = 4291
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4292
                _la = self._input.LA(1)
                if not(_la==plsqlParser.CONTENT or _la==plsqlParser.DOCUMENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4293
                self.concatenation()
                self.state = 4296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.AS:
                    self.state = 4294
                    self.match(plsqlParser.AS)
                    self.state = 4295
                    self.type_spec()


                self.state = 4299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.ENCODING:
                    self.state = 4298
                    self.xmlserialize_param_enconding_part()


                self.state = 4302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.VERSION:
                    self.state = 4301
                    self.xmlserialize_param_version_part()


                self.state = 4305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.INDENT or _la==plsqlParser.NO:
                    self.state = 4304
                    self.xmlserialize_param_ident_part()


                self.state = 4309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.HIDE or _la==plsqlParser.SHOW:
                    self.state = 4307
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.HIDE or _la==plsqlParser.SHOW):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4308
                    self.match(plsqlParser.DEFAULTS)


                self.state = 4311
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 4314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,543,self._ctx)
                if la_ == 1:
                    self.state = 4312
                    self.match(plsqlParser.PERIOD)
                    self.state = 4313
                    self.general_element()


                pass

            elif la_ == 23:
                localctx = plsqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 4316
                self.match(plsqlParser.XMLTABLE)
                self.state = 4317
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4319
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,544,self._ctx)
                if la_ == 1:
                    self.state = 4318
                    self.xml_namespaces_clause()


                self.state = 4321
                self.concatenation()
                self.state = 4323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PASSING:
                    self.state = 4322
                    self.xml_passing_clause()


                self.state = 4330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COLUMNS:
                    self.state = 4325
                    self.match(plsqlParser.COLUMNS)
                    self.state = 4326
                    self.xml_table_column()

                    self.state = 4327
                    self.match(plsqlParser.COMMA)
                    self.state = 4328
                    self.xml_table_column()


                self.state = 4332
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 4335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
                if la_ == 1:
                    self.state = 4333
                    self.match(plsqlParser.PERIOD)
                    self.state = 4334
                    self.general_element()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None # Token
            self.pref = None # Token

        def over_clause_keyword(self):
            return self.getTypedRuleContext(plsqlParser.Over_clause_keywordContext,0)


        def function_argument_analytic(self):
            return self.getTypedRuleContext(plsqlParser.Function_argument_analyticContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(plsqlParser.Over_clauseContext,0)


        def COUNT(self):
            return self.getToken(plsqlParser.COUNT, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def DISTINCT(self):
            return self.getToken(plsqlParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(plsqlParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(plsqlParser.ALL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_aggregate_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_windowed_function" ):
                listener.enterAggregate_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_windowed_function" ):
                listener.exitAggregate_windowed_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_windowed_function" ):
                return visitor.visitAggregate_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_windowed_function(self):

        localctx = plsqlParser.Aggregate_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_aggregate_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 4357
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4339
                self.over_clause_keyword()
                self.state = 4340
                self.function_argument_analytic()
                self.state = 4342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,549,self._ctx)
                if la_ == 1:
                    self.state = 4341
                    self.over_clause()


                pass
            elif token in [plsqlParser.COUNT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4344
                self.match(plsqlParser.COUNT)
                self.state = 4345
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4351
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.ASTERISK]:
                    self.state = 4346
                    localctx.args = self.match(plsqlParser.ASTERISK)
                    pass
                elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALL, plsqlParser.ANALYZE, plsqlParser.ANY, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONNECT_BY_ROOT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DISTINCT, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXISTS, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FALSE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PRIOR, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUE, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNIQUE, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.PLUS_SIGN, plsqlParser.MINUS_SIGN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                    self.state = 4348
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,550,self._ctx)
                    if la_ == 1:
                        self.state = 4347
                        localctx.pref = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==plsqlParser.ALL or _la==plsqlParser.DISTINCT or _la==plsqlParser.UNIQUE):
                            localctx.pref = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4350
                    self.concatenation()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4353
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 4355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,552,self._ctx)
                if la_ == 1:
                    self.state = 4354
                    self.over_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clause_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(plsqlParser.AVG, 0)

        def CORR(self):
            return self.getToken(plsqlParser.CORR, 0)

        def LAG(self):
            return self.getToken(plsqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(plsqlParser.LEAD, 0)

        def MAX(self):
            return self.getToken(plsqlParser.MAX, 0)

        def MEDIAN(self):
            return self.getToken(plsqlParser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(plsqlParser.MIN, 0)

        def NTILE(self):
            return self.getToken(plsqlParser.NTILE, 0)

        def RATIO_TO_REPORT(self):
            return self.getToken(plsqlParser.RATIO_TO_REPORT, 0)

        def ROW_NUMBER(self):
            return self.getToken(plsqlParser.ROW_NUMBER, 0)

        def SUM(self):
            return self.getToken(plsqlParser.SUM, 0)

        def VARIANCE(self):
            return self.getToken(plsqlParser.VARIANCE, 0)

        def REGR_(self):
            return self.getToken(plsqlParser.REGR_, 0)

        def STDDEV(self):
            return self.getToken(plsqlParser.STDDEV, 0)

        def VAR_(self):
            return self.getToken(plsqlParser.VAR_, 0)

        def COVAR_(self):
            return self.getToken(plsqlParser.COVAR_, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_over_clause_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause_keyword" ):
                listener.enterOver_clause_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause_keyword" ):
                listener.exitOver_clause_keyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause_keyword" ):
                return visitor.visitOver_clause_keyword(self)
            else:
                return visitor.visitChildren(self)




    def over_clause_keyword(self):

        localctx = plsqlParser.Over_clause_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_over_clause_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4359
            _la = self._input.LA(1)
            if not(((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & ((1 << (plsqlParser.AVG - 463)) | (1 << (plsqlParser.CORR - 463)) | (1 << (plsqlParser.LAG - 463)) | (1 << (plsqlParser.LEAD - 463)) | (1 << (plsqlParser.MAX - 463)) | (1 << (plsqlParser.MEDIAN - 463)) | (1 << (plsqlParser.MIN - 463)) | (1 << (plsqlParser.NTILE - 463)) | (1 << (plsqlParser.RATIO_TO_REPORT - 463)) | (1 << (plsqlParser.ROW_NUMBER - 463)) | (1 << (plsqlParser.SUM - 463)) | (1 << (plsqlParser.VARIANCE - 463)) | (1 << (plsqlParser.REGR_ - 463)) | (1 << (plsqlParser.STDDEV - 463)) | (1 << (plsqlParser.VAR_ - 463)) | (1 << (plsqlParser.COVAR_ - 463)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Within_or_over_clause_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUME_DIST(self):
            return self.getToken(plsqlParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(plsqlParser.DENSE_RANK, 0)

        def LISTAGG(self):
            return self.getToken(plsqlParser.LISTAGG, 0)

        def PERCENT_RANK(self):
            return self.getToken(plsqlParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(plsqlParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(plsqlParser.PERCENTILE_DISC, 0)

        def RANK(self):
            return self.getToken(plsqlParser.RANK, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_within_or_over_clause_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_or_over_clause_keyword" ):
                listener.enterWithin_or_over_clause_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_or_over_clause_keyword" ):
                listener.exitWithin_or_over_clause_keyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithin_or_over_clause_keyword" ):
                return visitor.visitWithin_or_over_clause_keyword(self)
            else:
                return visitor.visitChildren(self)




    def within_or_over_clause_keyword(self):

        localctx = plsqlParser.Within_or_over_clause_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_within_or_over_clause_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4361
            _la = self._input.LA(1)
            if not(((((_la - 456)) & ~0x3f) == 0 and ((1 << (_la - 456)) & ((1 << (plsqlParser.CUME_DIST - 456)) | (1 << (plsqlParser.DENSE_RANK - 456)) | (1 << (plsqlParser.LISTAGG - 456)) | (1 << (plsqlParser.PERCENT_RANK - 456)) | (1 << (plsqlParser.PERCENTILE_CONT - 456)) | (1 << (plsqlParser.PERCENTILE_DISC - 456)) | (1 << (plsqlParser.RANK - 456)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Standard_prediction_function_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREDICTION(self):
            return self.getToken(plsqlParser.PREDICTION, 0)

        def PREDICTION_BOUNDS(self):
            return self.getToken(plsqlParser.PREDICTION_BOUNDS, 0)

        def PREDICTION_COST(self):
            return self.getToken(plsqlParser.PREDICTION_COST, 0)

        def PREDICTION_DETAILS(self):
            return self.getToken(plsqlParser.PREDICTION_DETAILS, 0)

        def PREDICTION_PROBABILITY(self):
            return self.getToken(plsqlParser.PREDICTION_PROBABILITY, 0)

        def PREDICTION_SET(self):
            return self.getToken(plsqlParser.PREDICTION_SET, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_standard_prediction_function_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_prediction_function_keyword" ):
                listener.enterStandard_prediction_function_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_prediction_function_keyword" ):
                listener.exitStandard_prediction_function_keyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_prediction_function_keyword" ):
                return visitor.visitStandard_prediction_function_keyword(self)
            else:
                return visitor.visitChildren(self)




    def standard_prediction_function_keyword(self):

        localctx = plsqlParser.Standard_prediction_function_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_standard_prediction_function_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4363
            _la = self._input.LA(1)
            if not(((((_la - 450)) & ~0x3f) == 0 and ((1 << (_la - 450)) & ((1 << (plsqlParser.PREDICTION - 450)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 450)) | (1 << (plsqlParser.PREDICTION_COST - 450)) | (1 << (plsqlParser.PREDICTION_DETAILS - 450)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 450)) | (1 << (plsqlParser.PREDICTION_SET - 450)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(plsqlParser.OVER, 0)

        def query_partition_clause(self):
            return self.getTypedRuleContext(plsqlParser.Query_partition_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def windowing_clause(self):
            return self.getTypedRuleContext(plsqlParser.Windowing_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause" ):
                return visitor.visitOver_clause(self)
            else:
                return visitor.visitChildren(self)




    def over_clause(self):

        localctx = plsqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4365
            self.match(plsqlParser.OVER)
            self.state = 4366
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PARTITION:
                self.state = 4367
                self.query_partition_clause()


            self.state = 4374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.ORDER:
                self.state = 4370
                self.order_by_clause()
                self.state = 4372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.RANGE or _la==plsqlParser.ROWS:
                    self.state = 4371
                    self.windowing_clause()




            self.state = 4376
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Windowing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowing_type(self):
            return self.getTypedRuleContext(plsqlParser.Windowing_typeContext,0)


        def BETWEEN(self):
            return self.getToken(plsqlParser.BETWEEN, 0)

        def windowing_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Windowing_elementsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Windowing_elementsContext,i)


        def AND(self):
            return self.getToken(plsqlParser.AND, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_windowing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_clause" ):
                listener.enterWindowing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_clause" ):
                listener.exitWindowing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_clause" ):
                return visitor.visitWindowing_clause(self)
            else:
                return visitor.visitChildren(self)




    def windowing_clause(self):

        localctx = plsqlParser.Windowing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_windowing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4378
            self.windowing_type()
            self.state = 4385
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BETWEEN]:
                self.state = 4379
                self.match(plsqlParser.BETWEEN)
                self.state = 4380
                self.windowing_elements()
                self.state = 4381
                self.match(plsqlParser.AND)
                self.state = 4382
                self.windowing_elements()
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALL, plsqlParser.ANALYZE, plsqlParser.ANY, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONNECT_BY_ROOT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DISTINCT, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXISTS, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FALSE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PRIOR, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUE, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.PLUS_SIGN, plsqlParser.MINUS_SIGN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                self.state = 4384
                self.windowing_elements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Windowing_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_windowing_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_type" ):
                listener.enterWindowing_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_type" ):
                listener.exitWindowing_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_type" ):
                return visitor.visitWindowing_type(self)
            else:
                return visitor.visitChildren(self)




    def windowing_type(self):

        localctx = plsqlParser.Windowing_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_windowing_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4387
            _la = self._input.LA(1)
            if not(_la==plsqlParser.RANGE or _la==plsqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Windowing_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(plsqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(plsqlParser.PRECEDING, 0)

        def CURRENT(self):
            return self.getToken(plsqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(plsqlParser.ROW, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def FOLLOWING(self):
            return self.getToken(plsqlParser.FOLLOWING, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_windowing_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_elements" ):
                listener.enterWindowing_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_elements" ):
                listener.exitWindowing_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_elements" ):
                return visitor.visitWindowing_elements(self)
            else:
                return visitor.visitChildren(self)




    def windowing_elements(self):

        localctx = plsqlParser.Windowing_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_windowing_elements)
        self._la = 0 # Token type
        try:
            self.state = 4396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,558,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4389
                self.match(plsqlParser.UNBOUNDED)
                self.state = 4390
                self.match(plsqlParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4391
                self.match(plsqlParser.CURRENT)
                self.state = 4392
                self.match(plsqlParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4393
                self.concatenation()
                self.state = 4394
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FOLLOWING or _la==plsqlParser.PRECEDING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def using_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Using_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Using_elementContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_clause" ):
                listener.enterUsing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_clause" ):
                listener.exitUsing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing_clause" ):
                return visitor.visitUsing_clause(self)
            else:
                return visitor.visitChildren(self)




    def using_clause(self):

        localctx = plsqlParser.Using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_using_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4398
            self.match(plsqlParser.USING)
            self.state = 4408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,560,self._ctx)
            if la_ == 1:
                self.state = 4399
                self.match(plsqlParser.ASTERISK)
                pass

            elif la_ == 2:
                self.state = 4400
                self.using_element()
                self.state = 4405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,559,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4401
                        self.match(plsqlParser.COMMA)
                        self.state = 4402
                        self.using_element() 
                    self.state = 4407
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,559,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selected_element(self):
            return self.getTypedRuleContext(plsqlParser.Selected_elementContext,0)


        def IN(self):
            return self.getToken(plsqlParser.IN, 0)

        def OUT(self):
            return self.getToken(plsqlParser.OUT, 0)

        def column_alias(self):
            return self.getTypedRuleContext(plsqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_using_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_element" ):
                listener.enterUsing_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_element" ):
                listener.exitUsing_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing_element" ):
                return visitor.visitUsing_element(self)
            else:
                return visitor.visitChildren(self)




    def using_element(self):

        localctx = plsqlParser.Using_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_using_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,562,self._ctx)
            if la_ == 1:
                self.state = 4410
                self.match(plsqlParser.IN)
                self.state = 4412
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,561,self._ctx)
                if la_ == 1:
                    self.state = 4411
                    self.match(plsqlParser.OUT)



            elif la_ == 2:
                self.state = 4414
                self.match(plsqlParser.OUT)


            self.state = 4417
            self.selected_element()
            self.state = 4419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,563,self._ctx)
            if la_ == 1:
                self.state = 4418
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collect_order_by_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(plsqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_collect_order_by_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollect_order_by_part" ):
                listener.enterCollect_order_by_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollect_order_by_part" ):
                listener.exitCollect_order_by_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollect_order_by_part" ):
                return visitor.visitCollect_order_by_part(self)
            else:
                return visitor.visitChildren(self)




    def collect_order_by_part(self):

        localctx = plsqlParser.Collect_order_by_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_collect_order_by_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4421
            self.match(plsqlParser.ORDER)
            self.state = 4422
            self.match(plsqlParser.BY)
            self.state = 4423
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Within_or_over_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHIN(self):
            return self.getToken(plsqlParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(plsqlParser.GROUP, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(plsqlParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_within_or_over_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_or_over_part" ):
                listener.enterWithin_or_over_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_or_over_part" ):
                listener.exitWithin_or_over_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithin_or_over_part" ):
                return visitor.visitWithin_or_over_part(self)
            else:
                return visitor.visitChildren(self)




    def within_or_over_part(self):

        localctx = plsqlParser.Within_or_over_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_within_or_over_part)
        try:
            self.state = 4432
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.WITHIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4425
                self.match(plsqlParser.WITHIN)
                self.state = 4426
                self.match(plsqlParser.GROUP)
                self.state = 4427
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4428
                self.order_by_clause()
                self.state = 4429
                self.match(plsqlParser.RIGHT_PAREN)
                pass
            elif token in [plsqlParser.OVER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4431
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cost_matrix_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COST(self):
            return self.getToken(plsqlParser.COST, 0)

        def MODEL(self):
            return self.getToken(plsqlParser.MODEL, 0)

        def cost_class_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Cost_class_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Cost_class_nameContext,i)


        def VALUES(self):
            return self.getToken(plsqlParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def AUTO(self):
            return self.getToken(plsqlParser.AUTO, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_cost_matrix_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCost_matrix_clause" ):
                listener.enterCost_matrix_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCost_matrix_clause" ):
                listener.exitCost_matrix_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCost_matrix_clause" ):
                return visitor.visitCost_matrix_clause(self)
            else:
                return visitor.visitChildren(self)




    def cost_matrix_clause(self):

        localctx = plsqlParser.Cost_matrix_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_cost_matrix_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4434
            self.match(plsqlParser.COST)
            self.state = 4452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.MODEL]:
                self.state = 4435
                self.match(plsqlParser.MODEL)
                self.state = 4437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.AUTO:
                    self.state = 4436
                    self.match(plsqlParser.AUTO)


                pass
            elif token in [plsqlParser.LEFT_PAREN]:
                self.state = 4439
                self.match(plsqlParser.LEFT_PAREN)
                self.state = 4440
                self.cost_class_name()
                self.state = 4445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4441
                    self.match(plsqlParser.COMMA)
                    self.state = 4442
                    self.cost_class_name()
                    self.state = 4447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4448
                self.match(plsqlParser.RIGHT_PAREN)
                self.state = 4449
                self.match(plsqlParser.VALUES)
                self.state = 4450
                self.expression_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_passing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSING(self):
            return self.getToken(plsqlParser.PASSING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def BY(self):
            return self.getToken(plsqlParser.BY, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_passing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_passing_clause" ):
                listener.enterXml_passing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_passing_clause" ):
                listener.exitXml_passing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_passing_clause" ):
                return visitor.visitXml_passing_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_passing_clause(self):

        localctx = plsqlParser.Xml_passing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_xml_passing_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4454
            self.match(plsqlParser.PASSING)
            self.state = 4457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BY:
                self.state = 4455
                self.match(plsqlParser.BY)
                self.state = 4456
                self.match(plsqlParser.VALUE)


            self.state = 4459
            self.expression(0)
            self.state = 4461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 449)) | (1 << (plsqlParser.CHAR_STRING - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 4460
                self.column_alias()


            self.state = 4463
            self.match(plsqlParser.COMMA)
            self.state = 4464
            self.expression(0)
            self.state = 4466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,570,self._ctx)
            if la_ == 1:
                self.state = 4465
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_attributes_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(plsqlParser.XMLATTRIBUTES, 0)

        def xml_multiuse_expression_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Xml_multiuse_expression_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Xml_multiuse_expression_elementContext,i)


        def ENTITYESCAPING(self):
            return self.getToken(plsqlParser.ENTITYESCAPING, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(plsqlParser.NOENTITYESCAPING, 0)

        def SCHEMACHECK(self):
            return self.getToken(plsqlParser.SCHEMACHECK, 0)

        def NOSCHEMACHECK(self):
            return self.getToken(plsqlParser.NOSCHEMACHECK, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_xml_attributes_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attributes_clause" ):
                listener.enterXml_attributes_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attributes_clause" ):
                listener.exitXml_attributes_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_attributes_clause" ):
                return visitor.visitXml_attributes_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_attributes_clause(self):

        localctx = plsqlParser.Xml_attributes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_xml_attributes_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4468
            self.match(plsqlParser.XMLATTRIBUTES)
            self.state = 4469
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,571,self._ctx)
            if la_ == 1:
                self.state = 4470
                _la = self._input.LA(1)
                if not(_la==plsqlParser.ENTITYESCAPING or _la==plsqlParser.NOENTITYESCAPING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,572,self._ctx)
            if la_ == 1:
                self.state = 4473
                _la = self._input.LA(1)
                if not(_la==plsqlParser.NOSCHEMACHECK or _la==plsqlParser.SCHEMACHECK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4476
            self.xml_multiuse_expression_element()
            self.state = 4481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4477
                self.match(plsqlParser.COMMA)
                self.state = 4478
                self.xml_multiuse_expression_element()
                self.state = 4483
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4484
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_namespaces_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLNAMESPACES(self):
            return self.getToken(plsqlParser.XMLNAMESPACES, 0)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ConcatenationContext,i)


        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_aliasContext,i)


        def xml_general_default_part(self):
            return self.getTypedRuleContext(plsqlParser.Xml_general_default_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_namespaces_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespaces_clause" ):
                listener.enterXml_namespaces_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespaces_clause" ):
                listener.exitXml_namespaces_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_namespaces_clause" ):
                return visitor.visitXml_namespaces_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_namespaces_clause(self):

        localctx = plsqlParser.Xml_namespaces_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_xml_namespaces_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4486
            self.match(plsqlParser.XMLNAMESPACES)
            self.state = 4487
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,574,self._ctx)
            if la_ == 1:
                self.state = 4488
                self.concatenation()
                self.state = 4489
                self.column_alias()


            self.state = 4499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4493
                self.match(plsqlParser.COMMA)
                self.state = 4494
                self.concatenation()
                self.state = 4495
                self.column_alias()
                self.state = 4501
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.DEFAULT:
                self.state = 4502
                self.xml_general_default_part()


            self.state = 4505
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_table_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_column_name(self):
            return self.getTypedRuleContext(plsqlParser.Xml_column_nameContext,0)


        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def ORDINALITY(self):
            return self.getToken(plsqlParser.ORDINALITY, 0)

        def type_spec(self):
            return self.getTypedRuleContext(plsqlParser.Type_specContext,0)


        def PATH(self):
            return self.getToken(plsqlParser.PATH, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def xml_general_default_part(self):
            return self.getTypedRuleContext(plsqlParser.Xml_general_default_partContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_table_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_table_column" ):
                listener.enterXml_table_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_table_column" ):
                listener.exitXml_table_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_table_column" ):
                return visitor.visitXml_table_column(self)
            else:
                return visitor.visitChildren(self)




    def xml_table_column(self):

        localctx = plsqlParser.Xml_table_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_xml_table_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4507
            self.xml_column_name()
            self.state = 4518
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.FOR]:
                self.state = 4508
                self.match(plsqlParser.FOR)
                self.state = 4509
                self.match(plsqlParser.ORDINALITY)
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 4510
                self.type_spec()
                self.state = 4513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PATH:
                    self.state = 4511
                    self.match(plsqlParser.PATH)
                    self.state = 4512
                    self.concatenation()


                self.state = 4516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.DEFAULT:
                    self.state = 4515
                    self.xml_general_default_part()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_general_default_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_general_default_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_general_default_part" ):
                listener.enterXml_general_default_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_general_default_part" ):
                listener.exitXml_general_default_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_general_default_part" ):
                return visitor.visitXml_general_default_part(self)
            else:
                return visitor.visitChildren(self)




    def xml_general_default_part(self):

        localctx = plsqlParser.Xml_general_default_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_xml_general_default_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4520
            self.match(plsqlParser.DEFAULT)
            self.state = 4521
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_multiuse_expression_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def EVALNAME(self):
            return self.getToken(plsqlParser.EVALNAME, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_multiuse_expression_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_multiuse_expression_element" ):
                listener.enterXml_multiuse_expression_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_multiuse_expression_element" ):
                listener.exitXml_multiuse_expression_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_multiuse_expression_element" ):
                return visitor.visitXml_multiuse_expression_element(self)
            else:
                return visitor.visitChildren(self)




    def xml_multiuse_expression_element(self):

        localctx = plsqlParser.Xml_multiuse_expression_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_xml_multiuse_expression_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4523
            self.expression(0)
            self.state = 4530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS:
                self.state = 4524
                self.match(plsqlParser.AS)
                self.state = 4528
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,580,self._ctx)
                if la_ == 1:
                    self.state = 4525
                    self.id_expression()
                    pass

                elif la_ == 2:
                    self.state = 4526
                    self.match(plsqlParser.EVALNAME)
                    self.state = 4527
                    self.concatenation()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlroot_param_version_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(plsqlParser.VERSION, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmlroot_param_version_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlroot_param_version_part" ):
                listener.enterXmlroot_param_version_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlroot_param_version_part" ):
                listener.exitXmlroot_param_version_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlroot_param_version_part" ):
                return visitor.visitXmlroot_param_version_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlroot_param_version_part(self):

        localctx = plsqlParser.Xmlroot_param_version_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_xmlroot_param_version_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4532
            self.match(plsqlParser.VERSION)
            self.state = 4536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,582,self._ctx)
            if la_ == 1:
                self.state = 4533
                self.match(plsqlParser.NO)
                self.state = 4534
                self.match(plsqlParser.VALUE)
                pass

            elif la_ == 2:
                self.state = 4535
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlroot_param_standalone_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(plsqlParser.STANDALONE, 0)

        def YES(self):
            return self.getToken(plsqlParser.YES, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_xmlroot_param_standalone_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlroot_param_standalone_part" ):
                listener.enterXmlroot_param_standalone_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlroot_param_standalone_part" ):
                listener.exitXmlroot_param_standalone_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlroot_param_standalone_part" ):
                return visitor.visitXmlroot_param_standalone_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlroot_param_standalone_part(self):

        localctx = plsqlParser.Xmlroot_param_standalone_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_xmlroot_param_standalone_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4538
            self.match(plsqlParser.STANDALONE)
            self.state = 4544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.YES]:
                self.state = 4539
                self.match(plsqlParser.YES)
                pass
            elif token in [plsqlParser.NO]:
                self.state = 4540
                self.match(plsqlParser.NO)
                self.state = 4542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.VALUE:
                    self.state = 4541
                    self.match(plsqlParser.VALUE)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlserialize_param_enconding_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCODING(self):
            return self.getToken(plsqlParser.ENCODING, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmlserialize_param_enconding_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_enconding_part" ):
                listener.enterXmlserialize_param_enconding_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_enconding_part" ):
                listener.exitXmlserialize_param_enconding_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_enconding_part" ):
                return visitor.visitXmlserialize_param_enconding_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_enconding_part(self):

        localctx = plsqlParser.Xmlserialize_param_enconding_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_xmlserialize_param_enconding_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4546
            self.match(plsqlParser.ENCODING)
            self.state = 4547
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlserialize_param_version_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(plsqlParser.VERSION, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmlserialize_param_version_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_version_part" ):
                listener.enterXmlserialize_param_version_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_version_part" ):
                listener.exitXmlserialize_param_version_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_version_part" ):
                return visitor.visitXmlserialize_param_version_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_version_part(self):

        localctx = plsqlParser.Xmlserialize_param_version_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_xmlserialize_param_version_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4549
            self.match(plsqlParser.VERSION)
            self.state = 4550
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlserialize_param_ident_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def INDENT(self):
            return self.getToken(plsqlParser.INDENT, 0)

        def SIZE(self):
            return self.getToken(plsqlParser.SIZE, 0)

        def concatenation(self):
            return self.getTypedRuleContext(plsqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xmlserialize_param_ident_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_ident_part" ):
                listener.enterXmlserialize_param_ident_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_ident_part" ):
                listener.exitXmlserialize_param_ident_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_ident_part" ):
                return visitor.visitXmlserialize_param_ident_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_ident_part(self):

        localctx = plsqlParser.Xmlserialize_param_ident_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_xmlserialize_param_ident_part)
        self._la = 0 # Token type
        try:
            self.state = 4560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4552
                self.match(plsqlParser.NO)
                self.state = 4553
                self.match(plsqlParser.INDENT)
                pass
            elif token in [plsqlParser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4554
                self.match(plsqlParser.INDENT)
                self.state = 4558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.SIZE:
                    self.state = 4555
                    self.match(plsqlParser.SIZE)
                    self.state = 4556
                    self.match(plsqlParser.EQUALS_OP)
                    self.state = 4557
                    self.concatenation()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_plus_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenever_command(self):
            return self.getTypedRuleContext(plsqlParser.Whenever_commandContext,0)


        def exit_command(self):
            return self.getTypedRuleContext(plsqlParser.Exit_commandContext,0)


        def prompt_command(self):
            return self.getTypedRuleContext(plsqlParser.Prompt_commandContext,0)


        def set_command(self):
            return self.getTypedRuleContext(plsqlParser.Set_commandContext,0)


        def show_errors_command(self):
            return self.getTypedRuleContext(plsqlParser.Show_errors_commandContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_sql_plus_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_plus_command" ):
                listener.enterSql_plus_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_plus_command" ):
                listener.exitSql_plus_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_plus_command" ):
                return visitor.visitSql_plus_command(self)
            else:
                return visitor.visitChildren(self)




    def sql_plus_command(self):

        localctx = plsqlParser.Sql_plus_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_sql_plus_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.SOLIDUS]:
                self.state = 4562
                self.match(plsqlParser.SOLIDUS)
                pass
            elif token in [plsqlParser.WHENEVER]:
                self.state = 4563
                self.whenever_command()
                pass
            elif token in [plsqlParser.EXIT]:
                self.state = 4564
                self.exit_command()
                pass
            elif token in [plsqlParser.PROMPT]:
                self.state = 4565
                self.prompt_command()
                pass
            elif token in [plsqlParser.SET]:
                self.state = 4566
                self.set_command()
                pass
            elif token in [plsqlParser.SHOW]:
                self.state = 4567
                self.show_errors_command()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Whenever_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHENEVER(self):
            return self.getToken(plsqlParser.WHENEVER, 0)

        def SQLERROR(self):
            return self.getToken(plsqlParser.SQLERROR, 0)

        def OSERROR(self):
            return self.getToken(plsqlParser.OSERROR, 0)

        def EXIT(self):
            return self.getToken(plsqlParser.EXIT, 0)

        def CONTINUE(self):
            return self.getToken(plsqlParser.CONTINUE, 0)

        def SUCCESS(self):
            return self.getToken(plsqlParser.SUCCESS, 0)

        def FAILURE(self):
            return self.getToken(plsqlParser.FAILURE, 0)

        def WARNING(self):
            return self.getToken(plsqlParser.WARNING, 0)

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(plsqlParser.ROLLBACK, 0)

        def NONE(self):
            return self.getToken(plsqlParser.NONE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_whenever_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenever_command" ):
                listener.enterWhenever_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenever_command" ):
                listener.exitWhenever_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenever_command" ):
                return visitor.visitWhenever_command(self)
            else:
                return visitor.visitChildren(self)




    def whenever_command(self):

        localctx = plsqlParser.Whenever_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_whenever_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4570
            self.match(plsqlParser.WHENEVER)
            self.state = 4571
            _la = self._input.LA(1)
            if not(_la==plsqlParser.OSERROR or _la==plsqlParser.SQLERROR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.EXIT]:
                self.state = 4572
                self.match(plsqlParser.EXIT)
                self.state = 4573
                _la = self._input.LA(1)
                if not(_la==plsqlParser.FAILURE or _la==plsqlParser.SUCCESS or _la==plsqlParser.WARNING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4574
                _la = self._input.LA(1)
                if not(_la==plsqlParser.COMMIT or _la==plsqlParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [plsqlParser.CONTINUE]:
                self.state = 4575
                self.match(plsqlParser.CONTINUE)
                self.state = 4576
                _la = self._input.LA(1)
                if not(_la==plsqlParser.COMMIT or _la==plsqlParser.NONE or _la==plsqlParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Regular_idContext,i)


        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def ON(self):
            return self.getToken(plsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(plsqlParser.OFF, 0)

        def numeric(self):
            return self.getTypedRuleContext(plsqlParser.NumericContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_set_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_command" ):
                listener.enterSet_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_command" ):
                listener.exitSet_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_command" ):
                return visitor.visitSet_command(self)
            else:
                return visitor.visitChildren(self)




    def set_command(self):

        localctx = plsqlParser.Set_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_set_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4579
            self.match(plsqlParser.SET)
            self.state = 4580
            self.regular_id()
            self.state = 4586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,589,self._ctx)
            if la_ == 1:
                self.state = 4581
                self.match(plsqlParser.CHAR_STRING)
                pass

            elif la_ == 2:
                self.state = 4582
                self.match(plsqlParser.ON)
                pass

            elif la_ == 3:
                self.state = 4583
                self.match(plsqlParser.OFF)
                pass

            elif la_ == 4:
                self.state = 4584
                self.numeric()
                pass

            elif la_ == 5:
                self.state = 4585
                self.regular_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exit_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(plsqlParser.EXIT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_exit_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_command" ):
                listener.enterExit_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_command" ):
                listener.exitExit_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit_command" ):
                return visitor.visitExit_command(self)
            else:
                return visitor.visitChildren(self)




    def exit_command(self):

        localctx = plsqlParser.Exit_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_exit_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4588
            self.match(plsqlParser.EXIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Prompt_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROMPT(self):
            return self.getToken(plsqlParser.PROMPT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_prompt_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrompt_command" ):
                listener.enterPrompt_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrompt_command" ):
                listener.exitPrompt_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrompt_command" ):
                return visitor.visitPrompt_command(self)
            else:
                return visitor.visitChildren(self)




    def prompt_command(self):

        localctx = plsqlParser.Prompt_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_prompt_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4590
            self.match(plsqlParser.PROMPT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Show_errors_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(plsqlParser.SHOW, 0)

        def ERR(self):
            return self.getToken(plsqlParser.ERR, 0)

        def ERRORS(self):
            return self.getToken(plsqlParser.ERRORS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_show_errors_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_errors_command" ):
                listener.enterShow_errors_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_errors_command" ):
                listener.exitShow_errors_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShow_errors_command" ):
                return visitor.visitShow_errors_command(self)
            else:
                return visitor.visitChildren(self)




    def show_errors_command(self):

        localctx = plsqlParser.Show_errors_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_show_errors_command)
        try:
            self.state = 4596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,590,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4592
                self.match(plsqlParser.SHOW)
                self.state = 4593
                self.match(plsqlParser.ERR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4594
                self.match(plsqlParser.SHOW)
                self.state = 4595
                self.match(plsqlParser.ERRORS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_extension_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_list(self):
            return self.getTypedRuleContext(plsqlParser.Expression_listContext,0)


        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def FOR(self):
            return self.getToken(plsqlParser.FOR, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_partition_extension_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_extension_clause" ):
                listener.enterPartition_extension_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_extension_clause" ):
                listener.exitPartition_extension_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartition_extension_clause" ):
                return visitor.visitPartition_extension_clause(self)
            else:
                return visitor.visitChildren(self)




    def partition_extension_clause(self):

        localctx = plsqlParser.Partition_extension_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_partition_extension_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4598
            _la = self._input.LA(1)
            if not(_la==plsqlParser.PARTITION or _la==plsqlParser.SUBPARTITION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.FOR:
                self.state = 4599
                self.match(plsqlParser.FOR)


            self.state = 4602
            self.expression_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def alias_quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Alias_quoted_stringContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = plsqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.state = 4612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,594,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.AS:
                    self.state = 4604
                    self.match(plsqlParser.AS)


                self.state = 4609
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                    self.state = 4607
                    self.r_id()
                    pass
                elif token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                    self.state = 4608
                    self.alias_quoted_string()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4611
                self.match(plsqlParser.AS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def alias_quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Alias_quoted_stringContext,0)


        def AS(self):
            return self.getToken(plsqlParser.AS, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = plsqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_table_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AS:
                self.state = 4614
                self.match(plsqlParser.AS)


            self.state = 4619
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.state = 4617
                self.r_id()
                pass
            elif token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                self.state = 4618
                self.alias_quoted_string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alias_quoted_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_alias_quoted_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_quoted_string" ):
                listener.enterAlias_quoted_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_quoted_string" ):
                listener.exitAlias_quoted_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias_quoted_string" ):
                return visitor.visitAlias_quoted_string(self)
            else:
                return visitor.visitChildren(self)




    def alias_quoted_string(self):

        localctx = plsqlParser.Alias_quoted_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_alias_quoted_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4621
            self.quoted_string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(plsqlParser.WHERE, 0)

        def current_of_clause(self):
            return self.getTypedRuleContext(plsqlParser.Current_of_clauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhere_clause" ):
                return visitor.visitWhere_clause(self)
            else:
                return visitor.visitChildren(self)




    def where_clause(self):

        localctx = plsqlParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4623
            self.match(plsqlParser.WHERE)
            self.state = 4626
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CURRENT]:
                self.state = 4624
                self.current_of_clause()
                pass
            elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ALL, plsqlParser.ANALYZE, plsqlParser.ANY, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CASE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONNECT_BY_ROOT, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DISTINCT, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXISTS, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FALSE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NOT, plsqlParser.NULL, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.PRIOR, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUE, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT, plsqlParser.CHAR_STRING, plsqlParser.DELIMITED_ID, plsqlParser.LEFT_PAREN, plsqlParser.PLUS_SIGN, plsqlParser.MINUS_SIGN, plsqlParser.BINDVAR, plsqlParser.COLON, plsqlParser.REGULAR_ID]:
                self.state = 4625
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Current_of_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(plsqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(plsqlParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(plsqlParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_current_of_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrent_of_clause" ):
                listener.enterCurrent_of_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrent_of_clause" ):
                listener.exitCurrent_of_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrent_of_clause" ):
                return visitor.visitCurrent_of_clause(self)
            else:
                return visitor.visitChildren(self)




    def current_of_clause(self):

        localctx = plsqlParser.Current_of_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_current_of_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4628
            self.match(plsqlParser.CURRENT)
            self.state = 4629
            self.match(plsqlParser.OF)
            self.state = 4630
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(plsqlParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Variable_nameContext,i)


        def BULK(self):
            return self.getToken(plsqlParser.BULK, 0)

        def COLLECT(self):
            return self.getToken(plsqlParser.COLLECT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInto_clause" ):
                return visitor.visitInto_clause(self)
            else:
                return visitor.visitChildren(self)




    def into_clause(self):

        localctx = plsqlParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_into_clause)
        self._la = 0 # Token type
        try:
            self.state = 4652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.INTO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4632
                self.match(plsqlParser.INTO)
                self.state = 4633
                self.variable_name()
                self.state = 4638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4634
                    self.match(plsqlParser.COMMA)
                    self.state = 4635
                    self.variable_name()
                    self.state = 4640
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [plsqlParser.BULK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4641
                self.match(plsqlParser.BULK)
                self.state = 4642
                self.match(plsqlParser.COLLECT)
                self.state = 4643
                self.match(plsqlParser.INTO)
                self.state = 4644
                self.variable_name()
                self.state = 4649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4645
                    self.match(plsqlParser.COMMA)
                    self.state = 4646
                    self.variable_name()
                    self.state = 4651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def quoted_string(self):
            return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_xml_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_column_name" ):
                listener.enterXml_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_column_name" ):
                listener.exitXml_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_column_name" ):
                return visitor.visitXml_column_name(self)
            else:
                return visitor.visitChildren(self)




    def xml_column_name(self):

        localctx = plsqlParser.Xml_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_xml_column_name)
        try:
            self.state = 4656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4654
                self.r_id()
                pass
            elif token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4655
                self.quoted_string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cost_class_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cost_class_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCost_class_name" ):
                listener.enterCost_class_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCost_class_name" ):
                listener.exitCost_class_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCost_class_name" ):
                return visitor.visitCost_class_name(self)
            else:
                return visitor.visitChildren(self)




    def cost_class_name(self):

        localctx = plsqlParser.Cost_class_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_cost_class_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4658
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_name" ):
                return visitor.visitAttribute_name(self)
            else:
                return visitor.visitChildren(self)




    def attribute_name(self):

        localctx = plsqlParser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_attribute_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4660
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepoint_name" ):
                return visitor.visitSavepoint_name(self)
            else:
                return visitor.visitChildren(self)




    def savepoint_name(self):

        localctx = plsqlParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4662
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollback_segment_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_rollback_segment_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_segment_name" ):
                listener.enterRollback_segment_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_segment_name" ):
                listener.exitRollback_segment_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback_segment_name" ):
                return visitor.visitRollback_segment_name(self)
            else:
                return visitor.visitChildren(self)




    def rollback_segment_name(self):

        localctx = plsqlParser.Rollback_segment_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_rollback_segment_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4664
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_var_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_var_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_var_name" ):
                listener.enterTable_var_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_var_name" ):
                listener.exitTable_var_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_var_name" ):
                return visitor.visitTable_var_name(self)
            else:
                return visitor.visitChildren(self)




    def table_var_name(self):

        localctx = plsqlParser.Table_var_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_table_var_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4666
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchema_name" ):
                return visitor.visitSchema_name(self)
            else:
                return visitor.visitChildren(self)




    def schema_name(self):

        localctx = plsqlParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4668
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Routine_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def link_name(self):
            return self.getTypedRuleContext(plsqlParser.Link_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_routine_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine_name" ):
                listener.enterRoutine_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine_name" ):
                listener.exitRoutine_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutine_name" ):
                return visitor.visitRoutine_name(self)
            else:
                return visitor.visitChildren(self)




    def routine_name(self):

        localctx = plsqlParser.Routine_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_routine_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4670
            self.r_id()
            self.state = 4675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 4671
                self.match(plsqlParser.PERIOD)
                self.state = 4672
                self.id_expression()
                self.state = 4677
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AT_SIGN:
                self.state = 4678
                self.match(plsqlParser.AT_SIGN)
                self.state = 4679
                self.link_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_package_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_name" ):
                listener.enterPackage_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_name" ):
                listener.exitPackage_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_name" ):
                return visitor.visitPackage_name(self)
            else:
                return visitor.visitChildren(self)




    def package_name(self):

        localctx = plsqlParser.Package_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_package_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4682
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Implementation_type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_implementation_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementation_type_name" ):
                listener.enterImplementation_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementation_type_name" ):
                listener.exitImplementation_type_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplementation_type_name" ):
                return visitor.visitImplementation_type_name(self)
            else:
                return visitor.visitChildren(self)




    def implementation_type_name(self):

        localctx = plsqlParser.Implementation_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_implementation_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4684
            self.r_id()
            self.state = 4687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 4685
                self.match(plsqlParser.PERIOD)
                self.state = 4686
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_name" ):
                listener.enterParameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_name" ):
                listener.exitParameter_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_name" ):
                return visitor.visitParameter_name(self)
            else:
                return visitor.visitChildren(self)




    def parameter_name(self):

        localctx = plsqlParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_parameter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4689
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reference_model_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_reference_model_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_model_name" ):
                listener.enterReference_model_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_model_name" ):
                listener.exitReference_model_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_model_name" ):
                return visitor.visitReference_model_name(self)
            else:
                return visitor.visitChildren(self)




    def reference_model_name(self):

        localctx = plsqlParser.Reference_model_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_reference_model_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4691
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Main_model_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_main_model_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_model_name" ):
                listener.enterMain_model_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_model_name" ):
                listener.exitMain_model_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain_model_name" ):
                return visitor.visitMain_model_name(self)
            else:
                return visitor.visitChildren(self)




    def main_model_name(self):

        localctx = plsqlParser.Main_model_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_main_model_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4693
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_aggregate_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_name" ):
                listener.enterAggregate_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_name" ):
                listener.exitAggregate_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_function_name" ):
                return visitor.visitAggregate_function_name(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_function_name(self):

        localctx = plsqlParser.Aggregate_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_aggregate_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4695
            self.r_id()
            self.state = 4700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 4696
                self.match(plsqlParser.PERIOD)
                self.state = 4697
                self.id_expression()
                self.state = 4702
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_query_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_name" ):
                listener.enterQuery_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_name" ):
                listener.exitQuery_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_name" ):
                return visitor.visitQuery_name(self)
            else:
                return visitor.visitChildren(self)




    def query_name(self):

        localctx = plsqlParser.Query_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_query_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4703
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def link_name(self):
            return self.getTypedRuleContext(plsqlParser.Link_nameContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_constraint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_name" ):
                listener.enterConstraint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_name" ):
                listener.exitConstraint_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_name" ):
                return visitor.visitConstraint_name(self)
            else:
                return visitor.visitChildren(self)




    def constraint_name(self):

        localctx = plsqlParser.Constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_constraint_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4705
            self.r_id()
            self.state = 4710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 4706
                self.match(plsqlParser.PERIOD)
                self.state = 4707
                self.id_expression()
                self.state = 4712
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.AT_SIGN:
                self.state = 4713
                self.match(plsqlParser.AT_SIGN)
                self.state = 4714
                self.link_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Label_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel_name" ):
                return visitor.visitLabel_name(self)
            else:
                return visitor.visitChildren(self)




    def label_name(self):

        localctx = plsqlParser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_label_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4717
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name" ):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)




    def type_name(self):

        localctx = plsqlParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4719
            self.id_expression()
            self.state = 4724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 4720
                self.match(plsqlParser.PERIOD)
                self.state = 4721
                self.id_expression()
                self.state = 4726
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_sequence_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_name" ):
                listener.enterSequence_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_name" ):
                listener.exitSequence_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_name" ):
                return visitor.visitSequence_name(self)
            else:
                return visitor.visitChildren(self)




    def sequence_name(self):

        localctx = plsqlParser.Sequence_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_sequence_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4727
            self.id_expression()
            self.state = 4732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 4728
                self.match(plsqlParser.PERIOD)
                self.state = 4729
                self.id_expression()
                self.state = 4734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exception_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_exception_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_name" ):
                listener.enterException_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_name" ):
                listener.exitException_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_name" ):
                return visitor.visitException_name(self)
            else:
                return visitor.visitChildren(self)




    def exception_name(self):

        localctx = plsqlParser.Exception_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_exception_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4735
            self.r_id()
            self.state = 4740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.PERIOD:
                self.state = 4736
                self.match(plsqlParser.PERIOD)
                self.state = 4737
                self.id_expression()
                self.state = 4742
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_name" ):
                return visitor.visitFunction_name(self)
            else:
                return visitor.visitChildren(self)




    def function_name(self):

        localctx = plsqlParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4743
            self.r_id()
            self.state = 4746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 4744
                self.match(plsqlParser.PERIOD)
                self.state = 4745
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_procedure_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_name" ):
                listener.enterProcedure_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_name" ):
                listener.exitProcedure_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_name" ):
                return visitor.visitProcedure_name(self)
            else:
                return visitor.visitChildren(self)




    def procedure_name(self):

        localctx = plsqlParser.Procedure_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_procedure_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4748
            self.r_id()
            self.state = 4751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 4749
                self.match(plsqlParser.PERIOD)
                self.state = 4750
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_name" ):
                return visitor.visitTrigger_name(self)
            else:
                return visitor.visitChildren(self)




    def trigger_name(self):

        localctx = plsqlParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_trigger_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4753
            self.r_id()
            self.state = 4756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 4754
                self.match(plsqlParser.PERIOD)
                self.state = 4755
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name" ):
                listener.enterVariable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name" ):
                listener.exitVariable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_name" ):
                return visitor.visitVariable_name(self)
            else:
                return visitor.visitChildren(self)




    def variable_name(self):

        localctx = plsqlParser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_variable_name)
        try:
            self.state = 4760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4758
                self.dot_id()
                pass
            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4759
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_name" ):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)




    def index_name(self):

        localctx = plsqlParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4762
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_name" ):
                return visitor.visitCursor_name(self)
            else:
                return visitor.visitChildren(self)




    def cursor_name(self):

        localctx = plsqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_cursor_name)
        try:
            self.state = 4766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4764
                self.r_id()
                pass
            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4765
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Record_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(plsqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_record_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_name" ):
                listener.enterRecord_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_name" ):
                listener.exitRecord_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_name" ):
                return visitor.visitRecord_name(self)
            else:
                return visitor.visitChildren(self)




    def record_name(self):

        localctx = plsqlParser.Record_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_record_name)
        try:
            self.state = 4770
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4768
                self.r_id()
                pass
            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4769
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collection_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(plsqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_collection_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_name" ):
                listener.enterCollection_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_name" ):
                listener.exitCollection_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollection_name" ):
                return visitor.visitCollection_name(self)
            else:
                return visitor.visitChildren(self)




    def collection_name(self):

        localctx = plsqlParser.Collection_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_collection_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4772
            self.r_id()
            self.state = 4775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.PERIOD:
                self.state = 4773
                self.match(plsqlParser.PERIOD)
                self.state = 4774
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Link_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_link_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLink_name" ):
                listener.enterLink_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLink_name" ):
                listener.exitLink_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLink_name" ):
                return visitor.visitLink_name(self)
            else:
                return visitor.visitChildren(self)




    def link_name(self):

        localctx = plsqlParser.Link_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_link_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4777
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = plsqlParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4779
            self.r_id()
            self.state = 4784
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,618,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4780
                    self.match(plsqlParser.PERIOD)
                    self.state = 4781
                    self.id_expression() 
                self.state = 4786
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,618,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tableview_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def link_name(self):
            return self.getTypedRuleContext(plsqlParser.Link_nameContext,0)


        def partition_extension_clause(self):
            return self.getTypedRuleContext(plsqlParser.Partition_extension_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_tableview_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableview_name" ):
                listener.enterTableview_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableview_name" ):
                listener.exitTableview_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableview_name" ):
                return visitor.visitTableview_name(self)
            else:
                return visitor.visitChildren(self)




    def tableview_name(self):

        localctx = plsqlParser.Tableview_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_tableview_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4787
            self.dot_id()
            self.state = 4791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,619,self._ctx)
            if la_ == 1:
                self.state = 4788
                self.match(plsqlParser.AT_SIGN)
                self.state = 4789
                self.link_name()

            elif la_ == 2:
                self.state = 4790
                self.partition_extension_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._id_expression = None # Id_expressionContext
            self.fields = list() # of Id_expressionContexts

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_dot_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_id" ):
                listener.enterDot_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_id" ):
                listener.exitDot_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDot_id" ):
                return visitor.visitDot_id(self)
            else:
                return visitor.visitChildren(self)




    def dot_id(self):

        localctx = plsqlParser.Dot_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_dot_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4793
            localctx._id_expression = self.id_expression()
            localctx.fields.append(localctx._id_expression)
            self.state = 4798
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,620,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4794
                    self.match(plsqlParser.PERIOD)
                    self.state = 4795
                    localctx._id_expression = self.id_expression()
                    localctx.fields.append(localctx._id_expression) 
                self.state = 4800
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,620,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_star

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar" ):
                listener.enterStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar" ):
                listener.exitStar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar" ):
                return visitor.visitStar(self)
            else:
                return visitor.visitChildren(self)




    def star(self):

        localctx = plsqlParser.StarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_star)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4801
            self.match(plsqlParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keep_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def DENSE_RANK(self):
            return self.getToken(plsqlParser.DENSE_RANK, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(plsqlParser.Order_by_clauseContext,0)


        def FIRST(self):
            return self.getToken(plsqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(plsqlParser.LAST, 0)

        def over_clause(self):
            return self.getTypedRuleContext(plsqlParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_keep_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeep_clause" ):
                listener.enterKeep_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeep_clause" ):
                listener.exitKeep_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeep_clause" ):
                return visitor.visitKeep_clause(self)
            else:
                return visitor.visitChildren(self)




    def keep_clause(self):

        localctx = plsqlParser.Keep_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_keep_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4803
            self.match(plsqlParser.KEEP)
            self.state = 4804
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4805
            self.match(plsqlParser.DENSE_RANK)
            self.state = 4806
            _la = self._input.LA(1)
            if not(_la==plsqlParser.FIRST or _la==plsqlParser.LAST):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4807
            self.order_by_clause()
            self.state = 4808
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 4810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,621,self._ctx)
            if la_ == 1:
                self.state = 4809
                self.over_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._argument = None # ArgumentContext
            self.argument_list = list() # of ArgumentContexts

        def keep_clause(self):
            return self.getTypedRuleContext(plsqlParser.Keep_clauseContext,0)


        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ArgumentContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument" ):
                listener.enterFunction_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument" ):
                listener.exitFunction_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument" ):
                return visitor.visitFunction_argument(self)
            else:
                return visitor.visitChildren(self)




    def function_argument(self):

        localctx = plsqlParser.Function_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_function_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4812
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)) | (1 << (plsqlParser.DEFINER - 64)) | (1 << (plsqlParser.DETERMINISTIC - 64)) | (1 << (plsqlParser.DIMENSION - 64)) | (1 << (plsqlParser.DISABLE - 64)) | (1 << (plsqlParser.DISASSOCIATE - 64)) | (1 << (plsqlParser.DISTINCT - 64)) | (1 << (plsqlParser.DOCUMENT - 64)) | (1 << (plsqlParser.DOUBLE - 64)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (plsqlParser.EACH - 64)) | (1 << (plsqlParser.ELEMENT - 64)) | (1 << (plsqlParser.EMPTY - 64)) | (1 << (plsqlParser.ENABLE - 64)) | (1 << (plsqlParser.ENCODING - 64)) | (1 << (plsqlParser.ENTITYESCAPING - 64)) | (1 << (plsqlParser.ERR - 64)) | (1 << (plsqlParser.ERRORS - 64)) | (1 << (plsqlParser.ESCAPE - 64)) | (1 << (plsqlParser.EVALNAME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)) | (1 << (plsqlParser.GROUPING - 128)) | (1 << (plsqlParser.HASH - 128)) | (1 << (plsqlParser.HIDE - 128)) | (1 << (plsqlParser.HOUR - 128)) | (1 << (plsqlParser.IGNORE - 128)) | (1 << (plsqlParser.IMMEDIATE - 128)) | (1 << (plsqlParser.INCLUDE - 128)) | (1 << (plsqlParser.INCLUDING - 128)) | (1 << (plsqlParser.INCREMENT - 128)) | (1 << (plsqlParser.INDENT - 128)) | (1 << (plsqlParser.INDEXED - 128)) | (1 << (plsqlParser.INDICATOR - 128)) | (1 << (plsqlParser.INDICES - 128)) | (1 << (plsqlParser.INFINITE - 128)) | (1 << (plsqlParser.INLINE - 128)) | (1 << (plsqlParser.INNER - 128)) | (1 << (plsqlParser.INOUT - 128)) | (1 << (plsqlParser.INSTANTIABLE - 128)) | (1 << (plsqlParser.INSTEAD - 128)) | (1 << (plsqlParser.INT - 128)) | (1 << (plsqlParser.INTEGER - 128)) | (1 << (plsqlParser.INTERVAL - 128)) | (1 << (plsqlParser.INVALIDATE - 128)) | (1 << (plsqlParser.ISOLATION - 128)) | (1 << (plsqlParser.ITERATE - 128)) | (1 << (plsqlParser.JAVA - 128)) | (1 << (plsqlParser.JOIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (plsqlParser.KEEP - 192)) | (1 << (plsqlParser.LANGUAGE - 192)) | (1 << (plsqlParser.LAST - 192)) | (1 << (plsqlParser.LAST_VALUE - 192)) | (1 << (plsqlParser.LEADING - 192)) | (1 << (plsqlParser.LEFT - 192)) | (1 << (plsqlParser.LEVEL - 192)) | (1 << (plsqlParser.LIBRARY - 192)) | (1 << (plsqlParser.LIKE2 - 192)) | (1 << (plsqlParser.LIKE4 - 192)) | (1 << (plsqlParser.LIKEC - 192)) | (1 << (plsqlParser.LIMIT - 192)) | (1 << (plsqlParser.LOCAL - 192)) | (1 << (plsqlParser.LOCKED - 192)) | (1 << (plsqlParser.LOG - 192)) | (1 << (plsqlParser.LOGOFF - 192)) | (1 << (plsqlParser.LOGON - 192)) | (1 << (plsqlParser.LONG - 192)) | (1 << (plsqlParser.LOOP - 192)) | (1 << (plsqlParser.MAIN - 192)) | (1 << (plsqlParser.MAP - 192)) | (1 << (plsqlParser.MATCHED - 192)) | (1 << (plsqlParser.MAXVALUE - 192)) | (1 << (plsqlParser.MEASURES - 192)) | (1 << (plsqlParser.MEMBER - 192)) | (1 << (plsqlParser.MERGE - 192)) | (1 << (plsqlParser.MINUTE - 192)) | (1 << (plsqlParser.MINVALUE - 192)) | (1 << (plsqlParser.MLSLABEL - 192)) | (1 << (plsqlParser.MODEL - 192)) | (1 << (plsqlParser.MODIFY - 192)) | (1 << (plsqlParser.MONTH - 192)) | (1 << (plsqlParser.MULTISET - 192)) | (1 << (plsqlParser.NAME - 192)) | (1 << (plsqlParser.NAN - 192)) | (1 << (plsqlParser.NATURAL - 192)) | (1 << (plsqlParser.NATURALN - 192)) | (1 << (plsqlParser.NAV - 192)) | (1 << (plsqlParser.NCHAR - 192)) | (1 << (plsqlParser.NCHAR_CS - 192)) | (1 << (plsqlParser.NCLOB - 192)) | (1 << (plsqlParser.NESTED - 192)) | (1 << (plsqlParser.NEW - 192)) | (1 << (plsqlParser.NO - 192)) | (1 << (plsqlParser.NOAUDIT - 192)) | (1 << (plsqlParser.NOCOPY - 192)) | (1 << (plsqlParser.NOCYCLE - 192)) | (1 << (plsqlParser.NOENTITYESCAPING - 192)) | (1 << (plsqlParser.NONE - 192)) | (1 << (plsqlParser.NOSCHEMACHECK - 192)) | (1 << (plsqlParser.NOT - 192)) | (1 << (plsqlParser.NULL - 192)) | (1 << (plsqlParser.NULLS - 192)) | (1 << (plsqlParser.NUMBER - 192)) | (1 << (plsqlParser.NUMERIC - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (plsqlParser.NVARCHAR2 - 256)) | (1 << (plsqlParser.OBJECT - 256)) | (1 << (plsqlParser.OFF - 256)) | (1 << (plsqlParser.OID - 256)) | (1 << (plsqlParser.OLD - 256)) | (1 << (plsqlParser.ONLY - 256)) | (1 << (plsqlParser.OPEN - 256)) | (1 << (plsqlParser.ORADATA - 256)) | (1 << (plsqlParser.ORDINALITY - 256)) | (1 << (plsqlParser.OSERROR - 256)) | (1 << (plsqlParser.OUT - 256)) | (1 << (plsqlParser.OUTER - 256)) | (1 << (plsqlParser.OVER - 256)) | (1 << (plsqlParser.OVERRIDING - 256)) | (1 << (plsqlParser.PACKAGE - 256)) | (1 << (plsqlParser.PARALLEL_ENABLE - 256)) | (1 << (plsqlParser.PARAMETERS - 256)) | (1 << (plsqlParser.PARENT - 256)) | (1 << (plsqlParser.PARTITION - 256)) | (1 << (plsqlParser.PASSING - 256)) | (1 << (plsqlParser.PATH - 256)) | (1 << (plsqlParser.PIPELINED - 256)) | (1 << (plsqlParser.PLAN - 256)) | (1 << (plsqlParser.PLS_INTEGER - 256)) | (1 << (plsqlParser.POSITIVE - 256)) | (1 << (plsqlParser.POSITIVEN - 256)) | (1 << (plsqlParser.PRAGMA - 256)) | (1 << (plsqlParser.PRECEDING - 256)) | (1 << (plsqlParser.PRECISION - 256)) | (1 << (plsqlParser.PRESENT - 256)) | (1 << (plsqlParser.PRIOR - 256)) | (1 << (plsqlParser.RAISE - 256)) | (1 << (plsqlParser.RANGE - 256)) | (1 << (plsqlParser.RAW - 256)) | (1 << (plsqlParser.READ - 256)) | (1 << (plsqlParser.REAL - 256)) | (1 << (plsqlParser.RECORD - 256)) | (1 << (plsqlParser.REF - 256)) | (1 << (plsqlParser.REFERENCE - 256)) | (1 << (plsqlParser.REFERENCING - 256)) | (1 << (plsqlParser.REJECT - 256)) | (1 << (plsqlParser.RELIES_ON - 256)) | (1 << (plsqlParser.RENAME - 256)) | (1 << (plsqlParser.REPLACE - 256)) | (1 << (plsqlParser.RESPECT - 256)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 256)) | (1 << (plsqlParser.RESULT - 256)) | (1 << (plsqlParser.RESULT_CACHE - 256)) | (1 << (plsqlParser.RETURN - 256)) | (1 << (plsqlParser.RETURNING - 256)) | (1 << (plsqlParser.REUSE - 256)) | (1 << (plsqlParser.REVERSE - 256)) | (1 << (plsqlParser.RIGHT - 256)) | (1 << (plsqlParser.ROLLBACK - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (plsqlParser.ROLLUP - 320)) | (1 << (plsqlParser.ROW - 320)) | (1 << (plsqlParser.ROWID - 320)) | (1 << (plsqlParser.ROWS - 320)) | (1 << (plsqlParser.RULES - 320)) | (1 << (plsqlParser.SAMPLE - 320)) | (1 << (plsqlParser.SAVE - 320)) | (1 << (plsqlParser.SAVEPOINT - 320)) | (1 << (plsqlParser.SCHEMA - 320)) | (1 << (plsqlParser.SCHEMACHECK - 320)) | (1 << (plsqlParser.SCN - 320)) | (1 << (plsqlParser.SECOND - 320)) | (1 << (plsqlParser.SEED - 320)) | (1 << (plsqlParser.SEGMENT - 320)) | (1 << (plsqlParser.SELF - 320)) | (1 << (plsqlParser.SEQUENTIAL - 320)) | (1 << (plsqlParser.SERIALIZABLE - 320)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 320)) | (1 << (plsqlParser.SERVERERROR - 320)) | (1 << (plsqlParser.SESSIONTIMEZONE - 320)) | (1 << (plsqlParser.SET - 320)) | (1 << (plsqlParser.SETS - 320)) | (1 << (plsqlParser.SETTINGS - 320)) | (1 << (plsqlParser.SHOW - 320)) | (1 << (plsqlParser.SHUTDOWN - 320)) | (1 << (plsqlParser.SIBLINGS - 320)) | (1 << (plsqlParser.SIGNTYPE - 320)) | (1 << (plsqlParser.SIMPLE_INTEGER - 320)) | (1 << (plsqlParser.SINGLE - 320)) | (1 << (plsqlParser.SIZE - 320)) | (1 << (plsqlParser.SKIP_ - 320)) | (1 << (plsqlParser.SMALLINT - 320)) | (1 << (plsqlParser.SNAPSHOT - 320)) | (1 << (plsqlParser.SOME - 320)) | (1 << (plsqlParser.SPECIFICATION - 320)) | (1 << (plsqlParser.SQLDATA - 320)) | (1 << (plsqlParser.SQLERROR - 320)) | (1 << (plsqlParser.STANDALONE - 320)) | (1 << (plsqlParser.STARTUP - 320)) | (1 << (plsqlParser.STATEMENT - 320)) | (1 << (plsqlParser.STATEMENT_ID - 320)) | (1 << (plsqlParser.STATIC - 320)) | (1 << (plsqlParser.STATISTICS - 320)) | (1 << (plsqlParser.STRING - 320)) | (1 << (plsqlParser.SUBMULTISET - 320)) | (1 << (plsqlParser.SUBPARTITION - 320)) | (1 << (plsqlParser.SUBSTITUTABLE - 320)) | (1 << (plsqlParser.SUBTYPE - 320)) | (1 << (plsqlParser.SUCCESS - 320)) | (1 << (plsqlParser.SUSPEND - 320)) | (1 << (plsqlParser.TIME - 320)) | (1 << (plsqlParser.TIMESTAMP - 320)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMEZONE_ABBR - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (plsqlParser.TIMEZONE_HOUR - 384)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 384)) | (1 << (plsqlParser.TIMEZONE_REGION - 384)) | (1 << (plsqlParser.TRAILING - 384)) | (1 << (plsqlParser.TRANSACTION - 384)) | (1 << (plsqlParser.TRANSLATE - 384)) | (1 << (plsqlParser.TREAT - 384)) | (1 << (plsqlParser.TRIGGER - 384)) | (1 << (plsqlParser.TRIM - 384)) | (1 << (plsqlParser.TRUE - 384)) | (1 << (plsqlParser.TRUNCATE - 384)) | (1 << (plsqlParser.TYPE - 384)) | (1 << (plsqlParser.UNBOUNDED - 384)) | (1 << (plsqlParser.UNDER - 384)) | (1 << (plsqlParser.UNLIMITED - 384)) | (1 << (plsqlParser.UNTIL - 384)) | (1 << (plsqlParser.UPDATED - 384)) | (1 << (plsqlParser.UPSERT - 384)) | (1 << (plsqlParser.UROWID - 384)) | (1 << (plsqlParser.USE - 384)) | (1 << (plsqlParser.VALIDATE - 384)) | (1 << (plsqlParser.VALUE - 384)) | (1 << (plsqlParser.VARCHAR - 384)) | (1 << (plsqlParser.VARCHAR2 - 384)) | (1 << (plsqlParser.VARIABLE - 384)) | (1 << (plsqlParser.VARRAY - 384)) | (1 << (plsqlParser.VARYING - 384)) | (1 << (plsqlParser.VERSION - 384)) | (1 << (plsqlParser.VERSIONS - 384)) | (1 << (plsqlParser.WAIT - 384)) | (1 << (plsqlParser.WARNING - 384)) | (1 << (plsqlParser.WELLFORMED - 384)) | (1 << (plsqlParser.WHENEVER - 384)) | (1 << (plsqlParser.WHILE - 384)) | (1 << (plsqlParser.WITHIN - 384)) | (1 << (plsqlParser.WORK - 384)) | (1 << (plsqlParser.WRITE - 384)) | (1 << (plsqlParser.XML - 384)) | (1 << (plsqlParser.XMLAGG - 384)) | (1 << (plsqlParser.XMLATTRIBUTES - 384)) | (1 << (plsqlParser.XMLCAST - 384)) | (1 << (plsqlParser.XMLCOLATTVAL - 384)) | (1 << (plsqlParser.XMLELEMENT - 384)) | (1 << (plsqlParser.XMLEXISTS - 384)) | (1 << (plsqlParser.XMLFOREST - 384)) | (1 << (plsqlParser.XMLNAMESPACES - 384)) | (1 << (plsqlParser.XMLPARSE - 384)) | (1 << (plsqlParser.XMLPI - 384)) | (1 << (plsqlParser.XMLQUERY - 384)) | (1 << (plsqlParser.XMLROOT - 384)) | (1 << (plsqlParser.XMLSERIALIZE - 384)) | (1 << (plsqlParser.XMLTABLE - 384)) | (1 << (plsqlParser.YEAR - 384)) | (1 << (plsqlParser.YES - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (plsqlParser.ZONE - 448)) | (1 << (plsqlParser.PREDICTION - 448)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 448)) | (1 << (plsqlParser.PREDICTION_COST - 448)) | (1 << (plsqlParser.PREDICTION_DETAILS - 448)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (plsqlParser.PREDICTION_SET - 448)) | (1 << (plsqlParser.CUME_DIST - 448)) | (1 << (plsqlParser.DENSE_RANK - 448)) | (1 << (plsqlParser.LISTAGG - 448)) | (1 << (plsqlParser.PERCENT_RANK - 448)) | (1 << (plsqlParser.PERCENTILE_CONT - 448)) | (1 << (plsqlParser.PERCENTILE_DISC - 448)) | (1 << (plsqlParser.RANK - 448)) | (1 << (plsqlParser.AVG - 448)) | (1 << (plsqlParser.CORR - 448)) | (1 << (plsqlParser.LAG - 448)) | (1 << (plsqlParser.LEAD - 448)) | (1 << (plsqlParser.MAX - 448)) | (1 << (plsqlParser.MEDIAN - 448)) | (1 << (plsqlParser.MIN - 448)) | (1 << (plsqlParser.NTILE - 448)) | (1 << (plsqlParser.RATIO_TO_REPORT - 448)) | (1 << (plsqlParser.ROW_NUMBER - 448)) | (1 << (plsqlParser.SUM - 448)) | (1 << (plsqlParser.VARIANCE - 448)) | (1 << (plsqlParser.REGR_ - 448)) | (1 << (plsqlParser.STDDEV - 448)) | (1 << (plsqlParser.VAR_ - 448)) | (1 << (plsqlParser.COVAR_ - 448)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 448)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 448)) | (1 << (plsqlParser.CHAR_STRING - 448)) | (1 << (plsqlParser.DELIMITED_ID - 448)) | (1 << (plsqlParser.LEFT_PAREN - 448)) | (1 << (plsqlParser.PLUS_SIGN - 448)) | (1 << (plsqlParser.MINUS_SIGN - 448)) | (1 << (plsqlParser.BINDVAR - 448)) | (1 << (plsqlParser.COLON - 448)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 4813
                localctx._argument = self.argument()
                localctx.argument_list.append(localctx._argument)


            self.state = 4820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4816
                self.match(plsqlParser.COMMA)
                self.state = 4817
                localctx._argument = self.argument()
                localctx.argument_list.append(localctx._argument)
                self.state = 4822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4823
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 4825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,624,self._ctx)
            if la_ == 1:
                self.state = 4824
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argument_analyticContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ArgumentContext,i)


        def keep_clause(self):
            return self.getTypedRuleContext(plsqlParser.Keep_clauseContext,0)


        def respect_or_ignore_nulls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Respect_or_ignore_nullsContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Respect_or_ignore_nullsContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_argument_analytic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument_analytic" ):
                listener.enterFunction_argument_analytic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument_analytic" ):
                listener.exitFunction_argument_analytic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument_analytic" ):
                return visitor.visitFunction_argument_analytic(self)
            else:
                return visitor.visitChildren(self)




    def function_argument_analytic(self):

        localctx = plsqlParser.Function_argument_analyticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_function_argument_analytic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4827
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ALL) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ANY) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CASE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (plsqlParser.CONNECT_BY_ROOT - 64)) | (1 << (plsqlParser.CONSTANT - 64)) | (1 << (plsqlParser.CONSTRAINT - 64)) | (1 << (plsqlParser.CONSTRAINTS - 64)) | (1 << (plsqlParser.CONSTRUCTOR - 64)) | (1 << (plsqlParser.CONTENT - 64)) | (1 << (plsqlParser.CONTEXT - 64)) | (1 << (plsqlParser.CONTINUE - 64)) | (1 << (plsqlParser.CONVERT - 64)) | (1 << (plsqlParser.CORRUPT_XID - 64)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 64)) | (1 << (plsqlParser.COST - 64)) | (1 << (plsqlParser.COUNT - 64)) | (1 << (plsqlParser.CROSS - 64)) | (1 << (plsqlParser.CUBE - 64)) | (1 << (plsqlParser.CURRENT_USER - 64)) | (1 << (plsqlParser.CURSOR - 64)) | (1 << (plsqlParser.CUSTOMDATUM - 64)) | (1 << (plsqlParser.CYCLE - 64)) | (1 << (plsqlParser.DATA - 64)) | (1 << (plsqlParser.DATABASE - 64)) | (1 << (plsqlParser.DATE - 64)) | (1 << (plsqlParser.DAY - 64)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 64)) | (1 << (plsqlParser.DBTIMEZONE - 64)) | (1 << (plsqlParser.DDL - 64)) | (1 << (plsqlParser.DEBUG - 64)) | (1 << (plsqlParser.DEC - 64)) | (1 << (plsqlParser.DECIMAL - 64)) | (1 << (plsqlParser.DECOMPOSE - 64)) | (1 << (plsqlParser.DECREMENT - 64)) | (1 << (plsqlParser.DEFAULT - 64)) | (1 << (plsqlParser.DEFAULTS - 64)) | (1 << (plsqlParser.DEFERRED - 64)) | (1 << (plsqlParser.DEFINER - 64)) | (1 << (plsqlParser.DETERMINISTIC - 64)) | (1 << (plsqlParser.DIMENSION - 64)) | (1 << (plsqlParser.DISABLE - 64)) | (1 << (plsqlParser.DISASSOCIATE - 64)) | (1 << (plsqlParser.DISTINCT - 64)) | (1 << (plsqlParser.DOCUMENT - 64)) | (1 << (plsqlParser.DOUBLE - 64)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (plsqlParser.EACH - 64)) | (1 << (plsqlParser.ELEMENT - 64)) | (1 << (plsqlParser.EMPTY - 64)) | (1 << (plsqlParser.ENABLE - 64)) | (1 << (plsqlParser.ENCODING - 64)) | (1 << (plsqlParser.ENTITYESCAPING - 64)) | (1 << (plsqlParser.ERR - 64)) | (1 << (plsqlParser.ERRORS - 64)) | (1 << (plsqlParser.ESCAPE - 64)) | (1 << (plsqlParser.EVALNAME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (plsqlParser.EXCEPTION - 128)) | (1 << (plsqlParser.EXCEPTION_INIT - 128)) | (1 << (plsqlParser.EXCEPTIONS - 128)) | (1 << (plsqlParser.EXCLUDE - 128)) | (1 << (plsqlParser.EXECUTE - 128)) | (1 << (plsqlParser.EXISTS - 128)) | (1 << (plsqlParser.EXIT - 128)) | (1 << (plsqlParser.EXPLAIN - 128)) | (1 << (plsqlParser.EXTERNAL - 128)) | (1 << (plsqlParser.EXTRACT - 128)) | (1 << (plsqlParser.FAILURE - 128)) | (1 << (plsqlParser.FALSE - 128)) | (1 << (plsqlParser.FINAL - 128)) | (1 << (plsqlParser.FIRST - 128)) | (1 << (plsqlParser.FIRST_VALUE - 128)) | (1 << (plsqlParser.FLOAT - 128)) | (1 << (plsqlParser.FOLLOWING - 128)) | (1 << (plsqlParser.FOLLOWS - 128)) | (1 << (plsqlParser.FORALL - 128)) | (1 << (plsqlParser.FORCE - 128)) | (1 << (plsqlParser.FULL - 128)) | (1 << (plsqlParser.FUNCTION - 128)) | (1 << (plsqlParser.GROUPING - 128)) | (1 << (plsqlParser.HASH - 128)) | (1 << (plsqlParser.HIDE - 128)) | (1 << (plsqlParser.HOUR - 128)) | (1 << (plsqlParser.IGNORE - 128)) | (1 << (plsqlParser.IMMEDIATE - 128)) | (1 << (plsqlParser.INCLUDE - 128)) | (1 << (plsqlParser.INCLUDING - 128)) | (1 << (plsqlParser.INCREMENT - 128)) | (1 << (plsqlParser.INDENT - 128)) | (1 << (plsqlParser.INDEXED - 128)) | (1 << (plsqlParser.INDICATOR - 128)) | (1 << (plsqlParser.INDICES - 128)) | (1 << (plsqlParser.INFINITE - 128)) | (1 << (plsqlParser.INLINE - 128)) | (1 << (plsqlParser.INNER - 128)) | (1 << (plsqlParser.INOUT - 128)) | (1 << (plsqlParser.INSTANTIABLE - 128)) | (1 << (plsqlParser.INSTEAD - 128)) | (1 << (plsqlParser.INT - 128)) | (1 << (plsqlParser.INTEGER - 128)) | (1 << (plsqlParser.INTERVAL - 128)) | (1 << (plsqlParser.INVALIDATE - 128)) | (1 << (plsqlParser.ISOLATION - 128)) | (1 << (plsqlParser.ITERATE - 128)) | (1 << (plsqlParser.JAVA - 128)) | (1 << (plsqlParser.JOIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (plsqlParser.KEEP - 192)) | (1 << (plsqlParser.LANGUAGE - 192)) | (1 << (plsqlParser.LAST - 192)) | (1 << (plsqlParser.LAST_VALUE - 192)) | (1 << (plsqlParser.LEADING - 192)) | (1 << (plsqlParser.LEFT - 192)) | (1 << (plsqlParser.LEVEL - 192)) | (1 << (plsqlParser.LIBRARY - 192)) | (1 << (plsqlParser.LIKE2 - 192)) | (1 << (plsqlParser.LIKE4 - 192)) | (1 << (plsqlParser.LIKEC - 192)) | (1 << (plsqlParser.LIMIT - 192)) | (1 << (plsqlParser.LOCAL - 192)) | (1 << (plsqlParser.LOCKED - 192)) | (1 << (plsqlParser.LOG - 192)) | (1 << (plsqlParser.LOGOFF - 192)) | (1 << (plsqlParser.LOGON - 192)) | (1 << (plsqlParser.LONG - 192)) | (1 << (plsqlParser.LOOP - 192)) | (1 << (plsqlParser.MAIN - 192)) | (1 << (plsqlParser.MAP - 192)) | (1 << (plsqlParser.MATCHED - 192)) | (1 << (plsqlParser.MAXVALUE - 192)) | (1 << (plsqlParser.MEASURES - 192)) | (1 << (plsqlParser.MEMBER - 192)) | (1 << (plsqlParser.MERGE - 192)) | (1 << (plsqlParser.MINUTE - 192)) | (1 << (plsqlParser.MINVALUE - 192)) | (1 << (plsqlParser.MLSLABEL - 192)) | (1 << (plsqlParser.MODEL - 192)) | (1 << (plsqlParser.MODIFY - 192)) | (1 << (plsqlParser.MONTH - 192)) | (1 << (plsqlParser.MULTISET - 192)) | (1 << (plsqlParser.NAME - 192)) | (1 << (plsqlParser.NAN - 192)) | (1 << (plsqlParser.NATURAL - 192)) | (1 << (plsqlParser.NATURALN - 192)) | (1 << (plsqlParser.NAV - 192)) | (1 << (plsqlParser.NCHAR - 192)) | (1 << (plsqlParser.NCHAR_CS - 192)) | (1 << (plsqlParser.NCLOB - 192)) | (1 << (plsqlParser.NESTED - 192)) | (1 << (plsqlParser.NEW - 192)) | (1 << (plsqlParser.NO - 192)) | (1 << (plsqlParser.NOAUDIT - 192)) | (1 << (plsqlParser.NOCOPY - 192)) | (1 << (plsqlParser.NOCYCLE - 192)) | (1 << (plsqlParser.NOENTITYESCAPING - 192)) | (1 << (plsqlParser.NONE - 192)) | (1 << (plsqlParser.NOSCHEMACHECK - 192)) | (1 << (plsqlParser.NOT - 192)) | (1 << (plsqlParser.NULL - 192)) | (1 << (plsqlParser.NULLS - 192)) | (1 << (plsqlParser.NUMBER - 192)) | (1 << (plsqlParser.NUMERIC - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (plsqlParser.NVARCHAR2 - 256)) | (1 << (plsqlParser.OBJECT - 256)) | (1 << (plsqlParser.OFF - 256)) | (1 << (plsqlParser.OID - 256)) | (1 << (plsqlParser.OLD - 256)) | (1 << (plsqlParser.ONLY - 256)) | (1 << (plsqlParser.OPEN - 256)) | (1 << (plsqlParser.ORADATA - 256)) | (1 << (plsqlParser.ORDINALITY - 256)) | (1 << (plsqlParser.OSERROR - 256)) | (1 << (plsqlParser.OUT - 256)) | (1 << (plsqlParser.OUTER - 256)) | (1 << (plsqlParser.OVER - 256)) | (1 << (plsqlParser.OVERRIDING - 256)) | (1 << (plsqlParser.PACKAGE - 256)) | (1 << (plsqlParser.PARALLEL_ENABLE - 256)) | (1 << (plsqlParser.PARAMETERS - 256)) | (1 << (plsqlParser.PARENT - 256)) | (1 << (plsqlParser.PARTITION - 256)) | (1 << (plsqlParser.PASSING - 256)) | (1 << (plsqlParser.PATH - 256)) | (1 << (plsqlParser.PIPELINED - 256)) | (1 << (plsqlParser.PLAN - 256)) | (1 << (plsqlParser.PLS_INTEGER - 256)) | (1 << (plsqlParser.POSITIVE - 256)) | (1 << (plsqlParser.POSITIVEN - 256)) | (1 << (plsqlParser.PRAGMA - 256)) | (1 << (plsqlParser.PRECEDING - 256)) | (1 << (plsqlParser.PRECISION - 256)) | (1 << (plsqlParser.PRESENT - 256)) | (1 << (plsqlParser.PRIOR - 256)) | (1 << (plsqlParser.RAISE - 256)) | (1 << (plsqlParser.RANGE - 256)) | (1 << (plsqlParser.RAW - 256)) | (1 << (plsqlParser.READ - 256)) | (1 << (plsqlParser.REAL - 256)) | (1 << (plsqlParser.RECORD - 256)) | (1 << (plsqlParser.REF - 256)) | (1 << (plsqlParser.REFERENCE - 256)) | (1 << (plsqlParser.REFERENCING - 256)) | (1 << (plsqlParser.REJECT - 256)) | (1 << (plsqlParser.RELIES_ON - 256)) | (1 << (plsqlParser.RENAME - 256)) | (1 << (plsqlParser.REPLACE - 256)) | (1 << (plsqlParser.RESPECT - 256)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 256)) | (1 << (plsqlParser.RESULT - 256)) | (1 << (plsqlParser.RESULT_CACHE - 256)) | (1 << (plsqlParser.RETURN - 256)) | (1 << (plsqlParser.RETURNING - 256)) | (1 << (plsqlParser.REUSE - 256)) | (1 << (plsqlParser.REVERSE - 256)) | (1 << (plsqlParser.RIGHT - 256)) | (1 << (plsqlParser.ROLLBACK - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (plsqlParser.ROLLUP - 320)) | (1 << (plsqlParser.ROW - 320)) | (1 << (plsqlParser.ROWID - 320)) | (1 << (plsqlParser.ROWS - 320)) | (1 << (plsqlParser.RULES - 320)) | (1 << (plsqlParser.SAMPLE - 320)) | (1 << (plsqlParser.SAVE - 320)) | (1 << (plsqlParser.SAVEPOINT - 320)) | (1 << (plsqlParser.SCHEMA - 320)) | (1 << (plsqlParser.SCHEMACHECK - 320)) | (1 << (plsqlParser.SCN - 320)) | (1 << (plsqlParser.SECOND - 320)) | (1 << (plsqlParser.SEED - 320)) | (1 << (plsqlParser.SEGMENT - 320)) | (1 << (plsqlParser.SELF - 320)) | (1 << (plsqlParser.SEQUENTIAL - 320)) | (1 << (plsqlParser.SERIALIZABLE - 320)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 320)) | (1 << (plsqlParser.SERVERERROR - 320)) | (1 << (plsqlParser.SESSIONTIMEZONE - 320)) | (1 << (plsqlParser.SET - 320)) | (1 << (plsqlParser.SETS - 320)) | (1 << (plsqlParser.SETTINGS - 320)) | (1 << (plsqlParser.SHOW - 320)) | (1 << (plsqlParser.SHUTDOWN - 320)) | (1 << (plsqlParser.SIBLINGS - 320)) | (1 << (plsqlParser.SIGNTYPE - 320)) | (1 << (plsqlParser.SIMPLE_INTEGER - 320)) | (1 << (plsqlParser.SINGLE - 320)) | (1 << (plsqlParser.SIZE - 320)) | (1 << (plsqlParser.SKIP_ - 320)) | (1 << (plsqlParser.SMALLINT - 320)) | (1 << (plsqlParser.SNAPSHOT - 320)) | (1 << (plsqlParser.SOME - 320)) | (1 << (plsqlParser.SPECIFICATION - 320)) | (1 << (plsqlParser.SQLDATA - 320)) | (1 << (plsqlParser.SQLERROR - 320)) | (1 << (plsqlParser.STANDALONE - 320)) | (1 << (plsqlParser.STARTUP - 320)) | (1 << (plsqlParser.STATEMENT - 320)) | (1 << (plsqlParser.STATEMENT_ID - 320)) | (1 << (plsqlParser.STATIC - 320)) | (1 << (plsqlParser.STATISTICS - 320)) | (1 << (plsqlParser.STRING - 320)) | (1 << (plsqlParser.SUBMULTISET - 320)) | (1 << (plsqlParser.SUBPARTITION - 320)) | (1 << (plsqlParser.SUBSTITUTABLE - 320)) | (1 << (plsqlParser.SUBTYPE - 320)) | (1 << (plsqlParser.SUCCESS - 320)) | (1 << (plsqlParser.SUSPEND - 320)) | (1 << (plsqlParser.TIME - 320)) | (1 << (plsqlParser.TIMESTAMP - 320)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 320)) | (1 << (plsqlParser.TIMEZONE_ABBR - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (plsqlParser.TIMEZONE_HOUR - 384)) | (1 << (plsqlParser.TIMEZONE_MINUTE - 384)) | (1 << (plsqlParser.TIMEZONE_REGION - 384)) | (1 << (plsqlParser.TRAILING - 384)) | (1 << (plsqlParser.TRANSACTION - 384)) | (1 << (plsqlParser.TRANSLATE - 384)) | (1 << (plsqlParser.TREAT - 384)) | (1 << (plsqlParser.TRIGGER - 384)) | (1 << (plsqlParser.TRIM - 384)) | (1 << (plsqlParser.TRUE - 384)) | (1 << (plsqlParser.TRUNCATE - 384)) | (1 << (plsqlParser.TYPE - 384)) | (1 << (plsqlParser.UNBOUNDED - 384)) | (1 << (plsqlParser.UNDER - 384)) | (1 << (plsqlParser.UNLIMITED - 384)) | (1 << (plsqlParser.UNTIL - 384)) | (1 << (plsqlParser.UPDATED - 384)) | (1 << (plsqlParser.UPSERT - 384)) | (1 << (plsqlParser.UROWID - 384)) | (1 << (plsqlParser.USE - 384)) | (1 << (plsqlParser.VALIDATE - 384)) | (1 << (plsqlParser.VALUE - 384)) | (1 << (plsqlParser.VARCHAR - 384)) | (1 << (plsqlParser.VARCHAR2 - 384)) | (1 << (plsqlParser.VARIABLE - 384)) | (1 << (plsqlParser.VARRAY - 384)) | (1 << (plsqlParser.VARYING - 384)) | (1 << (plsqlParser.VERSION - 384)) | (1 << (plsqlParser.VERSIONS - 384)) | (1 << (plsqlParser.WAIT - 384)) | (1 << (plsqlParser.WARNING - 384)) | (1 << (plsqlParser.WELLFORMED - 384)) | (1 << (plsqlParser.WHENEVER - 384)) | (1 << (plsqlParser.WHILE - 384)) | (1 << (plsqlParser.WITHIN - 384)) | (1 << (plsqlParser.WORK - 384)) | (1 << (plsqlParser.WRITE - 384)) | (1 << (plsqlParser.XML - 384)) | (1 << (plsqlParser.XMLAGG - 384)) | (1 << (plsqlParser.XMLATTRIBUTES - 384)) | (1 << (plsqlParser.XMLCAST - 384)) | (1 << (plsqlParser.XMLCOLATTVAL - 384)) | (1 << (plsqlParser.XMLELEMENT - 384)) | (1 << (plsqlParser.XMLEXISTS - 384)) | (1 << (plsqlParser.XMLFOREST - 384)) | (1 << (plsqlParser.XMLNAMESPACES - 384)) | (1 << (plsqlParser.XMLPARSE - 384)) | (1 << (plsqlParser.XMLPI - 384)) | (1 << (plsqlParser.XMLQUERY - 384)) | (1 << (plsqlParser.XMLROOT - 384)) | (1 << (plsqlParser.XMLSERIALIZE - 384)) | (1 << (plsqlParser.XMLTABLE - 384)) | (1 << (plsqlParser.YEAR - 384)) | (1 << (plsqlParser.YES - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (plsqlParser.ZONE - 448)) | (1 << (plsqlParser.PREDICTION - 448)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 448)) | (1 << (plsqlParser.PREDICTION_COST - 448)) | (1 << (plsqlParser.PREDICTION_DETAILS - 448)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (plsqlParser.PREDICTION_SET - 448)) | (1 << (plsqlParser.CUME_DIST - 448)) | (1 << (plsqlParser.DENSE_RANK - 448)) | (1 << (plsqlParser.LISTAGG - 448)) | (1 << (plsqlParser.PERCENT_RANK - 448)) | (1 << (plsqlParser.PERCENTILE_CONT - 448)) | (1 << (plsqlParser.PERCENTILE_DISC - 448)) | (1 << (plsqlParser.RANK - 448)) | (1 << (plsqlParser.AVG - 448)) | (1 << (plsqlParser.CORR - 448)) | (1 << (plsqlParser.LAG - 448)) | (1 << (plsqlParser.LEAD - 448)) | (1 << (plsqlParser.MAX - 448)) | (1 << (plsqlParser.MEDIAN - 448)) | (1 << (plsqlParser.MIN - 448)) | (1 << (plsqlParser.NTILE - 448)) | (1 << (plsqlParser.RATIO_TO_REPORT - 448)) | (1 << (plsqlParser.ROW_NUMBER - 448)) | (1 << (plsqlParser.SUM - 448)) | (1 << (plsqlParser.VARIANCE - 448)) | (1 << (plsqlParser.REGR_ - 448)) | (1 << (plsqlParser.STDDEV - 448)) | (1 << (plsqlParser.VAR_ - 448)) | (1 << (plsqlParser.COVAR_ - 448)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (plsqlParser.UNSIGNED_INTEGER - 448)) | (1 << (plsqlParser.APPROXIMATE_NUM_LIT - 448)) | (1 << (plsqlParser.CHAR_STRING - 448)) | (1 << (plsqlParser.DELIMITED_ID - 448)) | (1 << (plsqlParser.LEFT_PAREN - 448)) | (1 << (plsqlParser.PLUS_SIGN - 448)) | (1 << (plsqlParser.MINUS_SIGN - 448)) | (1 << (plsqlParser.BINDVAR - 448)) | (1 << (plsqlParser.COLON - 448)))) != 0) or _la==plsqlParser.REGULAR_ID:
                self.state = 4828
                self.argument()
                self.state = 4830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.IGNORE or _la==plsqlParser.RESPECT:
                    self.state = 4829
                    self.respect_or_ignore_nulls()




            self.state = 4841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==plsqlParser.COMMA:
                self.state = 4834
                self.match(plsqlParser.COMMA)
                self.state = 4835
                self.argument()
                self.state = 4837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.IGNORE or _la==plsqlParser.RESPECT:
                    self.state = 4836
                    self.respect_or_ignore_nulls()


                self.state = 4843
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4844
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 4846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,629,self._ctx)
            if la_ == 1:
                self.state = 4845
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argument_modelingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(plsqlParser.Column_nameContext,0)


        def USING(self):
            return self.getToken(plsqlParser.USING, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(plsqlParser.Tableview_nameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def keep_clause(self):
            return self.getTypedRuleContext(plsqlParser.Keep_clauseContext,0)


        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.NumericContext)
            else:
                return self.getTypedRuleContext(plsqlParser.NumericContext,i)


        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.NULL)
            else:
                return self.getToken(plsqlParser.NULL, i)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_function_argument_modeling

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument_modeling" ):
                listener.enterFunction_argument_modeling(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument_modeling" ):
                listener.exitFunction_argument_modeling(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument_modeling" ):
                return visitor.visitFunction_argument_modeling(self)
            else:
                return visitor.visitChildren(self)




    def function_argument_modeling(self):

        localctx = plsqlParser.Function_argument_modelingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_function_argument_modeling)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4848
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4849
            self.column_name()
            self.state = 4862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMMA:
                self.state = 4850
                self.match(plsqlParser.COMMA)
                self.state = 4853
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT]:
                    self.state = 4851
                    self.numeric()
                    pass
                elif token in [plsqlParser.NULL]:
                    self.state = 4852
                    self.match(plsqlParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.COMMA:
                    self.state = 4855
                    self.match(plsqlParser.COMMA)
                    self.state = 4858
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT]:
                        self.state = 4856
                        self.numeric()
                        pass
                    elif token in [plsqlParser.NULL]:
                        self.state = 4857
                        self.match(plsqlParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)





            self.state = 4864
            self.match(plsqlParser.USING)
            self.state = 4884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,637,self._ctx)
            if la_ == 1:
                self.state = 4865
                self.tableview_name()
                self.state = 4866
                self.match(plsqlParser.PERIOD)
                self.state = 4867
                self.match(plsqlParser.ASTERISK)
                pass

            elif la_ == 2:
                self.state = 4869
                self.match(plsqlParser.ASTERISK)
                pass

            elif la_ == 3:
                self.state = 4870
                self.expression(0)
                self.state = 4872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 449)) | (1 << (plsqlParser.CHAR_STRING - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                    self.state = 4871
                    self.column_alias()


                self.state = 4881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==plsqlParser.COMMA:
                    self.state = 4874
                    self.match(plsqlParser.COMMA)
                    self.state = 4875
                    self.expression(0)
                    self.state = 4877
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.AS) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)) | (1 << (plsqlParser.NATIONAL_CHAR_STRING_LIT - 449)) | (1 << (plsqlParser.CHAR_STRING - 449)) | (1 << (plsqlParser.DELIMITED_ID - 449)))) != 0) or _la==plsqlParser.REGULAR_ID:
                        self.state = 4876
                        self.column_alias()


                    self.state = 4883
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 4886
            self.match(plsqlParser.RIGHT_PAREN)
            self.state = 4888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,638,self._ctx)
            if la_ == 1:
                self.state = 4887
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Respect_or_ignore_nullsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(plsqlParser.NULLS, 0)

        def RESPECT(self):
            return self.getToken(plsqlParser.RESPECT, 0)

        def IGNORE(self):
            return self.getToken(plsqlParser.IGNORE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_respect_or_ignore_nulls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRespect_or_ignore_nulls" ):
                listener.enterRespect_or_ignore_nulls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRespect_or_ignore_nulls" ):
                listener.exitRespect_or_ignore_nulls(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRespect_or_ignore_nulls" ):
                return visitor.visitRespect_or_ignore_nulls(self)
            else:
                return visitor.visitChildren(self)




    def respect_or_ignore_nulls(self):

        localctx = plsqlParser.Respect_or_ignore_nullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_respect_or_ignore_nulls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4890
            _la = self._input.LA(1)
            if not(_la==plsqlParser.IGNORE or _la==plsqlParser.RESPECT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4891
            self.match(plsqlParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(plsqlParser.ExpressionContext,0)


        def r_id(self):
            return self.getTypedRuleContext(plsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = plsqlParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,639,self._ctx)
            if la_ == 1:
                self.state = 4893
                self.r_id()
                self.state = 4894
                self.match(plsqlParser.EQUALS_OP)
                self.state = 4895
                self.match(plsqlParser.GREATER_THAN_OP)


            self.state = 4899
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(plsqlParser.DatatypeContext,0)


        def type_name(self):
            return self.getTypedRuleContext(plsqlParser.Type_nameContext,0)


        def REF(self):
            return self.getToken(plsqlParser.REF, 0)

        def PERCENT_ROWTYPE(self):
            return self.getToken(plsqlParser.PERCENT_ROWTYPE, 0)

        def PERCENT_TYPE(self):
            return self.getToken(plsqlParser.PERCENT_TYPE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_spec" ):
                listener.enterType_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_spec" ):
                listener.exitType_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_spec" ):
                return visitor.visitType_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_spec(self):

        localctx = plsqlParser.Type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_type_spec)
        self._la = 0 # Token type
        try:
            self.state = 4909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,642,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4901
                self.datatype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,640,self._ctx)
                if la_ == 1:
                    self.state = 4902
                    self.match(plsqlParser.REF)


                self.state = 4905
                self.type_name()
                self.state = 4907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PERCENT_ROWTYPE or _la==plsqlParser.PERCENT_TYPE:
                    self.state = 4906
                    _la = self._input.LA(1)
                    if not(_la==plsqlParser.PERCENT_ROWTYPE or _la==plsqlParser.PERCENT_TYPE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatatypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_datatype_element(self):
            return self.getTypedRuleContext(plsqlParser.Native_datatype_elementContext,0)


        def precision_part(self):
            return self.getTypedRuleContext(plsqlParser.Precision_partContext,0)


        def WITH(self):
            return self.getToken(plsqlParser.WITH, 0)

        def TIME(self):
            return self.getToken(plsqlParser.TIME, 0)

        def ZONE(self):
            return self.getToken(plsqlParser.ZONE, 0)

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)

        def INTERVAL(self):
            return self.getToken(plsqlParser.INTERVAL, 0)

        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def YEAR(self):
            return self.getToken(plsqlParser.YEAR, 0)

        def DAY(self):
            return self.getToken(plsqlParser.DAY, 0)

        def MONTH(self):
            return self.getToken(plsqlParser.MONTH, 0)

        def SECOND(self):
            return self.getToken(plsqlParser.SECOND, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(plsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return plsqlParser.RULE_datatype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatype" ):
                listener.enterDatatype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatype" ):
                listener.exitDatatype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatatype" ):
                return visitor.visitDatatype(self)
            else:
                return visitor.visitChildren(self)




    def datatype(self):

        localctx = plsqlParser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_datatype)
        self._la = 0 # Token type
        try:
            self.state = 4939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BOOLEAN, plsqlParser.CHAR, plsqlParser.CHARACTER, plsqlParser.CLOB, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.FLOAT, plsqlParser.HOUR, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.LONG, plsqlParser.MINUTE, plsqlParser.MLSLABEL, plsqlParser.MONTH, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NCHAR, plsqlParser.NCLOB, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.RAW, plsqlParser.REAL, plsqlParser.ROWID, plsqlParser.SECOND, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SMALLINT, plsqlParser.STRING, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.UROWID, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.YEAR, plsqlParser.YMINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4911
                self.native_datatype_element()
                self.state = 4913
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,643,self._ctx)
                if la_ == 1:
                    self.state = 4912
                    self.precision_part()


                self.state = 4921
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,645,self._ctx)
                if la_ == 1:
                    self.state = 4915
                    self.match(plsqlParser.WITH)
                    self.state = 4917
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.LOCAL:
                        self.state = 4916
                        self.match(plsqlParser.LOCAL)


                    self.state = 4919
                    self.match(plsqlParser.TIME)
                    self.state = 4920
                    self.match(plsqlParser.ZONE)


                pass
            elif token in [plsqlParser.INTERVAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4923
                self.match(plsqlParser.INTERVAL)
                self.state = 4924
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DAY or _la==plsqlParser.YEAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.LEFT_PAREN:
                    self.state = 4925
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 4926
                    self.expression(0)
                    self.state = 4927
                    self.match(plsqlParser.RIGHT_PAREN)


                self.state = 4931
                self.match(plsqlParser.TO)
                self.state = 4932
                _la = self._input.LA(1)
                if not(_la==plsqlParser.MONTH or _la==plsqlParser.SECOND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4937
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,647,self._ctx)
                if la_ == 1:
                    self.state = 4933
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 4934
                    self.expression(0)
                    self.state = 4935
                    self.match(plsqlParser.RIGHT_PAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Precision_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.NumericContext)
            else:
                return self.getTypedRuleContext(plsqlParser.NumericContext,i)


        def CHAR(self):
            return self.getToken(plsqlParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(plsqlParser.BYTE, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_precision_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecision_part" ):
                listener.enterPrecision_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecision_part" ):
                listener.exitPrecision_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecision_part" ):
                return visitor.visitPrecision_part(self)
            else:
                return visitor.visitChildren(self)




    def precision_part(self):

        localctx = plsqlParser.Precision_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_precision_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4941
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 4942
            self.numeric()
            self.state = 4945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.COMMA:
                self.state = 4943
                self.match(plsqlParser.COMMA)
                self.state = 4944
                self.numeric()


            self.state = 4948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==plsqlParser.BYTE or _la==plsqlParser.CHAR:
                self.state = 4947
                _la = self._input.LA(1)
                if not(_la==plsqlParser.BYTE or _la==plsqlParser.CHAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4950
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_datatype_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_INTEGER(self):
            return self.getToken(plsqlParser.BINARY_INTEGER, 0)

        def PLS_INTEGER(self):
            return self.getToken(plsqlParser.PLS_INTEGER, 0)

        def NATURAL(self):
            return self.getToken(plsqlParser.NATURAL, 0)

        def BINARY_FLOAT(self):
            return self.getToken(plsqlParser.BINARY_FLOAT, 0)

        def BINARY_DOUBLE(self):
            return self.getToken(plsqlParser.BINARY_DOUBLE, 0)

        def NATURALN(self):
            return self.getToken(plsqlParser.NATURALN, 0)

        def POSITIVE(self):
            return self.getToken(plsqlParser.POSITIVE, 0)

        def POSITIVEN(self):
            return self.getToken(plsqlParser.POSITIVEN, 0)

        def SIGNTYPE(self):
            return self.getToken(plsqlParser.SIGNTYPE, 0)

        def SIMPLE_INTEGER(self):
            return self.getToken(plsqlParser.SIMPLE_INTEGER, 0)

        def NVARCHAR2(self):
            return self.getToken(plsqlParser.NVARCHAR2, 0)

        def DEC(self):
            return self.getToken(plsqlParser.DEC, 0)

        def INTEGER(self):
            return self.getToken(plsqlParser.INTEGER, 0)

        def INT(self):
            return self.getToken(plsqlParser.INT, 0)

        def NUMERIC(self):
            return self.getToken(plsqlParser.NUMERIC, 0)

        def SMALLINT(self):
            return self.getToken(plsqlParser.SMALLINT, 0)

        def NUMBER(self):
            return self.getToken(plsqlParser.NUMBER, 0)

        def DECIMAL(self):
            return self.getToken(plsqlParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(plsqlParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(plsqlParser.PRECISION, 0)

        def FLOAT(self):
            return self.getToken(plsqlParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(plsqlParser.REAL, 0)

        def NCHAR(self):
            return self.getToken(plsqlParser.NCHAR, 0)

        def LONG(self):
            return self.getToken(plsqlParser.LONG, 0)

        def RAW(self):
            return self.getToken(plsqlParser.RAW, 0)

        def CHAR(self):
            return self.getToken(plsqlParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(plsqlParser.CHARACTER, 0)

        def VARCHAR2(self):
            return self.getToken(plsqlParser.VARCHAR2, 0)

        def VARCHAR(self):
            return self.getToken(plsqlParser.VARCHAR, 0)

        def STRING(self):
            return self.getToken(plsqlParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(plsqlParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(plsqlParser.DATE, 0)

        def ROWID(self):
            return self.getToken(plsqlParser.ROWID, 0)

        def UROWID(self):
            return self.getToken(plsqlParser.UROWID, 0)

        def YEAR(self):
            return self.getToken(plsqlParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(plsqlParser.MONTH, 0)

        def DAY(self):
            return self.getToken(plsqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(plsqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(plsqlParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(plsqlParser.SECOND, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(plsqlParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(plsqlParser.TIMEZONE_MINUTE, 0)

        def TIMEZONE_REGION(self):
            return self.getToken(plsqlParser.TIMEZONE_REGION, 0)

        def TIMEZONE_ABBR(self):
            return self.getToken(plsqlParser.TIMEZONE_ABBR, 0)

        def TIMESTAMP(self):
            return self.getToken(plsqlParser.TIMESTAMP, 0)

        def TIMESTAMP_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0)

        def TIMESTAMP_TZ_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0)

        def TIMESTAMP_LTZ_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0)

        def YMINTERVAL_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0)

        def DSINTERVAL_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0)

        def BFILE(self):
            return self.getToken(plsqlParser.BFILE, 0)

        def BLOB(self):
            return self.getToken(plsqlParser.BLOB, 0)

        def CLOB(self):
            return self.getToken(plsqlParser.CLOB, 0)

        def NCLOB(self):
            return self.getToken(plsqlParser.NCLOB, 0)

        def MLSLABEL(self):
            return self.getToken(plsqlParser.MLSLABEL, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_native_datatype_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_datatype_element" ):
                listener.enterNative_datatype_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_datatype_element" ):
                listener.exitNative_datatype_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNative_datatype_element" ):
                return visitor.visitNative_datatype_element(self)
            else:
                return visitor.visitChildren(self)




    def native_datatype_element(self):

        localctx = plsqlParser.Native_datatype_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_native_datatype_element)
        self._la = 0 # Token type
        try:
            self.state = 5012
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BINARY_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4952
                self.match(plsqlParser.BINARY_INTEGER)
                pass
            elif token in [plsqlParser.PLS_INTEGER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4953
                self.match(plsqlParser.PLS_INTEGER)
                pass
            elif token in [plsqlParser.NATURAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4954
                self.match(plsqlParser.NATURAL)
                pass
            elif token in [plsqlParser.BINARY_FLOAT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4955
                self.match(plsqlParser.BINARY_FLOAT)
                pass
            elif token in [plsqlParser.BINARY_DOUBLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4956
                self.match(plsqlParser.BINARY_DOUBLE)
                pass
            elif token in [plsqlParser.NATURALN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4957
                self.match(plsqlParser.NATURALN)
                pass
            elif token in [plsqlParser.POSITIVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4958
                self.match(plsqlParser.POSITIVE)
                pass
            elif token in [plsqlParser.POSITIVEN]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4959
                self.match(plsqlParser.POSITIVEN)
                pass
            elif token in [plsqlParser.SIGNTYPE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4960
                self.match(plsqlParser.SIGNTYPE)
                pass
            elif token in [plsqlParser.SIMPLE_INTEGER]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4961
                self.match(plsqlParser.SIMPLE_INTEGER)
                pass
            elif token in [plsqlParser.NVARCHAR2]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4962
                self.match(plsqlParser.NVARCHAR2)
                pass
            elif token in [plsqlParser.DEC]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4963
                self.match(plsqlParser.DEC)
                pass
            elif token in [plsqlParser.INTEGER]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4964
                self.match(plsqlParser.INTEGER)
                pass
            elif token in [plsqlParser.INT]:
                self.enterOuterAlt(localctx, 14)
                self.state = 4965
                self.match(plsqlParser.INT)
                pass
            elif token in [plsqlParser.NUMERIC]:
                self.enterOuterAlt(localctx, 15)
                self.state = 4966
                self.match(plsqlParser.NUMERIC)
                pass
            elif token in [plsqlParser.SMALLINT]:
                self.enterOuterAlt(localctx, 16)
                self.state = 4967
                self.match(plsqlParser.SMALLINT)
                pass
            elif token in [plsqlParser.NUMBER]:
                self.enterOuterAlt(localctx, 17)
                self.state = 4968
                self.match(plsqlParser.NUMBER)
                pass
            elif token in [plsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 18)
                self.state = 4969
                self.match(plsqlParser.DECIMAL)
                pass
            elif token in [plsqlParser.DOUBLE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 4970
                self.match(plsqlParser.DOUBLE)
                self.state = 4972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.PRECISION:
                    self.state = 4971
                    self.match(plsqlParser.PRECISION)


                pass
            elif token in [plsqlParser.FLOAT]:
                self.enterOuterAlt(localctx, 20)
                self.state = 4974
                self.match(plsqlParser.FLOAT)
                pass
            elif token in [plsqlParser.REAL]:
                self.enterOuterAlt(localctx, 21)
                self.state = 4975
                self.match(plsqlParser.REAL)
                pass
            elif token in [plsqlParser.NCHAR]:
                self.enterOuterAlt(localctx, 22)
                self.state = 4976
                self.match(plsqlParser.NCHAR)
                pass
            elif token in [plsqlParser.LONG]:
                self.enterOuterAlt(localctx, 23)
                self.state = 4977
                self.match(plsqlParser.LONG)
                self.state = 4979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.RAW:
                    self.state = 4978
                    self.match(plsqlParser.RAW)


                pass
            elif token in [plsqlParser.CHAR]:
                self.enterOuterAlt(localctx, 24)
                self.state = 4981
                self.match(plsqlParser.CHAR)
                pass
            elif token in [plsqlParser.CHARACTER]:
                self.enterOuterAlt(localctx, 25)
                self.state = 4982
                self.match(plsqlParser.CHARACTER)
                pass
            elif token in [plsqlParser.VARCHAR2]:
                self.enterOuterAlt(localctx, 26)
                self.state = 4983
                self.match(plsqlParser.VARCHAR2)
                pass
            elif token in [plsqlParser.VARCHAR]:
                self.enterOuterAlt(localctx, 27)
                self.state = 4984
                self.match(plsqlParser.VARCHAR)
                pass
            elif token in [plsqlParser.STRING]:
                self.enterOuterAlt(localctx, 28)
                self.state = 4985
                self.match(plsqlParser.STRING)
                pass
            elif token in [plsqlParser.RAW]:
                self.enterOuterAlt(localctx, 29)
                self.state = 4986
                self.match(plsqlParser.RAW)
                pass
            elif token in [plsqlParser.BOOLEAN]:
                self.enterOuterAlt(localctx, 30)
                self.state = 4987
                self.match(plsqlParser.BOOLEAN)
                pass
            elif token in [plsqlParser.DATE]:
                self.enterOuterAlt(localctx, 31)
                self.state = 4988
                self.match(plsqlParser.DATE)
                pass
            elif token in [plsqlParser.ROWID]:
                self.enterOuterAlt(localctx, 32)
                self.state = 4989
                self.match(plsqlParser.ROWID)
                pass
            elif token in [plsqlParser.UROWID]:
                self.enterOuterAlt(localctx, 33)
                self.state = 4990
                self.match(plsqlParser.UROWID)
                pass
            elif token in [plsqlParser.YEAR]:
                self.enterOuterAlt(localctx, 34)
                self.state = 4991
                self.match(plsqlParser.YEAR)
                pass
            elif token in [plsqlParser.MONTH]:
                self.enterOuterAlt(localctx, 35)
                self.state = 4992
                self.match(plsqlParser.MONTH)
                pass
            elif token in [plsqlParser.DAY]:
                self.enterOuterAlt(localctx, 36)
                self.state = 4993
                self.match(plsqlParser.DAY)
                pass
            elif token in [plsqlParser.HOUR]:
                self.enterOuterAlt(localctx, 37)
                self.state = 4994
                self.match(plsqlParser.HOUR)
                pass
            elif token in [plsqlParser.MINUTE]:
                self.enterOuterAlt(localctx, 38)
                self.state = 4995
                self.match(plsqlParser.MINUTE)
                pass
            elif token in [plsqlParser.SECOND]:
                self.enterOuterAlt(localctx, 39)
                self.state = 4996
                self.match(plsqlParser.SECOND)
                pass
            elif token in [plsqlParser.TIMEZONE_HOUR]:
                self.enterOuterAlt(localctx, 40)
                self.state = 4997
                self.match(plsqlParser.TIMEZONE_HOUR)
                pass
            elif token in [plsqlParser.TIMEZONE_MINUTE]:
                self.enterOuterAlt(localctx, 41)
                self.state = 4998
                self.match(plsqlParser.TIMEZONE_MINUTE)
                pass
            elif token in [plsqlParser.TIMEZONE_REGION]:
                self.enterOuterAlt(localctx, 42)
                self.state = 4999
                self.match(plsqlParser.TIMEZONE_REGION)
                pass
            elif token in [plsqlParser.TIMEZONE_ABBR]:
                self.enterOuterAlt(localctx, 43)
                self.state = 5000
                self.match(plsqlParser.TIMEZONE_ABBR)
                pass
            elif token in [plsqlParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 44)
                self.state = 5001
                self.match(plsqlParser.TIMESTAMP)
                pass
            elif token in [plsqlParser.TIMESTAMP_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 45)
                self.state = 5002
                self.match(plsqlParser.TIMESTAMP_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 46)
                self.state = 5003
                self.match(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 47)
                self.state = 5004
                self.match(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.YMINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 48)
                self.state = 5005
                self.match(plsqlParser.YMINTERVAL_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.DSINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 49)
                self.state = 5006
                self.match(plsqlParser.DSINTERVAL_UNCONSTRAINED)
                pass
            elif token in [plsqlParser.BFILE]:
                self.enterOuterAlt(localctx, 50)
                self.state = 5007
                self.match(plsqlParser.BFILE)
                pass
            elif token in [plsqlParser.BLOB]:
                self.enterOuterAlt(localctx, 51)
                self.state = 5008
                self.match(plsqlParser.BLOB)
                pass
            elif token in [plsqlParser.CLOB]:
                self.enterOuterAlt(localctx, 52)
                self.state = 5009
                self.match(plsqlParser.CLOB)
                pass
            elif token in [plsqlParser.NCLOB]:
                self.enterOuterAlt(localctx, 53)
                self.state = 5010
                self.match(plsqlParser.NCLOB)
                pass
            elif token in [plsqlParser.MLSLABEL]:
                self.enterOuterAlt(localctx, 54)
                self.state = 5011
                self.match(plsqlParser.MLSLABEL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bind_variableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINDVAR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.BINDVAR)
            else:
                return self.getToken(plsqlParser.BINDVAR, i)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def general_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.General_elementContext)
            else:
                return self.getTypedRuleContext(plsqlParser.General_elementContext,i)


        def INDICATOR(self):
            return self.getToken(plsqlParser.INDICATOR, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_bind_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBind_variable" ):
                listener.enterBind_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBind_variable" ):
                listener.exitBind_variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBind_variable" ):
                return visitor.visitBind_variable(self)
            else:
                return visitor.visitChildren(self)




    def bind_variable(self):

        localctx = plsqlParser.Bind_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_bind_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5017
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.BINDVAR]:
                self.state = 5014
                self.match(plsqlParser.BINDVAR)
                pass
            elif token in [plsqlParser.COLON]:
                self.state = 5015
                self.match(plsqlParser.COLON)
                self.state = 5016
                self.match(plsqlParser.UNSIGNED_INTEGER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,657,self._ctx)
            if la_ == 1:
                self.state = 5020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==plsqlParser.INDICATOR:
                    self.state = 5019
                    self.match(plsqlParser.INDICATOR)


                self.state = 5025
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.BINDVAR]:
                    self.state = 5022
                    self.match(plsqlParser.BINDVAR)
                    pass
                elif token in [plsqlParser.COLON]:
                    self.state = 5023
                    self.match(plsqlParser.COLON)
                    self.state = 5024
                    self.match(plsqlParser.UNSIGNED_INTEGER)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 5033
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,658,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5029
                    self.match(plsqlParser.PERIOD)
                    self.state = 5030
                    self.general_element() 
                self.state = 5035
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,658,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class General_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_general_element

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FuncCallContext(General_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.General_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)

        def function_argument(self):
            return self.getTypedRuleContext(plsqlParser.Function_argumentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncCall" ):
                listener.enterFuncCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncCall" ):
                listener.exitFuncCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncCall" ):
                return visitor.visitFuncCall(self)
            else:
                return visitor.visitChildren(self)


    class IdentifierContext(General_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a plsqlParser.General_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def general_element(self):

        localctx = plsqlParser.General_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_general_element)
        try:
            self.state = 5040
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,659,self._ctx)
            if la_ == 1:
                localctx = plsqlParser.FuncCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5036
                self.dot_id()
                self.state = 5037
                self.function_argument()
                pass

            elif la_ == 2:
                localctx = plsqlParser.IdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5039
                self.dot_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_element" ):
                listener.enterTable_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_element" ):
                listener.exitTable_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_element" ):
                return visitor.visitTable_element(self)
            else:
                return visitor.visitChildren(self)




    def table_element(self):

        localctx = plsqlParser.Table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_table_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5042
            self.dot_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(plsqlParser.TIMESTAMP, 0)

        def quoted_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Quoted_stringContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Quoted_stringContext,i)


        def bind_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(plsqlParser.Bind_variableContext)
            else:
                return self.getTypedRuleContext(plsqlParser.Bind_variableContext,i)


        def AT(self):
            return self.getToken(plsqlParser.AT, 0)

        def TIME(self):
            return self.getToken(plsqlParser.TIME, 0)

        def ZONE(self):
            return self.getToken(plsqlParser.ZONE, 0)

        def INTERVAL(self):
            return self.getToken(plsqlParser.INTERVAL, 0)

        def DAY(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.DAY)
            else:
                return self.getToken(plsqlParser.DAY, i)

        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.HOUR)
            else:
                return self.getToken(plsqlParser.HOUR, i)

        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.MINUTE)
            else:
                return self.getToken(plsqlParser.MINUTE, i)

        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.SECOND)
            else:
                return self.getToken(plsqlParser.SECOND, i)

        def general_element(self):
            return self.getTypedRuleContext(plsqlParser.General_elementContext,0)


        def TO(self):
            return self.getToken(plsqlParser.TO, 0)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(plsqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(plsqlParser.UNSIGNED_INTEGER, i)

        def numeric(self):
            return self.getTypedRuleContext(plsqlParser.NumericContext,0)


        def DATE(self):
            return self.getToken(plsqlParser.DATE, 0)

        def NULL(self):
            return self.getToken(plsqlParser.NULL, 0)

        def TRUE(self):
            return self.getToken(plsqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(plsqlParser.FALSE, 0)

        def DBTIMEZONE(self):
            return self.getToken(plsqlParser.DBTIMEZONE, 0)

        def SESSIONTIMEZONE(self):
            return self.getToken(plsqlParser.SESSIONTIMEZONE, 0)

        def MINVALUE(self):
            return self.getToken(plsqlParser.MINVALUE, 0)

        def MAXVALUE(self):
            return self.getToken(plsqlParser.MAXVALUE, 0)

        def DEFAULT(self):
            return self.getToken(plsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = plsqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 5106
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5044
                self.match(plsqlParser.TIMESTAMP)
                self.state = 5047
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                    self.state = 5045
                    self.quoted_string()
                    pass
                elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                    self.state = 5046
                    self.bind_variable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5053
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
                if la_ == 1:
                    self.state = 5049
                    self.match(plsqlParser.AT)
                    self.state = 5050
                    self.match(plsqlParser.TIME)
                    self.state = 5051
                    self.match(plsqlParser.ZONE)
                    self.state = 5052
                    self.quoted_string()


                pass
            elif token in [plsqlParser.INTERVAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5055
                self.match(plsqlParser.INTERVAL)
                self.state = 5059
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                    self.state = 5056
                    self.quoted_string()
                    pass
                elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                    self.state = 5057
                    self.bind_variable()
                    pass
                elif token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.DELIMITED_ID, plsqlParser.REGULAR_ID]:
                    self.state = 5058
                    self.general_element()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5061
                _la = self._input.LA(1)
                if not(_la==plsqlParser.DAY or _la==plsqlParser.HOUR or _la==plsqlParser.MINUTE or _la==plsqlParser.SECOND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5075
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,666,self._ctx)
                if la_ == 1:
                    self.state = 5062
                    self.match(plsqlParser.LEFT_PAREN)
                    self.state = 5065
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.UNSIGNED_INTEGER]:
                        self.state = 5063
                        self.match(plsqlParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                        self.state = 5064
                        self.bind_variable()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 5072
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==plsqlParser.COMMA:
                        self.state = 5067
                        self.match(plsqlParser.COMMA)
                        self.state = 5070
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [plsqlParser.UNSIGNED_INTEGER]:
                            self.state = 5068
                            self.match(plsqlParser.UNSIGNED_INTEGER)
                            pass
                        elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                            self.state = 5069
                            self.bind_variable()
                            pass
                        else:
                            raise NoViableAltException(self)



                    self.state = 5074
                    self.match(plsqlParser.RIGHT_PAREN)


                self.state = 5092
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,670,self._ctx)
                if la_ == 1:
                    self.state = 5077
                    self.match(plsqlParser.TO)
                    self.state = 5090
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [plsqlParser.DAY]:
                        self.state = 5078
                        self.match(plsqlParser.DAY)
                        pass
                    elif token in [plsqlParser.HOUR]:
                        self.state = 5079
                        self.match(plsqlParser.HOUR)
                        pass
                    elif token in [plsqlParser.MINUTE]:
                        self.state = 5080
                        self.match(plsqlParser.MINUTE)
                        pass
                    elif token in [plsqlParser.SECOND]:
                        self.state = 5081
                        self.match(plsqlParser.SECOND)
                        self.state = 5088
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,668,self._ctx)
                        if la_ == 1:
                            self.state = 5082
                            self.match(plsqlParser.LEFT_PAREN)
                            self.state = 5085
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [plsqlParser.UNSIGNED_INTEGER]:
                                self.state = 5083
                                self.match(plsqlParser.UNSIGNED_INTEGER)
                                pass
                            elif token in [plsqlParser.BINDVAR, plsqlParser.COLON]:
                                self.state = 5084
                                self.bind_variable()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 5087
                            self.match(plsqlParser.RIGHT_PAREN)


                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [plsqlParser.UNSIGNED_INTEGER, plsqlParser.APPROXIMATE_NUM_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5094
                self.numeric()
                pass
            elif token in [plsqlParser.DATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5095
                self.match(plsqlParser.DATE)
                self.state = 5096
                self.quoted_string()
                pass
            elif token in [plsqlParser.NATIONAL_CHAR_STRING_LIT, plsqlParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5097
                self.quoted_string()
                pass
            elif token in [plsqlParser.NULL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5098
                self.match(plsqlParser.NULL)
                pass
            elif token in [plsqlParser.TRUE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5099
                self.match(plsqlParser.TRUE)
                pass
            elif token in [plsqlParser.FALSE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5100
                self.match(plsqlParser.FALSE)
                pass
            elif token in [plsqlParser.DBTIMEZONE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5101
                self.match(plsqlParser.DBTIMEZONE)
                pass
            elif token in [plsqlParser.SESSIONTIMEZONE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 5102
                self.match(plsqlParser.SESSIONTIMEZONE)
                pass
            elif token in [plsqlParser.MINVALUE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 5103
                self.match(plsqlParser.MINVALUE)
                pass
            elif token in [plsqlParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 5104
                self.match(plsqlParser.MAXVALUE)
                pass
            elif token in [plsqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 13)
                self.state = 5105
                self.match(plsqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(plsqlParser.UNSIGNED_INTEGER, 0)

        def APPROXIMATE_NUM_LIT(self):
            return self.getToken(plsqlParser.APPROXIMATE_NUM_LIT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_numeric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric" ):
                listener.enterNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric" ):
                listener.exitNumeric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric" ):
                return visitor.visitNumeric(self)
            else:
                return visitor.visitChildren(self)




    def numeric(self):

        localctx = plsqlParser.NumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_numeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5108
            _la = self._input.LA(1)
            if not(_la==plsqlParser.UNSIGNED_INTEGER or _la==plsqlParser.APPROXIMATE_NUM_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Numeric_negativeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(plsqlParser.MINUS_SIGN, 0)

        def numeric(self):
            return self.getTypedRuleContext(plsqlParser.NumericContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_numeric_negative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_negative" ):
                listener.enterNumeric_negative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_negative" ):
                listener.exitNumeric_negative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric_negative" ):
                return visitor.visitNumeric_negative(self)
            else:
                return visitor.visitChildren(self)




    def numeric_negative(self):

        localctx = plsqlParser.Numeric_negativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_numeric_negative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5110
            self.match(plsqlParser.MINUS_SIGN)
            self.state = 5111
            self.numeric()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Quoted_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_STRING(self):
            return self.getToken(plsqlParser.CHAR_STRING, 0)

        def NATIONAL_CHAR_STRING_LIT(self):
            return self.getToken(plsqlParser.NATIONAL_CHAR_STRING_LIT, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_quoted_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuoted_string" ):
                listener.enterQuoted_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuoted_string" ):
                listener.exitQuoted_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuoted_string" ):
                return visitor.visitQuoted_string(self)
            else:
                return visitor.visitChildren(self)




    def quoted_string(self):

        localctx = plsqlParser.Quoted_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_quoted_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5113
            _la = self._input.LA(1)
            if not(_la==plsqlParser.NATIONAL_CHAR_STRING_LIT or _la==plsqlParser.CHAR_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class R_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(plsqlParser.Dot_idContext,0)


        def getRuleIndex(self):
            return plsqlParser.RULE_r_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_id" ):
                listener.enterR_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_id" ):
                listener.exitR_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitR_id" ):
                return visitor.visitR_id(self)
            else:
                return visitor.visitChildren(self)




    def r_id(self):

        localctx = plsqlParser.R_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_r_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5115
            self.dot_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Id_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(plsqlParser.Regular_idContext,0)


        def DELIMITED_ID(self):
            return self.getToken(plsqlParser.DELIMITED_ID, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_id_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_expression" ):
                listener.enterId_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_expression" ):
                listener.exitId_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitId_expression" ):
                return visitor.visitId_expression(self)
            else:
                return visitor.visitChildren(self)




    def id_expression(self):

        localctx = plsqlParser.Id_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_id_expression)
        try:
            self.state = 5119
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.A_LETTER, plsqlParser.ADD, plsqlParser.AFTER, plsqlParser.AGENT, plsqlParser.AGGREGATE, plsqlParser.ANALYZE, plsqlParser.ARRAY, plsqlParser.ASSOCIATE, plsqlParser.AT, plsqlParser.ATTRIBUTE, plsqlParser.AUDIT, plsqlParser.AUTHID, plsqlParser.AUTO, plsqlParser.AUTOMATIC, plsqlParser.AUTONOMOUS_TRANSACTION, plsqlParser.BATCH, plsqlParser.BEFORE, plsqlParser.BFILE, plsqlParser.BINARY_DOUBLE, plsqlParser.BINARY_FLOAT, plsqlParser.BINARY_INTEGER, plsqlParser.BLOB, plsqlParser.BLOCK, plsqlParser.BODY, plsqlParser.BOOLEAN, plsqlParser.BOTH, plsqlParser.BULK, plsqlParser.BYTE, plsqlParser.C_LETTER, plsqlParser.CALL, plsqlParser.CANONICAL, plsqlParser.CASCADE, plsqlParser.CAST, plsqlParser.CHAR, plsqlParser.CHAR_CS, plsqlParser.CHARACTER, plsqlParser.CHR, plsqlParser.CLOB, plsqlParser.CLOSE, plsqlParser.CLUSTER, plsqlParser.COLLECT, plsqlParser.COLUMNS, plsqlParser.COMMENT, plsqlParser.COMMIT, plsqlParser.COMMITTED, plsqlParser.COMPATIBILITY, plsqlParser.COMPILE, plsqlParser.COMPOUND, plsqlParser.CONSTANT, plsqlParser.CONSTRAINT, plsqlParser.CONSTRAINTS, plsqlParser.CONSTRUCTOR, plsqlParser.CONTENT, plsqlParser.CONTEXT, plsqlParser.CONTINUE, plsqlParser.CONVERT, plsqlParser.CORRUPT_XID, plsqlParser.CORRUPT_XID_ALL, plsqlParser.COST, plsqlParser.COUNT, plsqlParser.CROSS, plsqlParser.CUBE, plsqlParser.CURRENT_USER, plsqlParser.CURSOR, plsqlParser.CUSTOMDATUM, plsqlParser.CYCLE, plsqlParser.DATA, plsqlParser.DATABASE, plsqlParser.DATE, plsqlParser.DAY, plsqlParser.DB_ROLE_CHANGE, plsqlParser.DBTIMEZONE, plsqlParser.DDL, plsqlParser.DEBUG, plsqlParser.DEC, plsqlParser.DECIMAL, plsqlParser.DECOMPOSE, plsqlParser.DECREMENT, plsqlParser.DEFAULTS, plsqlParser.DEFERRED, plsqlParser.DEFINER, plsqlParser.DETERMINISTIC, plsqlParser.DIMENSION, plsqlParser.DISABLE, plsqlParser.DISASSOCIATE, plsqlParser.DOCUMENT, plsqlParser.DOUBLE, plsqlParser.DSINTERVAL_UNCONSTRAINED, plsqlParser.EACH, plsqlParser.ELEMENT, plsqlParser.EMPTY, plsqlParser.ENABLE, plsqlParser.ENCODING, plsqlParser.ENTITYESCAPING, plsqlParser.ERR, plsqlParser.ERRORS, plsqlParser.ESCAPE, plsqlParser.EVALNAME, plsqlParser.EXCEPTION, plsqlParser.EXCEPTION_INIT, plsqlParser.EXCEPTIONS, plsqlParser.EXCLUDE, plsqlParser.EXECUTE, plsqlParser.EXIT, plsqlParser.EXPLAIN, plsqlParser.EXTERNAL, plsqlParser.EXTRACT, plsqlParser.FAILURE, plsqlParser.FINAL, plsqlParser.FIRST, plsqlParser.FIRST_VALUE, plsqlParser.FLOAT, plsqlParser.FOLLOWING, plsqlParser.FOLLOWS, plsqlParser.FORALL, plsqlParser.FORCE, plsqlParser.FULL, plsqlParser.FUNCTION, plsqlParser.GROUPING, plsqlParser.HASH, plsqlParser.HIDE, plsqlParser.HOUR, plsqlParser.IGNORE, plsqlParser.IMMEDIATE, plsqlParser.INCLUDE, plsqlParser.INCLUDING, plsqlParser.INCREMENT, plsqlParser.INDENT, plsqlParser.INDEXED, plsqlParser.INDICATOR, plsqlParser.INDICES, plsqlParser.INFINITE, plsqlParser.INLINE, plsqlParser.INNER, plsqlParser.INOUT, plsqlParser.INSTANTIABLE, plsqlParser.INSTEAD, plsqlParser.INT, plsqlParser.INTEGER, plsqlParser.INTERVAL, plsqlParser.INVALIDATE, plsqlParser.ISOLATION, plsqlParser.ITERATE, plsqlParser.JAVA, plsqlParser.JOIN, plsqlParser.KEEP, plsqlParser.LANGUAGE, plsqlParser.LAST, plsqlParser.LAST_VALUE, plsqlParser.LEADING, plsqlParser.LEFT, plsqlParser.LEVEL, plsqlParser.LIBRARY, plsqlParser.LIKE2, plsqlParser.LIKE4, plsqlParser.LIKEC, plsqlParser.LIMIT, plsqlParser.LOCAL, plsqlParser.LOCKED, plsqlParser.LOG, plsqlParser.LOGOFF, plsqlParser.LOGON, plsqlParser.LONG, plsqlParser.LOOP, plsqlParser.MAIN, plsqlParser.MAP, plsqlParser.MATCHED, plsqlParser.MAXVALUE, plsqlParser.MEASURES, plsqlParser.MEMBER, plsqlParser.MERGE, plsqlParser.MINUTE, plsqlParser.MINVALUE, plsqlParser.MLSLABEL, plsqlParser.MODEL, plsqlParser.MODIFY, plsqlParser.MONTH, plsqlParser.MULTISET, plsqlParser.NAME, plsqlParser.NAN, plsqlParser.NATURAL, plsqlParser.NATURALN, plsqlParser.NAV, plsqlParser.NCHAR, plsqlParser.NCHAR_CS, plsqlParser.NCLOB, plsqlParser.NESTED, plsqlParser.NEW, plsqlParser.NO, plsqlParser.NOAUDIT, plsqlParser.NOCOPY, plsqlParser.NOCYCLE, plsqlParser.NOENTITYESCAPING, plsqlParser.NONE, plsqlParser.NOSCHEMACHECK, plsqlParser.NULLS, plsqlParser.NUMBER, plsqlParser.NUMERIC, plsqlParser.NVARCHAR2, plsqlParser.OBJECT, plsqlParser.OFF, plsqlParser.OID, plsqlParser.OLD, plsqlParser.ONLY, plsqlParser.OPEN, plsqlParser.ORADATA, plsqlParser.ORDINALITY, plsqlParser.OSERROR, plsqlParser.OUT, plsqlParser.OUTER, plsqlParser.OVER, plsqlParser.OVERRIDING, plsqlParser.PACKAGE, plsqlParser.PARALLEL_ENABLE, plsqlParser.PARAMETERS, plsqlParser.PARENT, plsqlParser.PARTITION, plsqlParser.PASSING, plsqlParser.PATH, plsqlParser.PIPELINED, plsqlParser.PLAN, plsqlParser.PLS_INTEGER, plsqlParser.POSITIVE, plsqlParser.POSITIVEN, plsqlParser.PRAGMA, plsqlParser.PRECEDING, plsqlParser.PRECISION, plsqlParser.PRESENT, plsqlParser.RAISE, plsqlParser.RANGE, plsqlParser.RAW, plsqlParser.READ, plsqlParser.REAL, plsqlParser.RECORD, plsqlParser.REF, plsqlParser.REFERENCE, plsqlParser.REFERENCING, plsqlParser.REJECT, plsqlParser.RELIES_ON, plsqlParser.RENAME, plsqlParser.REPLACE, plsqlParser.RESPECT, plsqlParser.RESTRICT_REFERENCES, plsqlParser.RESULT, plsqlParser.RESULT_CACHE, plsqlParser.RETURN, plsqlParser.RETURNING, plsqlParser.REUSE, plsqlParser.REVERSE, plsqlParser.RIGHT, plsqlParser.ROLLBACK, plsqlParser.ROLLUP, plsqlParser.ROW, plsqlParser.ROWID, plsqlParser.ROWS, plsqlParser.RULES, plsqlParser.SAMPLE, plsqlParser.SAVE, plsqlParser.SAVEPOINT, plsqlParser.SCHEMA, plsqlParser.SCHEMACHECK, plsqlParser.SCN, plsqlParser.SECOND, plsqlParser.SEED, plsqlParser.SEGMENT, plsqlParser.SELF, plsqlParser.SEQUENTIAL, plsqlParser.SERIALIZABLE, plsqlParser.SERIALLY_REUSABLE, plsqlParser.SERVERERROR, plsqlParser.SESSIONTIMEZONE, plsqlParser.SET, plsqlParser.SETS, plsqlParser.SETTINGS, plsqlParser.SHOW, plsqlParser.SHUTDOWN, plsqlParser.SIBLINGS, plsqlParser.SIGNTYPE, plsqlParser.SIMPLE_INTEGER, plsqlParser.SINGLE, plsqlParser.SIZE, plsqlParser.SKIP_, plsqlParser.SMALLINT, plsqlParser.SNAPSHOT, plsqlParser.SOME, plsqlParser.SPECIFICATION, plsqlParser.SQLDATA, plsqlParser.SQLERROR, plsqlParser.STANDALONE, plsqlParser.STARTUP, plsqlParser.STATEMENT, plsqlParser.STATEMENT_ID, plsqlParser.STATIC, plsqlParser.STATISTICS, plsqlParser.STRING, plsqlParser.SUBMULTISET, plsqlParser.SUBPARTITION, plsqlParser.SUBSTITUTABLE, plsqlParser.SUBTYPE, plsqlParser.SUCCESS, plsqlParser.SUSPEND, plsqlParser.TIME, plsqlParser.TIMESTAMP, plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, plsqlParser.TIMESTAMP_UNCONSTRAINED, plsqlParser.TIMEZONE_ABBR, plsqlParser.TIMEZONE_HOUR, plsqlParser.TIMEZONE_MINUTE, plsqlParser.TIMEZONE_REGION, plsqlParser.TRAILING, plsqlParser.TRANSACTION, plsqlParser.TRANSLATE, plsqlParser.TREAT, plsqlParser.TRIGGER, plsqlParser.TRIM, plsqlParser.TRUNCATE, plsqlParser.TYPE, plsqlParser.UNBOUNDED, plsqlParser.UNDER, plsqlParser.UNLIMITED, plsqlParser.UNTIL, plsqlParser.UPDATED, plsqlParser.UPSERT, plsqlParser.UROWID, plsqlParser.USE, plsqlParser.VALIDATE, plsqlParser.VALUE, plsqlParser.VARCHAR, plsqlParser.VARCHAR2, plsqlParser.VARIABLE, plsqlParser.VARRAY, plsqlParser.VARYING, plsqlParser.VERSION, plsqlParser.VERSIONS, plsqlParser.WAIT, plsqlParser.WARNING, plsqlParser.WELLFORMED, plsqlParser.WHENEVER, plsqlParser.WHILE, plsqlParser.WITHIN, plsqlParser.WORK, plsqlParser.WRITE, plsqlParser.XML, plsqlParser.XMLAGG, plsqlParser.XMLATTRIBUTES, plsqlParser.XMLCAST, plsqlParser.XMLCOLATTVAL, plsqlParser.XMLELEMENT, plsqlParser.XMLEXISTS, plsqlParser.XMLFOREST, plsqlParser.XMLNAMESPACES, plsqlParser.XMLPARSE, plsqlParser.XMLPI, plsqlParser.XMLQUERY, plsqlParser.XMLROOT, plsqlParser.XMLSERIALIZE, plsqlParser.XMLTABLE, plsqlParser.YEAR, plsqlParser.YES, plsqlParser.YMINTERVAL_UNCONSTRAINED, plsqlParser.ZONE, plsqlParser.PREDICTION, plsqlParser.PREDICTION_BOUNDS, plsqlParser.PREDICTION_COST, plsqlParser.PREDICTION_DETAILS, plsqlParser.PREDICTION_PROBABILITY, plsqlParser.PREDICTION_SET, plsqlParser.CUME_DIST, plsqlParser.DENSE_RANK, plsqlParser.LISTAGG, plsqlParser.PERCENT_RANK, plsqlParser.PERCENTILE_CONT, plsqlParser.PERCENTILE_DISC, plsqlParser.RANK, plsqlParser.AVG, plsqlParser.CORR, plsqlParser.LAG, plsqlParser.LEAD, plsqlParser.MAX, plsqlParser.MEDIAN, plsqlParser.MIN, plsqlParser.NTILE, plsqlParser.RATIO_TO_REPORT, plsqlParser.ROW_NUMBER, plsqlParser.SUM, plsqlParser.VARIANCE, plsqlParser.REGR_, plsqlParser.STDDEV, plsqlParser.VAR_, plsqlParser.COVAR_, plsqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5117
                self.regular_id()
                pass
            elif token in [plsqlParser.DELIMITED_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5118
                self.match(plsqlParser.DELIMITED_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_equal_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_EQUAL_OP(self):
            return self.getToken(plsqlParser.NOT_EQUAL_OP, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_not_equal_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_equal_op" ):
                listener.enterNot_equal_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_equal_op" ):
                listener.exitNot_equal_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_equal_op" ):
                return visitor.visitNot_equal_op(self)
            else:
                return visitor.visitChildren(self)




    def not_equal_op(self):

        localctx = plsqlParser.Not_equal_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_not_equal_op)
        try:
            self.state = 5128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.NOT_EQUAL_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5121
                self.match(plsqlParser.NOT_EQUAL_OP)
                pass
            elif token in [plsqlParser.LESS_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5122
                self.match(plsqlParser.LESS_THAN_OP)
                self.state = 5123
                self.match(plsqlParser.GREATER_THAN_OP)
                pass
            elif token in [plsqlParser.EXCLAMATION_OPERATOR_PART]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5124
                self.match(plsqlParser.EXCLAMATION_OPERATOR_PART)
                self.state = 5125
                self.match(plsqlParser.EQUALS_OP)
                pass
            elif token in [plsqlParser.CARRET_OPERATOR_PART]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5126
                self.match(plsqlParser.CARRET_OPERATOR_PART)
                self.state = 5127
                self.match(plsqlParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Greater_than_or_equals_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_greater_than_or_equals_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreater_than_or_equals_op" ):
                listener.enterGreater_than_or_equals_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreater_than_or_equals_op" ):
                listener.exitGreater_than_or_equals_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGreater_than_or_equals_op" ):
                return visitor.visitGreater_than_or_equals_op(self)
            else:
                return visitor.visitChildren(self)




    def greater_than_or_equals_op(self):

        localctx = plsqlParser.Greater_than_or_equals_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_greater_than_or_equals_op)
        try:
            self.state = 5133
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.GREATER_THAN_OR_EQUALS_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5130
                self.match(plsqlParser.GREATER_THAN_OR_EQUALS_OP)
                pass
            elif token in [plsqlParser.GREATER_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5131
                self.match(plsqlParser.GREATER_THAN_OP)
                self.state = 5132
                self.match(plsqlParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Less_than_or_equals_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_less_than_or_equals_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLess_than_or_equals_op" ):
                listener.enterLess_than_or_equals_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLess_than_or_equals_op" ):
                listener.exitLess_than_or_equals_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLess_than_or_equals_op" ):
                return visitor.visitLess_than_or_equals_op(self)
            else:
                return visitor.visitChildren(self)




    def less_than_or_equals_op(self):

        localctx = plsqlParser.Less_than_or_equals_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_less_than_or_equals_op)
        try:
            self.state = 5138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.LESS_THAN_OR_EQUALS_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5135
                self.match(plsqlParser.LESS_THAN_OR_EQUALS_OP)
                pass
            elif token in [plsqlParser.LESS_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5136
                self.match(plsqlParser.LESS_THAN_OP)
                self.state = 5137
                self.match(plsqlParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Concatenation_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_concatenation_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation_op" ):
                listener.enterConcatenation_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation_op" ):
                listener.exitConcatenation_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation_op" ):
                return visitor.visitConcatenation_op(self)
            else:
                return visitor.visitChildren(self)




    def concatenation_op(self):

        localctx = plsqlParser.Concatenation_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_concatenation_op)
        try:
            self.state = 5143
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [plsqlParser.CONCATENATION_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5140
                self.match(plsqlParser.CONCATENATION_OP)
                pass
            elif token in [plsqlParser.VERTICAL_BAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5141
                self.match(plsqlParser.VERTICAL_BAR)
                self.state = 5142
                self.match(plsqlParser.VERTICAL_BAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Outer_join_signContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return plsqlParser.RULE_outer_join_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuter_join_sign" ):
                listener.enterOuter_join_sign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuter_join_sign" ):
                listener.exitOuter_join_sign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOuter_join_sign" ):
                return visitor.visitOuter_join_sign(self)
            else:
                return visitor.visitChildren(self)




    def outer_join_sign(self):

        localctx = plsqlParser.Outer_join_signContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_outer_join_sign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5145
            self.match(plsqlParser.LEFT_PAREN)
            self.state = 5146
            self.match(plsqlParser.PLUS_SIGN)
            self.state = 5147
            self.match(plsqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Regular_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGULAR_ID(self):
            return self.getToken(plsqlParser.REGULAR_ID, 0)

        def A_LETTER(self):
            return self.getToken(plsqlParser.A_LETTER, 0)

        def ADD(self):
            return self.getToken(plsqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(plsqlParser.AFTER, 0)

        def AGENT(self):
            return self.getToken(plsqlParser.AGENT, 0)

        def AGGREGATE(self):
            return self.getToken(plsqlParser.AGGREGATE, 0)

        def ANALYZE(self):
            return self.getToken(plsqlParser.ANALYZE, 0)

        def ARRAY(self):
            return self.getToken(plsqlParser.ARRAY, 0)

        def ASSOCIATE(self):
            return self.getToken(plsqlParser.ASSOCIATE, 0)

        def AT(self):
            return self.getToken(plsqlParser.AT, 0)

        def ATTRIBUTE(self):
            return self.getToken(plsqlParser.ATTRIBUTE, 0)

        def AUDIT(self):
            return self.getToken(plsqlParser.AUDIT, 0)

        def AUTHID(self):
            return self.getToken(plsqlParser.AUTHID, 0)

        def AUTO(self):
            return self.getToken(plsqlParser.AUTO, 0)

        def AUTOMATIC(self):
            return self.getToken(plsqlParser.AUTOMATIC, 0)

        def AUTONOMOUS_TRANSACTION(self):
            return self.getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0)

        def BATCH(self):
            return self.getToken(plsqlParser.BATCH, 0)

        def BEFORE(self):
            return self.getToken(plsqlParser.BEFORE, 0)

        def BFILE(self):
            return self.getToken(plsqlParser.BFILE, 0)

        def BINARY_DOUBLE(self):
            return self.getToken(plsqlParser.BINARY_DOUBLE, 0)

        def BINARY_FLOAT(self):
            return self.getToken(plsqlParser.BINARY_FLOAT, 0)

        def BINARY_INTEGER(self):
            return self.getToken(plsqlParser.BINARY_INTEGER, 0)

        def BLOB(self):
            return self.getToken(plsqlParser.BLOB, 0)

        def BLOCK(self):
            return self.getToken(plsqlParser.BLOCK, 0)

        def BODY(self):
            return self.getToken(plsqlParser.BODY, 0)

        def BOOLEAN(self):
            return self.getToken(plsqlParser.BOOLEAN, 0)

        def BOTH(self):
            return self.getToken(plsqlParser.BOTH, 0)

        def BULK(self):
            return self.getToken(plsqlParser.BULK, 0)

        def BYTE(self):
            return self.getToken(plsqlParser.BYTE, 0)

        def C_LETTER(self):
            return self.getToken(plsqlParser.C_LETTER, 0)

        def CALL(self):
            return self.getToken(plsqlParser.CALL, 0)

        def CANONICAL(self):
            return self.getToken(plsqlParser.CANONICAL, 0)

        def CASCADE(self):
            return self.getToken(plsqlParser.CASCADE, 0)

        def CAST(self):
            return self.getToken(plsqlParser.CAST, 0)

        def CHAR(self):
            return self.getToken(plsqlParser.CHAR, 0)

        def CHAR_CS(self):
            return self.getToken(plsqlParser.CHAR_CS, 0)

        def CHARACTER(self):
            return self.getToken(plsqlParser.CHARACTER, 0)

        def CHR(self):
            return self.getToken(plsqlParser.CHR, 0)

        def CLOB(self):
            return self.getToken(plsqlParser.CLOB, 0)

        def CLOSE(self):
            return self.getToken(plsqlParser.CLOSE, 0)

        def CLUSTER(self):
            return self.getToken(plsqlParser.CLUSTER, 0)

        def COLLECT(self):
            return self.getToken(plsqlParser.COLLECT, 0)

        def COLUMNS(self):
            return self.getToken(plsqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(plsqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(plsqlParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(plsqlParser.COMMITTED, 0)

        def COMPATIBILITY(self):
            return self.getToken(plsqlParser.COMPATIBILITY, 0)

        def COMPILE(self):
            return self.getToken(plsqlParser.COMPILE, 0)

        def COMPOUND(self):
            return self.getToken(plsqlParser.COMPOUND, 0)

        def CONSTANT(self):
            return self.getToken(plsqlParser.CONSTANT, 0)

        def CONSTRAINT(self):
            return self.getToken(plsqlParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(plsqlParser.CONSTRAINTS, 0)

        def CONSTRUCTOR(self):
            return self.getToken(plsqlParser.CONSTRUCTOR, 0)

        def CONTENT(self):
            return self.getToken(plsqlParser.CONTENT, 0)

        def CONTEXT(self):
            return self.getToken(plsqlParser.CONTEXT, 0)

        def CONTINUE(self):
            return self.getToken(plsqlParser.CONTINUE, 0)

        def CONVERT(self):
            return self.getToken(plsqlParser.CONVERT, 0)

        def CORRUPT_XID(self):
            return self.getToken(plsqlParser.CORRUPT_XID, 0)

        def CORRUPT_XID_ALL(self):
            return self.getToken(plsqlParser.CORRUPT_XID_ALL, 0)

        def COST(self):
            return self.getToken(plsqlParser.COST, 0)

        def COUNT(self):
            return self.getToken(plsqlParser.COUNT, 0)

        def CROSS(self):
            return self.getToken(plsqlParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(plsqlParser.CUBE, 0)

        def CURRENT_USER(self):
            return self.getToken(plsqlParser.CURRENT_USER, 0)

        def CURSOR(self):
            return self.getToken(plsqlParser.CURSOR, 0)

        def CUSTOMDATUM(self):
            return self.getToken(plsqlParser.CUSTOMDATUM, 0)

        def CYCLE(self):
            return self.getToken(plsqlParser.CYCLE, 0)

        def DATA(self):
            return self.getToken(plsqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(plsqlParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(plsqlParser.DATE, 0)

        def DAY(self):
            return self.getToken(plsqlParser.DAY, 0)

        def DB_ROLE_CHANGE(self):
            return self.getToken(plsqlParser.DB_ROLE_CHANGE, 0)

        def DBTIMEZONE(self):
            return self.getToken(plsqlParser.DBTIMEZONE, 0)

        def DDL(self):
            return self.getToken(plsqlParser.DDL, 0)

        def DEBUG(self):
            return self.getToken(plsqlParser.DEBUG, 0)

        def DEC(self):
            return self.getToken(plsqlParser.DEC, 0)

        def DECIMAL(self):
            return self.getToken(plsqlParser.DECIMAL, 0)

        def DECOMPOSE(self):
            return self.getToken(plsqlParser.DECOMPOSE, 0)

        def DECREMENT(self):
            return self.getToken(plsqlParser.DECREMENT, 0)

        def DEFAULTS(self):
            return self.getToken(plsqlParser.DEFAULTS, 0)

        def DEFERRED(self):
            return self.getToken(plsqlParser.DEFERRED, 0)

        def DEFINER(self):
            return self.getToken(plsqlParser.DEFINER, 0)

        def DETERMINISTIC(self):
            return self.getToken(plsqlParser.DETERMINISTIC, 0)

        def DIMENSION(self):
            return self.getToken(plsqlParser.DIMENSION, 0)

        def DISABLE(self):
            return self.getToken(plsqlParser.DISABLE, 0)

        def DISASSOCIATE(self):
            return self.getToken(plsqlParser.DISASSOCIATE, 0)

        def DOCUMENT(self):
            return self.getToken(plsqlParser.DOCUMENT, 0)

        def DOUBLE(self):
            return self.getToken(plsqlParser.DOUBLE, 0)

        def DSINTERVAL_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0)

        def EACH(self):
            return self.getToken(plsqlParser.EACH, 0)

        def ELEMENT(self):
            return self.getToken(plsqlParser.ELEMENT, 0)

        def EMPTY(self):
            return self.getToken(plsqlParser.EMPTY, 0)

        def ENABLE(self):
            return self.getToken(plsqlParser.ENABLE, 0)

        def ENCODING(self):
            return self.getToken(plsqlParser.ENCODING, 0)

        def ENTITYESCAPING(self):
            return self.getToken(plsqlParser.ENTITYESCAPING, 0)

        def ERR(self):
            return self.getToken(plsqlParser.ERR, 0)

        def ERRORS(self):
            return self.getToken(plsqlParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(plsqlParser.ESCAPE, 0)

        def EVALNAME(self):
            return self.getToken(plsqlParser.EVALNAME, 0)

        def EXCEPTION(self):
            return self.getToken(plsqlParser.EXCEPTION, 0)

        def EXCEPTION_INIT(self):
            return self.getToken(plsqlParser.EXCEPTION_INIT, 0)

        def EXCEPTIONS(self):
            return self.getToken(plsqlParser.EXCEPTIONS, 0)

        def EXCLUDE(self):
            return self.getToken(plsqlParser.EXCLUDE, 0)

        def EXECUTE(self):
            return self.getToken(plsqlParser.EXECUTE, 0)

        def EXIT(self):
            return self.getToken(plsqlParser.EXIT, 0)

        def EXPLAIN(self):
            return self.getToken(plsqlParser.EXPLAIN, 0)

        def EXTERNAL(self):
            return self.getToken(plsqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(plsqlParser.EXTRACT, 0)

        def FAILURE(self):
            return self.getToken(plsqlParser.FAILURE, 0)

        def FINAL(self):
            return self.getToken(plsqlParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(plsqlParser.FIRST, 0)

        def FIRST_VALUE(self):
            return self.getToken(plsqlParser.FIRST_VALUE, 0)

        def FLOAT(self):
            return self.getToken(plsqlParser.FLOAT, 0)

        def FOLLOWING(self):
            return self.getToken(plsqlParser.FOLLOWING, 0)

        def FOLLOWS(self):
            return self.getToken(plsqlParser.FOLLOWS, 0)

        def FORALL(self):
            return self.getToken(plsqlParser.FORALL, 0)

        def FORCE(self):
            return self.getToken(plsqlParser.FORCE, 0)

        def FULL(self):
            return self.getToken(plsqlParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(plsqlParser.FUNCTION, 0)

        def GROUPING(self):
            return self.getToken(plsqlParser.GROUPING, 0)

        def HASH(self):
            return self.getToken(plsqlParser.HASH, 0)

        def HIDE(self):
            return self.getToken(plsqlParser.HIDE, 0)

        def HOUR(self):
            return self.getToken(plsqlParser.HOUR, 0)

        def IGNORE(self):
            return self.getToken(plsqlParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(plsqlParser.IMMEDIATE, 0)

        def INCLUDE(self):
            return self.getToken(plsqlParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(plsqlParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(plsqlParser.INCREMENT, 0)

        def INDENT(self):
            return self.getToken(plsqlParser.INDENT, 0)

        def INDEXED(self):
            return self.getToken(plsqlParser.INDEXED, 0)

        def INDICATOR(self):
            return self.getToken(plsqlParser.INDICATOR, 0)

        def INDICES(self):
            return self.getToken(plsqlParser.INDICES, 0)

        def INFINITE(self):
            return self.getToken(plsqlParser.INFINITE, 0)

        def INLINE(self):
            return self.getToken(plsqlParser.INLINE, 0)

        def INNER(self):
            return self.getToken(plsqlParser.INNER, 0)

        def INOUT(self):
            return self.getToken(plsqlParser.INOUT, 0)

        def INSTANTIABLE(self):
            return self.getToken(plsqlParser.INSTANTIABLE, 0)

        def INSTEAD(self):
            return self.getToken(plsqlParser.INSTEAD, 0)

        def INT(self):
            return self.getToken(plsqlParser.INT, 0)

        def INTEGER(self):
            return self.getToken(plsqlParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(plsqlParser.INTERVAL, 0)

        def INVALIDATE(self):
            return self.getToken(plsqlParser.INVALIDATE, 0)

        def ISOLATION(self):
            return self.getToken(plsqlParser.ISOLATION, 0)

        def ITERATE(self):
            return self.getToken(plsqlParser.ITERATE, 0)

        def JAVA(self):
            return self.getToken(plsqlParser.JAVA, 0)

        def JOIN(self):
            return self.getToken(plsqlParser.JOIN, 0)

        def KEEP(self):
            return self.getToken(plsqlParser.KEEP, 0)

        def LANGUAGE(self):
            return self.getToken(plsqlParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(plsqlParser.LAST, 0)

        def LAST_VALUE(self):
            return self.getToken(plsqlParser.LAST_VALUE, 0)

        def LEADING(self):
            return self.getToken(plsqlParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(plsqlParser.LEFT, 0)

        def LEVEL(self):
            return self.getToken(plsqlParser.LEVEL, 0)

        def LIBRARY(self):
            return self.getToken(plsqlParser.LIBRARY, 0)

        def LIKE2(self):
            return self.getToken(plsqlParser.LIKE2, 0)

        def LIKE4(self):
            return self.getToken(plsqlParser.LIKE4, 0)

        def LIKEC(self):
            return self.getToken(plsqlParser.LIKEC, 0)

        def LIMIT(self):
            return self.getToken(plsqlParser.LIMIT, 0)

        def LOCAL(self):
            return self.getToken(plsqlParser.LOCAL, 0)

        def LOCKED(self):
            return self.getToken(plsqlParser.LOCKED, 0)

        def LOG(self):
            return self.getToken(plsqlParser.LOG, 0)

        def LOGOFF(self):
            return self.getToken(plsqlParser.LOGOFF, 0)

        def LOGON(self):
            return self.getToken(plsqlParser.LOGON, 0)

        def LONG(self):
            return self.getToken(plsqlParser.LONG, 0)

        def LOOP(self):
            return self.getToken(plsqlParser.LOOP, 0)

        def MAIN(self):
            return self.getToken(plsqlParser.MAIN, 0)

        def MAP(self):
            return self.getToken(plsqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(plsqlParser.MATCHED, 0)

        def MAXVALUE(self):
            return self.getToken(plsqlParser.MAXVALUE, 0)

        def MEASURES(self):
            return self.getToken(plsqlParser.MEASURES, 0)

        def MEMBER(self):
            return self.getToken(plsqlParser.MEMBER, 0)

        def MERGE(self):
            return self.getToken(plsqlParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(plsqlParser.MINUTE, 0)

        def MINVALUE(self):
            return self.getToken(plsqlParser.MINVALUE, 0)

        def MLSLABEL(self):
            return self.getToken(plsqlParser.MLSLABEL, 0)

        def MODEL(self):
            return self.getToken(plsqlParser.MODEL, 0)

        def MODIFY(self):
            return self.getToken(plsqlParser.MODIFY, 0)

        def MONTH(self):
            return self.getToken(plsqlParser.MONTH, 0)

        def MULTISET(self):
            return self.getToken(plsqlParser.MULTISET, 0)

        def NAME(self):
            return self.getToken(plsqlParser.NAME, 0)

        def NAN(self):
            return self.getToken(plsqlParser.NAN, 0)

        def NATURAL(self):
            return self.getToken(plsqlParser.NATURAL, 0)

        def NATURALN(self):
            return self.getToken(plsqlParser.NATURALN, 0)

        def NAV(self):
            return self.getToken(plsqlParser.NAV, 0)

        def NCHAR(self):
            return self.getToken(plsqlParser.NCHAR, 0)

        def NCHAR_CS(self):
            return self.getToken(plsqlParser.NCHAR_CS, 0)

        def NCLOB(self):
            return self.getToken(plsqlParser.NCLOB, 0)

        def NESTED(self):
            return self.getToken(plsqlParser.NESTED, 0)

        def NEW(self):
            return self.getToken(plsqlParser.NEW, 0)

        def NO(self):
            return self.getToken(plsqlParser.NO, 0)

        def NOAUDIT(self):
            return self.getToken(plsqlParser.NOAUDIT, 0)

        def NOCOPY(self):
            return self.getToken(plsqlParser.NOCOPY, 0)

        def NOCYCLE(self):
            return self.getToken(plsqlParser.NOCYCLE, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(plsqlParser.NOENTITYESCAPING, 0)

        def NONE(self):
            return self.getToken(plsqlParser.NONE, 0)

        def NOSCHEMACHECK(self):
            return self.getToken(plsqlParser.NOSCHEMACHECK, 0)

        def NULLS(self):
            return self.getToken(plsqlParser.NULLS, 0)

        def NUMBER(self):
            return self.getToken(plsqlParser.NUMBER, 0)

        def NUMERIC(self):
            return self.getToken(plsqlParser.NUMERIC, 0)

        def NVARCHAR2(self):
            return self.getToken(plsqlParser.NVARCHAR2, 0)

        def OBJECT(self):
            return self.getToken(plsqlParser.OBJECT, 0)

        def OFF(self):
            return self.getToken(plsqlParser.OFF, 0)

        def OID(self):
            return self.getToken(plsqlParser.OID, 0)

        def OLD(self):
            return self.getToken(plsqlParser.OLD, 0)

        def ONLY(self):
            return self.getToken(plsqlParser.ONLY, 0)

        def OPEN(self):
            return self.getToken(plsqlParser.OPEN, 0)

        def ORADATA(self):
            return self.getToken(plsqlParser.ORADATA, 0)

        def ORDINALITY(self):
            return self.getToken(plsqlParser.ORDINALITY, 0)

        def OSERROR(self):
            return self.getToken(plsqlParser.OSERROR, 0)

        def OUT(self):
            return self.getToken(plsqlParser.OUT, 0)

        def OUTER(self):
            return self.getToken(plsqlParser.OUTER, 0)

        def OVER(self):
            return self.getToken(plsqlParser.OVER, 0)

        def OVERRIDING(self):
            return self.getToken(plsqlParser.OVERRIDING, 0)

        def PACKAGE(self):
            return self.getToken(plsqlParser.PACKAGE, 0)

        def PARALLEL_ENABLE(self):
            return self.getToken(plsqlParser.PARALLEL_ENABLE, 0)

        def PARAMETERS(self):
            return self.getToken(plsqlParser.PARAMETERS, 0)

        def PARENT(self):
            return self.getToken(plsqlParser.PARENT, 0)

        def PARTITION(self):
            return self.getToken(plsqlParser.PARTITION, 0)

        def PASSING(self):
            return self.getToken(plsqlParser.PASSING, 0)

        def PATH(self):
            return self.getToken(plsqlParser.PATH, 0)

        def PIPELINED(self):
            return self.getToken(plsqlParser.PIPELINED, 0)

        def PLAN(self):
            return self.getToken(plsqlParser.PLAN, 0)

        def PLS_INTEGER(self):
            return self.getToken(plsqlParser.PLS_INTEGER, 0)

        def POSITIVE(self):
            return self.getToken(plsqlParser.POSITIVE, 0)

        def POSITIVEN(self):
            return self.getToken(plsqlParser.POSITIVEN, 0)

        def PRAGMA(self):
            return self.getToken(plsqlParser.PRAGMA, 0)

        def PRECEDING(self):
            return self.getToken(plsqlParser.PRECEDING, 0)

        def PRECISION(self):
            return self.getToken(plsqlParser.PRECISION, 0)

        def PRESENT(self):
            return self.getToken(plsqlParser.PRESENT, 0)

        def RAISE(self):
            return self.getToken(plsqlParser.RAISE, 0)

        def RANGE(self):
            return self.getToken(plsqlParser.RANGE, 0)

        def RAW(self):
            return self.getToken(plsqlParser.RAW, 0)

        def READ(self):
            return self.getToken(plsqlParser.READ, 0)

        def REAL(self):
            return self.getToken(plsqlParser.REAL, 0)

        def RECORD(self):
            return self.getToken(plsqlParser.RECORD, 0)

        def REF(self):
            return self.getToken(plsqlParser.REF, 0)

        def REFERENCE(self):
            return self.getToken(plsqlParser.REFERENCE, 0)

        def REFERENCING(self):
            return self.getToken(plsqlParser.REFERENCING, 0)

        def REJECT(self):
            return self.getToken(plsqlParser.REJECT, 0)

        def RELIES_ON(self):
            return self.getToken(plsqlParser.RELIES_ON, 0)

        def RENAME(self):
            return self.getToken(plsqlParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(plsqlParser.REPLACE, 0)

        def RESPECT(self):
            return self.getToken(plsqlParser.RESPECT, 0)

        def RESTRICT_REFERENCES(self):
            return self.getToken(plsqlParser.RESTRICT_REFERENCES, 0)

        def RESULT(self):
            return self.getToken(plsqlParser.RESULT, 0)

        def RESULT_CACHE(self):
            return self.getToken(plsqlParser.RESULT_CACHE, 0)

        def RETURN(self):
            return self.getToken(plsqlParser.RETURN, 0)

        def RETURNING(self):
            return self.getToken(plsqlParser.RETURNING, 0)

        def REUSE(self):
            return self.getToken(plsqlParser.REUSE, 0)

        def REVERSE(self):
            return self.getToken(plsqlParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(plsqlParser.RIGHT, 0)

        def ROLLBACK(self):
            return self.getToken(plsqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(plsqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(plsqlParser.ROW, 0)

        def ROWID(self):
            return self.getToken(plsqlParser.ROWID, 0)

        def ROWS(self):
            return self.getToken(plsqlParser.ROWS, 0)

        def RULES(self):
            return self.getToken(plsqlParser.RULES, 0)

        def SAMPLE(self):
            return self.getToken(plsqlParser.SAMPLE, 0)

        def SAVE(self):
            return self.getToken(plsqlParser.SAVE, 0)

        def SAVEPOINT(self):
            return self.getToken(plsqlParser.SAVEPOINT, 0)

        def SCHEMA(self):
            return self.getToken(plsqlParser.SCHEMA, 0)

        def SCHEMACHECK(self):
            return self.getToken(plsqlParser.SCHEMACHECK, 0)

        def SCN(self):
            return self.getToken(plsqlParser.SCN, 0)

        def SECOND(self):
            return self.getToken(plsqlParser.SECOND, 0)

        def SEED(self):
            return self.getToken(plsqlParser.SEED, 0)

        def SEGMENT(self):
            return self.getToken(plsqlParser.SEGMENT, 0)

        def SELF(self):
            return self.getToken(plsqlParser.SELF, 0)

        def SEQUENTIAL(self):
            return self.getToken(plsqlParser.SEQUENTIAL, 0)

        def SERIALIZABLE(self):
            return self.getToken(plsqlParser.SERIALIZABLE, 0)

        def SERIALLY_REUSABLE(self):
            return self.getToken(plsqlParser.SERIALLY_REUSABLE, 0)

        def SERVERERROR(self):
            return self.getToken(plsqlParser.SERVERERROR, 0)

        def SESSIONTIMEZONE(self):
            return self.getToken(plsqlParser.SESSIONTIMEZONE, 0)

        def SET(self):
            return self.getToken(plsqlParser.SET, 0)

        def SETS(self):
            return self.getToken(plsqlParser.SETS, 0)

        def SETTINGS(self):
            return self.getToken(plsqlParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(plsqlParser.SHOW, 0)

        def SHUTDOWN(self):
            return self.getToken(plsqlParser.SHUTDOWN, 0)

        def SIBLINGS(self):
            return self.getToken(plsqlParser.SIBLINGS, 0)

        def SIGNTYPE(self):
            return self.getToken(plsqlParser.SIGNTYPE, 0)

        def SIMPLE_INTEGER(self):
            return self.getToken(plsqlParser.SIMPLE_INTEGER, 0)

        def SINGLE(self):
            return self.getToken(plsqlParser.SINGLE, 0)

        def SIZE(self):
            return self.getToken(plsqlParser.SIZE, 0)

        def SKIP_(self):
            return self.getToken(plsqlParser.SKIP_, 0)

        def SMALLINT(self):
            return self.getToken(plsqlParser.SMALLINT, 0)

        def SNAPSHOT(self):
            return self.getToken(plsqlParser.SNAPSHOT, 0)

        def SOME(self):
            return self.getToken(plsqlParser.SOME, 0)

        def SPECIFICATION(self):
            return self.getToken(plsqlParser.SPECIFICATION, 0)

        def SQLDATA(self):
            return self.getToken(plsqlParser.SQLDATA, 0)

        def SQLERROR(self):
            return self.getToken(plsqlParser.SQLERROR, 0)

        def STANDALONE(self):
            return self.getToken(plsqlParser.STANDALONE, 0)

        def STARTUP(self):
            return self.getToken(plsqlParser.STARTUP, 0)

        def STATEMENT(self):
            return self.getToken(plsqlParser.STATEMENT, 0)

        def STATEMENT_ID(self):
            return self.getToken(plsqlParser.STATEMENT_ID, 0)

        def STATIC(self):
            return self.getToken(plsqlParser.STATIC, 0)

        def STATISTICS(self):
            return self.getToken(plsqlParser.STATISTICS, 0)

        def STRING(self):
            return self.getToken(plsqlParser.STRING, 0)

        def SUBMULTISET(self):
            return self.getToken(plsqlParser.SUBMULTISET, 0)

        def SUBPARTITION(self):
            return self.getToken(plsqlParser.SUBPARTITION, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(plsqlParser.SUBSTITUTABLE, 0)

        def SUBTYPE(self):
            return self.getToken(plsqlParser.SUBTYPE, 0)

        def SUCCESS(self):
            return self.getToken(plsqlParser.SUCCESS, 0)

        def SUSPEND(self):
            return self.getToken(plsqlParser.SUSPEND, 0)

        def TIME(self):
            return self.getToken(plsqlParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(plsqlParser.TIMESTAMP, 0)

        def TIMESTAMP_LTZ_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0)

        def TIMESTAMP_TZ_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0)

        def TIMESTAMP_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0)

        def TIMEZONE_ABBR(self):
            return self.getToken(plsqlParser.TIMEZONE_ABBR, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(plsqlParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(plsqlParser.TIMEZONE_MINUTE, 0)

        def TIMEZONE_REGION(self):
            return self.getToken(plsqlParser.TIMEZONE_REGION, 0)

        def TRAILING(self):
            return self.getToken(plsqlParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(plsqlParser.TRANSACTION, 0)

        def TRANSLATE(self):
            return self.getToken(plsqlParser.TRANSLATE, 0)

        def TREAT(self):
            return self.getToken(plsqlParser.TREAT, 0)

        def TRIGGER(self):
            return self.getToken(plsqlParser.TRIGGER, 0)

        def TRIM(self):
            return self.getToken(plsqlParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(plsqlParser.TRUNCATE, 0)

        def TYPE(self):
            return self.getToken(plsqlParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(plsqlParser.UNBOUNDED, 0)

        def UNDER(self):
            return self.getToken(plsqlParser.UNDER, 0)

        def UNLIMITED(self):
            return self.getToken(plsqlParser.UNLIMITED, 0)

        def UNTIL(self):
            return self.getToken(plsqlParser.UNTIL, 0)

        def UPDATED(self):
            return self.getToken(plsqlParser.UPDATED, 0)

        def UPSERT(self):
            return self.getToken(plsqlParser.UPSERT, 0)

        def UROWID(self):
            return self.getToken(plsqlParser.UROWID, 0)

        def USE(self):
            return self.getToken(plsqlParser.USE, 0)

        def VALIDATE(self):
            return self.getToken(plsqlParser.VALIDATE, 0)

        def VALUE(self):
            return self.getToken(plsqlParser.VALUE, 0)

        def VARCHAR(self):
            return self.getToken(plsqlParser.VARCHAR, 0)

        def VARCHAR2(self):
            return self.getToken(plsqlParser.VARCHAR2, 0)

        def VARIABLE(self):
            return self.getToken(plsqlParser.VARIABLE, 0)

        def VARRAY(self):
            return self.getToken(plsqlParser.VARRAY, 0)

        def VARYING(self):
            return self.getToken(plsqlParser.VARYING, 0)

        def VERSION(self):
            return self.getToken(plsqlParser.VERSION, 0)

        def VERSIONS(self):
            return self.getToken(plsqlParser.VERSIONS, 0)

        def WAIT(self):
            return self.getToken(plsqlParser.WAIT, 0)

        def WARNING(self):
            return self.getToken(plsqlParser.WARNING, 0)

        def WELLFORMED(self):
            return self.getToken(plsqlParser.WELLFORMED, 0)

        def WHENEVER(self):
            return self.getToken(plsqlParser.WHENEVER, 0)

        def WHILE(self):
            return self.getToken(plsqlParser.WHILE, 0)

        def WITHIN(self):
            return self.getToken(plsqlParser.WITHIN, 0)

        def WORK(self):
            return self.getToken(plsqlParser.WORK, 0)

        def WRITE(self):
            return self.getToken(plsqlParser.WRITE, 0)

        def XML(self):
            return self.getToken(plsqlParser.XML, 0)

        def XMLAGG(self):
            return self.getToken(plsqlParser.XMLAGG, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(plsqlParser.XMLATTRIBUTES, 0)

        def XMLCAST(self):
            return self.getToken(plsqlParser.XMLCAST, 0)

        def XMLCOLATTVAL(self):
            return self.getToken(plsqlParser.XMLCOLATTVAL, 0)

        def XMLELEMENT(self):
            return self.getToken(plsqlParser.XMLELEMENT, 0)

        def XMLEXISTS(self):
            return self.getToken(plsqlParser.XMLEXISTS, 0)

        def XMLFOREST(self):
            return self.getToken(plsqlParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(plsqlParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(plsqlParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(plsqlParser.XMLPI, 0)

        def XMLQUERY(self):
            return self.getToken(plsqlParser.XMLQUERY, 0)

        def XMLROOT(self):
            return self.getToken(plsqlParser.XMLROOT, 0)

        def XMLSERIALIZE(self):
            return self.getToken(plsqlParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(plsqlParser.XMLTABLE, 0)

        def YEAR(self):
            return self.getToken(plsqlParser.YEAR, 0)

        def YES(self):
            return self.getToken(plsqlParser.YES, 0)

        def YMINTERVAL_UNCONSTRAINED(self):
            return self.getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0)

        def ZONE(self):
            return self.getToken(plsqlParser.ZONE, 0)

        def PREDICTION(self):
            return self.getToken(plsqlParser.PREDICTION, 0)

        def PREDICTION_BOUNDS(self):
            return self.getToken(plsqlParser.PREDICTION_BOUNDS, 0)

        def PREDICTION_COST(self):
            return self.getToken(plsqlParser.PREDICTION_COST, 0)

        def PREDICTION_DETAILS(self):
            return self.getToken(plsqlParser.PREDICTION_DETAILS, 0)

        def PREDICTION_PROBABILITY(self):
            return self.getToken(plsqlParser.PREDICTION_PROBABILITY, 0)

        def PREDICTION_SET(self):
            return self.getToken(plsqlParser.PREDICTION_SET, 0)

        def CUME_DIST(self):
            return self.getToken(plsqlParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(plsqlParser.DENSE_RANK, 0)

        def LISTAGG(self):
            return self.getToken(plsqlParser.LISTAGG, 0)

        def PERCENT_RANK(self):
            return self.getToken(plsqlParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(plsqlParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(plsqlParser.PERCENTILE_DISC, 0)

        def RANK(self):
            return self.getToken(plsqlParser.RANK, 0)

        def AVG(self):
            return self.getToken(plsqlParser.AVG, 0)

        def CORR(self):
            return self.getToken(plsqlParser.CORR, 0)

        def LAG(self):
            return self.getToken(plsqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(plsqlParser.LEAD, 0)

        def MAX(self):
            return self.getToken(plsqlParser.MAX, 0)

        def MEDIAN(self):
            return self.getToken(plsqlParser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(plsqlParser.MIN, 0)

        def NTILE(self):
            return self.getToken(plsqlParser.NTILE, 0)

        def RATIO_TO_REPORT(self):
            return self.getToken(plsqlParser.RATIO_TO_REPORT, 0)

        def ROW_NUMBER(self):
            return self.getToken(plsqlParser.ROW_NUMBER, 0)

        def SUM(self):
            return self.getToken(plsqlParser.SUM, 0)

        def VARIANCE(self):
            return self.getToken(plsqlParser.VARIANCE, 0)

        def REGR_(self):
            return self.getToken(plsqlParser.REGR_, 0)

        def STDDEV(self):
            return self.getToken(plsqlParser.STDDEV, 0)

        def VAR_(self):
            return self.getToken(plsqlParser.VAR_, 0)

        def COVAR_(self):
            return self.getToken(plsqlParser.COVAR_, 0)

        def getRuleIndex(self):
            return plsqlParser.RULE_regular_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_id" ):
                listener.enterRegular_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_id" ):
                listener.exitRegular_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegular_id" ):
                return visitor.visitRegular_id(self)
            else:
                return visitor.visitChildren(self)




    def regular_id(self):

        localctx = plsqlParser.Regular_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_regular_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5149
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << plsqlParser.A_LETTER) | (1 << plsqlParser.ADD) | (1 << plsqlParser.AFTER) | (1 << plsqlParser.AGENT) | (1 << plsqlParser.AGGREGATE) | (1 << plsqlParser.ANALYZE) | (1 << plsqlParser.ARRAY) | (1 << plsqlParser.ASSOCIATE) | (1 << plsqlParser.AT) | (1 << plsqlParser.ATTRIBUTE) | (1 << plsqlParser.AUDIT) | (1 << plsqlParser.AUTHID) | (1 << plsqlParser.AUTO) | (1 << plsqlParser.AUTOMATIC) | (1 << plsqlParser.AUTONOMOUS_TRANSACTION) | (1 << plsqlParser.BATCH) | (1 << plsqlParser.BEFORE) | (1 << plsqlParser.BFILE) | (1 << plsqlParser.BINARY_DOUBLE) | (1 << plsqlParser.BINARY_FLOAT) | (1 << plsqlParser.BINARY_INTEGER) | (1 << plsqlParser.BLOB) | (1 << plsqlParser.BLOCK) | (1 << plsqlParser.BODY) | (1 << plsqlParser.BOOLEAN) | (1 << plsqlParser.BOTH) | (1 << plsqlParser.BULK) | (1 << plsqlParser.BYTE) | (1 << plsqlParser.C_LETTER) | (1 << plsqlParser.CALL) | (1 << plsqlParser.CANONICAL) | (1 << plsqlParser.CASCADE) | (1 << plsqlParser.CAST) | (1 << plsqlParser.CHAR) | (1 << plsqlParser.CHAR_CS) | (1 << plsqlParser.CHARACTER) | (1 << plsqlParser.CHR) | (1 << plsqlParser.CLOB) | (1 << plsqlParser.CLOSE) | (1 << plsqlParser.CLUSTER) | (1 << plsqlParser.COLLECT) | (1 << plsqlParser.COLUMNS) | (1 << plsqlParser.COMMENT) | (1 << plsqlParser.COMMIT) | (1 << plsqlParser.COMMITTED) | (1 << plsqlParser.COMPATIBILITY) | (1 << plsqlParser.COMPILE) | (1 << plsqlParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (plsqlParser.CONSTANT - 65)) | (1 << (plsqlParser.CONSTRAINT - 65)) | (1 << (plsqlParser.CONSTRAINTS - 65)) | (1 << (plsqlParser.CONSTRUCTOR - 65)) | (1 << (plsqlParser.CONTENT - 65)) | (1 << (plsqlParser.CONTEXT - 65)) | (1 << (plsqlParser.CONTINUE - 65)) | (1 << (plsqlParser.CONVERT - 65)) | (1 << (plsqlParser.CORRUPT_XID - 65)) | (1 << (plsqlParser.CORRUPT_XID_ALL - 65)) | (1 << (plsqlParser.COST - 65)) | (1 << (plsqlParser.COUNT - 65)) | (1 << (plsqlParser.CROSS - 65)) | (1 << (plsqlParser.CUBE - 65)) | (1 << (plsqlParser.CURRENT_USER - 65)) | (1 << (plsqlParser.CURSOR - 65)) | (1 << (plsqlParser.CUSTOMDATUM - 65)) | (1 << (plsqlParser.CYCLE - 65)) | (1 << (plsqlParser.DATA - 65)) | (1 << (plsqlParser.DATABASE - 65)) | (1 << (plsqlParser.DATE - 65)) | (1 << (plsqlParser.DAY - 65)) | (1 << (plsqlParser.DB_ROLE_CHANGE - 65)) | (1 << (plsqlParser.DBTIMEZONE - 65)) | (1 << (plsqlParser.DDL - 65)) | (1 << (plsqlParser.DEBUG - 65)) | (1 << (plsqlParser.DEC - 65)) | (1 << (plsqlParser.DECIMAL - 65)) | (1 << (plsqlParser.DECOMPOSE - 65)) | (1 << (plsqlParser.DECREMENT - 65)) | (1 << (plsqlParser.DEFAULTS - 65)) | (1 << (plsqlParser.DEFERRED - 65)) | (1 << (plsqlParser.DEFINER - 65)) | (1 << (plsqlParser.DETERMINISTIC - 65)) | (1 << (plsqlParser.DIMENSION - 65)) | (1 << (plsqlParser.DISABLE - 65)) | (1 << (plsqlParser.DISASSOCIATE - 65)) | (1 << (plsqlParser.DOCUMENT - 65)) | (1 << (plsqlParser.DOUBLE - 65)) | (1 << (plsqlParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (plsqlParser.EACH - 65)) | (1 << (plsqlParser.ELEMENT - 65)) | (1 << (plsqlParser.EMPTY - 65)) | (1 << (plsqlParser.ENABLE - 65)) | (1 << (plsqlParser.ENCODING - 65)) | (1 << (plsqlParser.ENTITYESCAPING - 65)) | (1 << (plsqlParser.ERR - 65)) | (1 << (plsqlParser.ERRORS - 65)) | (1 << (plsqlParser.ESCAPE - 65)) | (1 << (plsqlParser.EVALNAME - 65)) | (1 << (plsqlParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (plsqlParser.EXCEPTION_INIT - 129)) | (1 << (plsqlParser.EXCEPTIONS - 129)) | (1 << (plsqlParser.EXCLUDE - 129)) | (1 << (plsqlParser.EXECUTE - 129)) | (1 << (plsqlParser.EXIT - 129)) | (1 << (plsqlParser.EXPLAIN - 129)) | (1 << (plsqlParser.EXTERNAL - 129)) | (1 << (plsqlParser.EXTRACT - 129)) | (1 << (plsqlParser.FAILURE - 129)) | (1 << (plsqlParser.FINAL - 129)) | (1 << (plsqlParser.FIRST - 129)) | (1 << (plsqlParser.FIRST_VALUE - 129)) | (1 << (plsqlParser.FLOAT - 129)) | (1 << (plsqlParser.FOLLOWING - 129)) | (1 << (plsqlParser.FOLLOWS - 129)) | (1 << (plsqlParser.FORALL - 129)) | (1 << (plsqlParser.FORCE - 129)) | (1 << (plsqlParser.FULL - 129)) | (1 << (plsqlParser.FUNCTION - 129)) | (1 << (plsqlParser.GROUPING - 129)) | (1 << (plsqlParser.HASH - 129)) | (1 << (plsqlParser.HIDE - 129)) | (1 << (plsqlParser.HOUR - 129)) | (1 << (plsqlParser.IGNORE - 129)) | (1 << (plsqlParser.IMMEDIATE - 129)) | (1 << (plsqlParser.INCLUDE - 129)) | (1 << (plsqlParser.INCLUDING - 129)) | (1 << (plsqlParser.INCREMENT - 129)) | (1 << (plsqlParser.INDENT - 129)) | (1 << (plsqlParser.INDEXED - 129)) | (1 << (plsqlParser.INDICATOR - 129)) | (1 << (plsqlParser.INDICES - 129)) | (1 << (plsqlParser.INFINITE - 129)) | (1 << (plsqlParser.INLINE - 129)) | (1 << (plsqlParser.INNER - 129)) | (1 << (plsqlParser.INOUT - 129)) | (1 << (plsqlParser.INSTANTIABLE - 129)) | (1 << (plsqlParser.INSTEAD - 129)) | (1 << (plsqlParser.INT - 129)) | (1 << (plsqlParser.INTEGER - 129)) | (1 << (plsqlParser.INTERVAL - 129)) | (1 << (plsqlParser.INVALIDATE - 129)) | (1 << (plsqlParser.ISOLATION - 129)) | (1 << (plsqlParser.ITERATE - 129)) | (1 << (plsqlParser.JAVA - 129)) | (1 << (plsqlParser.JOIN - 129)) | (1 << (plsqlParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (plsqlParser.LANGUAGE - 193)) | (1 << (plsqlParser.LAST - 193)) | (1 << (plsqlParser.LAST_VALUE - 193)) | (1 << (plsqlParser.LEADING - 193)) | (1 << (plsqlParser.LEFT - 193)) | (1 << (plsqlParser.LEVEL - 193)) | (1 << (plsqlParser.LIBRARY - 193)) | (1 << (plsqlParser.LIKE2 - 193)) | (1 << (plsqlParser.LIKE4 - 193)) | (1 << (plsqlParser.LIKEC - 193)) | (1 << (plsqlParser.LIMIT - 193)) | (1 << (plsqlParser.LOCAL - 193)) | (1 << (plsqlParser.LOCKED - 193)) | (1 << (plsqlParser.LOG - 193)) | (1 << (plsqlParser.LOGOFF - 193)) | (1 << (plsqlParser.LOGON - 193)) | (1 << (plsqlParser.LONG - 193)) | (1 << (plsqlParser.LOOP - 193)) | (1 << (plsqlParser.MAIN - 193)) | (1 << (plsqlParser.MAP - 193)) | (1 << (plsqlParser.MATCHED - 193)) | (1 << (plsqlParser.MAXVALUE - 193)) | (1 << (plsqlParser.MEASURES - 193)) | (1 << (plsqlParser.MEMBER - 193)) | (1 << (plsqlParser.MERGE - 193)) | (1 << (plsqlParser.MINUTE - 193)) | (1 << (plsqlParser.MINVALUE - 193)) | (1 << (plsqlParser.MLSLABEL - 193)) | (1 << (plsqlParser.MODEL - 193)) | (1 << (plsqlParser.MODIFY - 193)) | (1 << (plsqlParser.MONTH - 193)) | (1 << (plsqlParser.MULTISET - 193)) | (1 << (plsqlParser.NAME - 193)) | (1 << (plsqlParser.NAN - 193)) | (1 << (plsqlParser.NATURAL - 193)) | (1 << (plsqlParser.NATURALN - 193)) | (1 << (plsqlParser.NAV - 193)) | (1 << (plsqlParser.NCHAR - 193)) | (1 << (plsqlParser.NCHAR_CS - 193)) | (1 << (plsqlParser.NCLOB - 193)) | (1 << (plsqlParser.NESTED - 193)) | (1 << (plsqlParser.NEW - 193)) | (1 << (plsqlParser.NO - 193)) | (1 << (plsqlParser.NOAUDIT - 193)) | (1 << (plsqlParser.NOCOPY - 193)) | (1 << (plsqlParser.NOCYCLE - 193)) | (1 << (plsqlParser.NOENTITYESCAPING - 193)) | (1 << (plsqlParser.NONE - 193)) | (1 << (plsqlParser.NOSCHEMACHECK - 193)) | (1 << (plsqlParser.NULLS - 193)) | (1 << (plsqlParser.NUMBER - 193)) | (1 << (plsqlParser.NUMERIC - 193)) | (1 << (plsqlParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (plsqlParser.OBJECT - 257)) | (1 << (plsqlParser.OFF - 257)) | (1 << (plsqlParser.OID - 257)) | (1 << (plsqlParser.OLD - 257)) | (1 << (plsqlParser.ONLY - 257)) | (1 << (plsqlParser.OPEN - 257)) | (1 << (plsqlParser.ORADATA - 257)) | (1 << (plsqlParser.ORDINALITY - 257)) | (1 << (plsqlParser.OSERROR - 257)) | (1 << (plsqlParser.OUT - 257)) | (1 << (plsqlParser.OUTER - 257)) | (1 << (plsqlParser.OVER - 257)) | (1 << (plsqlParser.OVERRIDING - 257)) | (1 << (plsqlParser.PACKAGE - 257)) | (1 << (plsqlParser.PARALLEL_ENABLE - 257)) | (1 << (plsqlParser.PARAMETERS - 257)) | (1 << (plsqlParser.PARENT - 257)) | (1 << (plsqlParser.PARTITION - 257)) | (1 << (plsqlParser.PASSING - 257)) | (1 << (plsqlParser.PATH - 257)) | (1 << (plsqlParser.PIPELINED - 257)) | (1 << (plsqlParser.PLAN - 257)) | (1 << (plsqlParser.PLS_INTEGER - 257)) | (1 << (plsqlParser.POSITIVE - 257)) | (1 << (plsqlParser.POSITIVEN - 257)) | (1 << (plsqlParser.PRAGMA - 257)) | (1 << (plsqlParser.PRECEDING - 257)) | (1 << (plsqlParser.PRECISION - 257)) | (1 << (plsqlParser.PRESENT - 257)) | (1 << (plsqlParser.RAISE - 257)) | (1 << (plsqlParser.RANGE - 257)) | (1 << (plsqlParser.RAW - 257)) | (1 << (plsqlParser.READ - 257)) | (1 << (plsqlParser.REAL - 257)) | (1 << (plsqlParser.RECORD - 257)) | (1 << (plsqlParser.REF - 257)) | (1 << (plsqlParser.REFERENCE - 257)) | (1 << (plsqlParser.REFERENCING - 257)) | (1 << (plsqlParser.REJECT - 257)) | (1 << (plsqlParser.RELIES_ON - 257)) | (1 << (plsqlParser.RENAME - 257)) | (1 << (plsqlParser.REPLACE - 257)) | (1 << (plsqlParser.RESPECT - 257)) | (1 << (plsqlParser.RESTRICT_REFERENCES - 257)) | (1 << (plsqlParser.RESULT - 257)) | (1 << (plsqlParser.RESULT_CACHE - 257)) | (1 << (plsqlParser.RETURN - 257)) | (1 << (plsqlParser.RETURNING - 257)) | (1 << (plsqlParser.REUSE - 257)) | (1 << (plsqlParser.REVERSE - 257)) | (1 << (plsqlParser.RIGHT - 257)) | (1 << (plsqlParser.ROLLBACK - 257)) | (1 << (plsqlParser.ROLLUP - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (plsqlParser.ROW - 321)) | (1 << (plsqlParser.ROWID - 321)) | (1 << (plsqlParser.ROWS - 321)) | (1 << (plsqlParser.RULES - 321)) | (1 << (plsqlParser.SAMPLE - 321)) | (1 << (plsqlParser.SAVE - 321)) | (1 << (plsqlParser.SAVEPOINT - 321)) | (1 << (plsqlParser.SCHEMA - 321)) | (1 << (plsqlParser.SCHEMACHECK - 321)) | (1 << (plsqlParser.SCN - 321)) | (1 << (plsqlParser.SECOND - 321)) | (1 << (plsqlParser.SEED - 321)) | (1 << (plsqlParser.SEGMENT - 321)) | (1 << (plsqlParser.SELF - 321)) | (1 << (plsqlParser.SEQUENTIAL - 321)) | (1 << (plsqlParser.SERIALIZABLE - 321)) | (1 << (plsqlParser.SERIALLY_REUSABLE - 321)) | (1 << (plsqlParser.SERVERERROR - 321)) | (1 << (plsqlParser.SESSIONTIMEZONE - 321)) | (1 << (plsqlParser.SET - 321)) | (1 << (plsqlParser.SETS - 321)) | (1 << (plsqlParser.SETTINGS - 321)) | (1 << (plsqlParser.SHOW - 321)) | (1 << (plsqlParser.SHUTDOWN - 321)) | (1 << (plsqlParser.SIBLINGS - 321)) | (1 << (plsqlParser.SIGNTYPE - 321)) | (1 << (plsqlParser.SIMPLE_INTEGER - 321)) | (1 << (plsqlParser.SINGLE - 321)) | (1 << (plsqlParser.SIZE - 321)) | (1 << (plsqlParser.SKIP_ - 321)) | (1 << (plsqlParser.SMALLINT - 321)) | (1 << (plsqlParser.SNAPSHOT - 321)) | (1 << (plsqlParser.SOME - 321)) | (1 << (plsqlParser.SPECIFICATION - 321)) | (1 << (plsqlParser.SQLDATA - 321)) | (1 << (plsqlParser.SQLERROR - 321)) | (1 << (plsqlParser.STANDALONE - 321)) | (1 << (plsqlParser.STARTUP - 321)) | (1 << (plsqlParser.STATEMENT - 321)) | (1 << (plsqlParser.STATEMENT_ID - 321)) | (1 << (plsqlParser.STATIC - 321)) | (1 << (plsqlParser.STATISTICS - 321)) | (1 << (plsqlParser.STRING - 321)) | (1 << (plsqlParser.SUBMULTISET - 321)) | (1 << (plsqlParser.SUBPARTITION - 321)) | (1 << (plsqlParser.SUBSTITUTABLE - 321)) | (1 << (plsqlParser.SUBTYPE - 321)) | (1 << (plsqlParser.SUCCESS - 321)) | (1 << (plsqlParser.SUSPEND - 321)) | (1 << (plsqlParser.TIME - 321)) | (1 << (plsqlParser.TIMESTAMP - 321)) | (1 << (plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMESTAMP_UNCONSTRAINED - 321)) | (1 << (plsqlParser.TIMEZONE_ABBR - 321)) | (1 << (plsqlParser.TIMEZONE_HOUR - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (plsqlParser.TIMEZONE_MINUTE - 385)) | (1 << (plsqlParser.TIMEZONE_REGION - 385)) | (1 << (plsqlParser.TRAILING - 385)) | (1 << (plsqlParser.TRANSACTION - 385)) | (1 << (plsqlParser.TRANSLATE - 385)) | (1 << (plsqlParser.TREAT - 385)) | (1 << (plsqlParser.TRIGGER - 385)) | (1 << (plsqlParser.TRIM - 385)) | (1 << (plsqlParser.TRUNCATE - 385)) | (1 << (plsqlParser.TYPE - 385)) | (1 << (plsqlParser.UNBOUNDED - 385)) | (1 << (plsqlParser.UNDER - 385)) | (1 << (plsqlParser.UNLIMITED - 385)) | (1 << (plsqlParser.UNTIL - 385)) | (1 << (plsqlParser.UPDATED - 385)) | (1 << (plsqlParser.UPSERT - 385)) | (1 << (plsqlParser.UROWID - 385)) | (1 << (plsqlParser.USE - 385)) | (1 << (plsqlParser.VALIDATE - 385)) | (1 << (plsqlParser.VALUE - 385)) | (1 << (plsqlParser.VARCHAR - 385)) | (1 << (plsqlParser.VARCHAR2 - 385)) | (1 << (plsqlParser.VARIABLE - 385)) | (1 << (plsqlParser.VARRAY - 385)) | (1 << (plsqlParser.VARYING - 385)) | (1 << (plsqlParser.VERSION - 385)) | (1 << (plsqlParser.VERSIONS - 385)) | (1 << (plsqlParser.WAIT - 385)) | (1 << (plsqlParser.WARNING - 385)) | (1 << (plsqlParser.WELLFORMED - 385)) | (1 << (plsqlParser.WHENEVER - 385)) | (1 << (plsqlParser.WHILE - 385)) | (1 << (plsqlParser.WITHIN - 385)) | (1 << (plsqlParser.WORK - 385)) | (1 << (plsqlParser.WRITE - 385)) | (1 << (plsqlParser.XML - 385)) | (1 << (plsqlParser.XMLAGG - 385)) | (1 << (plsqlParser.XMLATTRIBUTES - 385)) | (1 << (plsqlParser.XMLCAST - 385)) | (1 << (plsqlParser.XMLCOLATTVAL - 385)) | (1 << (plsqlParser.XMLELEMENT - 385)) | (1 << (plsqlParser.XMLEXISTS - 385)) | (1 << (plsqlParser.XMLFOREST - 385)) | (1 << (plsqlParser.XMLNAMESPACES - 385)) | (1 << (plsqlParser.XMLPARSE - 385)) | (1 << (plsqlParser.XMLPI - 385)) | (1 << (plsqlParser.XMLQUERY - 385)) | (1 << (plsqlParser.XMLROOT - 385)) | (1 << (plsqlParser.XMLSERIALIZE - 385)) | (1 << (plsqlParser.XMLTABLE - 385)) | (1 << (plsqlParser.YEAR - 385)) | (1 << (plsqlParser.YES - 385)) | (1 << (plsqlParser.YMINTERVAL_UNCONSTRAINED - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (plsqlParser.ZONE - 449)) | (1 << (plsqlParser.PREDICTION - 449)) | (1 << (plsqlParser.PREDICTION_BOUNDS - 449)) | (1 << (plsqlParser.PREDICTION_COST - 449)) | (1 << (plsqlParser.PREDICTION_DETAILS - 449)) | (1 << (plsqlParser.PREDICTION_PROBABILITY - 449)) | (1 << (plsqlParser.PREDICTION_SET - 449)) | (1 << (plsqlParser.CUME_DIST - 449)) | (1 << (plsqlParser.DENSE_RANK - 449)) | (1 << (plsqlParser.LISTAGG - 449)) | (1 << (plsqlParser.PERCENT_RANK - 449)) | (1 << (plsqlParser.PERCENTILE_CONT - 449)) | (1 << (plsqlParser.PERCENTILE_DISC - 449)) | (1 << (plsqlParser.RANK - 449)) | (1 << (plsqlParser.AVG - 449)) | (1 << (plsqlParser.CORR - 449)) | (1 << (plsqlParser.LAG - 449)) | (1 << (plsqlParser.LEAD - 449)) | (1 << (plsqlParser.MAX - 449)) | (1 << (plsqlParser.MEDIAN - 449)) | (1 << (plsqlParser.MIN - 449)) | (1 << (plsqlParser.NTILE - 449)) | (1 << (plsqlParser.RATIO_TO_REPORT - 449)) | (1 << (plsqlParser.ROW_NUMBER - 449)) | (1 << (plsqlParser.SUM - 449)) | (1 << (plsqlParser.VARIANCE - 449)) | (1 << (plsqlParser.REGR_ - 449)) | (1 << (plsqlParser.STDDEV - 449)) | (1 << (plsqlParser.VAR_ - 449)) | (1 << (plsqlParser.COVAR_ - 449)))) != 0) or _la==plsqlParser.REGULAR_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[158] = self.subquery_sempred
        self._predicates[164] = self.table_ref_sempred
        self._predicates[247] = self.expression_sempred
        self._predicates[256] = self.binary_expression_sempred
        self._predicates[264] = self.unary_expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def subquery_sempred(self, localctx:SubqueryContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def table_ref_sempred(self, localctx:Table_refContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 7)
         

    def binary_expression_sempred(self, localctx:Binary_expressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 6)
         

    def unary_expression_sempred(self, localctx:Unary_expressionContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 11)
         




