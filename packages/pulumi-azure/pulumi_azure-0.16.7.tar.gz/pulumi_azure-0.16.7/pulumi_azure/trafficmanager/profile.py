# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Profile(pulumi.CustomResource):
    dns_configs: pulumi.Output[list]
    """
    This block specifies the DNS configuration of the
    Profile, it supports the fields documented below.
    """
    fqdn: pulumi.Output[str]
    """
    The FQDN of the created Profile.
    """
    monitor_configs: pulumi.Output[list]
    """
    This block specifies the Endpoint monitoring
    configuration for the Profile, it supports the fields documented below.
    """
    name: pulumi.Output[str]
    """
    The name of the virtual network. Changing this forces a
    new resource to be created.
    """
    profile_status: pulumi.Output[str]
    """
    The status of the profile, can be set to either
    `Enabled` or `Disabled`. Defaults to `Enabled`.
    """
    resource_group_name: pulumi.Output[str]
    """
    The name of the resource group in which to
    create the virtual network.
    """
    tags: pulumi.Output[dict]
    """
    A mapping of tags to assign to the resource.
    """
    traffic_routing_method: pulumi.Output[str]
    """
    Specifies the algorithm used to route
    traffic, possible values are:
    - `Geographic` - Traffic is routed based on Geographic regions specified in the Endpoint.
    - `Performance` - Traffic is routed via the User's closest Endpoint
    - `Weighted` - Traffic is spread across Endpoints proportional to their `weight` value.
    - `Priority` - Traffic is routed to the Endpoint with the lowest `priority` value.
    """
    def __init__(__self__, __name__, __opts__=None, dns_configs=None, monitor_configs=None, name=None, profile_status=None, resource_group_name=None, tags=None, traffic_routing_method=None):
        """
        Manages a Traffic Manager Profile to which multiple endpoints can be attached.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[list] dns_configs: This block specifies the DNS configuration of the
               Profile, it supports the fields documented below.
        :param pulumi.Input[list] monitor_configs: This block specifies the Endpoint monitoring
               configuration for the Profile, it supports the fields documented below.
        :param pulumi.Input[str] name: The name of the virtual network. Changing this forces a
               new resource to be created.
        :param pulumi.Input[str] profile_status: The status of the profile, can be set to either
               `Enabled` or `Disabled`. Defaults to `Enabled`.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to
               create the virtual network.
        :param pulumi.Input[dict] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] traffic_routing_method: Specifies the algorithm used to route
               traffic, possible values are:
               - `Geographic` - Traffic is routed based on Geographic regions specified in the Endpoint.
               - `Performance` - Traffic is routed via the User's closest Endpoint
               - `Weighted` - Traffic is spread across Endpoints proportional to their `weight` value.
               - `Priority` - Traffic is routed to the Endpoint with the lowest `priority` value.
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not dns_configs:
            raise TypeError('Missing required property dns_configs')
        __props__['dns_configs'] = dns_configs

        if not monitor_configs:
            raise TypeError('Missing required property monitor_configs')
        __props__['monitor_configs'] = monitor_configs

        __props__['name'] = name

        __props__['profile_status'] = profile_status

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        __props__['resource_group_name'] = resource_group_name

        __props__['tags'] = tags

        if not traffic_routing_method:
            raise TypeError('Missing required property traffic_routing_method')
        __props__['traffic_routing_method'] = traffic_routing_method

        __props__['fqdn'] = None

        super(Profile, __self__).__init__(
            'azure:trafficmanager/profile:Profile',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

