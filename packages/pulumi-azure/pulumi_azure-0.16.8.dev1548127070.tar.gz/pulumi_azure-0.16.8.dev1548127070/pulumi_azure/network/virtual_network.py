# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class VirtualNetwork(pulumi.CustomResource):
    address_spaces: pulumi.Output[list]
    """
    The address space that is used the virtual
    network. You can supply more than one address space. Changing this forces
    a new resource to be created.
    """
    dns_servers: pulumi.Output[list]
    """
    List of IP addresses of DNS servers
    """
    location: pulumi.Output[str]
    """
    The location/region where the virtual network is
    created. Changing this forces a new resource to be created.
    """
    name: pulumi.Output[str]
    """
    The name of the virtual network. Changing this forces a
    new resource to be created.
    """
    resource_group_name: pulumi.Output[str]
    """
    The name of the resource group in which to
    create the virtual network.
    """
    subnets: pulumi.Output[list]
    """
    Can be specified multiple times to define multiple
    subnets. Each `subnet` block supports fields documented below.
    """
    tags: pulumi.Output[dict]
    """
    A mapping of tags to assign to the resource.
    """
    def __init__(__self__, __name__, __opts__=None, address_spaces=None, dns_servers=None, location=None, name=None, resource_group_name=None, subnets=None, tags=None):
        """
        Manages a virtual network including any configured subnets. Each subnet can
        optionally be configured with a security group to be associated with the subnet.
        
        > **NOTE on Virtual Networks and Subnet's:** Terraform currently
        provides both a standalone Subnet resource, and allows for Subnets to be defined in-line within the Virtual Network resource.
        At this time you cannot use a Virtual Network with in-line Subnets in conjunction with any Subnet resources. Doing so will cause a conflict of Subnet configurations and will overwrite Subnet's.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[list] address_spaces: The address space that is used the virtual
               network. You can supply more than one address space. Changing this forces
               a new resource to be created.
        :param pulumi.Input[list] dns_servers: List of IP addresses of DNS servers
        :param pulumi.Input[str] location: The location/region where the virtual network is
               created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name of the virtual network. Changing this forces a
               new resource to be created.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to
               create the virtual network.
        :param pulumi.Input[list] subnets: Can be specified multiple times to define multiple
               subnets. Each `subnet` block supports fields documented below.
        :param pulumi.Input[dict] tags: A mapping of tags to assign to the resource.
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not address_spaces:
            raise TypeError('Missing required property address_spaces')
        __props__['address_spaces'] = address_spaces

        __props__['dns_servers'] = dns_servers

        if not location:
            raise TypeError('Missing required property location')
        __props__['location'] = location

        __props__['name'] = name

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        __props__['resource_group_name'] = resource_group_name

        __props__['subnets'] = subnets

        __props__['tags'] = tags

        super(VirtualNetwork, __self__).__init__(
            'azure:network/virtualNetwork:VirtualNetwork',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

