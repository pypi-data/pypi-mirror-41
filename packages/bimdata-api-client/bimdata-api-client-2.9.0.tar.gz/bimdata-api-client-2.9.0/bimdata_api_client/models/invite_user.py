# coding: utf-8

"""
    BIMData API

    BIMData API documentation  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InviteUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'company': 'str',
        'email': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'project_role': 'str',
        'cloud_role': 'str'
    }

    attribute_map = {
        'company': 'company',
        'email': 'email',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'project_role': 'project_role',
        'cloud_role': 'cloud_role'
    }

    def __init__(self, company=None, email=None, firstname=None, lastname=None, project_role=None, cloud_role=None):  # noqa: E501
        """InviteUser - a model defined in OpenAPI"""  # noqa: E501

        self._company = None
        self._email = None
        self._firstname = None
        self._lastname = None
        self._project_role = None
        self._cloud_role = None
        self.discriminator = None

        if company is not None:
            self.company = company
        self.email = email
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if project_role is not None:
            self.project_role = project_role
        if cloud_role is not None:
            self.cloud_role = cloud_role

    @property
    def company(self):
        """Gets the company of this InviteUser.  # noqa: E501


        :return: The company of this InviteUser.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this InviteUser.


        :param company: The company of this InviteUser.  # noqa: E501
        :type: str
        """
        if company is not None and len(company) < 1:
            raise ValueError("Invalid value for `company`, length must be greater than or equal to `1`")  # noqa: E501

        self._company = company

    @property
    def email(self):
        """Gets the email of this InviteUser.  # noqa: E501


        :return: The email of this InviteUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InviteUser.


        :param email: The email of this InviteUser.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def firstname(self):
        """Gets the firstname of this InviteUser.  # noqa: E501


        :return: The firstname of this InviteUser.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this InviteUser.


        :param firstname: The firstname of this InviteUser.  # noqa: E501
        :type: str
        """
        if firstname is not None and len(firstname) < 1:
            raise ValueError("Invalid value for `firstname`, length must be greater than or equal to `1`")  # noqa: E501

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this InviteUser.  # noqa: E501


        :return: The lastname of this InviteUser.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this InviteUser.


        :param lastname: The lastname of this InviteUser.  # noqa: E501
        :type: str
        """
        if lastname is not None and len(lastname) < 1:
            raise ValueError("Invalid value for `lastname`, length must be greater than or equal to `1`")  # noqa: E501

        self._lastname = lastname

    @property
    def project_role(self):
        """Gets the project_role of this InviteUser.  # noqa: E501


        :return: The project_role of this InviteUser.  # noqa: E501
        :rtype: str
        """
        return self._project_role

    @project_role.setter
    def project_role(self, project_role):
        """Sets the project_role of this InviteUser.


        :param project_role: The project_role of this InviteUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["100", "50", "25"]  # noqa: E501
        if project_role not in allowed_values:
            raise ValueError(
                "Invalid value for `project_role` ({0}), must be one of {1}"  # noqa: E501
                .format(project_role, allowed_values)
            )

        self._project_role = project_role

    @property
    def cloud_role(self):
        """Gets the cloud_role of this InviteUser.  # noqa: E501


        :return: The cloud_role of this InviteUser.  # noqa: E501
        :rtype: str
        """
        return self._cloud_role

    @cloud_role.setter
    def cloud_role(self, cloud_role):
        """Sets the cloud_role of this InviteUser.


        :param cloud_role: The cloud_role of this InviteUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["100", "50"]  # noqa: E501
        if cloud_role not in allowed_values:
            raise ValueError(
                "Invalid value for `cloud_role` ({0}), must be one of {1}"  # noqa: E501
                .format(cloud_role, allowed_values)
            )

        self._cloud_role = cloud_role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InviteUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
