# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkBinaryThinningImageFilter3DPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBinaryThinningImageFilter3DPython', [dirname(__file__)])
        except ImportError:
            import _itkBinaryThinningImageFilter3DPython
            return _itkBinaryThinningImageFilter3DPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBinaryThinningImageFilter3DPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBinaryThinningImageFilter3DPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBinaryThinningImageFilter3DPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkPointPython
import itkImageRegionPython
import itkIndexPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageToImageFilterAPython
import itkImageToImageFilterCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkNeighborhoodPython

def itkBinaryThinningImageFilter3DIF3IF3_New():
  return itkBinaryThinningImageFilter3DIF3IF3.New()


def itkBinaryThinningImageFilter3DIUS3IUS3_New():
  return itkBinaryThinningImageFilter3DIUS3IUS3.New()


def itkBinaryThinningImageFilter3DIUC3IUC3_New():
  return itkBinaryThinningImageFilter3DIUC3IUC3.New()


def itkBinaryThinningImageFilter3DISS3ISS3_New():
  return itkBinaryThinningImageFilter3DISS3ISS3.New()

class itkBinaryThinningImageFilter3DIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """Proxy of C++ itkBinaryThinningImageFilter3DIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryThinningImageFilter3DIF3IF3_Pointer":
        """__New_orig__() -> itkBinaryThinningImageFilter3DIF3IF3_Pointer"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryThinningImageFilter3DIF3IF3_Pointer":
        """Clone(itkBinaryThinningImageFilter3DIF3IF3 self) -> itkBinaryThinningImageFilter3DIF3IF3_Pointer"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3_Clone(self)


    def GetThinning(self) -> "itkImageF3 *":
        """GetThinning(itkBinaryThinningImageFilter3DIF3IF3 self) -> itkImageF3"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3_GetThinning(self)

    SameDimensionCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3_SameDimensionCheck
    SameTypeCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3_SameTypeCheck
    InputAdditiveOperatorsCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3_InputAdditiveOperatorsCheck
    InputConvertibleToIntCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3_InputConvertibleToIntCheck
    IntConvertibleToInputCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3_IntConvertibleToInputCheck
    InputIntComparableCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3_InputIntComparableCheck
    __swig_destroy__ = _itkBinaryThinningImageFilter3DPython.delete_itkBinaryThinningImageFilter3DIF3IF3

    def cast(obj: 'itkLightObject') -> "itkBinaryThinningImageFilter3DIF3IF3 *":
        """cast(itkLightObject obj) -> itkBinaryThinningImageFilter3DIF3IF3"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThinningImageFilter3DIF3IF3

        Create a new object of the class itkBinaryThinningImageFilter3DIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThinningImageFilter3DIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryThinningImageFilter3DIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryThinningImageFilter3DIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryThinningImageFilter3DIF3IF3.Clone = new_instancemethod(_itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3_Clone, None, itkBinaryThinningImageFilter3DIF3IF3)
itkBinaryThinningImageFilter3DIF3IF3.GetThinning = new_instancemethod(_itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3_GetThinning, None, itkBinaryThinningImageFilter3DIF3IF3)
itkBinaryThinningImageFilter3DIF3IF3_swigregister = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3_swigregister
itkBinaryThinningImageFilter3DIF3IF3_swigregister(itkBinaryThinningImageFilter3DIF3IF3)

def itkBinaryThinningImageFilter3DIF3IF3___New_orig__() -> "itkBinaryThinningImageFilter3DIF3IF3_Pointer":
    """itkBinaryThinningImageFilter3DIF3IF3___New_orig__() -> itkBinaryThinningImageFilter3DIF3IF3_Pointer"""
    return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3___New_orig__()

def itkBinaryThinningImageFilter3DIF3IF3_cast(obj: 'itkLightObject') -> "itkBinaryThinningImageFilter3DIF3IF3 *":
    """itkBinaryThinningImageFilter3DIF3IF3_cast(itkLightObject obj) -> itkBinaryThinningImageFilter3DIF3IF3"""
    return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIF3IF3_cast(obj)

class itkBinaryThinningImageFilter3DISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """Proxy of C++ itkBinaryThinningImageFilter3DISS3ISS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryThinningImageFilter3DISS3ISS3_Pointer":
        """__New_orig__() -> itkBinaryThinningImageFilter3DISS3ISS3_Pointer"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryThinningImageFilter3DISS3ISS3_Pointer":
        """Clone(itkBinaryThinningImageFilter3DISS3ISS3 self) -> itkBinaryThinningImageFilter3DISS3ISS3_Pointer"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3_Clone(self)


    def GetThinning(self) -> "itkImageSS3 *":
        """GetThinning(itkBinaryThinningImageFilter3DISS3ISS3 self) -> itkImageSS3"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3_GetThinning(self)

    SameDimensionCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3_SameDimensionCheck
    SameTypeCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3_SameTypeCheck
    InputAdditiveOperatorsCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3_InputAdditiveOperatorsCheck
    InputConvertibleToIntCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3_InputConvertibleToIntCheck
    IntConvertibleToInputCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3_IntConvertibleToInputCheck
    InputIntComparableCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3_InputIntComparableCheck
    __swig_destroy__ = _itkBinaryThinningImageFilter3DPython.delete_itkBinaryThinningImageFilter3DISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkBinaryThinningImageFilter3DISS3ISS3 *":
        """cast(itkLightObject obj) -> itkBinaryThinningImageFilter3DISS3ISS3"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThinningImageFilter3DISS3ISS3

        Create a new object of the class itkBinaryThinningImageFilter3DISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThinningImageFilter3DISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryThinningImageFilter3DISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryThinningImageFilter3DISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryThinningImageFilter3DISS3ISS3.Clone = new_instancemethod(_itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3_Clone, None, itkBinaryThinningImageFilter3DISS3ISS3)
itkBinaryThinningImageFilter3DISS3ISS3.GetThinning = new_instancemethod(_itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3_GetThinning, None, itkBinaryThinningImageFilter3DISS3ISS3)
itkBinaryThinningImageFilter3DISS3ISS3_swigregister = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3_swigregister
itkBinaryThinningImageFilter3DISS3ISS3_swigregister(itkBinaryThinningImageFilter3DISS3ISS3)

def itkBinaryThinningImageFilter3DISS3ISS3___New_orig__() -> "itkBinaryThinningImageFilter3DISS3ISS3_Pointer":
    """itkBinaryThinningImageFilter3DISS3ISS3___New_orig__() -> itkBinaryThinningImageFilter3DISS3ISS3_Pointer"""
    return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3___New_orig__()

def itkBinaryThinningImageFilter3DISS3ISS3_cast(obj: 'itkLightObject') -> "itkBinaryThinningImageFilter3DISS3ISS3 *":
    """itkBinaryThinningImageFilter3DISS3ISS3_cast(itkLightObject obj) -> itkBinaryThinningImageFilter3DISS3ISS3"""
    return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DISS3ISS3_cast(obj)

class itkBinaryThinningImageFilter3DIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """Proxy of C++ itkBinaryThinningImageFilter3DIUC3IUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryThinningImageFilter3DIUC3IUC3_Pointer":
        """__New_orig__() -> itkBinaryThinningImageFilter3DIUC3IUC3_Pointer"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryThinningImageFilter3DIUC3IUC3_Pointer":
        """Clone(itkBinaryThinningImageFilter3DIUC3IUC3 self) -> itkBinaryThinningImageFilter3DIUC3IUC3_Pointer"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_Clone(self)


    def GetThinning(self) -> "itkImageUC3 *":
        """GetThinning(itkBinaryThinningImageFilter3DIUC3IUC3 self) -> itkImageUC3"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_GetThinning(self)

    SameDimensionCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_SameDimensionCheck
    SameTypeCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_SameTypeCheck
    InputAdditiveOperatorsCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_InputAdditiveOperatorsCheck
    InputConvertibleToIntCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_InputConvertibleToIntCheck
    IntConvertibleToInputCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_IntConvertibleToInputCheck
    InputIntComparableCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_InputIntComparableCheck
    __swig_destroy__ = _itkBinaryThinningImageFilter3DPython.delete_itkBinaryThinningImageFilter3DIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkBinaryThinningImageFilter3DIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkBinaryThinningImageFilter3DIUC3IUC3"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThinningImageFilter3DIUC3IUC3

        Create a new object of the class itkBinaryThinningImageFilter3DIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThinningImageFilter3DIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryThinningImageFilter3DIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryThinningImageFilter3DIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryThinningImageFilter3DIUC3IUC3.Clone = new_instancemethod(_itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_Clone, None, itkBinaryThinningImageFilter3DIUC3IUC3)
itkBinaryThinningImageFilter3DIUC3IUC3.GetThinning = new_instancemethod(_itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_GetThinning, None, itkBinaryThinningImageFilter3DIUC3IUC3)
itkBinaryThinningImageFilter3DIUC3IUC3_swigregister = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_swigregister
itkBinaryThinningImageFilter3DIUC3IUC3_swigregister(itkBinaryThinningImageFilter3DIUC3IUC3)

def itkBinaryThinningImageFilter3DIUC3IUC3___New_orig__() -> "itkBinaryThinningImageFilter3DIUC3IUC3_Pointer":
    """itkBinaryThinningImageFilter3DIUC3IUC3___New_orig__() -> itkBinaryThinningImageFilter3DIUC3IUC3_Pointer"""
    return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3___New_orig__()

def itkBinaryThinningImageFilter3DIUC3IUC3_cast(obj: 'itkLightObject') -> "itkBinaryThinningImageFilter3DIUC3IUC3 *":
    """itkBinaryThinningImageFilter3DIUC3IUC3_cast(itkLightObject obj) -> itkBinaryThinningImageFilter3DIUC3IUC3"""
    return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_cast(obj)

class itkBinaryThinningImageFilter3DIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """Proxy of C++ itkBinaryThinningImageFilter3DIUS3IUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryThinningImageFilter3DIUS3IUS3_Pointer":
        """__New_orig__() -> itkBinaryThinningImageFilter3DIUS3IUS3_Pointer"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryThinningImageFilter3DIUS3IUS3_Pointer":
        """Clone(itkBinaryThinningImageFilter3DIUS3IUS3 self) -> itkBinaryThinningImageFilter3DIUS3IUS3_Pointer"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_Clone(self)


    def GetThinning(self) -> "itkImageUS3 *":
        """GetThinning(itkBinaryThinningImageFilter3DIUS3IUS3 self) -> itkImageUS3"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_GetThinning(self)

    SameDimensionCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_SameDimensionCheck
    SameTypeCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_SameTypeCheck
    InputAdditiveOperatorsCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_InputAdditiveOperatorsCheck
    InputConvertibleToIntCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_InputConvertibleToIntCheck
    IntConvertibleToInputCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_IntConvertibleToInputCheck
    InputIntComparableCheck = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_InputIntComparableCheck
    __swig_destroy__ = _itkBinaryThinningImageFilter3DPython.delete_itkBinaryThinningImageFilter3DIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkBinaryThinningImageFilter3DIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkBinaryThinningImageFilter3DIUS3IUS3"""
        return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThinningImageFilter3DIUS3IUS3

        Create a new object of the class itkBinaryThinningImageFilter3DIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThinningImageFilter3DIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryThinningImageFilter3DIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryThinningImageFilter3DIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryThinningImageFilter3DIUS3IUS3.Clone = new_instancemethod(_itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_Clone, None, itkBinaryThinningImageFilter3DIUS3IUS3)
itkBinaryThinningImageFilter3DIUS3IUS3.GetThinning = new_instancemethod(_itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_GetThinning, None, itkBinaryThinningImageFilter3DIUS3IUS3)
itkBinaryThinningImageFilter3DIUS3IUS3_swigregister = _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_swigregister
itkBinaryThinningImageFilter3DIUS3IUS3_swigregister(itkBinaryThinningImageFilter3DIUS3IUS3)

def itkBinaryThinningImageFilter3DIUS3IUS3___New_orig__() -> "itkBinaryThinningImageFilter3DIUS3IUS3_Pointer":
    """itkBinaryThinningImageFilter3DIUS3IUS3___New_orig__() -> itkBinaryThinningImageFilter3DIUS3IUS3_Pointer"""
    return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3___New_orig__()

def itkBinaryThinningImageFilter3DIUS3IUS3_cast(obj: 'itkLightObject') -> "itkBinaryThinningImageFilter3DIUS3IUS3 *":
    """itkBinaryThinningImageFilter3DIUS3IUS3_cast(itkLightObject obj) -> itkBinaryThinningImageFilter3DIUS3IUS3"""
    return _itkBinaryThinningImageFilter3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_cast(obj)


def binary_thinning_image_filter3_d(*args, **kwargs):
    """Procedural interface for BinaryThinningImageFilter3D"""
    import itk
    return itk.BinaryThinningImageFilter3D.__call__(*args, **kwargs)



