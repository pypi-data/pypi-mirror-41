{"version":3,"sources":["webpack:////Users/kylek/code/src/github.com/nteract/nteract-ext/packages/jupyter-widgets/src/index.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","WidgetDisplay","react__WEBPACK_IMPORTED_MODULE_0__","[object Object]","super","arguments","this","container","current","nextProps","props","data","model_id","channels","createOrUpdateShim","ref","MIMETYPE"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,kCAAAE,IAAA,IAAAC,EAAAL,EAAA,GAYO,MAAAI,UAA4BC,EAAA,UACnCC,cACAC,SAAAC,WAOAC,KAAAC,UAAyBL,EAAA,YAGzBC,oBACAG,KAAAC,UAAAC,QAQAL,wBAOAA,sBAAAM,GAEA,SAAAH,KAAAI,MAAAC,MACAF,EAAAE,KAAAC,WAAAN,KAAAI,MAAAC,KAAAC,WAKAH,EAAAI,WAAAP,KAAAI,MAAAG,SAMAV,SAEA,OADAG,KAAAQ,qBACgBZ,EAAA,cAAmB,WACnC,oDACYA,EAAA,cAAmB,OAASa,IAAAT,KAAAC,aAKxCJ,uBAQAF,EAAAe,SAAA","file":"jupyter-widgets-8271705a480880d11db4.bundle.js","sourcesContent":["import * as React from \"react\";\n/**\n * Component used to render a widget view.\n *\n * Given a kernel and widget model id, this component will render a widget\n * view for the widget model. The widget view and widget models are isolated to\n * a cross domain iframe. Since they have access to the kernel, they are capable\n * of communicating directly with the kernel instance which makes them atypical.\n *\n * Even though it may appear to be pure, since it doesn't have react state, this\n * component's iframe maintains it's own state in communication with the kernel.\n */\nexport class WidgetDisplay extends React.Component {\n    constructor() {\n        super(...arguments);\n        // TODO: Uncomment this and related code in a follow-up PR.\n        // The outer shim is responsable for managing the rendered cross domain\n        // iframe, communicating with it, and relaying information to and from the\n        // kernel.\n        // private shim: OuterShim;\n        // A reference to the div which we can inject the cross domain widget iframe.\n        this.container = React.createRef();\n    }\n    /** @override */\n    componentDidMount() {\n        if (!this.container.current) {\n            return;\n        }\n        // When the component has mounted, inject the widget iframe.\n        // const view = this.shim.getView();\n        // this.container.current.appendChild(view);\n    }\n    /** @override */\n    componentWillUnmount() {\n        // if (this.shim) {\n        //   this.shim.dispose();\n        //   delete this.shim;\n        // }\n    }\n    /** @override */\n    shouldComponentUpdate(nextProps) {\n        // Only update if the model_id or kernel_id have changed.\n        if (this.props.data &&\n            nextProps.data.model_id !== this.props.data.model_id) {\n            return true;\n        }\n        // If the channels have changed, we need to make sure that we connect the\n        // shim to the new channels.\n        if (nextProps.channels !== this.props.channels) {\n            return true;\n        }\n        return false;\n    }\n    /** @override */\n    render() {\n        this.createOrUpdateShim();\n        return (React.createElement(\"pre\", null,\n            \"Jupyter-Widgets are not yet supported in nteract.\",\n            React.createElement(\"div\", { ref: this.container })));\n    }\n    /**\n     * Creates or updates the existing shim to the current model id and kernel.\n     */\n    createOrUpdateShim() {\n        // if (!this.shim) {\n        //   this.shim = new OuterShim();\n        // }\n        // this.shim.setCommMsgsSubject(this.props.channels);\n        // this.shim.setModelId(this.props.data.model_id);\n    }\n}\nWidgetDisplay.MIMETYPE = \"application/vnd.jupyter.widget-view+json\";\n"],"sourceRoot":""}