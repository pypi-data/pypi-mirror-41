{"version":3,"sources":["webpack:////Users/kylek/code/src/github.com/nteract/nteract-ext/packages/monaco-editor/src/index.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_1__","monaco_editor__WEBPACK_IMPORTED_MODULE_2__","MonacoEditor","[object Object]","super","arguments","this","monacoContainerRef","componentWillReceiveProps","Object","monaco","props","onChange","getValue","create","current","value","language","mode","theme","minimap","enabled","autoIndent","editorFocused","focus","onDidChangeModelContent","bind","setValue","model","getModel","getModeId","setModelLanguage","setTheme","nextProps","dispose","className","ref","defaultProps"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,IAAAK,EAAAL,EAAA,MAGA,MAAAM,UAA2BH,EAAA,UAC3BI,cACAC,SAAAC,WACAC,KAAAC,mBAAkCR,EAAA,YAElCI,qBACAG,KAAAE,0BAAyCC,OAAAT,EAAA,SAAAS,CAAQH,KAAAE,0BAAA,GAEjDL,0BACAG,KAAAI,QAAAJ,KAAAK,MAAAC,UACAN,KAAAK,MAAAC,SAAAN,KAAAI,OAAAG,YAGAV,oBACAG,KAAAI,OAAsBT,EAAA,OAAMa,OAAAR,KAAAC,mBAAAQ,QAAA,CAC5BC,MAAAV,KAAAK,MAAAK,MACAC,SAAAX,KAAAK,MAAAO,KACAC,MAAAb,KAAAK,MAAAQ,MACAC,QAAA,CACAC,SAAA,GAEAC,YAAA,IAEAhB,KAAAK,MAAAY,eACAjB,KAAAI,OAAAc,QAEAlB,KAAAI,OAAAe,wBAAAnB,KAAAmB,wBAAAC,KAAApB,OAEAH,qBACA,IAAAG,KAAAI,OACA,OAEAJ,KAAAI,OAAAG,aAAAP,KAAAK,MAAAK,OAEAV,KAAAI,OAAAiB,SAAArB,KAAAK,MAAAK,OAEA,MAAAY,EAAAtB,KAAAI,OAAAmB,WACAD,GAAAtB,KAAAK,MAAAO,MAAAU,EAAAE,cAAAxB,KAAAK,MAAAO,MACYjB,EAAA,OAAM8B,iBAAAH,EAAAtB,KAAAK,MAAAO,MAElBZ,KAAAK,MAAAQ,OACYlB,EAAA,OAAM+B,SAAA1B,KAAAK,MAAAQ,OAGlBhB,0BAAA8B,GACA3B,KAAAI,QAAAJ,KAAAI,OAAAG,aAAAoB,EAAAjB,OAEAV,KAAAI,OAAAiB,SAAAM,EAAAjB,OAGAb,uBACAG,KAAAI,QACAJ,KAAAI,OAAAwB,UAGA/B,SACA,OAAgBJ,EAAA,cAAmB,OAASoC,UAAA,0BAAAC,IAAA9B,KAAAC,sBAG5CL,EAAAmC,aAAA,CACAzB,SAAA,OACAW,eAAA,EACAL,KAAA,cAEepB,EAAA","file":"monaco-editor-f3e2c67e7b5a6f9a5e0c.bundle.js","sourcesContent":["import * as React from \"react\";\nimport { debounce } from \"lodash\";\nimport { editor } from \"monaco-editor\";\nclass MonacoEditor extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.monacoContainerRef = React.createRef();\n    }\n    componentWillMount() {\n        this.componentWillReceiveProps = debounce(this.componentWillReceiveProps, 0);\n    }\n    onDidChangeModelContent() {\n        if (this.monaco && this.props.onChange) {\n            this.props.onChange(this.monaco.getValue());\n        }\n    }\n    componentDidMount() {\n        this.monaco = editor.create(this.monacoContainerRef.current, {\n            value: this.props.value,\n            language: this.props.mode,\n            theme: this.props.theme,\n            minimap: {\n                enabled: false\n            },\n            autoIndent: true\n        });\n        if (this.props.editorFocused) {\n            this.monaco.focus();\n        }\n        this.monaco.onDidChangeModelContent(this.onDidChangeModelContent.bind(this));\n    }\n    componentDidUpdate() {\n        if (!this.monaco) {\n            return;\n        }\n        if (this.monaco.getValue() !== this.props.value) {\n            // FIXME: calling setValue resets cursor position in monaco. It shouldn't!\n            this.monaco.setValue(this.props.value);\n        }\n        const model = this.monaco.getModel();\n        if (model && this.props.mode && model.getModeId() !== this.props.mode) {\n            editor.setModelLanguage(model, this.props.mode);\n        }\n        if (this.props.theme) {\n            editor.setTheme(this.props.theme);\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        if (this.monaco && this.monaco.getValue() !== nextProps.value) {\n            // FIXME: calling setValue resets cursor position in monaco. It shouldn't!\n            this.monaco.setValue(nextProps.value);\n        }\n    }\n    componentWillUnmount() {\n        if (this.monaco) {\n            this.monaco.dispose();\n        }\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"monaco cm-s-composition\", ref: this.monacoContainerRef }));\n    }\n}\nMonacoEditor.defaultProps = {\n    onChange: () => { },\n    editorFocused: false,\n    mode: \"text/plain\"\n};\nexport default MonacoEditor;\n"],"sourceRoot":""}