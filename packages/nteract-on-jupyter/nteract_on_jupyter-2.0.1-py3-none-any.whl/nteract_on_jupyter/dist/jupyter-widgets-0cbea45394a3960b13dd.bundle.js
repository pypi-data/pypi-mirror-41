(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["jupyter-widgets"],{

/***/ "../../../packages/jupyter-widgets/src/index.tsx":
/*!***************************************************************************************************!*\
  !*** /Users/kylek/code/src/github.com/nteract/nteract-ext/packages/jupyter-widgets/src/index.tsx ***!
  \***************************************************************************************************/
/*! exports provided: WidgetDisplay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WidgetDisplay\", function() { return WidgetDisplay; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * Component used to render a widget view.\n *\n * Given a kernel and widget model id, this component will render a widget\n * view for the widget model. The widget view and widget models are isolated to\n * a cross domain iframe. Since they have access to the kernel, they are capable\n * of communicating directly with the kernel instance which makes them atypical.\n *\n * Even though it may appear to be pure, since it doesn't have react state, this\n * component's iframe maintains it's own state in communication with the kernel.\n */\nclass WidgetDisplay extends react__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n    constructor() {\n        super(...arguments);\n        // TODO: Uncomment this and related code in a follow-up PR.\n        // The outer shim is responsable for managing the rendered cross domain\n        // iframe, communicating with it, and relaying information to and from the\n        // kernel.\n        // private shim: OuterShim;\n        // A reference to the div which we can inject the cross domain widget iframe.\n        this.container = react__WEBPACK_IMPORTED_MODULE_0__[\"createRef\"]();\n    }\n    /** @override */\n    componentDidMount() {\n        if (!this.container.current) {\n            return;\n        }\n        // When the component has mounted, inject the widget iframe.\n        // const view = this.shim.getView();\n        // this.container.current.appendChild(view);\n    }\n    /** @override */\n    componentWillUnmount() {\n        // if (this.shim) {\n        //   this.shim.dispose();\n        //   delete this.shim;\n        // }\n    }\n    /** @override */\n    shouldComponentUpdate(nextProps) {\n        // Only update if the model_id or kernel_id have changed.\n        if (this.props.data &&\n            nextProps.data.model_id !== this.props.data.model_id) {\n            return true;\n        }\n        // If the channels have changed, we need to make sure that we connect the\n        // shim to the new channels.\n        if (nextProps.channels !== this.props.channels) {\n            return true;\n        }\n        return false;\n    }\n    /** @override */\n    render() {\n        this.createOrUpdateShim();\n        return (react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"pre\", null,\n            \"Jupyter-Widgets are not yet supported in nteract.\",\n            react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { ref: this.container })));\n    }\n    /**\n     * Creates or updates the existing shim to the current model id and kernel.\n     */\n    createOrUpdateShim() {\n        // if (!this.shim) {\n        //   this.shim = new OuterShim();\n        // }\n        // this.shim.setCommMsgsSubject(this.props.channels);\n        // this.shim.setModelId(this.props.data.model_id);\n    }\n}\nWidgetDisplay.MIMETYPE = \"application/vnd.jupyter.widget-view+json\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vcGFja2FnZXMvanVweXRlci13aWRnZXRzL3NyYy9pbmRleC50c3guanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL2t5bGVrL2NvZGUvc3JjL2dpdGh1Yi5jb20vbnRlcmFjdC9udGVyYWN0LWV4dC9wYWNrYWdlcy9qdXB5dGVyLXdpZGdldHMvc3JjL2luZGV4LnRzeD82MzMwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuLyoqXG4gKiBDb21wb25lbnQgdXNlZCB0byByZW5kZXIgYSB3aWRnZXQgdmlldy5cbiAqXG4gKiBHaXZlbiBhIGtlcm5lbCBhbmQgd2lkZ2V0IG1vZGVsIGlkLCB0aGlzIGNvbXBvbmVudCB3aWxsIHJlbmRlciBhIHdpZGdldFxuICogdmlldyBmb3IgdGhlIHdpZGdldCBtb2RlbC4gVGhlIHdpZGdldCB2aWV3IGFuZCB3aWRnZXQgbW9kZWxzIGFyZSBpc29sYXRlZCB0b1xuICogYSBjcm9zcyBkb21haW4gaWZyYW1lLiBTaW5jZSB0aGV5IGhhdmUgYWNjZXNzIHRvIHRoZSBrZXJuZWwsIHRoZXkgYXJlIGNhcGFibGVcbiAqIG9mIGNvbW11bmljYXRpbmcgZGlyZWN0bHkgd2l0aCB0aGUga2VybmVsIGluc3RhbmNlIHdoaWNoIG1ha2VzIHRoZW0gYXR5cGljYWwuXG4gKlxuICogRXZlbiB0aG91Z2ggaXQgbWF5IGFwcGVhciB0byBiZSBwdXJlLCBzaW5jZSBpdCBkb2Vzbid0IGhhdmUgcmVhY3Qgc3RhdGUsIHRoaXNcbiAqIGNvbXBvbmVudCdzIGlmcmFtZSBtYWludGFpbnMgaXQncyBvd24gc3RhdGUgaW4gY29tbXVuaWNhdGlvbiB3aXRoIHRoZSBrZXJuZWwuXG4gKi9cbmV4cG9ydCBjbGFzcyBXaWRnZXREaXNwbGF5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgLy8gVE9ETzogVW5jb21tZW50IHRoaXMgYW5kIHJlbGF0ZWQgY29kZSBpbiBhIGZvbGxvdy11cCBQUi5cbiAgICAgICAgLy8gVGhlIG91dGVyIHNoaW0gaXMgcmVzcG9uc2FibGUgZm9yIG1hbmFnaW5nIHRoZSByZW5kZXJlZCBjcm9zcyBkb21haW5cbiAgICAgICAgLy8gaWZyYW1lLCBjb21tdW5pY2F0aW5nIHdpdGggaXQsIGFuZCByZWxheWluZyBpbmZvcm1hdGlvbiB0byBhbmQgZnJvbSB0aGVcbiAgICAgICAgLy8ga2VybmVsLlxuICAgICAgICAvLyBwcml2YXRlIHNoaW06IE91dGVyU2hpbTtcbiAgICAgICAgLy8gQSByZWZlcmVuY2UgdG8gdGhlIGRpdiB3aGljaCB3ZSBjYW4gaW5qZWN0IHRoZSBjcm9zcyBkb21haW4gd2lkZ2V0IGlmcmFtZS5cbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAoIXRoaXMuY29udGFpbmVyLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBXaGVuIHRoZSBjb21wb25lbnQgaGFzIG1vdW50ZWQsIGluamVjdCB0aGUgd2lkZ2V0IGlmcmFtZS5cbiAgICAgICAgLy8gY29uc3QgdmlldyA9IHRoaXMuc2hpbS5nZXRWaWV3KCk7XG4gICAgICAgIC8vIHRoaXMuY29udGFpbmVyLmN1cnJlbnQuYXBwZW5kQ2hpbGQodmlldyk7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgLy8gaWYgKHRoaXMuc2hpbSkge1xuICAgICAgICAvLyAgIHRoaXMuc2hpbS5kaXNwb3NlKCk7XG4gICAgICAgIC8vICAgZGVsZXRlIHRoaXMuc2hpbTtcbiAgICAgICAgLy8gfVxuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgICAvLyBPbmx5IHVwZGF0ZSBpZiB0aGUgbW9kZWxfaWQgb3Iga2VybmVsX2lkIGhhdmUgY2hhbmdlZC5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZGF0YSAmJlxuICAgICAgICAgICAgbmV4dFByb3BzLmRhdGEubW9kZWxfaWQgIT09IHRoaXMucHJvcHMuZGF0YS5tb2RlbF9pZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIGNoYW5uZWxzIGhhdmUgY2hhbmdlZCwgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCB3ZSBjb25uZWN0IHRoZVxuICAgICAgICAvLyBzaGltIHRvIHRoZSBuZXcgY2hhbm5lbHMuXG4gICAgICAgIGlmIChuZXh0UHJvcHMuY2hhbm5lbHMgIT09IHRoaXMucHJvcHMuY2hhbm5lbHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVPclVwZGF0ZVNoaW0oKTtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwicHJlXCIsIG51bGwsXG4gICAgICAgICAgICBcIkp1cHl0ZXItV2lkZ2V0cyBhcmUgbm90IHlldCBzdXBwb3J0ZWQgaW4gbnRlcmFjdC5cIixcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyByZWY6IHRoaXMuY29udGFpbmVyIH0pKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgb3IgdXBkYXRlcyB0aGUgZXhpc3Rpbmcgc2hpbSB0byB0aGUgY3VycmVudCBtb2RlbCBpZCBhbmQga2VybmVsLlxuICAgICAqL1xuICAgIGNyZWF0ZU9yVXBkYXRlU2hpbSgpIHtcbiAgICAgICAgLy8gaWYgKCF0aGlzLnNoaW0pIHtcbiAgICAgICAgLy8gICB0aGlzLnNoaW0gPSBuZXcgT3V0ZXJTaGltKCk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gdGhpcy5zaGltLnNldENvbW1Nc2dzU3ViamVjdCh0aGlzLnByb3BzLmNoYW5uZWxzKTtcbiAgICAgICAgLy8gdGhpcy5zaGltLnNldE1vZGVsSWQodGhpcy5wcm9wcy5kYXRhLm1vZGVsX2lkKTtcbiAgICB9XG59XG5XaWRnZXREaXNwbGF5Lk1JTUVUWVBFID0gXCJhcHBsaWNhdGlvbi92bmQuanVweXRlci53aWRnZXQtdmlldytqc29uXCI7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../packages/jupyter-widgets/src/index.tsx\n");

/***/ })

}]);