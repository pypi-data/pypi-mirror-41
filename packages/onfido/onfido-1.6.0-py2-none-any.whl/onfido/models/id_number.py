# coding: utf-8

"""
    Onfido API

    The Onfido API is used to submit check requests.

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class IdNumber(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, value=None, state_code=None):
        """
        IdNumber - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'value': 'str',
            'state_code': 'str'
        }

        self.attribute_map = {
            'type': 'type',
            'value': 'value',
            'state_code': 'state_code'
        }

        self._type = type
        self._value = value
        self._state_code = state_code


    @property
    def type(self):
        """
        Gets the type of this IdNumber.
        Type of ID number. Valid values are ssn, tax_id, identity_card and driving_license

        :return: The type of this IdNumber.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this IdNumber.
        Type of ID number. Valid values are ssn, tax_id, identity_card and driving_license

        :param type: The type of this IdNumber.
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """
        Gets the value of this IdNumber.
        Value of ID number

        :return: The value of this IdNumber.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this IdNumber.
        Value of ID number

        :param value: The value of this IdNumber.
        :type: str
        """

        self._value = value

    @property
    def state_code(self):
        """
        Gets the state_code of this IdNumber.
        Two letter code of issuing state (state-issued driving licenses only)

        :return: The state_code of this IdNumber.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """
        Sets the state_code of this IdNumber.
        Two letter code of issuing state (state-issued driving licenses only)

        :param state_code: The state_code of this IdNumber.
        :type: str
        """

        self._state_code = state_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
