# coding: utf-8

"""
    Onfido API

    The Onfido API is used to submit check requests.

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Document(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created_at=None, file_name=None, file_size=None, file_type=None, type=None, side=None, href=None, download_href=None):
        """
        Document - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'created_at': 'datetime',
            'file_name': 'str',
            'file_size': 'int',
            'file_type': 'str',
            'type': 'str',
            'side': 'str',
            'href': 'str',
            'download_href': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'file_name': 'file_name',
            'file_size': 'file_size',
            'file_type': 'file_type',
            'type': 'type',
            'side': 'side',
            'href': 'href',
            'download_href': 'download_href'
        }

        self._id = id
        self._created_at = created_at
        self._file_name = file_name
        self._file_size = file_size
        self._file_type = file_type
        self._type = type
        self._side = side
        self._href = href
        self._download_href = download_href


    @property
    def id(self):
        """
        Gets the id of this Document.
        The unique identifier for the document

        :return: The id of this Document.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Document.
        The unique identifier for the document

        :param id: The id of this Document.
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this Document.
        The date and time at which the document was uploaded

        :return: The created_at of this Document.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Document.
        The date and time at which the document was uploaded

        :param created_at: The created_at of this Document.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def file_name(self):
        """
        Gets the file_name of this Document.
        The name of the uploaded file

        :return: The file_name of this Document.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """
        Sets the file_name of this Document.
        The name of the uploaded file

        :param file_name: The file_name of this Document.
        :type: str
        """

        self._file_name = file_name

    @property
    def file_size(self):
        """
        Gets the file_size of this Document.
        The size of the file in bytes

        :return: The file_size of this Document.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """
        Sets the file_size of this Document.
        The size of the file in bytes

        :param file_size: The file_size of this Document.
        :type: int
        """

        self._file_size = file_size

    @property
    def file_type(self):
        """
        Gets the file_type of this Document.
        The file type of the uploaded file

        :return: The file_type of this Document.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """
        Sets the file_type of this Document.
        The file type of the uploaded file

        :param file_type: The file_type of this Document.
        :type: str
        """

        self._file_type = file_type

    @property
    def type(self):
        """
        Gets the type of this Document.
        The type of document

        :return: The type of this Document.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Document.
        The type of document

        :param type: The type of this Document.
        :type: str
        """

        self._type = type

    @property
    def side(self):
        """
        Gets the side of this Document.
        The side of the document, if applicable. The possible values are front and back

        :return: The side of this Document.
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """
        Sets the side of this Document.
        The side of the document, if applicable. The possible values are front and back

        :param side: The side of this Document.
        :type: str
        """

        self._side = side

    @property
    def href(self):
        """
        Gets the href of this Document.
        The uri of this resource

        :return: The href of this Document.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this Document.
        The uri of this resource

        :param href: The href of this Document.
        :type: str
        """

        self._href = href

    @property
    def download_href(self):
        """
        Gets the download_href of this Document.
        The uri that can be used to download the document

        :return: The download_href of this Document.
        :rtype: str
        """
        return self._download_href

    @download_href.setter
    def download_href(self, download_href):
        """
        Sets the download_href of this Document.
        The uri that can be used to download the document

        :param download_href: The download_href of this Document.
        :type: str
        """

        self._download_href = download_href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
