import unittest
import sys

import numpy as np
from scipy.stats import norm as gaussian

from MTfit.utilities.unittest_utils import TestCase
from MTfit.probability.probability import polarity_ln_pdf
from MTfit.probability.probability import polarity_probability_ln_pdf
from MTfit.probability.probability import gaussian_pdf
from MTfit.probability.probability import ratio_pdf
from MTfit.probability.probability import amplitude_ratio_ln_pdf
from MTfit.probability.probability import relative_amplitude_ratio_ln_pdf
from MTfit.probability.probability import scale_estimator
from MTfit.probability.probability import ln_marginalise
from MTfit.probability.probability import ln_normalise
from MTfit.probability.probability import heaviside
from MTfit.probability.probability import model_probabilities
from MTfit.probability.probability import dkl
from MTfit.probability.probability import dkl_estimate
from MTfit.probability.probability import LnPDF
from MTfit.probability import probability
from MTfit.utilities import C_EXTENSION_FALLBACK_LOG_MSG
from MTfit.utilities.unittest_utils import get_extension_skip_if_args


if sys.version_info >= (3, 3):
    from unittest import mock
else:
    import mock

C_EXTENSIONS = get_extension_skip_if_args('MTfit.probability.cprobability')


class PythonOnly(object):

    def __enter__(self, *args, **kwargs):
        self.cprobability = probability.cprobability
        probability.cprobability = False

    def __exit__(self, *args, **kwargs):
        probability.cprobability = self.cprobability


class ProbabilityTestCase(TestCase):

    def setUp(self):
        self.old_value = probability._C_LIB_TESTS
        probability._C_LIB_TESTS = True

    def tearDown(self):
        probability._C_LIB_TESTS = self.old_value

    def set_polarity_ln_pdf_vars(self):
        self.Ap = np.array([[[-0.0801, -0.5611, -0.3588, -0.2998, 0.2398, 0.6345]],
                       [[-0.0877, -0.4819, -0.4304, -0.2907,
                           0.2747, 0.6441]],
                       [[-0.1176, -0.1983, -0.6841, -0.2160,
                           0.4011, 0.5209]],
                       [[-0.1336, -0.0753, -0.7911, -0.1419,
                           0.4598, 0.3452]],
                       [[0.0405, 0.7019, 0.2576,
                           0.2383, 0.1444, 0.6014]],
                       [[0.0573, 0.4235, 0.5192,
                           0.2203, 0.2440, 0.6631]],
                       [[-0.1057, -0.6607, -0.2336,
                           0.3737, 0.2222, -0.5556]],
                       [[0.0662, 0.2759, 0.6578,
                           0.1912, 0.2952, 0.6025]],
                       [[-0.4350, -0.0266, -0.5384, -0.1522,
                           0.6844, 0.1694]],
                       [[-0.4368, -0.0248, -0.5384,
                           0.1472, 0.6858, -0.1634]],
                       [[-0.4199, -0.0575, -0.5227,
                           0.2196, 0.6625, -0.2451]],
                       [[-0.7223, -0.0185, -0.2591, -0.1636,
                           0.6118, 0.0980]],
                       [[-0.7306, -0.0026, -0.2668, -0.0614,
                           0.6244, 0.0371]],
                       [[0.3926, 0.1474, 0.4599, -0.3403,
                           0.6010, -0.3683]],
                       [[0.0233, 0.5064, 0.4703, -0.1535,
                           0.1480, -0.6902]],
                       [[0.0292, 0.2835, 0.6873, -0.1287,
                           0.2004, -0.6242]],
                       [[0.0310, 0.2145, 0.7545, -0.1152,
                           0.2161, -0.5690]],
                       [[-0.6686, -0.1037, -0.2277,
                           0.3724, 0.5518, -0.2173]],
                       [[-0.6420, -0.1448, -0.2132,
                           0.4311, 0.5232, -0.2485]],
                       [[0.0364, 0.0396, 0.9240, -0.0537,
                           0.2594, -0.2705]],
                       [[0.4236, 0.0555, 0.5209, -0.2168,
                           0.6643, -0.2405]],
                       [[0.0330, 0.1389, 0.8280, -0.0958,
                           0.2339, -0.4797]],
                       [[-0.0289, -0.3655, -0.6057, -0.1453,
                           0.1870, 0.6654]],
                       [[-0.0226, -0.5881, -0.3892, -0.1632,
                           0.1328, 0.6766]],
                       [[-0.0185, -0.7223, -0.2591, -0.1636,
                           0.0980, 0.6118]],
                       [[-0.0207, -0.6535, -0.3257, -0.1646,
                           0.1162, 0.6525]],
                       [[-0.3655, -0.0289, -0.6057, -0.1453,
                           0.6654, 0.1870]],
                       [[-0.2661, -0.3497, -0.3841,
                           0.4315, 0.4522, -0.5183]],
                       [[-0.3725, -0.0048, -0.6227,
                           0.0600, 0.6811, -0.0776]],
                       [[-0.3676, -0.0268, -0.6057,
                           0.1403, 0.6673, -0.1800]],
                       [[-0.3438, -0.1039, -0.5523,
                           0.2673, 0.6162, -0.3388]],
                       [[-0.5596, -0.0816, -0.3588,
                           0.3022, 0.6337, -0.2420]],
                       [[-0.5251, -0.3370, -0.1379,
                           0.5949, 0.3806, -0.3049]],
                       [[-0.5167, -0.1722, -0.3111,
                           0.4219, 0.5670, -0.3273]],
                       [[0.0046, 0.4414, 0.5540,
                           0.0634, 0.0710, 0.6994]],
                       [[-0.5967, -0.0039, -0.3995,
                           0.0679, 0.6904, -0.0556]],
                       [[-0.5897, -0.0211, -0.3892,
                           0.1576, 0.6775, -0.1280]],
                       [[-0.4268, -0.4268, -0.1464, -0.6036,
                           0.3536, 0.3536]],
                       [[-0.3867, -0.4941, -0.1192, -0.6182,
                           0.3037, 0.3432]],
                       [[-0.5753, -0.0473, -0.3773, -0.2333,
                           0.6589, 0.1889]],
                       [[-0.4559, -0.4434, -0.1007,
                           0.6359, 0.3030, -0.2988]],
                       [[0.0195, 0.6548, 0.3257, -0.1599,
                           0.1128, -0.6531]],
                       [[0.5698, 0.3166, 0.1136, -0.6006,
                           0.3599, -0.2682]],
                       [[-0.0610, -0.3487, -0.5903,
                           0.2063, 0.2684, -0.6416]],
                       [[-0.0476, -0.5716, -0.3807,
                           0.2333, 0.1904, -0.6598]],
                       [[-0.0435, -0.6406, -0.3159,
                           0.2360, 0.1657, -0.6362]],
                       [[-0.0168, -0.7700, -0.2132, -0.1608,
                           0.0846, 0.5730]],
                       [[-0.0653, -0.2769, -0.6578,
                           0.1901, 0.2931, -0.6036]],
                       [[0.7752, 0.0029, 0.2219,
                           0.0671, 0.5865, 0.0359]],
                       [[0.6597, 0.1788, 0.1616, -0.4856,
                           0.4617, -0.2403]],
                       [[0.4841, 0.0872, 0.4287, -0.2906,
                           0.6442, -0.2735]],
                       [[0.1415, 0.0358, 0.8227, -0.1006,
                           0.4825, -0.2427]],
                       [[0.4447, 0.1847, 0.3706, -0.4053,
                           0.5741, -0.3700]],
                       [[-0.6391, -0.0434, -0.3176, -0.2354,
                           0.6371, 0.1660]],
                       [[0.3344, 0.4394, 0.2262, -0.5421,
                           0.3890, -0.4459]],
                       [[0.3692, 0.3640, 0.2668, -0.5184,
                           0.4438, -0.4407]],
                       [[0.0974, 0.4096, 0.4930,
                           0.2825, 0.3099, 0.6355]],
                       [[0.1049, 0.3359, 0.5592,
                           0.2655, 0.3425, 0.6129]],
                       [[0.1197, 0.1946, 0.6857,
                           0.2158, 0.4051, 0.5167]],
                       [[0.1374, 0.0758, 0.7868,
                           0.1443, 0.4650, 0.3454]],
                       [[-0.5228, -0.2582, -0.2190, -0.5196,
                           0.4785, 0.3363]],
                       [[0.1454, 0.0060, 0.8486,
                           0.0418, 0.4968, 0.1011]],
                       [[0.0707, 0.2038, 0.7254,
                           0.1698, 0.3203, 0.5438]],
                       [[0.4434, 0.4559, 0.1007, -0.6359,
                           0.2988, -0.3030]],
                       [[-0.4018, -0.4018, -0.1963, -0.5683,
                           0.3972, 0.3972]],
                       [[-0.3711, -0.4609, -0.1680, -0.5848,
                           0.3531, 0.3936]],
                       [[0.4087, 0.5077, 0.0835, -0.6442,
                           0.2613, -0.2913]],
                       [[-0.5165, -0.1708, -0.3127, -0.4200,
                           0.5684, 0.3268]],
                       [[0.4961, 0.3117, 0.1922,
                           0.5561, 0.4367, 0.3461]],
                       [[0.4652, 0.3667, 0.1680,
                           0.5841, 0.3954, 0.3511]],
                       [[-0.5065, -0.0249, -0.4686, -0.1588,
                           0.6890, 0.1527]],
                       [[-0.4160, -0.2485, -0.3356, -0.4547,
                           0.5284, 0.4084]],
                       [[-0.3658, -0.3658, -0.2684, -0.5174,
                           0.4431, 0.4431]],
                       [[0.0043, 0.5132, 0.4826, -0.0661,
                           0.0640, -0.7038]],
                       [[0.0031, 0.7301, 0.2668, -0.0668,
                           0.0404, -0.6242]],
                       [[0.0057, 0.2176, 0.7767, -0.0498,
                           0.0942, -0.5814]],
                       [[0.0053, 0.2882, 0.7066, -0.0551,
                           0.0863, -0.6381]],
                       [[0.0046, 0.4414, 0.5540, -0.0634,
                           0.0710, -0.6994]],
                       [[-0.1258, -0.5337, -0.3405,
                           0.3665, 0.2927, -0.6029]],
                       [[0.3744, 0.2020, 0.4235,
                           0.3890, 0.5632, 0.4137]],
                       [[-0.0965, -0.7127, -0.1908,
                           0.3709, 0.1919, -0.5215]],
                       [[-0.0731, -0.6238, -0.3030, -0.3021,
                           0.2105, 0.6149]],
                       [[-0.0664, -0.6926, -0.2410, -0.3032,
                           0.1789, 0.5778]],
                       [[-0.4421, -0.0039, -0.5540, -0.0591,
                           0.6999, 0.0662]],
                       [[0.5170, 0.3439, 0.1391, -0.5963,
                           0.3793, -0.3093]],
                       [[0.0894, 0.4819, 0.4287,
                           0.2935, 0.2768, 0.6428]],
                       [[0.0824, 0.5537, 0.3639,
                           0.3022, 0.2449, 0.6348]],
                       [[0.0630, 0.7365, 0.2005,
                           0.3046, 0.1589, 0.5434]],
                       [[0.0756, 0.6230, 0.3014,
                           0.3068, 0.2134, 0.6129]],
                       [[0.7145, 0.0187, 0.2668, -0.1636,
                           0.6174, -0.1000]],
                       [[0.1250, 0.5395, 0.3356, -0.3672,
                           0.2896, -0.6017]],
                       [[0.1360, 0.4612, 0.4029, -0.3541,
                           0.3310, -0.6096]],
                       [[0.1037, 0.6686, 0.2277, -0.3724,
                           0.2173, -0.5518]],
                       [[0.6375, 0.1450, 0.2175, -0.4300,
                           0.5266, -0.2512]],
                       [[0.4414, 0.0046, 0.5540,
                           0.0634, 0.6994, 0.0710]],
                       [[0.4352, 0.0247, 0.5401,
                           0.1466, 0.6856, 0.1633]],
                       [[0.3264, 0.3264, 0.3472,
                           0.4616, 0.4761, 0.4761]],
                       [[-0.2634, -0.6058, -0.1308, -0.5649,
                           0.2625, 0.3981]],
                       [[-0.3166, -0.5698, -0.1136,
                           0.6006, 0.2682, -0.3599]],
                       [[-0.2840, -0.5582, -0.1577, -0.5631,
                           0.2993, 0.4196]],
                       [[-0.4061, -0.3976, -0.1963,
                           0.5683, 0.3993, -0.3951]],
                       [[-0.3702, -0.4631, -0.1667,
                           0.5855, 0.3514, -0.3930]],
                       [[-0.4922, -0.2223, -0.2855,
                           0.4678, 0.5302, -0.3563]],
                       [[0.0381, 0.0058, 0.9561, -0.0211,
                           0.2699, -0.1058]],
                       [[0.0027, 0.7243,
                           0.2730, -0.0626, -0.0385, 0.6289]],
                       [[0.0033, 0.5904,
                           0.4063, -0.0628, -0.0521, 0.6926]],
                       [[0.0050, 0.2154,
                           0.7796, -0.0466, -0.0887, 0.5795]],
                       [[0.3371, 0.4337, 0.2291,
                           0.5408, 0.3931, 0.4458]],
                       [[0.0055, 0.0870,
                           0.9076, -0.0309, -0.0998, 0.3973]],
                       [[-0.1570, -0.5793, -0.2637,
                           0.4265, 0.2878, -0.5528]],
                       [[-0.1450, -0.6375, -0.2175,
                           0.4300, 0.2512, -0.5266]],
                       [[0.3370, 0.5251, 0.1379, -0.5949,
                           0.3049, -0.3806]],
                       [[0.3653, 0.4667, 0.1680, -0.5839,
                           0.3504, -0.3960]],
                       [[-0.2172, -0.3020, -0.4808,
                           0.3622, 0.4570, -0.5389]],
                       [[0.4342, 0.3351, 0.2306, -0.5395,
                           0.4475, -0.3932]],
                       [[0.1872, 0.4439, 0.3689,
                           0.4077, 0.3716, 0.5723]],
                       [[0.1731, 0.5110, 0.3159,
                           0.4206, 0.3307, 0.5682]],
                       [[0.1591, 0.5772, 0.2637,
                           0.4285, 0.2897, 0.5518]],
                       [[0.1340, 0.6887, 0.1773,
                           0.4296, 0.2179, 0.4942]],
                       [[0.2056, 0.5519, 0.2425, -0.4764,
                           0.3158, -0.5173]],
                       [[0.1947, 0.1180, 0.6873, -0.2144,
                           0.5173, -0.4027]],
                       [[0.2179, 0.3030, 0.4791,
                           0.3634, 0.4569, 0.5388]],
                       [[-0.1259, -0.5386, -0.3356, -0.3682,
                           0.2906, 0.6012]],
                       [[-0.1157, -0.6004, -0.2840, -0.3727,
                           0.2563, 0.5839]],
                       [[-0.1591, -0.3269, -0.5140, -0.3225,
                           0.4044, 0.5797]],
                       [[-0.2869, -0.5515, -0.1616,
                           0.5626, 0.3045, -0.4222]],
                       [[-0.2379, -0.5862, -0.1759, -0.5281,
                           0.2893, 0.4542]],
                       [[-0.2776, -0.4648, -0.2576, -0.5080,
                           0.3782, 0.4893]],
                       [[-0.3248, -0.3248, -0.3505, -0.4593,
                           0.4771, 0.4771]],
                       [[0.0062, 0.0062, 0.9876,
                           0.0088, -0.1108, -0.1108]],
                       [[0.6230, 0.0756, 0.3014,
                           0.3068, 0.6129, 0.2134]],
                       [[0.0061, 0.0071,
                           0.9868, -0.0093, -0.1097, 0.1185]],
                       [[0.0049, 0.2184, 0.7767,
                           0.0462, -0.0871, -0.5825]],
                       [[0.6632, 0.0029, 0.3339, -0.0623,
                           0.6655, -0.0442]],
                       [[0.6406, 0.0435, 0.3159, -0.2360,
                           0.6362, -0.1657]],
                       [[-0.7511, -0.0357, -0.2132, -0.2316,
                           0.5659, 0.1234]],
                       [[-0.7401, -0.0608, -0.1991, -0.3001,
                           0.5428, 0.1557]],
                       [[-0.7759, -0.0023, -0.2219, -0.0594,
                           0.5867, 0.0318]],
                       [[0.2759, 0.0662, 0.6578,
                           0.1912, 0.6025, 0.2952]],
                       [[-0.7708, -0.0160, -0.2132,
                           0.1571, 0.5733, -0.0826]],
                       [[-0.7754, -0.0027, -0.2219,
                           0.0651, 0.5866, -0.0348]],
                       [[-0.7393, -0.0616, -0.1991,
                           0.3018, 0.5426, -0.1566]],
                       [[-0.6004, -0.1157, -0.2840, -0.3727,
                           0.5839, 0.2563]],
                       [[0.1346, 0.4642, 0.4012,
                           0.3535, 0.3286, 0.6103]],
                       [[-0.6238, -0.0731, -0.3030, -0.3021,
                           0.6149, 0.2105]],
                       [[-0.1847, -0.4447, -0.3706,
                           0.4053, 0.3700, -0.5741]],
                       [[0.0269, 0.3590, 0.6142,
                           0.1389, 0.1817, 0.6640]],
                       [[0.0346, 0.0846, 0.8808,
                           0.0765, 0.2469, 0.3861]],
                       [[-0.6181, -0.1884, -0.1935,
                           0.4825, 0.4891, -0.2700]],
                       [[0.4842, 0.2287, 0.2871, -0.4706,
                           0.5273, -0.3624]],
                       [[-0.5132, -0.0043, -0.4826,
                           0.0661, 0.7038, -0.0640]],
                       [[0.0290, 0.3569,
                           0.6142, -0.1438, -0.1886, 0.6621]],
                       [[-0.0739, -0.6231, -0.3030,
                           0.3034, 0.2116, -0.6145]],
                       [[0.6076, 0.1961, 0.1963, -0.4881,
                           0.4884, -0.2775]],
                       [[0.6607, 0.1057, 0.2336, -0.3737,
                           0.5556, -0.2222]],
                       [[0.3117, 0.4961, 0.1922, -0.5561,
                           0.3461, -0.4367]],
                       [[0.5716, 0.0476, 0.3807, -0.2333,
                           0.6598, -0.1904]],
                       [[0.5118, 0.1706, 0.3176, -0.4179,
                           0.5702, -0.3292]],
                       [[0.5337, 0.1258, 0.3405, -0.3665,
                           0.6029, -0.2927]],
                       [[-0.0026, -0.7306, -0.2668, -0.0614,
                           0.0371, 0.6244]],
                       [[0.5827, 0.0212, 0.3960,
                           0.1572, 0.6794, 0.1296]],
                       [[0.5828, 0.0228, 0.3943, -0.1632,
                           0.6780, -0.1342]],
                       [[0.7654, 0.0171, 0.2175, -0.1618,
                           0.5770, -0.0862]],
                       [[-0.4135, -0.5029, -0.0835, -0.6449,
                           0.2628, 0.2899]],
                       [[0.7526, 0.0370, 0.2104,
                           0.2360, 0.5627, 0.1248]],
                       [[0.7365, 0.0630, 0.2005,
                           0.3046, 0.5434, 0.1589]],
                       [[-0.6038, -0.2666, -0.1296,
                           0.5674, 0.3956, -0.2628]],
                       [[-0.5728, -0.3136, -0.1136,
                           0.5994, 0.3608, -0.2670]],
                       [[-0.0029, -0.6632, -0.3339, -0.0623,
                           0.0442, 0.6655]],
                       [[0.0049, 0.3657, 0.6294,
                           0.0598, 0.0785, 0.6785]],
                       [[-0.0753, -0.1365, -0.7882,
                           0.1434, 0.3445, -0.4639]],
                       [[-0.0753, -0.1336, -0.7911, -0.1419,
                           0.3452, 0.4598]],
                       [[-0.0858, -0.0056, -0.9086, -0.0309,
                           0.3950, 0.1007]],
                       [[-0.0651, -0.2737, -0.6611, -0.1888,
                           0.2934, 0.6016]],
                       [[0.0808, 0.0808, 0.8384,
                           0.1142, 0.3680, 0.3680]],
                       [[-0.0399, -0.0399, -0.9203, -0.0564,
                           0.2709, 0.2709]],
                       [[0.0870, 0.0064, 0.9066,
                           0.0334, 0.3972, 0.1079]],
                       [[0.0846, 0.0346, 0.8808,
                           0.0765, 0.3861, 0.2469]],
                       [[0.0870, 0.0055, 0.9076, -0.0309,
                           0.3973, -0.0998]],
                       [[0.0758, 0.1345, 0.7896, -0.1428,
                           0.3461, -0.4609]],
                       [[0.0664, 0.2741, 0.6595, -0.1908,
                           0.2959, -0.6013]],
                       [[0.0703, 0.2058, 0.7239, -0.1701,
                           0.3190, -0.5459]],
                       [[0.0311, 0.2848,
                           0.6841, -0.1332, -0.2064, 0.6242]],
                       [[-0.6655, -0.1743, -0.1603,
                           0.4816, 0.4619, -0.2363]],
                       [[0.0358, 0.1415,
                           0.8227, -0.1006, -0.2427, 0.4825]],
                       [[0.0378, 0.0849,
                           0.8774, -0.0801, -0.2574, 0.3859]],
                       [[0.4096, 0.0974, 0.4930,
                           0.2825, 0.6355, 0.3099]],
                       [[0.6030, 0.2662, 0.1308,
                           0.5666, 0.3971, 0.2639]],
                       [[-0.5035, -0.4111, -0.0855, -
                           0.6434, -0.2934, -0.2651]],
                       [[-0.5376, -0.3627, -0.0996, -
                           0.6245, -0.3273, -0.2689]],
                       [[0.2790, 0.2889, 0.4321, -0.4015,
                           0.4910, -0.4997]],
                       [[0.3020, 0.2172, 0.4808, -0.3622,
                           0.5389, -0.4570]],
                       [[0.6887, 0.1340, 0.1773,
                           0.4296, 0.4942, 0.2179]],
                       [[0.7136, 0.0956, 0.1908,
                           0.3693, 0.5218, 0.1910]],
                       [[0.6400, 0.0440, 0.3159,
                           0.2375, 0.6359, 0.1668]],
                       [[0.3646, 0.0043, 0.6311, -0.0560,
                           0.6784, -0.0737]],
                       [[0.4852, 0.3933, 0.1215, -0.6178,
                           0.3434, -0.3092]],
                       [[0.6536, 0.0191, 0.3274, 0.1580, 0.6541, 0.1118]]])
        self.ErrorPolarity = np.array([[0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0100],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.5000],
                                  [0.0010],
                                  [0.0010],
                                  [0.5000],
                                  [0.5000],
                                  [0.0500],
                                  [0.0010],
                                  [0.5000],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0100],
                                  [0.1000],
                                  [0.0010],
                                  [0.0010],
                                  [0.0100],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.1000],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0100],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0100],
                                  [0.0100],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0100],
                                  [0.5000],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0100],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.5000],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.1000],
                                  [0.0010],
                                  [0.1000],
                                  [0.0010],
                                  [0.0100],
                                  [0.0010],
                                  [0.0010],
                                  [0.5000],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.5000],
                                  [0.5000],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0100],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010],
                                  [0.0010]])
        self.ErrorPolarity = self.ErrorPolarity.flatten()
        self.A = np.array([[[1., 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 2, 1]]])
        self.M = np.matrix([[1.], [0], [2], [1], [2], [1]])
        self.sigma = np.array([0., 1.])
        self.P = np.array([1, -1])
        self.M2 = np.matrix([[1.], [0.], [0.], [0.], [0.], [1.]])
        self.A2 = np.array(
            [[[1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 2, 1]], [[2, 1, 1, 1, 2, 1]]])
        self.MT = np.matrix([[0.0509, -0.3742],
                        [0.4391, 0.1393],
                        [-0.4900, 0.2349],
                        [-0.5897, -0.7131],
                        [-0.3515, -0.0840],
                        [-0.3053, 0.5194]])

    def set_polarity_probability_ln_pdf_vars(self):
        self.A = np.array([[[1, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 1]]])
        self.M = 0.25*np.matrix([[0], [0], [2], [2], [2], [2]])
        self.posProb = np.array([0.1, 0.8])
        self.negProb = np.array([0.9, 0.2])
        self.M2 = (1/np.sqrt(2))*np.matrix([[1], [0], [0], [0], [0], [1]])
        self.A2 = np.array([[[1, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 1]], [
                      [0.5, 0.5, 0, 0, 0, 0]], [[0, 0, 0.6, 0.4, 0, 0]]])
        self.posProb2 = np.array([0.1, 0.8, 0.4, 0.7])
        self.negProb2 = np.array([0.9, 0.2, 0.6, 0.3])

    def set_amplitude_ratio_ln_pdf_vars(self):
        self.A1 = np.matrix([[1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1]])
        self.A2 = np.matrix([[1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1]])
        self.M1 = 0.25*np.matrix([[2], [0], [2], [2], [0], [2]])
        self.M2 = 0.25*np.matrix([[2], [0], [2], [2], [0], [2]])
        self.sigmax = np.array([0.1, 0.5])
        self.sigmay = np.array([0.1, 0.9])
        self.ax = np.array([[[1.000001, 0, 0, 0, 0, 0]], [[1.1, 0, 0, 0, 0, 0]]])
        self.ay = np.array([[[1.000001, 0, 0, 0, 0, 0]], [[1.1, 0, 0, 0, 0, 0]]])
        self.mt = np.matrix([[1.0], [1.0], [0.], [0.], [0.], [0.]])

    def set_relative_amplitude_ratio_ln_pdf_vars(self):
        self.A1 = np.array([[[1., 0, 0, 0, 0, 0]], [[0., 0, 0, 0, 0, 1]]])
        self.A2 = np.array([[[1., 0, 0, 0, 0, 0]], [[0., 0, 0, 0, 0, 1]]])
        self.M1 = 0.25*np.matrix([[2], [0], [2], [2.], [0], [2]])
        self.M2 = 0.25*np.matrix([[2], [0], [2], [2.], [0], [2]])
        self.sigmax = np.array([0.1, 0.5])
        self.sigmay = np.array([0.1, 0.9])

    @mock.patch('MTfit.probability.probability.logger')
    def test_polarity_ln_pdf(self, logger):
        self.set_polarity_ln_pdf_vars()
        with PythonOnly():
            self.assertTrue((polarity_ln_pdf(np.expand_dims(
                np.expand_dims(self.P, 1), 1)*self.A, self.M, self.sigma)[0, 0] == np.log(0)+np.log(1)))
            logger.info.assert_called_once_with(C_EXTENSION_FALLBACK_LOG_MSG)
            self.assertAlmostEqual(polarity_ln_pdf(
                np.expand_dims(np.expand_dims(self.P, 1), 1)*self.A, self.M2, self.sigma)[0, 0], -3.78318433, 6)
            self.assertAlmostEqual(len(polarity_ln_pdf(
                np.array(np.append(self.A2, self.A2, 1)), self.MT, np.array([0.2, 0.5, 0.3])).shape), 2)
            self.assertAlmostEqual(polarity_ln_pdf(np.array(
                np.append(self.A2, self.A2, 1)), self.MT, np.array([0.2, 0.5, 0.3]))[0, 0], -45.35532285, 6)
            self.assertAlmostEqual(polarity_ln_pdf(np.array(
                np.append(self.A2, self.A2, 1)), self.MT, np.array([0.2, 0.5, 0.3]), 0.1)[0, 1], -5.28884939, 6)
            self.assertAlmostEqual(polarity_ln_pdf(np.array(np.append(self.A2, self.A2, 1)), self.MT, np.array(
                [0.2, 0.5, 0.3]), np.array([0.1, 0.2, 0.3]))[0, 0], -5.11390762, 6)
            ln_p = polarity_ln_pdf(self.Ap, self.MT, self.ErrorPolarity)
            self.assertEqual(ln_p[0, 0], -np.inf)
            self.assertAlmostEqual(polarity_ln_pdf(
                np.expand_dims(np.expand_dims(self.P, 1), 1)*self.A, self.M, self.sigma, 0.1)[0, 0], -2.40794561)
            # test for two station p missing
            self.assertAlmostEqual(polarity_ln_pdf(np.expand_dims(np.expand_dims(self.P, 1), 1)*self.A, self.M, self.sigma, np.array([0.2, 0.1]))[0, 0], -2.52572864)

    @unittest.skipIf(*C_EXTENSIONS)
    @mock.patch('MTfit.probability.probability.logger')
    def test_polarity_ln_pdf_cython(self, logger):
        self.set_polarity_ln_pdf_vars()
        self.assertTrue((polarity_ln_pdf(np.expand_dims(np.expand_dims(self.P, 1), 1)*self.A, self.M, self.sigma, _use_c=True)[0, 0] == np.log(0)+np.log(1)))
        self.assertAlmostEqual(polarity_ln_pdf(np.expand_dims(np.expand_dims(self.P, 1), 1)*self.A, self.M2, self.sigma, _use_c=True)[0, 0], -3.78318433, 5)
        self.assertAlmostEqual(len(polarity_ln_pdf(np.array(np.append(self.A2, self.A2, 1)), self.MT, np.array([0.2, 0.5, 0.3]), _use_c=True).shape), 2)
        self.assertAlmostEqual(polarity_ln_pdf(np.array(np.append(self.A2, self.A2, 1)), self.MT, np.array([0.2, 0.5, 0.3]), _use_c=True)[0, 0], -45.35532285, 1)
        self.assertAlmostEqual(polarity_ln_pdf(np.array(np.append(self.A2, self.A2, 1)), self.MT, np.array([0.2, 0.5, 0.3]), 0.1, _use_c=True)[0, 1], -5.28884939, 5)
        self.assertAlmostEqual(polarity_ln_pdf(np.array(np.append(self.A2, self.A2, 1)), self.MT, np.array([0.2, 0.5, 0.3]), np.array([0.1, 0.2, 0.3]), _use_c=True)[0, 0], -5.11390762, 5)
        ln_p = polarity_ln_pdf(self.Ap, self.MT, self.ErrorPolarity, _use_c=True)
        self.assertEqual(ln_p[0, 0], -np.inf)
        self.assertAlmostEqual(polarity_ln_pdf(np.expand_dims(np.expand_dims(self.P, 1), 1)*self.A, self.M, self.sigma, 0.1, _use_c=True)[0, 0], -2.40794561)
        # test for two station p missing
        self.assertAlmostEqual(polarity_ln_pdf(np.expand_dims(np.expand_dims(self.P, 1), 1)*self.A, self.M, self.sigma, np.array([0.2, 0.1]), _use_c=True)[0, 0], -2.52572864)
        logger.info.assert_not_called()

    @mock.patch('MTfit.probability.probability.logger')
    def test_polarity_probability_ln_pdf(self, logger):
        with PythonOnly():
            self.set_polarity_probability_ln_pdf_vars()
            self.assertAlmostEqual(polarity_probability_ln_pdf(
                self.A, self.M, self.posProb, self.negProb)[0, 0], np.log(0.5)+np.log(0.800))
            logger.info.assert_called_once_with(C_EXTENSION_FALLBACK_LOG_MSG)
            self.assertAlmostEqual(polarity_probability_ln_pdf(
                self.A, self.M2, self.posProb, self.negProb)[0, 0], np.log(0.1)+np.log(0.800))
            self.assertAlmostEqual(polarity_probability_ln_pdf(
                self.A, self.M2, self.posProb, self.negProb, 0.1)[0, 0], np.log(0.18)+np.log(0.74))
            self.assertAlmostEqual(polarity_probability_ln_pdf(
                self.A, self.M2, self.posProb, self.negProb, np.array([0.2, 0.1]))[0, 0], -1.64817874, 4)
            self.assertAlmostEqual(
                len(polarity_probability_ln_pdf(self.A2, self.M2, self.posProb2, self.negProb2).shape), 2)
            self.assertAlmostEqual(
                polarity_probability_ln_pdf(self.A2, self.M2, self.posProb2, self.negProb2)[0, 0], -4.135166556742)
            self.assertAlmostEqual(polarity_probability_ln_pdf(
                self.A2, self.M2, self.posProb2, self.negProb2, 0.1)[0, 0], -3.57655127)
            self.assertAlmostEqual(polarity_probability_ln_pdf(
                self.A2, self.M2, self.posProb2, self.negProb2, np.array([[0.1], [0.2], [0.3], [0.4]]))[0, 0], -3.57013688)

    @unittest.skipIf(*C_EXTENSIONS)
    @mock.patch('MTfit.probability.probability.logger')
    def test_polarity_probability_ln_pdf_cython(self, logger):
        self.set_polarity_probability_ln_pdf_vars()
        self.assertAlmostEqual(polarity_probability_ln_pdf(
            self.A, self.M, self.posProb, self.negProb)[0, 0], np.log(0.5)+np.log(0.800))
        self.assertAlmostEqual(polarity_probability_ln_pdf(
            self.A, self.M2, self.posProb, self.negProb)[0, 0], np.log(0.1)+np.log(0.800))
        self.assertAlmostEqual(polarity_probability_ln_pdf(
            self.A, self.M2, self.posProb, self.negProb, 0.1)[0, 0], np.log(0.18)+np.log(0.74))
        self.assertAlmostEqual(polarity_probability_ln_pdf(
            self.A, self.M2, self.posProb, self.negProb, np.array([0.2, 0.1]))[0, 0], -1.64817874, 4)
        self.assertAlmostEqual(
            len(polarity_probability_ln_pdf(self.A2, self.M2, self.posProb2, self.negProb2).shape), 2)
        self.assertAlmostEqual(
            polarity_probability_ln_pdf(self.A2, self.M2, self.posProb2, self.negProb2)[0, 0], -4.135166556742)
        self.assertAlmostEqual(polarity_probability_ln_pdf(
            self.A2, self.M2, self.posProb2, self.negProb2, 0.1)[0, 0], -3.57655127)
        self.assertAlmostEqual(polarity_probability_ln_pdf(
            self.A2, self.M2, self.posProb2, self.negProb2, np.array([[0.1], [0.2], [0.3], [0.4]]))[0, 0], -3.57013688)
        logger.info.assert_not_called()

    def test_gaussian_pdf(self):
        A1 = np.matrix([[1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1]])
        A2 = np.matrix([[1, 0, 0, 0, 0, 0], [0, 0.6, 0.8, 0, 0, 0]])
        M = 0.25*np.matrix([[2], [0], [2], [2], [0], [2]])
        sigma = np.matrix([[0.], [1.]])
        R = np.matrix([[1.000001], [1.1]])
        self.assertAlmostEqual(
            gaussian_pdf(np.divide(A1*M, A2*M), R, sigma)[0, 0], 0.0)
        self.assertAlmostEqual(
            gaussian_pdf(np.divide(A1*M, A2*M), R, sigma)[1, 0], 0.39447933090788895)

    def test_ratio_pdf(self):
        self.assertAlmostEqual(
            ratio_pdf(1, 0.5, 0.8, 0.1, 0.05), 0.072148389998693552)
        A1 = np.matrix([[1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1]])
        A2 = np.matrix([[1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1]])
        M1 = 0.25*np.matrix([[2], [0], [2], [2], [0], [2]])
        M2 = 0.25*np.matrix([[2], [0], [2], [2], [0], [2]])
        sigmax = np.matrix([[0.1], [1.]])
        sigmay = np.matrix([[0.1], [1.]])
        mx = np.matrix([[1.000001], [1.1]])
        my = np.matrix([[1.000001], [1.1]])
        self.assertAlmostEqual(ratio_pdf(
            np.divide(A1*M1, A2*M2), mx, my, sigmax, sigmay)[0, 0], 2.8209507386866988, 4)
        self.assertAlmostEqual(ratio_pdf(np.divide(A1*M1, A2*M2), mx, my, sigmax, sigmay)[
                               1, 0], 0.32059096343961541, 4)  # Values checked against working MATLAB code
        mx = np.array([[[1.000001], [1.1]], [[1.000001], [1.1]]])
        z = np.matrix([[1.000001], [1.1]])
        my = mx
        sx = np.matrix([[0.], [1.]])
        sy = sx
        rP = ratio_pdf(z, mx, my, sx, sy)
        self.assertEqual(len(rP.shape), 3)

    @mock.patch('MTfit.probability.probability.logger')
    def test_amplitude_ratio_ln_pdf(self, logger):
        with PythonOnly():
            self.set_amplitude_ratio_ln_pdf_vars()
            self.assertAlmostEqual(amplitude_ratio_ln_pdf(np.array(np.divide(self.A1*self.M1, self.A2*self.M2)).flatten(), self.mt, self.ax, self.ay, self.sigmax, self.sigmay)[0, 0],
                                   np.log(2.8209507386866988)+np.log(0.42262614), 4)  # Values checked against working MATLAB code
            logger.info.assert_called_once_with(C_EXTENSION_FALLBACK_LOG_MSG)

    @mock.patch('MTfit.probability.probability.logger')
    @unittest.skipIf(*C_EXTENSIONS)
    def test_amplitude_ratio_ln_pdf_cython(self, logger):
        self.set_amplitude_ratio_ln_pdf_vars()
        self.assertAlmostEqual(amplitude_ratio_ln_pdf(np.array(np.divide(self.A1*self.M1, self.A2*self.M2)).flatten(), self.mt, self.ax, self.ay, self.sigmax, self.sigmay)[0, 0],
                               np.log(2.8209507386866988)+np.log(0.42262614), 4)  # Values checked against working MATLAB code
        logger.info.assert_not_called()

    @mock.patch('MTfit.probability.probability.logger')
    def test_relative_amplitude_ratio_ln_pdf(self, logger):
        with PythonOnly():
            self.set_relative_amplitude_ratio_ln_pdf_vars()
            p, s, su = relative_amplitude_ratio_ln_pdf(np.array(self.A1*self.M1).flatten(),
                                                       np.array(self.A2*self.M2).flatten(),
                                                       self.M1, self.M2, self.A1, self.A2, self.sigmax, self.sigmay)
            logger.info.assert_called_once_with(C_EXTENSION_FALLBACK_LOG_MSG)
            self.assertAlmostEqual(p[0, 0], 0.1647361350698705, 4)
            self.assertAlmostEqual(s[0, 0], 1.03006741, 4)
            self.assertAlmostEqual(su[0, 0], 0.13889421816774333, 4)
            self.assertEqual(len(p.shape), 2)

    @mock.patch('MTfit.probability.probability.logger')
    @unittest.skipIf(*C_EXTENSIONS)
    def test_relative_amplitude_ratio_ln_pdf_cython(self, logger):
        self.set_relative_amplitude_ratio_ln_pdf_vars()
        cp, cs, csu = relative_amplitude_ratio_ln_pdf(np.array(self.A1*self.M1).flatten(),
                                                      np.array(self.A2*self.M2).flatten(),
                                                      self.M1, self.M2, self.A1, self.A2, self.sigmax, self.sigmay)
        # Values checked against working MATLAB code
        self.assertAlmostEqual(cs[0, 0], 1.03006741, 4)
        self.assertAlmostEqual(csu[0, 0], 0.13889421816774333, 4)
        self.assertEqual(cp.ndim, 2)
        self.assertAlmostEqual(cp[0, 0], 0.1647361350698705, 4)
        logger.info.assert_not_called()

    def test__scale_estimator(self):
        observed = np.array([[10.], [5.], [2], [2.]])
        mux = np.array([[12.], [7.], [2.], [8]])
        muy = np.array([[3.], [2.], [3.], [4.]])
        psx = np.array([[0.5], [0.8], [0.1], [0.2]])
        psy = np.array([[0.2], [0.05], [0.1], [0.1]])
        mu, s = scale_estimator(observed, mux, muy, psx, psy)
        self.assertAlmostEqual(float(mu), 1.7300880064755184)
        self.assertAlmostEqual(float(s), 0.1722043709033291)
        # Do station sampled mu
        mux = np.array(
            [[[12.], [7.]], [[3.], [5.]], [[20.], [15.]], [[35.], [5.]]])
        muy = np.array(
            [[[1.], [2.]], [[8.], [1.]], [[4.], [3.]], [[7.], [1.]]])
        psx = np.array([[0.5], [0.9], [0.1], [0.2]])
        mu, s = scale_estimator(observed, mux, muy, psx, psy)
        self.assertAlmostEquals(
            mu, np.array([[0.50867155384998419], [0.45068453]]))
        self.assertAlmostEquals(
            s, np.array([[0.093337369886041369], [0.09391465679198667]]))

    @mock.patch('MTfit.probability.probability.logger')
    def test_ln_marginalise(self, logger):
        with PythonOnly():
            ln_pdf = np.log(np.matrix([[1/6., 2/6.],
                                       [2/6., 1/6.]]))
            self.assertAlmostEqual(ln_marginalise(ln_pdf)[0], np.log(0.5))
            logger.info.assert_called_once_with(C_EXTENSION_FALLBACK_LOG_MSG)
            self.assertAlmostEqual(ln_marginalise(ln_pdf, axis=1)[1, 0], np.log(0.5))

    @mock.patch('MTfit.probability.probability.logger')
    @unittest.skipIf(*C_EXTENSIONS)
    def test_ln_marginalise_cython(self, logger):
        ln_pdf = np.log(np.matrix([[1/6., 2/6.],
                                   [2/6., 1/6.]]))
        self.assertAlmostEqual(ln_marginalise(ln_pdf)[0], np.log(0.5))
        logger.info.assert_not_called()
        self.assertAlmostEqual(ln_marginalise(ln_pdf, axis=1)[1, 0], np.log(0.5))
        logger.info.assert_called_once_with(C_EXTENSION_FALLBACK_LOG_MSG)

    @mock.patch('MTfit.probability.probability.logger')
    def test_ln_normalise(self, logger):
        with PythonOnly():
            ln_pdf = np.log(np.matrix([[1., 2.],
                                       [2., 1.]]))
            self.assertAlmostEqual(ln_normalise(ln_pdf)[0, 1], np.log(2/6.))
            logger.info.assert_called_once_with(C_EXTENSION_FALLBACK_LOG_MSG)
            self.assertAlmostEqual(ln_normalise(ln_pdf)[1, 0], np.log(2/6.))
            self.assertAlmostEqual(
                ln_normalise(ln_normalise(ln_pdf))[0, 1], np.log(2/6.))
            self.assertAlmostEqual(
                ln_normalise(ln_normalise(ln_pdf))[1, 0], np.log(2/6.))
            self.assertAlmostEqual(
                ln_normalise(ln_marginalise(ln_pdf))[0], np.log(0.5))
            self.assertAlmostEqual(
                ln_normalise(ln_marginalise(ln_pdf))[1], np.log(0.5))
            self.assertAlmostEqual(
                ln_normalise(ln_normalise(ln_marginalise(ln_pdf)))[0], np.log(0.5))
            self.assertAlmostEqual(
                ln_normalise(ln_normalise(ln_marginalise(ln_pdf)))[1], np.log(0.5))

    @mock.patch('MTfit.probability.probability.logger')
    @unittest.skipIf(*C_EXTENSIONS)
    def test_ln_normalise_cython(self, logger):
        ln_pdf = np.log(np.matrix([[1., 2.],
                                   [2., 1.]]))
        self.assertAlmostEqual(ln_normalise(ln_pdf)[0, 1], np.log(2/6.))
        self.assertAlmostEqual(ln_normalise(ln_pdf)[1, 0], np.log(2/6.))
        self.assertAlmostEqual(
            ln_normalise(ln_normalise(ln_pdf))[0, 1], np.log(2/6.))
        self.assertAlmostEqual(
            ln_normalise(ln_normalise(ln_pdf))[1, 0], np.log(2/6.))
        self.assertAlmostEqual(
            ln_normalise(ln_marginalise(ln_pdf))[0], np.log(0.5))
        self.assertAlmostEqual(
            ln_normalise(ln_marginalise(ln_pdf))[1], np.log(0.5))
        self.assertAlmostEqual(
            ln_normalise(ln_normalise(ln_marginalise(ln_pdf)))[0], np.log(0.5))
        self.assertAlmostEqual(
            ln_normalise(ln_normalise(ln_marginalise(ln_pdf)))[1], np.log(0.5))
        logger.info.assert_not_called()

    def test_heaviside(self):
        self.assertEqual(heaviside(-1), 0)
        self.assertEqual(heaviside(1), 1)
        self.assertEqual(heaviside(0), 0.5)

    def test_model_probabilities(self):
        a, b = model_probabilities(-1, -2)
        self.assertAlmostEquals(a, 0.7310585786300049)
        self.assertAlmostEquals(b, 0.2689414213699951)
        a, b = model_probabilities(-2, -3)
        self.assertAlmostEquals(a, 0.7310585786300049)
        self.assertAlmostEquals(b, 0.2689414213699951)
        a, b, c = model_probabilities(-2, -3, -6)
        self.assertAlmostEquals(a, 0.72139918427396865)
        self.assertAlmostEquals(b, 0.26538792877224193)
        self.assertAlmostEquals(c, 0.013212886953789414)
        a, b, c = model_probabilities(-3, -3, -6)
        self.assertAlmostEquals(a, 0.48785555116036838)
        self.assertAlmostEquals(b, 0.48785555116036838)
        self.assertAlmostEquals(c, 0.024288897679263205)

    def test_dkl(self):
        x = np.linspace(0, 10, 100)
        p = gaussian.pdf(x, 3.0, 0.1)
        q = gaussian.pdf(x, 6.0, 0.5)
        ln_p = np.log(p)
        ln_q = np.log(q)
        self.assertAlmostEqual(dkl(np.ascontiguousarray(
            ln_p), np.ascontiguousarray(ln_q), 0.1), 19.129437813140147)
        p = gaussian.pdf(x, 3.0, 0.5)
        ln_p = np.log(p)
        self.assertAlmostEqual(dkl(
            np.ascontiguousarray(ln_p), np.ascontiguousarray(ln_q), 0.1), 17.99999998188251)
        p = gaussian.pdf(x, 3.0, 0.1)
        q = np.ones(x.shape)/10.
        ln_p = np.log(p)
        ln_q = np.log(q)
        self.assertAlmostEqual(dkl(
            np.ascontiguousarray(ln_p), np.ascontiguousarray(ln_q), 0.1), 3.196281943707682)

    def test_dkl_estimate(self):
        x = np.linspace(0, 10, 100)
        p = gaussian.pdf(x, 3.0, 0.1)
        ln_p = np.log(p)
        self.assertAlmostEqual(
            dkl_estimate(np.ascontiguousarray(ln_p), 10, 100), 3.196281943707682)
        n = 100000
        x = 10*np.random.rand(n)
        p = gaussian.pdf(x, 3.0, 0.1)
        ln_p = np.log(p)
        self.assertTrue(
            abs(dkl_estimate(np.ascontiguousarray(ln_p), 10., n)-3.15) < 1.0)
        self.assertAlmostEqual(dkl_estimate(np.ascontiguousarray(ln_p), 10, n), dkl(
            ln_p, np.log(np.ones(x.shape)/10.), 10./n))


class LnPDFTestCase(unittest.TestCase):

    def setUp(self):
        self.ln_pdf = LnPDF()

    def tearDown(self):
        del self.ln_pdf

    @unittest.expectedFailure
    def test___init__(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test___getstate__(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test___setstate__(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test___getattr__(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test___len__(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test___repr__(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test__cmp(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test__arithmetic(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test___truediv__(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test___rsub__(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test___radd__(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test___rmul__(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test___rdiv__(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test___rtruediv__(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test___abs__(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test___float__(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test_argmax(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test_max(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test_output(self):
        raise NotImplementedError()

    @unittest.expectedFailure
    def test_exp(self):
        raise NotImplementedError()

    def test_shape(self):
        self.assertEqual(self.ln_pdf.shape, (1, 0))
        self.ln_pdf._set_ln_pdf(np.matrix([1, 2.]))
        self.assertEqual(self.ln_pdf.shape, (1, 2))

    def test__set_dv(self):
        self.ln_pdf._set_dv(2)
        self.assertEqual(self.ln_pdf.dV, 2)

    def test_set_ln_pdf(self):
        self.ln_pdf._set_ln_pdf(np.matrix([1, 2.]))
        self.assertEqual(self.ln_pdf._ln_pdf[0, 1], 2.)

    def test___getitem__(self):
        self.ln_pdf._set_ln_pdf(np.matrix([1, 2.]))
        self.assertEqual(self.ln_pdf[0, 1], 2.)

    def test___getslice__(self):
        self.ln_pdf._set_ln_pdf(np.matrix([1, 2.]))
        self.assertTrue((self.ln_pdf[0:2] == np.matrix([1, 2.])).all())

    def test___setitem__(self):
        self.ln_pdf._set_ln_pdf(np.matrix([1, 2.]))
        self.ln_pdf[0, 1] = 3.
        self.assertAlmostEqual(self.ln_pdf[0, 1], 3.)

    def test___setslice__(self):
        self.ln_pdf._set_ln_pdf(np.matrix([1, 2.]))
        self.ln_pdf[0:2] = np.matrix([3., 3.])
        self.assertTrue((self.ln_pdf == np.matrix([3., 3.])).all())

    def test_append(self):
        self.ln_pdf.append(np.matrix([[1., 2.],
                                      [2., 1.]]))
        self.assertTrue((self.ln_pdf._ln_pdf == np.matrix([[1., 2.], [2., 1.]])).all(),
                        str(self.ln_pdf._ln_pdf))
        self.ln_pdf._set_ln_pdf(np.matrix([[1., 2.],
                                           [2., 1.]]))
        self.ln_pdf.append(LnPDF(np.matrix([[5., 3.],
                                            [3., 5.]])))
        self.assertTrue((self.ln_pdf._ln_pdf == np.matrix([[1., 2., 5., 3.],
                                                           [2., 1., 3., 5.]])).all())
        self.ln_pdf.append(np.matrix([[6., 4.],
                                      [4., 6.]]))
        self.assertTrue((self.ln_pdf._ln_pdf == np.matrix([[1., 2., 5., 3., 6., 4.],
                                                           [2., 1., 3., 5., 4., 6.]])).all())

    def test_normalise(self):
        ln_pdf = np.log(np.matrix([[1., 2.],
                                   [2., 1.]]))
        self.ln_pdf._set_ln_pdf(ln_pdf)
        self.ln_pdf = self.ln_pdf.normalise()

        self.assertAlmostEqual(self.ln_pdf[0, 1], np.log(2/6.))
        self.assertAlmostEqual(self.ln_pdf[1, 0], np.log(2/6.))

    def test_marginalise(self):
        ln_pdf = np.log(np.matrix([[1., 2.],
                                   [2., 1.]]))
        self.ln_pdf._set_ln_pdf(ln_pdf)
        self.ln_pdf = self.ln_pdf.normalise()
        result = self.ln_pdf.marginalise()
        self.assertAlmostEqual(result[0], np.log(0.5))
        result = self.ln_pdf.marginalise(axis=1)
        self.assertAlmostEqual(result[1, 0], np.log(0.5))

    def test_nonzero(self):
        ln_pdf = np.log(np.matrix([[1., 0.],
                                   [2., 0.]]))
        self.ln_pdf._set_ln_pdf(ln_pdf)
        self.assertEqual(self.ln_pdf.nonzero(), np.array([0]))

    def test___mul__(self):
        ln_pdf = np.matrix([[1., 2.],
                            [2., 1.]])
        self.ln_pdf._set_ln_pdf(ln_pdf)
        self.ln_pdf *= 2
        self.assertEqual(self.ln_pdf._ln_pdf[0, 0], 2.)

    def test___div__(self):
        ln_pdf = np.matrix([[1., 2.],
                            [2., 1.]])
        self.ln_pdf._set_ln_pdf(ln_pdf)
        self.ln_pdf /= 2
        self.assertEqual(self.ln_pdf._ln_pdf[0, 0], .5)

    def test___add__(self):
        ln_pdf = np.matrix([[1., 2.],
                            [2., 1.]])
        self.ln_pdf._set_ln_pdf(ln_pdf)
        self.ln_pdf += 2
        self.assertEqual(self.ln_pdf._ln_pdf[0, 0], 3.)

    def test___sub__(self):
        ln_pdf = np.matrix([[1., 2.],
                            [2., 1.]])
        self.ln_pdf._set_ln_pdf(ln_pdf)
        self.ln_pdf -= 2
        self.assertEqual(self.ln_pdf._ln_pdf[0, 0], -1)

    def test___gt__(self):
        ln_pdf = np.matrix([[1., 2.],
                            [2., 1.]])
        self.ln_pdf._set_ln_pdf(ln_pdf)
        self.ln_pdf[self.ln_pdf > 1] = 4.
        self.assertEqual(self.ln_pdf[0, 1], 4.)
        self.assertTrue((self.ln_pdf > ln_pdf).any())

    def test___lt__(self):
        ln_pdf = np.matrix([[1., 2.],
                            [2., 1.]])
        self.ln_pdf._set_ln_pdf(ln_pdf)
        self.ln_pdf[self.ln_pdf < 2] = 4.
        self.assertEqual(self.ln_pdf[0, 0], 4.)
        self.assertFalse((self.ln_pdf < ln_pdf).any())

    def test___ge__(self):
        ln_pdf = np.matrix([[1., 2.],
                            [2., 1.]])
        self.ln_pdf._set_ln_pdf(ln_pdf)
        self.ln_pdf[self.ln_pdf >= 1] = 4.
        self.assertEqual(self.ln_pdf[0, 1], 4.)
        self.assertEqual(self.ln_pdf[0, 0], 4.)
        self.assertTrue((self.ln_pdf > ln_pdf).all())

    def test___le__(self):
        ln_pdf = np.matrix([[1., 2.],
                            [2., 1.]])
        self.ln_pdf._set_ln_pdf(ln_pdf)
        self.ln_pdf[self.ln_pdf <= 2] = 4.
        self.assertEqual(self.ln_pdf[0, 0], 4.)
        self.assertEqual(self.ln_pdf[0, 1], 4.)
        self.assertFalse((self.ln_pdf <= ln_pdf).any())

    def test___eq__(self):
        ln_pdf = np.matrix([[1., 2.],
                            [2., 1.]])
        self.ln_pdf._set_ln_pdf(ln_pdf)
        self.ln_pdf[self.ln_pdf == 2] = 4.
        self.assertEqual(self.ln_pdf[0, 1], 4.)
        self.assertTrue((self.ln_pdf == ln_pdf).any())
        self.assertFalse((self.ln_pdf == ln_pdf).all())
