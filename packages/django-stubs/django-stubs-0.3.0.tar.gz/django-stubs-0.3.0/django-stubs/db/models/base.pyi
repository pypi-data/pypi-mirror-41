from typing import Any, Dict, List, Optional, Set, Tuple, TypeVar, Union

from django.db.models.manager import Manager

class ModelBase(type): ...

_Self = TypeVar("_Self", bound="Model")

class Model(metaclass=ModelBase):
    class DoesNotExist(Exception):
        pass
    _meta: Any
    pk: Any = ...
    objects: Manager[Model]
    def __init__(self, *args, **kwargs) -> None: ...
    def delete(self, using: Any = ..., keep_parents: bool = ...) -> Tuple[int, Dict[str, int]]: ...
    def full_clean(self, exclude: Optional[List[str]] = ..., validate_unique: bool = ...) -> None: ...
    def clean_fields(self, exclude: List[str] = ...) -> None: ...
    def validate_unique(self, exclude: List[str] = ...) -> None: ...
    def save(
        self,
        force_insert: bool = ...,
        force_update: bool = ...,
        using: Optional[str] = ...,
        update_fields: Optional[Union[List[str], str]] = ...,
    ) -> None: ...
    def refresh_from_db(self: _Self, using: Optional[str] = ..., fields: Optional[List[str]] = ...) -> _Self: ...
    def get_deferred_fields(self) -> Set[str]: ...

class ModelStateFieldsCacheDescriptor: ...

class ModelState:
    db: None = ...
    adding: bool = ...
    fields_cache: ModelStateFieldsCacheDescriptor = ...
