from typing import Any, Callable, List, Optional

from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.operations.models import CreateModel
from django.db.migrations.state import ProjectState, StateApps

from .base import Operation

class SeparateDatabaseAndState(Operation):
    serialization_expand_args: Any = ...
    database_operations: Any = ...
    state_operations: Any = ...
    def __init__(self, database_operations: List[Any] = ..., state_operations: List[CreateModel] = ...) -> None: ...

class RunSQL(Operation):
    noop: str = ...
    sql: Any = ...
    reverse_sql: Any = ...
    state_operations: Any = ...
    hints: Any = ...
    elidable: Any = ...
    def __init__(
        self,
        sql: Any,
        reverse_sql: Optional[Any] = ...,
        state_operations: Optional[Any] = ...,
        hints: Optional[Any] = ...,
        elidable: bool = ...,
    ) -> None: ...

class RunPython(Operation):
    reduces_to_sql: bool = ...
    atomic: Any = ...
    code: Any = ...
    reverse_code: Any = ...
    hints: Any = ...
    elidable: Any = ...
    def __init__(
        self,
        code: Callable,
        reverse_code: Optional[Callable] = ...,
        atomic: Optional[bool] = ...,
        hints: None = ...,
        elidable: bool = ...,
    ) -> None: ...
    @staticmethod
    def noop(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None: ...
