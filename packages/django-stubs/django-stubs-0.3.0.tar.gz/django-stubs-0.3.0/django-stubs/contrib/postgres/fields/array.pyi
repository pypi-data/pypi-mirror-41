from typing import Any, Dict, List, Optional, Tuple, Union, TypeVar, Generic, Sequence

from django.db.models.fields import Field
from .mixins import CheckFieldDefaultMixin

_T = TypeVar("_T", bound=Field)

class ArrayField(CheckFieldDefaultMixin, Field, Generic[_T]):
    empty_strings_allowed: bool = ...
    default_error_messages: Any = ...
    base_field: Any = ...
    size: Any = ...
    default_validators: Any = ...
    from_db_value: Any = ...
    def __init__(self, base_field: _T, size: None = ..., **kwargs: Any) -> None: ...
    def check(self, **kwargs: Any) -> List[Any]: ...
    @property
    def description(self): ...
    def get_db_prep_value(self, value: Any, connection: Any, prepared: bool = ...): ...
    def to_python(self, value: Any): ...
    def value_to_string(self, obj: Any): ...
    def get_transform(self, name: Any): ...
    def validate(self, value: Any, model_instance: Any) -> None: ...
    def run_validators(self, value: Any) -> None: ...
    def __set__(self, instance, value: Sequence[_T]): ...
    def __get__(self, instance, owner) -> List[_T]: ...
