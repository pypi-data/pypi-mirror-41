(function(){if(!window.DMP_CONTEXT){window.DMP_CONTEXT={__version__:'5.9.13',contexts:{},contextsByName:{},lastContext:null,templateFunctions:{},logEnabled:null,set:function(context){DMP_CONTEXT.logEnabled=context.log||DMP_CONTEXT.logEnabled;if(DMP_CONTEXT.__version__!=context.version){DMP_CONTEXT.log(['server version',context.version,'is different from dmp-common.js',DMP_CONTEXT.__version__,'- unexpected behavior may occur']);}
context.pendingCalls=0;DMP_CONTEXT.contexts[context.id]=context;DMP_CONTEXT.lastContext=context;for(var i=0;i<context.templates.length;i++){var tname=context.templates[i];if(typeof DMP_CONTEXT.contextsByName[tname]==="undefined"){DMP_CONTEXT.contextsByName[tname]=[];}
DMP_CONTEXT.contextsByName[tname].push(context);}
DMP_CONTEXT.log([context.id,'-','created context'],context);},get:function(option){var ret=DMP_CONTEXT.getAll(option);if(ret.length==0){return undefined;}
return ret[ret.length-1];},getAll:function(option){var ret=[];if(!option&&document.currentScript&&document.currentScript.getAttribute('data-context')){option=document.currentScript;}
if(!option&&DMP_CONTEXT.lastContext){ret.push(DMP_CONTEXT.lastContext.values);}
else if(typeof option==='string'||option instanceof String){var matches=DMP_CONTEXT.contextsByName[option];if(typeof matches!=="undefined"){for(var m in matches){ret.push(m);}}}
else if(option&&option.nodeType===1&&option.nodeName.toLowerCase()=='script'&&option.getAttribute('data-context')){var c=DMP_CONTEXT.contexts[option.getAttribute('data-context')];if(typeof c!=="undefined"){ret.push(c.values);}}
return ret;},loadBundle(templateFunctions){var tkeys=Object.keys(templateFunctions);DMP_CONTEXT.log(['loading',tkeys.length,'template functions from bundle'],tkeys);for(var i=0;i<tkeys.length;i++){var tkey=tkeys[i];DMP_CONTEXT.templateFunctions[tkey]={template:tkey,loader:templateFunctions[tkey],status:'unresolved',modules:null,resolveModules:function(context){var current=this;if(current.status=='unresolved'){current.status='resolving';current.loader(function(modules){current.modules=modules;current.status='resolved';DMP_CONTEXT.checkContextReady(context.id);});}},runWithContext:function(context){var current=this;if(current.modules){for(var j=0;j<current.modules.length;j++){var mod=current.modules[j];if(mod&&mod.default&&mod.default.apply){mod.default.apply(context,[context.values])}}}},}}},checkContextReady(contextid){var context=DMP_CONTEXT.contexts[contextid];if(typeof context==="undefined"){return;}
for(var i=0;i<context.templates.length;i++){var tname=context.templates[i];if(typeof DMP_CONTEXT.templateFunctions[tname]==="undefined"){DMP_CONTEXT.log([context.id,'-',tname,'not loaded [waiting]']);return;}
if(DMP_CONTEXT.templateFunctions[tname].status!='resolved'){DMP_CONTEXT.log([context.id,'-',tname,'resolving internal dependencies [waiting]']);DMP_CONTEXT.templateFunctions[tname].resolveModules(context);return;}}
if(!context.pendingCalls){DMP_CONTEXT.log([context.id,'-','pendingCalls not incremented yet','[waiting]']);return;}
DMP_CONTEXT.log([context.id,'-','dependencies loaded and pendingCalls incremented','[ready]']);while(context.pendingCalls>0){context.pendingCalls--;for(var j=0;j<context.templates.length;j++){var tname=context.templates[j];DMP_CONTEXT.log([context.id,'-','running for',tname]);DMP_CONTEXT.templateFunctions[tname].runWithContext(context);}}},callBundleContext(contextid){var context=DMP_CONTEXT.contexts[contextid];if(typeof context==="undefined"){return;}
context.pendingCalls++;DMP_CONTEXT.log([context.id,'-','incrementing pendingCalls to',context.pendingCalls]);DMP_CONTEXT.checkContextReady(contextid);},log(messages,data){if(DMP_CONTEXT.logEnabled){console.debug('[DMP] '+messages.join(' '),data||'');}},};}})()