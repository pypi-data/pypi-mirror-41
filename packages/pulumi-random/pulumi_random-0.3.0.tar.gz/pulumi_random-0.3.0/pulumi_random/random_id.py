# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from . import utilities, tables

class RandomId(pulumi.CustomResource):
    b64: pulumi.Output[str]
    b64_std: pulumi.Output[str]
    """
    The generated id presented in base64 without additional transformations.
    """
    b64_url: pulumi.Output[str]
    """
    The generated id presented in base64, using the URL-friendly character set: case-sensitive letters, digits and the characters `_` and `-`.
    """
    byte_length: pulumi.Output[int]
    """
    The number of random bytes to produce. The
    minimum value is 1, which produces eight bits of randomness.
    """
    dec: pulumi.Output[str]
    """
    The generated id presented in non-padded decimal digits.
    """
    hex: pulumi.Output[str]
    """
    The generated id presented in padded hexadecimal digits. This result will always be twice as long as the requested byte length.
    """
    keepers: pulumi.Output[dict]
    """
    Arbitrary map of values that, when changed, will
    trigger a new id to be generated. See
    the main provider documentation for more information.
    """
    prefix: pulumi.Output[str]
    """
    Arbitrary string to prefix the output value with. This
    string is supplied as-is, meaning it is not guaranteed to be URL-safe or
    base64 encoded.
    """
    def __init__(__self__, __name__, __opts__=None, byte_length=None, keepers=None, prefix=None):
        """
        The resource `random_id` generates random numbers that are intended to be
        used as unique identifiers for other resources.
        
        This resource *does* use a cryptographic random number generator in order
        to minimize the chance of collisions, making the results of this resource
        when a 16-byte identifier is requested of equivalent uniqueness to a
        type-4 UUID.
        
        This resource can be used in conjunction with resources that have
        the `create_before_destroy` lifecycle flag set to avoid conflicts with
        unique names during the brief period where both the old and new resources
        exist concurrently.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[int] byte_length: The number of random bytes to produce. The
               minimum value is 1, which produces eight bits of randomness.
        :param pulumi.Input[dict] keepers: Arbitrary map of values that, when changed, will
               trigger a new id to be generated. See
               the main provider documentation for more information.
        :param pulumi.Input[str] prefix: Arbitrary string to prefix the output value with. This
               string is supplied as-is, meaning it is not guaranteed to be URL-safe or
               base64 encoded.
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not byte_length:
            raise TypeError('Missing required property byte_length')
        __props__['byte_length'] = byte_length

        __props__['keepers'] = keepers

        __props__['prefix'] = prefix

        __props__['b64'] = None
        __props__['b64_std'] = None
        __props__['b64_url'] = None
        __props__['dec'] = None
        __props__['hex'] = None

        super(RandomId, __self__).__init__(
            'random:index/randomId:RandomId',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

