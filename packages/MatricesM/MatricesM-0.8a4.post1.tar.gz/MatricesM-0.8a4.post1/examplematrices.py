# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
proj=Matrix(listed=projectGrid)
o=Matrix(dim=8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4])
d=FMatrix([4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,ranged=[-1250,1250])
g=Matrix(dim=[3,6])
p=Matrix(5,ranged=[0,100])
q=FMatrix(4)
y=Matrix(3,listed=[3,5,7,8,3,4,5,2,5])
# =============================================================================
# String inputs Matrices
# =============================================================================
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""")

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix

#a=Matrix(0)
#v=Matrix()
#k=Matrix(dim=-1)
#l=Matrix(ranged=[0])
#m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
l=[proj,o,b,c,d,e,f,g,p,q,y]
for matrix in l:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.uptri.p")
f.uptri.p
print("f.lowtri.p")
f.lowtri.p
print("f-(f.lowtri@f.uptri)")#There is a %0.001 error due to rounding
print(f-(f.lowtri@f.uptri))
print('################')
      
print("g.dim:\n",g.dim)
print("g.inRange():\n",g.inRange())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.avg():",h.avg())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.rrechelon:",h.rrechelon)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print('################\n')
      
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)

print("################")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('\n################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print(f)
print("f=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1][:]")
r[0]=r[1][:]
print(r)
print("r.rank:",r.rank)    

print("################")
      
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("################")
      
print("\nf.roundForm(3)>f.roundForm(1)")
print(f.roundForm(3)>f.roundForm(1))

# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Numbers' range: {'Col 1': [1, 88], 'Col 2': [2, 98], 'Col 3': [0, 99], 'Col 4': [5, 97], 'Col 5': [2, 99], 'Col 6': [0, 94], 'Col 7': [0, 99], 'Col 8': [1, 89], 'Col 9': [0, 97], 'Col 10': [17, 97], 'Col 11': [3, 99], 'Col 12': [5, 80], 'Col 13': [0, 98], 'Col 14': [8, 88], 'Col 15': [12, 84], 'Col 16': [1, 97], 'Col 17': [4, 89], 'Col 18': [2, 93], 'Col 19': [5, 98], 'Col 20': [0, 95]}
Averages: {'Col 1': 35.8, 'Col 2': 49.85, 'Col 3': 41.65, 'Col 4': 52.2, 'Col 5': 52.7, 'Col 6': 48.6, 'Col 7': 46.4, 'Col 8': 40.3, 'Col 9': 40.3, 'Col 10': 63.9, 'Col 11': 50.75, 'Col 12': 46.6, 'Col 13': 43.6, 'Col 14': 51.85, 'Col 15': 42.75, 'Col 16': 47.1, 'Col 17': 40.75, 'Col 18': 44.6, 'Col 19': 52.6, 'Col 20': 54.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Numbers' range: {'Col 1': [-4, -4]}
Averages: {'Col 1': -4.0}

-4 


Dimension: 2x4
Numbers' range: {'Col 1': [-2, 5], 'Col 2': [-5, -2], 'Col 3': [-5, 1], 'Col 4': [0, 3]}
Averages: {'Col 1': 1.5, 'Col 2': -3.5, 'Col 3': -2.0, 'Col 4': 1.5}

-2 -5 -5  3 
 5 -2  1  0 


Float Matrix
Dimension: 4x3
Numbers' range: {'Col 1': [-1.8195, 3.4204], 'Col 2': [-2.6568, 2.9656], 'Col 3': [-4.7756, 1.5847]}
Averages: {'Col 1': 0.8484, 'Col 2': 0.1445, 'Col 3': -0.4593}

-1.8195  1.9071  0.1496 
 0.0887  2.9656  1.2042 
 3.4204 -2.6568  1.5847 
 1.7040 -1.6379 -4.7756 


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [32.423, 962.8022], 'Col 2': [-1217.483, 253.2327], 'Col 3': [-949.5681, 551.477], 'Col 4': [-832.6224, 1218.2936], 'Col 5': [-874.0149, 428.5934], 'Col 6': [-1156.8849, 981.3002]}
Averages: {'Col 1': 415.9903, 'Col 2': -393.931, 'Col 3': -307.6393, 'Col 4': 247.1038, 'Col 5': -377.3744, 'Col 6': -332.0594}

  331.6481 -1217.4830  -158.7073   412.8360  -685.8759 -1156.8849 
  962.8022  -858.0987   551.4770  -354.0217  -841.8049  -332.9290 
  518.4109    92.4201   236.0696  -173.6223   428.5934   981.3002 
  122.9369   194.4508  -949.5681  1211.7596  -874.0149   331.4095 
   32.4230  -828.1081  -643.0460  1218.2936     3.0826 -1154.7661 
  527.7206   253.2327  -882.0611  -832.6224  -294.2264  -660.4862 


Dimension: 3x6
Numbers' range: {'Col 1': [-4, 4], 'Col 2': [-1, 5], 'Col 3': [-3, 3], 'Col 4': [-2, 5], 'Col 5': [-5, 4], 'Col 6': [-2, 3]}
Averages: {'Col 1': 0.6667, 'Col 2': 2.3333, 'Col 3': 1.0, 'Col 4': 1.3333, 'Col 5': -1.0, 'Col 6': 1.3333}

 4  3 -3  1 -5 -2 
 2 -1  3  5  4  3 
-4  5  3 -2 -2  3 


Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [23, 72], 'Col 2': [8, 90], 'Col 3': [1, 75], 'Col 4': [3, 72], 'Col 5': [2, 98]}
Averages: {'Col 1': 51.2, 'Col 2': 52.0, 'Col 3': 42.6, 'Col 4': 33.4, 'Col 5': 52.2}

45  8 61 60  2 
68 26 27  3 91 
72 66  1 17 29 
23 90 49 72 41 
48 70 75 15 98 


Float Matrix
Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [-3.6061, 0.5126], 'Col 2': [-3.0131, 4.7455], 'Col 3': [-3.6764, 4.9584], 'Col 4': [-4.1553, -1.4581]}
Averages: {'Col 1': -2.3792, 'Col 2': 0.7642, 'Col 3': 0.0973, 'Col 4': -2.877}

-3.2301 -3.0131  4.9584 -1.9706 
-3.1932  1.4625 -3.6764 -1.4581 
 0.5126 -0.1379 -2.4451 -3.9239 
-3.6061  4.7455  1.5522 -4.1553 


Square matrix
Dimension: 3x3
Numbers' range: {'Col 1': [3, 8], 'Col 2': [2, 5], 'Col 3': [4, 7]}
Averages: {'Col 1': 5.3333, 'Col 2': 3.3333, 'Col 3': 5.3333}

3 5 7 
8 3 4 
5 2 5 

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Numbers' range: {'Col 1': [9, 34], 'Col 2': [-52, 88], 'Col 3': [3, 33]}
Averages: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 18.0}

 34 -52  33 
  9  88   3 


Dimension: 5x2
Numbers' range: {'Col 1': [3, 352], 'Col 2': [-5, 45]}
Averages: {'Col 1': 138.2, 'Col 2': 34.6}

312  45 
 12  44 
352  45 
 12  44 
  3  -5 


Dimension: 1x4
Numbers' range: {'Col 1': [34, 34], 'Col 2': [5, 5], 'Col 3': [44, 44], 'Col 4': [659, 659]}
Averages: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 


Dimension: 22x3
Numbers' range: {'Col 1': [125, 193], 'Col 2': [30, 105], 'Col 3': [9, 55]}
Averages: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

 1 


Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Numbers' range: {'Col 1': [-1.8195, 3.4204], 'Col 2': [-2.6568, 2.9656], 'Col 3': [-4.7756, 1.5847]}
Averages: {'Col 1': 0.8484, 'Col 2': 0.1445, 'Col 3': -0.4593}

-1.8195  1.9071  0.1496 
 0.0887  2.9656  1.2042 
 3.4204 -2.6568  1.5847 
 1.7040 -1.6379 -4.7756 

d.matrix:

[[-1.8195, 1.9071, 0.1496], [0.0887, 2.9656, 1.2042], [3.4204, -2.6568, 1.5847], [1.704, -1.6379, -4.7756]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Numbers' range: {'Col 1': [-1217.483, 194.4508], 'Col 2': [-949.5681, 551.477]}
Averages: {'Col 1': -447.1777, 'Col 2': -80.1822}

-1217.4830  -158.7073 
 -858.0987   551.4770 
   92.4201   236.0696 
  194.4508  -949.5681 
 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [32.423, 962.8022], 'Col 2': [-1217.483, 253.2327], 'Col 3': [-949.5681, 551.477], 'Col 4': [-832.6224, 1218.2936], 'Col 5': [-874.0149, 428.5934], 'Col 6': [-1156.8849, 981.3002]}
Averages: {'Col 1': 415.9903, 'Col 2': -393.931, 'Col 3': -307.6393, 'Col 4': 247.1038, 'Col 5': -377.3744, 'Col 6': -332.0594}

  331.6481 -1217.4830  -158.7073   412.8360  -685.8759 -1156.8849 
  962.8022  -858.0987   551.4770  -354.0217  -841.8049  -332.9290 
  518.4109    92.4201   236.0696  -173.6223   428.5934   981.3002 
  122.9369   194.4508  -949.5681  1211.7596  -874.0149   331.4095 
   32.4230  -828.1081  -643.0460  1218.2936     3.0826 -1154.7661 
  527.7206   253.2327  -882.0611  -832.6224  -294.2264  -660.4862 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [32.423, 962.8022], 'Col 2': [-1217.483, 253.2327], 'Col 3': [-949.5681, 551.477], 'Col 4': [-832.6224, 1218.2936], 'Col 5': [-874.0149, 428.5934], 'Col 6': [-1156.8849, 981.3002]}
Averages: {'Col 1': 415.9903, 'Col 2': -393.931, 'Col 3': -307.6393, 'Col 4': 247.1038, 'Col 5': -377.3744, 'Col 6': -332.0594}

  331.6481 -1217.4830  -158.7073   412.8360  -685.8759 -1156.8849 
  962.8022  -858.0987   551.4770  -354.0217  -841.8049  -332.9290 
  518.4109    92.4201   236.0696  -173.6223   428.5934   981.3002 
  122.9369   194.4508  -949.5681  1211.7596  -874.0149   331.4095 
   32.4230  -828.1081  -643.0460  1218.2936     3.0826 -1154.7661 
  527.7206   253.2327  -882.0611  -832.6224  -294.2264  -660.4862 

f.uptri.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [0, 331.6481], 'Col 2': [-1217.483, 2676.3564], 'Col 3': [-270.5662, 1012.2176], 'Col 4': [-1552.5192, 412.836], 'Col 5': [-3597.4626, 88249.3011], 'Col 6': [-6222.2463, 53528.9331]}
Averages: {'Col 1': 55.2747, 'Col 2': 243.1456, 'Col 3': 97.1573, 'Col 4': -131.3679, 'Col 5': 14293.1765, 'Col 6': 7916.7342}

  331.6481 -1217.4830  -158.7073   412.8360  -685.8759 -1156.8849 
    0.0000  2676.3564  1012.2176 -1552.5192  1149.3503  3025.6047 
    0.0000     0.0000  -270.5662   338.6288   643.7464   533.7549 
    0.0000     0.0000     0.0000    12.8467 -3597.4626 -2208.7564 
    0.0000     0.0000     0.0000     0.0000 88249.3011 53528.9331 
    0.0000     0.0000     0.0000     0.0000     0.0000 -6222.2463 

f.lowtri.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [0.0978, 2.9031], 'Col 2': [-0.2649, 1], 'Col 3': [0, 5.3887], 'Col 4': [-159.0763, 24.6645], 'Col 5': [-6.5256, 1], 'Col 6': [0, 1]}
Averages: {'Col 1': 1.2543, 'Col 2': 0.4234, 'Col 3': 1.9853, 'Col 4': -22.2353, 'Col 5': -0.9209, 'Col 6': 0.1667}

   1.0000    0.0000    0.0000    0.0000    0.0000    0.0000 
   2.9031    1.0000    0.0000    0.0000    0.0000    0.0000 
   1.5631    0.7456    1.0000    0.0000    0.0000    0.0000 
   0.3707    0.2413    4.1948    1.0000    0.0000    0.0000 
   0.0978   -0.2649    1.3281   24.6645    1.0000    0.0000 
   1.5912    0.8185    5.3887 -159.0763   -6.5256    1.0000 

f-(f.lowtri@f.uptri)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [0.0, 0.0], 'Col 2': [0.0, 0.0], 'Col 3': [0.0, 0.0], 'Col 4': [0.0, 0.0], 'Col 5': [0.0, 0.0], 'Col 6': [0.0, 0.0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0}

0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 

################
g.dim:
 [3, 6]
g.inRange():
 {'Col 1': [-4, 4], 'Col 2': [-1, 5], 'Col 3': [-3, 3], 'Col 4': [-2, 5], 'Col 5': [-5, 4], 'Col 6': [-2, 3]}
g: 
Dimension: 3x6
Numbers' range: {'Col 1': [-4, 4], 'Col 2': [-1, 5], 'Col 3': [-3, 3], 'Col 4': [-2, 5], 'Col 5': [-5, 4], 'Col 6': [-2, 3]}
Averages: {'Col 1': 0.6667, 'Col 2': 2.3333, 'Col 3': 1.0, 'Col 4': 1.3333, 'Col 5': -1.0, 'Col 6': 1.3333}

 4  3 -3  1 -5 -2 
 2 -1  3  5  4  3 
-4  5  3 -2 -2  3 

g.remove(3):

Dimension: 2x6
Numbers' range: {'Col 1': [2, 4], 'Col 2': [-1, 3], 'Col 3': [-3, 3], 'Col 4': [1, 5], 'Col 5': [-5, 4], 'Col 6': [-2, 3]}
Averages: {'Col 1': 3.0, 'Col 2': 1.0, 'Col 3': 0.0, 'Col 4': 3.0, 'Col 5': -0.5, 'Col 6': 0.5}

 4  3 -3  1 -5 -2 
 2 -1  3  5  4  3 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [5, 97], 'Col 2': [25, 94], 'Col 3': [20, 99], 'Col 4': [7, 88], 'Col 5': [3, 55], 'Col 6': [44, 97], 'Col 7': [33, 99]}
Averages: {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.avg(): {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

h.det: 1287494735579.9985

h.rank: 7

h.rrechelon: 
Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [0, 1.0], 'Col 2': [0, 1.0], 'Col 3': [0, 1.0], 'Col 4': [0, 1.0], 'Col 5': [0, 1.0], 'Col 6': [0, 1.0], 'Col 7': [0, 1.0]}
Averages: {'Col 1': 0.1429, 'Col 2': 0.1429, 'Col 3': 0.1429, 'Col 4': 0.1429, 'Col 5': 0.1429, 'Col 6': 0.1429, 'Col 7': 0.1429}

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 


h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [-0.0195, 0.0398], 'Col 2': [-0.0745, 0.0605], 'Col 3': [-0.0501, 0.071], 'Col 4': [-0.0545, 0.063], 'Col 5': [-0.0317, 0.0197], 'Col 6': [-0.0622, 0.0471], 'Col 7': [-0.0487, 0.041]}
Averages: {'Col 1': 0.0046, 'Col 2': -0.0086, 'Col 3': 0.0091, 'Col 4': 0.0085, 'Col 5': -0.0032, 'Col 6': -0.0081, 'Col 7': -0.0052}

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0014  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [35, 97], 'Col 2': [25, 71], 'Col 3': [20, 99], 'Col 4': [3, 55], 'Col 5': [44, 97], 'Col 6': [33, 99]}
Averages: {'Col 1': 65.8333, 'Col 2': 43.0, 'Col 3': 50.1667, 'Col 4': 21.3333, 'Col 5': 66.8333, 'Col 6': 65.5}

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Numbers' range: {'Col 1': [2, 4], 'Col 2': [-1, 3], 'Col 3': [-3, 3], 'Col 4': [1, 5]}
Averages: {'Col 1': 3.0, 'Col 2': 1.0, 'Col 3': 0.0, 'Col 4': 3.0}

 4  3 -3  1 
 2 -1  3  5 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[4, 3, -3, 1], [2, -1, 3, 5]],inRange={'Col 1': [2, 4], 'Col 2': [-1, 3], 'Col 3': [-3, 3], 'Col 4': [1, 5]},randomFill=1)

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Numbers' range: {'Col 1': [8, 81], 'Col 2': [2, 70], 'Col 3': [16, 99], 'Col 4': [23, 97], 'Col 5': [4, 55], 'Col 6': [15, 81], 'Col 7': [0, 63], 'Col 8': [29, 89], 'Col 9': [0, 93], 'Col 10': [24, 92], 'Col 11': [4, 68], 'Col 12': [5, 67], 'Col 13': [1, 98], 'Col 14': [32, 88], 'Col 15': [30, 69]}
Averages: {'Col 1': 42.4, 'Col 2': 40.2, 'Col 3': 52.6, 'Col 4': 60.8, 'Col 5': 33.0, 'Col 6': 60.4, 'Col 7': 21.2, 'Col 8': 51.4, 'Col 9': 52.6, 'Col 10': 69.8, 'Col 11': 33.0, 'Col 12': 44.4, 'Col 13': 36.2, 'Col 14': 56.2, 'Col 15': 49.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [23, 72], 'Col 2': [8, 90], 'Col 3': [1, 75], 'Col 4': [3, 72], 'Col 5': [2, 98]}
Averages: {'Col 1': 51.2, 'Col 2': 52.0, 'Col 3': 42.6, 'Col 4': 33.4, 'Col 5': 52.2}

45  8 61 60  2 
68 26 27  3 91 
72 66  1 17 29 
23 90 49 72 41 
48 70 75 15 98 

p.det:
 1761627760.0000012

p.adj:
 
Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [-11625136.0, 15844268.0], 'Col 2': [-26882090.0, 31556360.0], 'Col 3': [-19647192.0, 20516022.0], 'Col 4': [-18818236.0, 29949124.0], 'Col 5': [-33641068.0, 32576772.0]}
Averages: {'Col 1': 2349172.8, 'Col 2': 2365848.0, 'Col 3': 222697.6, 'Col 4': 2757342.4, 'Col 5': 130875.2}

 13188276.0000   1745090.0000  20516022.0000 -15609012.0000  -1430356.0000 
-10857652.0000 -22568710.0000  17276646.0000   2806804.0000  14891492.0000 
 15844268.0000 -26882090.0000   -220494.0000 -18818236.0000  32576772.0000 
  5196108.0000  27978590.0000 -16811494.0000  29949124.0000 -33641068.0000 
-11625136.0000  31556360.0000 -19647192.0000  15458032.0000 -11742464.0000 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [-0.0066, 0.009], 'Col 2': [-0.0153, 0.0179], 'Col 3': [-0.0112, 0.0116], 'Col 4': [-0.0107, 0.017], 'Col 5': [-0.0191, 0.0185]}
Averages: {'Col 1': 0.0013, 'Col 2': 0.0013, 'Col 3': 0.0001, 'Col 4': 0.0016, 'Col 5': 0.0001}

 0.0075  0.0010  0.0116 -0.0089 -0.0008 
-0.0062 -0.0128  0.0098  0.0016  0.0085 
 0.0090 -0.0153 -0.0001 -0.0107  0.0185 
 0.0029  0.0159 -0.0095  0.0170 -0.0191 
-0.0066  0.0179 -0.0112  0.0088 -0.0067 

################
p:

Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [23, 72], 'Col 2': [8, 90], 'Col 3': [1, 75], 'Col 4': [3, 72], 'Col 5': [2, 98]}
Averages: {'Col 1': 51.2, 'Col 2': 52.0, 'Col 3': 42.6, 'Col 4': 33.4, 'Col 5': 52.2}

45  8 61 60  2 
68 26 27  3 91 
72 66  1 17 29 
23 90 49 72 41 
48 70 75 15 98 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [8, 90], 'Col 2': [1, 75], 'Col 3': [15, 72], 'Col 4': [2, 98]}
Averages: {'Col 1': 58.5, 'Col 2': 46.5, 'Col 3': 41.0, 'Col 4': 42.5}

 8 61 60  2 
66  1 17 29 
90 49 72 41 
70 75 15 98 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Numbers' range: {'Col 1': [8, 90], 'Col 2': [55, 55], 'Col 3': [1, 75], 'Col 4': [15, 72], 'Col 5': [2, 98]}
Averages: {'Col 1': 58.5, 'Col 2': 55.0, 'Col 3': 46.5, 'Col 4': 41.0, 'Col 5': 42.5}

 8 55 61 60  2 
66 55  1 17 29 
90 55 49 72 41 
70 55 75 15 98 

################

r: 
Dimension: 5x4
Numbers' range: {'Col 1': [2, 61], 'Col 2': [1, 66], 'Col 3': [41, 90], 'Col 4': [15, 98]}
Averages: {'Col 1': 37.2, 'Col 2': 33.6, 'Col 3': 61.4, 'Col 4': 62.6}

 8 66 90 70 
55 55 55 55 
61  1 49 75 
60 17 72 15 
 2 29 41 98 

p==r.t:

True
################
id2:
 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


id2.addDim(2): 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 

id2.matrix:
 [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 

################
id4:


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################
id4: 
Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.addDim(10)):
 
Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Numbers' range: {'Col 1': [-8.7945, -5.8545], 'Col 2': [-10.2719, 0.9475], 'Col 3': [-28.5705, -0.0757]}
Averages: {'Col 1': -7.3245, 'Col 2': -4.6622, 'Col 3': -14.3231}

 -8.7945 -10.2719 -28.5705 
 -5.8545   0.9475  -0.0757 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Numbers' range: {'Col 1': [0.3288, 1.8374], 'Col 2': [0.5717, 0.8531], 'Col 3': [0.0227, 0.711]}
Averages: {'Col 1': 1.0831, 'Col 2': 0.7124, 'Col 3': 0.3668}

0.3288 0.8531 0.0227 
1.8374 0.5717 0.7110 

################


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [32.423, 962.8022], 'Col 2': [-1217.483, 253.2327], 'Col 3': [-949.5681, 551.477], 'Col 4': [-832.6224, 1218.2936], 'Col 5': [-874.0149, 428.5934], 'Col 6': [-1156.8849, 981.3002]}
Averages: {'Col 1': 415.9903, 'Col 2': -393.931, 'Col 3': -307.6393, 'Col 4': 247.1038, 'Col 5': -377.3744, 'Col 6': -332.0594}

  331.6481 -1217.4830  -158.7073   412.8360  -685.8759 -1156.8849 
  962.8022  -858.0987   551.4770  -354.0217  -841.8049  -332.9290 
  518.4109    92.4201   236.0696  -173.6223   428.5934   981.3002 
  122.9369   194.4508  -949.5681  1211.7596  -874.0149   331.4095 
   32.4230  -828.1081  -643.0460  1218.2936     3.0826 -1154.7661 
  527.7206   253.2327  -882.0611  -832.6224  -294.2264  -660.4862 

f=f.intForm

Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [32, 962], 'Col 2': [-1217, 253], 'Col 3': [-949, 551], 'Col 4': [-832, 1218], 'Col 5': [-874, 428], 'Col 6': [-1156, 981]}
Averages: {'Col 1': 415.3333, 'Col 2': -394.0, 'Col 3': -307.5, 'Col 4': 247.0, 'Col 5': -377.1667, 'Col 6': -331.6667}

  331 -1217  -158   412  -685 -1156 
  962  -858   551  -354  -841  -332 
  518    92   236  -173   428   981 
  122   194  -949  1211  -874   331 
   32  -828  -643  1218     3 -1154 
  527   253  -882  -832  -294  -660 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [32.42, 962.8], 'Col 2': [-1217.48, 253.23], 'Col 3': [-949.57, 551.48], 'Col 4': [-832.62, 1218.29], 'Col 5': [-874.01, 428.59], 'Col 6': [-1156.88, 981.3]}
Averages: {'Col 1': 415.99, 'Col 2': -393.9317, 'Col 3': -307.64, 'Col 4': 247.105, 'Col 5': -377.375, 'Col 6': -332.06}

  331.6500 -1217.4800  -158.7100   412.8400  -685.8800 -1156.8800 
  962.8000  -858.1000   551.4800  -354.0200  -841.8000  -332.9300 
  518.4100    92.4200   236.0700  -173.6200   428.5900   981.3000 
  122.9400   194.4500  -949.5700  1211.7600  -874.0100   331.4100 
   32.4200  -828.1100  -643.0500  1218.2900     3.0800 -1154.7700 
  527.7200   253.2300  -882.0600  -832.6200  -294.2300  -660.4900 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [0.41, 0.94], 'Col 2': [-0.48, 0.45], 'Col 3': [-0.71, 0.48], 'Col 4': [-0.62, 0.84], 'Col 5': [-0.88, 0.59], 'Col 6': [-0.93, 0.41]}
Averages: {'Col 1': 0.6567, 'Col 2': 0.0683, 'Col 3': -0.14, 'Col 4': 0.105, 'Col 5': -0.2083, 'Col 6': -0.3933}

 0.6500 -0.4800 -0.7100  0.8400 -0.8800 -0.8800 
 0.8000 -0.1000  0.4800 -0.0200 -0.8000 -0.9300 
 0.4100  0.4200  0.0700 -0.6200  0.5900  0.3000 
 0.9400  0.4500 -0.5700  0.7600 -0.0100  0.4100 
 0.4200 -0.1100 -0.0500  0.2900  0.0800 -0.7700 
 0.7200  0.2300 -0.0600 -0.6200 -0.2300 -0.4900 

################
r.remove(r=2):

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [2, 61], 'Col 2': [1, 66], 'Col 3': [41, 90], 'Col 4': [15, 98]}
Averages: {'Col 1': 32.75, 'Col 2': 28.25, 'Col 3': 63.0, 'Col 4': 64.5}

 8 66 90 70 
61  1 49 75 
60 17 72 15 
 2 29 41 98 

r.rank: 4

r[0]=r[1][:]

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [2, 61], 'Col 2': [1, 29], 'Col 3': [41, 72], 'Col 4': [15, 98]}
Averages: {'Col 1': 46.0, 'Col 2': 12.0, 'Col 3': 52.75, 'Col 4': 65.75}

61  1 49 75 
61  1 49 75 
60 17 72 15 
 2 29 41 98 

Determinant is 0, can't get lower/upper triangular matrices
r.rank: 3
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 99], 'Col 2': [0, 99], 'Col 3': [0, 99], 'Col 4': [0, 99], 'Col 5': [0, 99], 'Col 6': [0, 99], 'Col 7': [0, 99], 'Col 8': [0, 99]}
Averages: {'Col 1': 12.375, 'Col 2': 12.375, 'Col 3': 12.375, 'Col 4': 12.375, 'Col 5': 12.375, 'Col 6': 12.375, 'Col 7': 12.375, 'Col 8': 12.375}

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e+=50:

Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [50, 149], 'Col 2': [50, 149], 'Col 3': [50, 149], 'Col 4': [50, 149], 'Col 5': [50, 149], 'Col 6': [50, 149], 'Col 7': [50, 149], 'Col 8': [50, 149]}
Averages: {'Col 1': 62.375, 'Col 2': 62.375, 'Col 3': 62.375, 'Col 4': 62.375, 'Col 5': 62.375, 'Col 6': 62.375, 'Col 7': 62.375, 'Col 8': 62.375}

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 1], 'Col 2': [0, 1], 'Col 3': [0, 1], 'Col 4': [0, 1], 'Col 5': [0, 1], 'Col 6': [0, 1], 'Col 7': [0, 1], 'Col 8': [0, 1]}
Averages: {'Col 1': 0.125, 'Col 2': 0.125, 'Col 3': 0.125, 'Col 4': 0.125, 'Col 5': 0.125, 'Col 6': 0.125, 'Col 7': 0.125, 'Col 8': 0.125}

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j

Dimension: 2x4
Numbers' range: {'Col 1': [1, 2], 'Col 2': [0, 1], 'Col 3': [-2, 1], 'Col 4': [0, 0]}
Averages: {'Col 1': 1.5, 'Col 2': 0.5, 'Col 3': -0.5, 'Col 4': 0.0}

 2  1 -2  0 
 1  0  1  0 

################

f.roundForm(3)>f.roundForm(1)
False

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Numbers' range: {'Col 1': [9, 34], 'Col 2': [-52, 88], 'Col 3': [3, 33]}
Averages: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 18.0}

 34 -52  33 
  9  88   3 

################
validStr2:

Dimension: 5x2
Numbers' range: {'Col 1': [3, 352], 'Col 2': [-5, 45]}
Averages: {'Col 1': 138.2, 'Col 2': 34.6}

312  45 
 12  44 
352  45 
 12  44 
  3  -5 

################
validStr3:

Dimension: 1x4
Numbers' range: {'Col 1': [34, 34], 'Col 2': [5, 5], 'Col 3': [44, 44], 'Col 4': [659, 659]}
Averages: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Numbers' range: {'Col 1': [125, 193], 'Col 2': [30, 105], 'Col 3': [9, 55]}
Averages: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################
"""
# =============================================================================

