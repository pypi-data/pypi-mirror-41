# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,CMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
proj=Matrix(listed=projectGrid)
o=Matrix(dim=8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4])
d=FMatrix([4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,ranged=[-1250,1250])
g=Matrix(dim=[3,6])
p=Matrix(5,ranged=[0,100])
q=FMatrix(4)

# =============================================================================
# String inputs Matrices
# =============================================================================
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""")

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix

#a=Matrix(0)
#v=Matrix()
#k=Matrix(dim=-1)
#l=Matrix(ranged=[0])
#m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
for matrix in [proj,o,b,c,d,e,f,g,p,q]:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.uptri.p")
f.uptri.p
print("f.lowtri.p")
f.lowtri.p
print("f-(f.lowtri@f.uptri)")#There is a %0.001 error due to rounding
print(f-(f.lowtri@f.uptri))
print('################')
      
print("g.dim:\n",g.dim)
print("g.inRange():\n",g.inRange())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.avg():",h.avg())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print('################\n')
      
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)

print("################")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('\n################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print(f)
print("f=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1][:]")
r[0]=r[1][:]
print(r)
print("r.rank:",r.rank)    

print("################")
      
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("################")
      
print("\nf.roundForm(3)>f.roundForm(1)")
print(f.roundForm(3)>f.roundForm(1))

# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Numbers' range: {'Col 1': [1, 88], 'Col 2': [2, 98], 'Col 3': [0, 99], 'Col 4': [5, 97], 'Col 5': [2, 99], 'Col 6': [0, 94], 'Col 7': [0, 99], 'Col 8': [1, 89], 'Col 9': [0, 97], 'Col 10': [17, 97], 'Col 11': [3, 99], 'Col 12': [5, 80], 'Col 13': [0, 98], 'Col 14': [8, 88], 'Col 15': [12, 84], 'Col 16': [1, 97], 'Col 17': [4, 89], 'Col 18': [2, 93], 'Col 19': [5, 98], 'Col 20': [0, 95]}
Averages: {'Col 1': 35.8, 'Col 2': 49.85, 'Col 3': 41.65, 'Col 4': 52.2, 'Col 5': 52.7, 'Col 6': 48.6, 'Col 7': 46.4, 'Col 8': 40.3, 'Col 9': 40.3, 'Col 10': 63.9, 'Col 11': 50.75, 'Col 12': 46.6, 'Col 13': 43.6, 'Col 14': 51.85, 'Col 15': 42.75, 'Col 16': 47.1, 'Col 17': 40.75, 'Col 18': 44.6, 'Col 19': 52.6, 'Col 20': 54.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Numbers' range: {'Col 1': [1, 1]}
Averages: {'Col 1': 1.0}

1 


Dimension: 2x4
Numbers' range: {'Col 1': [-1, 0], 'Col 2': [-1, -1], 'Col 3': [-4, -2], 'Col 4': [-4, 4]}
Averages: {'Col 1': -0.5, 'Col 2': -1.0, 'Col 3': -3.0, 'Col 4': 0.0}

 0 -1 -4  4 
-1 -1 -2 -4 


Float Matrix
Dimension: 4x3
Numbers' range: {'Col 1': [-3.8274, 1.3504], 'Col 2': [-4.5376, 4.2783], 'Col 3': [-3.5602, 4.3267]}
Averages: {'Col 1': -0.3763, 'Col 2': -0.0709, 'Col 3': 0.7405}

 1.0950 -3.8446 -3.5602 
-3.8274  4.2783  4.3267 
-0.1232 -4.5376  2.5980 
 1.3504  3.8202 -0.4025 


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-997.0677, 1200.5163], 'Col 2': [-1031.3928, 1236.4719], 'Col 3': [-1237.3673, -611.7658], 'Col 4': [-1011.0751, 1248.2951], 'Col 5': [-1084.2631, 1191.0043], 'Col 6': [-1188.9857, 904.5266]}
Averages: {'Col 1': -440.2996, 'Col 2': 590.9996, 'Col 3': -879.4354, 'Col 4': -116.1452, 'Col 5': -82.1827, 'Col 6': 104.6423}

 1200.5163   146.5457  -800.5194   456.1812  -857.5348  -903.6614 
 -428.3949   900.4949  -718.9006  -736.4698  1191.0043   469.1718 
 -853.6262  1236.4719  -797.0434   -33.1002   496.6399   542.7158 
 -997.0677 -1031.3928  -611.7658 -1011.0751   357.5522 -1188.9857 
 -676.7327  1112.1045 -1237.3673  1248.2951  -596.4945   904.5266 
 -886.4927  1181.7736 -1111.0157  -620.7024 -1084.2631   804.0868 


Dimension: 3x6
Numbers' range: {'Col 1': [-4, 4], 'Col 2': [-1, 4], 'Col 3': [-2, 1], 'Col 4': [-4, -3], 'Col 5': [-2, 2], 'Col 6': [-5, 0]}
Averages: {'Col 1': -0.3333, 'Col 2': 1.0, 'Col 3': 0.0, 'Col 4': -3.6667, 'Col 5': -0.6667, 'Col 6': -3.0}

-1 -1 -2 -4 -2 -4 
-4  4  1 -3  2 -5 
 4  0  1 -4 -2  0 


Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [6, 80], 'Col 2': [44, 97], 'Col 3': [10, 35], 'Col 4': [5, 54], 'Col 5': [9, 83]}
Averages: {'Col 1': 51.4, 'Col 2': 73.6, 'Col 3': 21.6, 'Col 4': 26.4, 'Col 5': 56.8}

55 44 10 22 42 
80 74 13 36 77 
67 59 20  5  9 
 6 97 35 54 83 
49 94 30 15 73 


Float Matrix
Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [-3.1432, 3.3473], 'Col 2': [-4.2852, 3.8443], 'Col 3': [-2.0983, 4.7057], 'Col 4': [-4.9705, 4.6559]}
Averages: {'Col 1': -0.2823, 'Col 2': -2.1893, 'Col 3': -0.0684, 'Col 4': 0.6946}

-3.1432  3.8443  4.7057  3.6991 
 1.0581 -4.1047 -1.1151  4.6559 
 3.3473 -4.2852 -2.0983 -4.9705 
-2.3913 -4.2116 -1.7658 -0.6061 

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Numbers' range: {'Col 1': [9, 34], 'Col 2': [-52, 88], 'Col 3': [3, 33]}
Averages: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 18.0}

 34 -52  33 
  9  88   3 


Dimension: 5x2
Numbers' range: {'Col 1': [3, 352], 'Col 2': [-5, 45]}
Averages: {'Col 1': 138.2, 'Col 2': 34.6}

312  45 
 12  44 
352  45 
 12  44 
  3  -5 


Dimension: 1x4
Numbers' range: {'Col 1': [34, 34], 'Col 2': [5, 5], 'Col 3': [44, 44], 'Col 4': [659, 659]}
Averages: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 


Dimension: 22x3
Numbers' range: {'Col 1': [125, 193], 'Col 2': [30, 105], 'Col 3': [9, 55]}
Averages: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

 1 


Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Numbers' range: {'Col 1': [-3.8274, 1.3504], 'Col 2': [-4.5376, 4.2783], 'Col 3': [-3.5602, 4.3267]}
Averages: {'Col 1': -0.3763, 'Col 2': -0.0709, 'Col 3': 0.7405}

 1.0950 -3.8446 -3.5602 
-3.8274  4.2783  4.3267 
-0.1232 -4.5376  2.5980 
 1.3504  3.8202 -0.4025 

d.matrix:

[[1.095, -3.8446, -3.5602], [-3.8274, 4.2783, 4.3267], [-0.1232, -4.5376, 2.598], [1.3504, 3.8202, -0.4025]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Numbers' range: {'Col 1': [-1031.3928, 1236.4719], 'Col 2': [-800.5194, -611.7658]}
Averages: {'Col 1': 313.0299, 'Col 2': -732.0573}

  146.5457  -800.5194 
  900.4949  -718.9006 
 1236.4719  -797.0434 
-1031.3928  -611.7658 
 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-997.0677, 1200.5163], 'Col 2': [-1031.3928, 1236.4719], 'Col 3': [-1237.3673, -611.7658], 'Col 4': [-1011.0751, 1248.2951], 'Col 5': [-1084.2631, 1191.0043], 'Col 6': [-1188.9857, 904.5266]}
Averages: {'Col 1': -440.2996, 'Col 2': 590.9996, 'Col 3': -879.4354, 'Col 4': -116.1452, 'Col 5': -82.1827, 'Col 6': 104.6423}

 1200.5163   146.5457  -800.5194   456.1812  -857.5348  -903.6614 
 -428.3949   900.4949  -718.9006  -736.4698  1191.0043   469.1718 
 -853.6262  1236.4719  -797.0434   -33.1002   496.6399   542.7158 
 -997.0677 -1031.3928  -611.7658 -1011.0751   357.5522 -1188.9857 
 -676.7327  1112.1045 -1237.3673  1248.2951  -596.4945   904.5266 
 -886.4927  1181.7736 -1111.0157  -620.7024 -1084.2631   804.0868 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-997.0677, 1200.5163], 'Col 2': [-1031.3928, 1236.4719], 'Col 3': [-1237.3673, -611.7658], 'Col 4': [-1011.0751, 1248.2951], 'Col 5': [-1084.2631, 1191.0043], 'Col 6': [-1188.9857, 904.5266]}
Averages: {'Col 1': -440.2996, 'Col 2': 590.9996, 'Col 3': -879.4354, 'Col 4': -116.1452, 'Col 5': -82.1827, 'Col 6': 104.6423}

 1200.5163   146.5457  -800.5194   456.1812  -857.5348  -903.6614 
 -428.3949   900.4949  -718.9006  -736.4698  1191.0043   469.1718 
 -853.6262  1236.4719  -797.0434   -33.1002   496.6399   542.7158 
 -997.0677 -1031.3928  -611.7658 -1011.0751   357.5522 -1188.9857 
 -676.7327  1112.1045 -1237.3673  1248.2951  -596.4945   904.5266 
 -886.4927  1181.7736 -1111.0157  -620.7024 -1084.2631   804.0868 

f.uptri.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [0, 1200.5163], 'Col 2': [0, 952.7886], 'Col 3': [-1004.5597, 47.2683], 'Col 4': [-573.6851, 50777.8907], 'Col 5': [-63760.2226, 884.9997], 'Col 6': [-16285.3734, 4055.7333]}
Averages: {'Col 1': 200.0861, 'Col 2': 183.2224, 'Col 3': -292.9685, 'Col 4': 8626.4815, 'Col 5': -10716.156, 'Col 6': -1991.711}

  1200.5163    146.5457   -800.5194    456.1812   -857.5348   -903.6614 
     0.0000    952.7886  -1004.5597   -573.6851    884.9997    146.7073 
     0.0000      0.0000     47.2683   1098.5020  -1358.3966   -306.2644 
     0.0000      0.0000      0.0000  50777.8907 -63760.2226 -16285.3734 
     0.0000      0.0000      0.0000      0.0000    794.2182   1342.5925 
     0.0000      0.0000      0.0000      0.0000      0.0000   4055.7333 

f.lowtri.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-0.8305, 1], 'Col 2': [-0.9548, 1.4071], 'Col 3': [-47.2988, 1], 'Col 4': [0, 1], 'Col 5': [-2.701, 1], 'Col 6': [0, 1]}
Averages: {'Col 1': -0.3668, 'Col 2': 0.6767, 'Col 3': -10.4352, 'Col 4': 0.2344, 'Col 5': -0.2835, 'Col 6': 0.1667}

  1.0000   0.0000   0.0000   0.0000   0.0000   0.0000 
 -0.3568   1.0000   0.0000   0.0000   0.0000   0.0000 
 -0.7110   1.4071   1.0000   0.0000   0.0000   0.0000 
 -0.8305  -0.9548 -47.2988   1.0000   0.0000   0.0000 
 -0.5637   1.2539  -9.0757   0.2402   1.0000   0.0000 
 -0.7384   1.3539  -7.2366   0.1663  -2.7010   1.0000 

f-(f.lowtri@f.uptri)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [0.0, 0.0], 'Col 2': [0.0, 0.0], 'Col 3': [0.0, 0.0], 'Col 4': [-0.0001, 0.0], 'Col 5': [-0.0001, 0.0001], 'Col 6': [0.0, 0.0001]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': -0.0, 'Col 5': 0.0, 'Col 6': 0.0}

 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000 -0.0001  0.0000 
 0.0000  0.0000  0.0000  0.0000  0.0000  0.0001 
 0.0000  0.0000  0.0000 -0.0001  0.0001  0.0000 

################
g.dim:
 [3, 6]
g.inRange():
 {'Col 1': [-4, 4], 'Col 2': [-1, 4], 'Col 3': [-2, 1], 'Col 4': [-4, -3], 'Col 5': [-2, 2], 'Col 6': [-5, 0]}
g: 
Dimension: 3x6
Numbers' range: {'Col 1': [-4, 4], 'Col 2': [-1, 4], 'Col 3': [-2, 1], 'Col 4': [-4, -3], 'Col 5': [-2, 2], 'Col 6': [-5, 0]}
Averages: {'Col 1': -0.3333, 'Col 2': 1.0, 'Col 3': 0.0, 'Col 4': -3.6667, 'Col 5': -0.6667, 'Col 6': -3.0}

-1 -1 -2 -4 -2 -4 
-4  4  1 -3  2 -5 
 4  0  1 -4 -2  0 

g.remove(3):

Dimension: 2x6
Numbers' range: {'Col 1': [-4, -1], 'Col 2': [-1, 4], 'Col 3': [-2, 1], 'Col 4': [-4, -3], 'Col 5': [-2, 2], 'Col 6': [-5, -4]}
Averages: {'Col 1': -2.5, 'Col 2': 1.5, 'Col 3': -0.5, 'Col 4': -3.5, 'Col 5': 0.0, 'Col 6': -4.5}

-1 -1 -2 -4 -2 -4 
-4  4  1 -3  2 -5 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [5, 97], 'Col 2': [25, 94], 'Col 3': [20, 99], 'Col 4': [7, 88], 'Col 5': [3, 55], 'Col 6': [44, 97], 'Col 7': [33, 99]}
Averages: {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.avg(): {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

h.det: 1287482081136.7107

h.rank: 7

h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [-0.0195, 0.0398], 'Col 2': [-0.0745, 0.0605], 'Col 3': [-0.0501, 0.071], 'Col 4': [-0.0545, 0.063], 'Col 5': [-0.0317, 0.0197], 'Col 6': [-0.0622, 0.0471], 'Col 7': [-0.0487, 0.041]}
Averages: {'Col 1': 0.0046, 'Col 2': -0.0086, 'Col 3': 0.0091, 'Col 4': 0.0085, 'Col 5': -0.0032, 'Col 6': -0.0081, 'Col 7': -0.0052}

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [35, 97], 'Col 2': [25, 71], 'Col 3': [20, 99], 'Col 4': [3, 55], 'Col 5': [44, 97], 'Col 6': [33, 99]}
Averages: {'Col 1': 65.8333, 'Col 2': 43.0, 'Col 3': 50.1667, 'Col 4': 21.3333, 'Col 5': 66.8333, 'Col 6': 65.5}

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Numbers' range: {'Col 1': [-4, -1], 'Col 2': [-1, 4], 'Col 3': [-2, 1], 'Col 4': [-4, -3]}
Averages: {'Col 1': -2.5, 'Col 2': 1.5, 'Col 3': -0.5, 'Col 4': -3.5}

-1 -1 -2 -4 
-4  4  1 -3 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[-1, -1, -2, -4], [-4, 4, 1, -3]],inRange={'Col 1': [-4, -1], 'Col 2': [-1, 4], 'Col 3': [-2, 1], 'Col 4': [-4, -3]},randomFill=1)

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Numbers' range: {'Col 1': [8, 81], 'Col 2': [2, 70], 'Col 3': [16, 99], 'Col 4': [23, 97], 'Col 5': [4, 55], 'Col 6': [15, 81], 'Col 7': [0, 63], 'Col 8': [29, 89], 'Col 9': [0, 93], 'Col 10': [24, 92], 'Col 11': [4, 68], 'Col 12': [5, 67], 'Col 13': [1, 98], 'Col 14': [32, 88], 'Col 15': [30, 69]}
Averages: {'Col 1': 42.4, 'Col 2': 40.2, 'Col 3': 52.6, 'Col 4': 60.8, 'Col 5': 33.0, 'Col 6': 60.4, 'Col 7': 21.2, 'Col 8': 51.4, 'Col 9': 52.6, 'Col 10': 69.8, 'Col 11': 33.0, 'Col 12': 44.4, 'Col 13': 36.2, 'Col 14': 56.2, 'Col 15': 49.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [6, 80], 'Col 2': [44, 97], 'Col 3': [10, 35], 'Col 4': [5, 54], 'Col 5': [9, 83]}
Averages: {'Col 1': 51.4, 'Col 2': 73.6, 'Col 3': 21.6, 'Col 4': 26.4, 'Col 5': 56.8}

55 44 10 22 42 
80 74 13 36 77 
67 59 20  5  9 
 6 97 35 54 83 
49 94 30 15 73 

p.det:
 29412940.440559104

p.adj:
 
Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [-5791031.1168, 10692273.8005], 'Col 2': [-6974370.9402, 3293685.303], 'Col 3': [-1413449.0656, 1177046.5693], 'Col 4': [-263334.3398, 579605.3852], 'Col 5': [-1019476.3139, 1310487.5278]}
Averages: {'Col 1': 1760181.9578, 'Col 2': -1040763.5902, 'Col 3': -197900.6908, 'Col 4': 74831.7382, 'Col 5': 104987.9058}

 1625038.8525  -701989.0403   -68244.4902  -198855.2547    40008.4474 
-5791031.1168  3293685.3030  1177046.5693   196423.2407  -510767.3656 
10692273.8005 -6974370.9402 -1413449.0656    60319.6594  1310487.5278 
  380778.1990   104045.1378   256904.9412   579605.3852 -1019476.3139 
 1893850.0540  -925188.4114  -941761.4088  -263334.3398   704687.2335 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [-0.1969, 0.3635], 'Col 2': [-0.2371, 0.112], 'Col 3': [-0.0481, 0.04], 'Col 4': [-0.009, 0.0197], 'Col 5': [-0.0347, 0.0446]}
Averages: {'Col 1': 0.0598, 'Col 2': -0.0354, 'Col 3': -0.0067, 'Col 4': 0.0025, 'Col 5': 0.0036}

 0.0552 -0.0239 -0.0023 -0.0068  0.0014 
-0.1969  0.1120  0.0400  0.0067 -0.0174 
 0.3635 -0.2371 -0.0481  0.0021  0.0446 
 0.0129  0.0035  0.0087  0.0197 -0.0347 
 0.0644 -0.0315 -0.0320 -0.0090  0.0240 

################
p:

Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [6, 80], 'Col 2': [44, 97], 'Col 3': [10, 35], 'Col 4': [5, 54], 'Col 5': [9, 83]}
Averages: {'Col 1': 51.4, 'Col 2': 73.6, 'Col 3': 21.6, 'Col 4': 26.4, 'Col 5': 56.8}

55 44 10 22 42 
80 74 13 36 77 
67 59 20  5  9 
 6 97 35 54 83 
49 94 30 15 73 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [44, 97], 'Col 2': [10, 35], 'Col 3': [5, 54], 'Col 4': [9, 83]}
Averages: {'Col 1': 73.5, 'Col 2': 23.75, 'Col 3': 24.0, 'Col 4': 51.75}

44 10 22 42 
59 20  5  9 
97 35 54 83 
94 30 15 73 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Numbers' range: {'Col 1': [44, 97], 'Col 2': [55, 55], 'Col 3': [10, 35], 'Col 4': [5, 54], 'Col 5': [9, 83]}
Averages: {'Col 1': 73.5, 'Col 2': 55.0, 'Col 3': 23.75, 'Col 4': 24.0, 'Col 5': 51.75}

44 55 10 22 42 
59 55 20  5  9 
97 55 35 54 83 
94 55 30 15 73 

################

r: 
Dimension: 5x4
Numbers' range: {'Col 1': [10, 55], 'Col 2': [5, 59], 'Col 3': [35, 97], 'Col 4': [15, 94]}
Averages: {'Col 1': 34.6, 'Col 2': 29.6, 'Col 3': 64.8, 'Col 4': 53.4}

44 59 97 94 
55 55 55 55 
10 20 35 30 
22  5 54 15 
42  9 83 73 

p==r.t:

True
################
id2:
 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


id2.addDim(2): 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 

id2.matrix:
 [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 

################
id4:


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################
id4: 
Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.addDim(10)):
 
Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Numbers' range: {'Col 1': [-2.4228, 9.7218], 'Col 2': [-6.6393, 29.1529], 'Col 3': [-16.3287, -4.3525]}
Averages: {'Col 1': 3.6495, 'Col 2': 11.2568, 'Col 3': -10.3406}

  9.7218  29.1529 -16.3287 
 -2.4228  -6.6393  -4.3525 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Numbers' range: {'Col 1': [1.2632, 1.7385], 'Col 2': [1.2643, 1.3336], 'Col 3': [0.4407, 1.2037]}
Averages: {'Col 1': 1.5009, 'Col 2': 1.299, 'Col 3': 0.8222}

1.7385 1.3336 0.4407 
1.2632 1.2643 1.2037 

################


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-997.0677, 1200.5163], 'Col 2': [-1031.3928, 1236.4719], 'Col 3': [-1237.3673, -611.7658], 'Col 4': [-1011.0751, 1248.2951], 'Col 5': [-1084.2631, 1191.0043], 'Col 6': [-1188.9857, 904.5266]}
Averages: {'Col 1': -440.2996, 'Col 2': 590.9996, 'Col 3': -879.4354, 'Col 4': -116.1452, 'Col 5': -82.1827, 'Col 6': 104.6423}

 1200.5163   146.5457  -800.5194   456.1812  -857.5348  -903.6614 
 -428.3949   900.4949  -718.9006  -736.4698  1191.0043   469.1718 
 -853.6262  1236.4719  -797.0434   -33.1002   496.6399   542.7158 
 -997.0677 -1031.3928  -611.7658 -1011.0751   357.5522 -1188.9857 
 -676.7327  1112.1045 -1237.3673  1248.2951  -596.4945   904.5266 
 -886.4927  1181.7736 -1111.0157  -620.7024 -1084.2631   804.0868 

f=f.intForm

Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-997, 1200], 'Col 2': [-1031, 1236], 'Col 3': [-1237, -611], 'Col 4': [-1011, 1248], 'Col 5': [-1084, 1191], 'Col 6': [-1188, 904]}
Averages: {'Col 1': -440.0, 'Col 2': 590.6667, 'Col 3': -879.0, 'Col 4': -116.0, 'Col 5': -82.1667, 'Col 6': 104.6667}

 1200   146  -800   456  -857  -903 
 -428   900  -718  -736  1191   469 
 -853  1236  -797   -33   496   542 
 -997 -1031  -611 -1011   357 -1188 
 -676  1112 -1237  1248  -596   904 
 -886  1181 -1111  -620 -1084   804 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-997.07, 1200.52], 'Col 2': [-1031.39, 1236.47], 'Col 3': [-1237.37, -611.77], 'Col 4': [-1011.08, 1248.3], 'Col 5': [-1084.26, 1191.0], 'Col 6': [-1188.99, 904.53]}
Averages: {'Col 1': -440.2983, 'Col 2': 590.9983, 'Col 3': -879.4367, 'Col 4': -116.145, 'Col 5': -82.1817, 'Col 6': 104.6433}

 1200.5200   146.5500  -800.5200   456.1800  -857.5300  -903.6600 
 -428.3900   900.4900  -718.9000  -736.4700  1191.0000   469.1700 
 -853.6300  1236.4700  -797.0400   -33.1000   496.6400   542.7200 
 -997.0700 -1031.3900  -611.7700 -1011.0800   357.5500 -1188.9900 
 -676.7300  1112.1000 -1237.3700  1248.3000  -596.4900   904.5300 
 -886.4900  1181.7700 -1111.0200  -620.7000 -1084.2600   804.0900 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-0.73, 0.52], 'Col 2': [-0.39, 0.77], 'Col 3': [-0.9, -0.02], 'Col 4': [-0.7, 0.3], 'Col 5': [-0.53, 0.64], 'Col 6': [-0.99, 0.72]}
Averages: {'Col 1': -0.2983, 'Col 2': 0.3317, 'Col 3': -0.4367, 'Col 4': -0.145, 'Col 5': -0.015, 'Col 6': -0.0233}

 0.5200  0.5500 -0.5200  0.1800 -0.5300 -0.6600 
-0.3900  0.4900 -0.9000 -0.4700  0.0000  0.1700 
-0.6300  0.4700 -0.0400 -0.1000  0.6400  0.7200 
-0.0700 -0.3900 -0.7700 -0.0800  0.5500 -0.9900 
-0.7300  0.1000 -0.3700  0.3000 -0.4900  0.5300 
-0.4900  0.7700 -0.0200 -0.7000 -0.2600  0.0900 

################
r.remove(r=2):

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [10, 44], 'Col 2': [5, 59], 'Col 3': [35, 97], 'Col 4': [15, 94]}
Averages: {'Col 1': 29.5, 'Col 2': 23.25, 'Col 3': 67.25, 'Col 4': 53.0}

44 59 97 94 
10 20 35 30 
22  5 54 15 
42  9 83 73 

r.rank: 4

r[0]=r[1][:]

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [10, 42], 'Col 2': [5, 20], 'Col 3': [35, 83], 'Col 4': [15, 73]}
Averages: {'Col 1': 21.0, 'Col 2': 13.5, 'Col 3': 51.75, 'Col 4': 37.0}

10 20 35 30 
10 20 35 30 
22  5 54 15 
42  9 83 73 

r.rank: 1
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 99], 'Col 2': [0, 99], 'Col 3': [0, 99], 'Col 4': [0, 99], 'Col 5': [0, 99], 'Col 6': [0, 99], 'Col 7': [0, 99], 'Col 8': [0, 99]}
Averages: {'Col 1': 12.375, 'Col 2': 12.375, 'Col 3': 12.375, 'Col 4': 12.375, 'Col 5': 12.375, 'Col 6': 12.375, 'Col 7': 12.375, 'Col 8': 12.375}

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e+=50:

Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [50, 149], 'Col 2': [50, 149], 'Col 3': [50, 149], 'Col 4': [50, 149], 'Col 5': [50, 149], 'Col 6': [50, 149], 'Col 7': [50, 149], 'Col 8': [50, 149]}
Averages: {'Col 1': 62.375, 'Col 2': 62.375, 'Col 3': 62.375, 'Col 4': 62.375, 'Col 5': 62.375, 'Col 6': 62.375, 'Col 7': 62.375, 'Col 8': 62.375}

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 1], 'Col 2': [0, 1], 'Col 3': [0, 1], 'Col 4': [0, 1], 'Col 5': [0, 1], 'Col 6': [0, 1], 'Col 7': [0, 1], 'Col 8': [0, 1]}
Averages: {'Col 1': 0.125, 'Col 2': 0.125, 'Col 3': 0.125, 'Col 4': 0.125, 'Col 5': 0.125, 'Col 6': 0.125, 'Col 7': 0.125, 'Col 8': 0.125}

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j

Dimension: 2x4
Numbers' range: {'Col 1': [-1, 0], 'Col 2': [0, 3], 'Col 3': [0, 0], 'Col 4': [-1, 0]}
Averages: {'Col 1': -0.5, 'Col 2': 1.5, 'Col 3': 0.0, 'Col 4': -0.5}

 0  0  0  0 
-1  3  0 -1 

################

f.roundForm(3)>f.roundForm(1)
False

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Numbers' range: {'Col 1': [9, 34], 'Col 2': [-52, 88], 'Col 3': [3, 33]}
Averages: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 18.0}

 34 -52  33 
  9  88   3 

################
validStr2:

Dimension: 5x2
Numbers' range: {'Col 1': [3, 352], 'Col 2': [-5, 45]}
Averages: {'Col 1': 138.2, 'Col 2': 34.6}

312  45 
 12  44 
352  45 
 12  44 
  3  -5 

################
validStr3:

Dimension: 1x4
Numbers' range: {'Col 1': [34, 34], 'Col 2': [5, 5], 'Col 3': [44, 44], 'Col 4': [659, 659]}
Averages: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Numbers' range: {'Col 1': [125, 193], 'Col 2': [30, 105], 'Col 3': [9, 55]}
Averages: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################
"""
# =============================================================================

