# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
o=Matrix(dim=8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4])
d=FMatrix([4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,ranged=[-1250,1250])
g=Matrix(dim=[3,6])
p=Matrix(5,ranged=[0,100])
q=FMatrix(4)
y=Matrix(3,listed=[3,5,7,8,3,4,5,2,5])
# =============================================================================
# String inputs Matrices
# =============================================================================
proj=Matrix(20,listed=projectGrid)
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""")

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix

#a=Matrix(0)
#v=Matrix()
#k=Matrix(dim=-1)
#l=Matrix(ranged=[0])
#m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
l=[proj,o,b,c,d,e,f,g,p,q,y]
for matrix in l:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.uptri.p")
f.uptri.p
print("f.lowtri.p")
f.lowtri.p
print("f-(f.lowtri@f.uptri)")#There is a %0.001 error due to rounding
print(f-(f.lowtri@f.uptri))
print('################')
      
print("g.dim:\n",g.dim)
print("g.inRange():\n",g.inRange())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.avg():",h.avg())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.rrechelon:",h.rrechelon)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print("p.sdev()")
print(p.sdev())
print('################\n')
      
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)

print("################")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('\n################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print(f)
print("f=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1][:]")
r[0]=r[1][:]
print(r)
print("r.rank:",r.rank)    

print("################")
      
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("################")
      
print("\nf.roundForm(3)>f.roundForm(1)")
print(f.roundForm(3)>f.roundForm(1))

# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Numbers' range: {'Col 1': [1, 88], 'Col 2': [2, 98], 'Col 3': [0, 99], 'Col 4': [5, 97], 'Col 5': [2, 99], 'Col 6': [0, 94], 'Col 7': [0, 99], 'Col 8': [1, 89], 'Col 9': [0, 97], 'Col 10': [17, 97], 'Col 11': [3, 99], 'Col 12': [5, 80], 'Col 13': [0, 98], 'Col 14': [8, 88], 'Col 15': [12, 84], 'Col 16': [1, 97], 'Col 17': [4, 89], 'Col 18': [2, 93], 'Col 19': [5, 98], 'Col 20': [0, 95]}
Averages: {'Col 1': 35.8, 'Col 2': 49.85, 'Col 3': 41.65, 'Col 4': 52.2, 'Col 5': 52.7, 'Col 6': 48.6, 'Col 7': 46.4, 'Col 8': 40.3, 'Col 9': 40.3, 'Col 10': 63.9, 'Col 11': 50.75, 'Col 12': 46.6, 'Col 13': 43.6, 'Col 14': 51.85, 'Col 15': 42.75, 'Col 16': 47.1, 'Col 17': 40.75, 'Col 18': 44.6, 'Col 19': 52.6, 'Col 20': 54.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Numbers' range: {'Col 1': [-5, -5]}
Averages: {'Col 1': -5.0}

-5 


Dimension: 2x4
Numbers' range: {'Col 1': [-3, 2], 'Col 2': [-3, 4], 'Col 3': [-3, 3], 'Col 4': [-3, -2]}
Averages: {'Col 1': -0.5, 'Col 2': 0.5, 'Col 3': 0.0, 'Col 4': -2.5}

 2  4  3 -2 
-3 -3 -3 -3 


Float Matrix
Dimension: 4x3
Numbers' range: {'Col 1': [-2.9382, 0.9472], 'Col 2': [-2.8856, 4.1484], 'Col 3': [-4.9496, 1.9977]}
Averages: {'Col 1': -0.6133, 'Col 2': 1.9568, 'Col 3': -1.4954}

-0.8656  4.1484 -4.9496 
 0.4035 -2.8856  1.9977 
-2.9382  2.7849 -1.9502 
 0.9472  3.7797 -1.0795 


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-1158.3351, 803.0452], 'Col 2': [-1021.2586, 1106.1768], 'Col 3': [-1220.7907, 888.6515], 'Col 4': [-1147.9823, 921.4478], 'Col 5': [-1213.9253, 527.0533], 'Col 6': [-1121.5696, -111.7798]}
Averages: {'Col 1': -156.0308, 'Col 2': 23.3152, 'Col 3': 26.5257, 'Col 4': -187.4553, 'Col 5': -343.1408, 'Col 6': -689.4211}

 -736.8004 -1021.2586   643.0639  -734.6028   425.9284  -799.0909 
  803.0452  -565.9931   888.6515   143.2130 -1009.5625  -928.2978 
  703.5266  1106.1768   583.2614 -1147.9823  -346.5400  -153.7923 
   94.2977   -37.0797 -1220.7907  -777.9301 -1213.9253  -111.7798 
 -641.9189  -324.1556  -145.9189   471.1225  -441.7986 -1021.9962 
-1158.3351   982.2012  -589.1130   921.4478   527.0533 -1121.5696 


Dimension: 3x6
Numbers' range: {'Col 1': [-2, 2], 'Col 2': [-2, 3], 'Col 3': [-4, 4], 'Col 4': [-5, 4], 'Col 5': [1, 3], 'Col 6': [-5, -2]}
Averages: {'Col 1': 0.0, 'Col 2': 1.0, 'Col 3': -1.0, 'Col 4': 0.0, 'Col 5': 2.3333, 'Col 6': -3.6667}

 0 -2 -3 -5  3 -5 
-2  2  4  1  3 -2 
 2  3 -4  4  1 -4 


Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [52, 100], 'Col 2': [53, 91], 'Col 3': [0, 97], 'Col 4': [0, 95], 'Col 5': [3, 89]}
Averages: {'Col 1': 79.0, 'Col 2': 74.6, 'Col 3': 53.6, 'Col 4': 51.0, 'Col 5': 59.2}

100  53   0  75  86 
 73  78  84  55  67 
 99  86   0  95  51 
 52  65  87   0   3 
 71  91  97  30  89 


Float Matrix
Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [0.988, 4.585], 'Col 2': [-0.1626, 1.6814], 'Col 3': [-4.7244, 3.974], 'Col 4': [-4.7724, 1.5173]}
Averages: {'Col 1': 2.9107, 'Col 2': 0.6373, 'Col 3': -1.0083, 'Col 4': -2.4092}

 2.4778  1.0091 -4.7244 -4.7724 
 4.5850 -0.1626 -2.0082  1.5173 
 0.9880  1.6814  3.9740 -4.3421 
 3.5920  0.0213 -1.2746 -2.0394 


Square matrix
Dimension: 3x3
Numbers' range: {'Col 1': [3, 8], 'Col 2': [2, 5], 'Col 3': [4, 7]}
Averages: {'Col 1': 5.3333, 'Col 2': 3.3333, 'Col 3': 5.3333}

3 5 7 
8 3 4 
5 2 5 

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Numbers' range: {'Col 1': [9, 34], 'Col 2': [-52, 88], 'Col 3': [-3, 33]}
Averages: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 15.0}

 34 -52  33 
  9  88  -3 


Dimension: 1x10
Numbers' range: {'Col 1': [312, 312], 'Col 2': [45, 45], 'Col 3': [12, 12], 'Col 4': [44, 44], 'Col 5': [352, 352], 'Col 6': [45, 45], 'Col 7': [12, 12], 'Col 8': [44, 44], 'Col 9': [3, 3], 'Col 10': [-5, -5]}
Averages: {'Col 1': 312.0, 'Col 2': 45.0, 'Col 3': 12.0, 'Col 4': 44.0, 'Col 5': 352.0, 'Col 6': 45.0, 'Col 7': 12.0, 'Col 8': 44.0, 'Col 9': 3.0, 'Col 10': -5.0}

312  45  12  44 352  45  12  44   3  -5 


Dimension: 1x4
Numbers' range: {'Col 1': [34, 34], 'Col 2': [5, 5], 'Col 3': [44, 44], 'Col 4': [659, 659]}
Averages: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 


Dimension: 22x3
Numbers' range: {'Col 1': [125, 193], 'Col 2': [30, 105], 'Col 3': [9, 55]}
Averages: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

 1 


Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Numbers' range: {'Col 1': [-2.9382, 0.9472], 'Col 2': [-2.8856, 4.1484], 'Col 3': [-4.9496, 1.9977]}
Averages: {'Col 1': -0.6133, 'Col 2': 1.9568, 'Col 3': -1.4954}

-0.8656  4.1484 -4.9496 
 0.4035 -2.8856  1.9977 
-2.9382  2.7849 -1.9502 
 0.9472  3.7797 -1.0795 

d.matrix:

[[-0.8656, 4.1484, -4.9496], [0.4035, -2.8856, 1.9977], [-2.9382, 2.7849, -1.9502], [0.9472, 3.7797, -1.0795]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Numbers' range: {'Col 1': [-1021.2586, 1106.1768], 'Col 2': [-1220.7907, 888.6515]}
Averages: {'Col 1': -129.5387, 'Col 2': 223.5465}

-1021.2586   643.0639 
 -565.9931   888.6515 
 1106.1768   583.2614 
  -37.0797 -1220.7907 
 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-1158.3351, 803.0452], 'Col 2': [-1021.2586, 1106.1768], 'Col 3': [-1220.7907, 888.6515], 'Col 4': [-1147.9823, 921.4478], 'Col 5': [-1213.9253, 527.0533], 'Col 6': [-1121.5696, -111.7798]}
Averages: {'Col 1': -156.0308, 'Col 2': 23.3152, 'Col 3': 26.5257, 'Col 4': -187.4553, 'Col 5': -343.1408, 'Col 6': -689.4211}

 -736.8004 -1021.2586   643.0639  -734.6028   425.9284  -799.0909 
  803.0452  -565.9931   888.6515   143.2130 -1009.5625  -928.2978 
  703.5266  1106.1768   583.2614 -1147.9823  -346.5400  -153.7923 
   94.2977   -37.0797 -1220.7907  -777.9301 -1213.9253  -111.7798 
 -641.9189  -324.1556  -145.9189   471.1225  -441.7986 -1021.9962 
-1158.3351   982.2012  -589.1130   921.4478   527.0533 -1121.5696 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-1158.3351, 803.0452], 'Col 2': [-1021.2586, 1106.1768], 'Col 3': [-1220.7907, 888.6515], 'Col 4': [-1147.9823, 921.4478], 'Col 5': [-1213.9253, 527.0533], 'Col 6': [-1121.5696, -111.7798]}
Averages: {'Col 1': -156.0308, 'Col 2': 23.3152, 'Col 3': 26.5257, 'Col 4': -187.4553, 'Col 5': -343.1408, 'Col 6': -689.4211}

 -736.8004 -1021.2586   643.0639  -734.6028   425.9284  -799.0909 
  803.0452  -565.9931   888.6515   143.2130 -1009.5625  -928.2978 
  703.5266  1106.1768   583.2614 -1147.9823  -346.5400  -153.7923 
   94.2977   -37.0797 -1220.7907  -777.9301 -1213.9253  -111.7798 
 -641.9189  -324.1556  -145.9189   471.1225  -441.7986 -1021.9962 
-1158.3351   982.2012  -589.1130   921.4478   527.0533 -1121.5696 

f.uptri.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-736.8004, 0], 'Col 2': [-1679.0718, 0], 'Col 3': [0, 1589.5325], 'Col 4': [-2672.4325, 0], 'Col 5': [-1256.4248, 425.9284], 'Col 6': [-1799.234, -799.0909]}
Averages: {'Col 1': -122.8001, 'Col 2': -450.0551, 'Col 3': 592.3219, 'Col 4': -994.1984, 'Col 5': -407.6479, 'Col 6': -1149.6133}

 -736.8004 -1021.2586   643.0639  -734.6028   425.9284  -799.0909 
    0.0000 -1679.0718  1589.5325  -657.4370  -545.3394 -1799.2340 
    0.0000     0.0000  1321.3349 -1900.7182    17.5942 -1057.2122 
    0.0000     0.0000     0.0000 -2672.4325 -1087.6457 -1072.2611 
    0.0000     0.0000     0.0000     0.0000 -1256.4248 -1326.9044 
    0.0000     0.0000     0.0000     0.0000     0.0000  -842.9771 

f.lowtri.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-1.0899, 1.5721], 'Col 2': [-1.5412, 1], 'Col 3': [-0.9818, 1], 'Col 4': [-0.8551, 1], 'Col 5': [0, 1.5317], 'Col 6': [0, 1]}
Averages: {'Col 1': 0.2118, 'Col 2': -0.1427, 'Col 3': 0.0887, 'Col 4': -0.016, 'Col 5': 0.4219, 'Col 6': 0.1667}

 1.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
-1.0899  1.0000  0.0000  0.0000  0.0000  0.0000 
-0.9548 -0.0780  1.0000  0.0000  0.0000  0.0000 
-0.1280  0.0999 -0.9818  1.0000  0.0000  0.0000 
 0.8712 -0.3368 -0.1292 -0.2410  1.0000  0.0000 
 1.5721 -1.5412  0.6430 -0.8551  1.5317  1.0000 

f-(f.lowtri@f.uptri)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [0.0, 0.0], 'Col 2': [0.0, 0.0], 'Col 3': [0.0, 0.0], 'Col 4': [0.0, 0.0], 'Col 5': [0.0, 0.0], 'Col 6': [0.0, 0.0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0}

0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 

################
g.dim:
 [3, 6]
g.inRange():
 {'Col 1': [-2, 2], 'Col 2': [-2, 3], 'Col 3': [-4, 4], 'Col 4': [-5, 4], 'Col 5': [1, 3], 'Col 6': [-5, -2]}
g: 
Dimension: 3x6
Numbers' range: {'Col 1': [-2, 2], 'Col 2': [-2, 3], 'Col 3': [-4, 4], 'Col 4': [-5, 4], 'Col 5': [1, 3], 'Col 6': [-5, -2]}
Averages: {'Col 1': 0.0, 'Col 2': 1.0, 'Col 3': -1.0, 'Col 4': 0.0, 'Col 5': 2.3333, 'Col 6': -3.6667}

 0 -2 -3 -5  3 -5 
-2  2  4  1  3 -2 
 2  3 -4  4  1 -4 

g.remove(3):

Dimension: 2x6
Numbers' range: {'Col 1': [-2, 0], 'Col 2': [-2, 2], 'Col 3': [-3, 4], 'Col 4': [-5, 1], 'Col 5': [3, 3], 'Col 6': [-5, -2]}
Averages: {'Col 1': -1.0, 'Col 2': 0.0, 'Col 3': 0.5, 'Col 4': -2.0, 'Col 5': 3.0, 'Col 6': -3.5}

 0 -2 -3 -5  3 -5 
-2  2  4  1  3 -2 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [5, 97], 'Col 2': [25, 94], 'Col 3': [20, 99], 'Col 4': [7, 88], 'Col 5': [3, 55], 'Col 6': [44, 97], 'Col 7': [33, 99]}
Averages: {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.avg(): {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

h.det: 1287494735579.9985

h.rank: 7

h.rrechelon: 
Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [0, 1.0], 'Col 2': [0, 1.0], 'Col 3': [0, 1.0], 'Col 4': [0, 1.0], 'Col 5': [0, 1.0], 'Col 6': [0, 1.0], 'Col 7': [0, 1.0]}
Averages: {'Col 1': 0.1429, 'Col 2': 0.1429, 'Col 3': 0.1429, 'Col 4': 0.1429, 'Col 5': 0.1429, 'Col 6': 0.1429, 'Col 7': 0.1429}

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 


h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [-0.0195, 0.0398], 'Col 2': [-0.0745, 0.0605], 'Col 3': [-0.0501, 0.071], 'Col 4': [-0.0545, 0.063], 'Col 5': [-0.0317, 0.0197], 'Col 6': [-0.0622, 0.0471], 'Col 7': [-0.0487, 0.041]}
Averages: {'Col 1': 0.0046, 'Col 2': -0.0086, 'Col 3': 0.0091, 'Col 4': 0.0085, 'Col 5': -0.0032, 'Col 6': -0.0081, 'Col 7': -0.0052}

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0014  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [35, 97], 'Col 2': [25, 71], 'Col 3': [20, 99], 'Col 4': [3, 55], 'Col 5': [44, 97], 'Col 6': [33, 99]}
Averages: {'Col 1': 65.8333, 'Col 2': 43.0, 'Col 3': 50.1667, 'Col 4': 21.3333, 'Col 5': 66.8333, 'Col 6': 65.5}

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Numbers' range: {'Col 1': [-2, 0], 'Col 2': [-2, 2], 'Col 3': [-3, 4], 'Col 4': [-5, 1]}
Averages: {'Col 1': -1.0, 'Col 2': 0.0, 'Col 3': 0.5, 'Col 4': -2.0}

 0 -2 -3 -5 
-2  2  4  1 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[0, -2, -3, -5], [-2, 2, 4, 1]],ranged=[-5, 5],randomFill=1)

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Numbers' range: {'Col 1': [8, 81], 'Col 2': [2, 70], 'Col 3': [16, 99], 'Col 4': [23, 97], 'Col 5': [4, 55], 'Col 6': [15, 81], 'Col 7': [0, 63], 'Col 8': [29, 89], 'Col 9': [0, 93], 'Col 10': [24, 92], 'Col 11': [4, 68], 'Col 12': [5, 67], 'Col 13': [1, 98], 'Col 14': [32, 88], 'Col 15': [30, 69]}
Averages: {'Col 1': 42.4, 'Col 2': 40.2, 'Col 3': 52.6, 'Col 4': 60.8, 'Col 5': 33.0, 'Col 6': 60.4, 'Col 7': 21.2, 'Col 8': 51.4, 'Col 9': 52.6, 'Col 10': 69.8, 'Col 11': 33.0, 'Col 12': 44.4, 'Col 13': 36.2, 'Col 14': 56.2, 'Col 15': 49.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [52, 100], 'Col 2': [53, 91], 'Col 3': [0, 97], 'Col 4': [0, 95], 'Col 5': [3, 89]}
Averages: {'Col 1': 79.0, 'Col 2': 74.6, 'Col 3': 53.6, 'Col 4': 51.0, 'Col 5': 59.2}

100  53   0  75  86 
 73  78  84  55  67 
 99  86   0  95  51 
 52  65  87   0   3 
 71  91  97  30  89 

p.det:
 723444540.0000002

p.adj:
 
Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [-14632000.0, 17393240.0], 'Col 2': [-19450555.0, 25172755.0], 'Col 3': [-7883170.0, 16720175.0], 'Col 4': [-8784254.0, 14932160.0], 'Col 5': [-13920426.0, 19292130.0]}
Averages: {'Col 1': -81068.0, 'Col 2': 2889991.0, 'Col 3': 69152.2, 'Col 4': -579066.8, 'Col 5': -491665.2}

 17393240.0000  -5299990.0000  -7883170.0000  14932160.0000  -8803080.0000 
-14632000.0000 -19450555.0000  16720175.0000  -2729770.0000  19292130.0000 
   441300.0000  17830980.0000  -7667280.0000   1706520.0000  -9513660.0000 
 -6354020.0000  25172755.0000   2453761.0000  -8784254.0000 -13920426.0000 
  2746140.0000  -3803235.0000  -3277725.0000  -8019990.0000  10486710.0000 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [-0.0202, 0.024], 'Col 2': [-0.0269, 0.0348], 'Col 3': [-0.0109, 0.0231], 'Col 4': [-0.0121, 0.0206], 'Col 5': [-0.0192, 0.0267]}
Averages: {'Col 1': -0.0001, 'Col 2': 0.004, 'Col 3': 0.0001, 'Col 4': -0.0008, 'Col 5': -0.0007}

 0.0240 -0.0073 -0.0109  0.0206 -0.0122 
-0.0202 -0.0269  0.0231 -0.0038  0.0267 
 0.0006  0.0246 -0.0106  0.0024 -0.0132 
-0.0088  0.0348  0.0034 -0.0121 -0.0192 
 0.0038 -0.0053 -0.0045 -0.0111  0.0145 

################
p:

Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [52, 100], 'Col 2': [53, 91], 'Col 3': [0, 97], 'Col 4': [0, 95], 'Col 5': [3, 89]}
Averages: {'Col 1': 79.0, 'Col 2': 74.6, 'Col 3': 53.6, 'Col 4': 51.0, 'Col 5': 59.2}

100  53   0  75  86 
 73  78  84  55  67 
 99  86   0  95  51 
 52  65  87   0   3 
 71  91  97  30  89 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [53, 91], 'Col 2': [0, 97], 'Col 3': [0, 95], 'Col 4': [3, 89]}
Averages: {'Col 1': 73.75, 'Col 2': 46.0, 'Col 3': 50.0, 'Col 4': 57.25}

53  0 75 86 
86  0 95 51 
65 87  0  3 
91 97 30 89 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Numbers' range: {'Col 1': [53, 91], 'Col 2': [55, 55], 'Col 3': [0, 97], 'Col 4': [0, 95], 'Col 5': [3, 89]}
Averages: {'Col 1': 73.75, 'Col 2': 55.0, 'Col 3': 46.0, 'Col 4': 50.0, 'Col 5': 57.25}

53 55  0 75 86 
86 55  0 95 51 
65 55 87  0  3 
91 55 97 30 89 

p.sdev()
{'Col 1': 17.839562774911272, 'Col 2': 0.0, 'Col 3': 53.27288240746881, 'Col 4': 43.01162633521314, 'Col 5': 40.06973088670965}
################

r: 
Dimension: 5x4
Numbers' range: {'Col 1': [0, 86], 'Col 2': [0, 95], 'Col 3': [0, 87], 'Col 4': [30, 97]}
Averages: {'Col 1': 53.8, 'Col 2': 57.4, 'Col 3': 42.0, 'Col 4': 72.4}

53 86 65 91 
55 55 55 55 
 0  0 87 97 
75 95  0 30 
86 51  3 89 

p==r.t:

True
################
id2:
 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


id2.addDim(2): 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 

id2.matrix:
 [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 

################
id4:


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################
id4: 
Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.addDim(10)):
 
Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Numbers' range: {'Col 1': [-10.8262, 7.3593], 'Col 2': [-23.4822, -2.4503], 'Col 3': [-5.6, 17.9448]}
Averages: {'Col 1': -1.7334, 'Col 2': -12.9662, 'Col 3': 6.1724}

-10.8262  -2.4503  -5.6000 
  7.3593 -23.4822  17.9448 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Numbers' range: {'Col 1': [0.4503, 0.4982], 'Col 2': [0.6116, 1.9648], 'Col 3': [1.384, 1.9526]}
Averages: {'Col 1': 0.4742, 'Col 2': 1.2882, 'Col 3': 1.6683}

0.4503 1.9648 1.3840 
0.4982 0.6116 1.9526 

################


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-1158.3351, 803.0452], 'Col 2': [-1021.2586, 1106.1768], 'Col 3': [-1220.7907, 888.6515], 'Col 4': [-1147.9823, 921.4478], 'Col 5': [-1213.9253, 527.0533], 'Col 6': [-1121.5696, -111.7798]}
Averages: {'Col 1': -156.0308, 'Col 2': 23.3152, 'Col 3': 26.5257, 'Col 4': -187.4553, 'Col 5': -343.1408, 'Col 6': -689.4211}

 -736.8004 -1021.2586   643.0639  -734.6028   425.9284  -799.0909 
  803.0452  -565.9931   888.6515   143.2130 -1009.5625  -928.2978 
  703.5266  1106.1768   583.2614 -1147.9823  -346.5400  -153.7923 
   94.2977   -37.0797 -1220.7907  -777.9301 -1213.9253  -111.7798 
 -641.9189  -324.1556  -145.9189   471.1225  -441.7986 -1021.9962 
-1158.3351   982.2012  -589.1130   921.4478   527.0533 -1121.5696 

f=f.intForm

Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-1158, 803], 'Col 2': [-1021, 1106], 'Col 3': [-1220, 888], 'Col 4': [-1147, 921], 'Col 5': [-1213, 527], 'Col 6': [-1121, -111]}
Averages: {'Col 1': -155.8333, 'Col 2': 23.5, 'Col 3': 26.6667, 'Col 4': -187.1667, 'Col 5': -342.8333, 'Col 6': -688.8333}

 -736 -1021   643  -734   425  -799 
  803  -565   888   143 -1009  -928 
  703  1106   583 -1147  -346  -153 
   94   -37 -1220  -777 -1213  -111 
 -641  -324  -145   471  -441 -1021 
-1158   982  -589   921   527 -1121 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-1158.34, 803.05], 'Col 2': [-1021.26, 1106.18], 'Col 3': [-1220.79, 888.65], 'Col 4': [-1147.98, 921.45], 'Col 5': [-1213.93, 527.05], 'Col 6': [-1121.57, -111.78]}
Averages: {'Col 1': -156.03, 'Col 2': 23.315, 'Col 3': 26.525, 'Col 4': -187.455, 'Col 5': -343.1417, 'Col 6': -689.4217}

 -736.8000 -1021.2600   643.0600  -734.6000   425.9300  -799.0900 
  803.0500  -565.9900   888.6500   143.2100 -1009.5600  -928.3000 
  703.5300  1106.1800   583.2600 -1147.9800  -346.5400  -153.7900 
   94.3000   -37.0800 -1220.7900  -777.9300 -1213.9300  -111.7800 
 -641.9200  -324.1600  -145.9200   471.1200  -441.8000 -1022.0000 
-1158.3400   982.2000  -589.1100   921.4500   527.0500 -1121.5700 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-0.92, 0.53], 'Col 2': [-0.99, 0.2], 'Col 3': [-0.92, 0.65], 'Col 4': [-0.98, 0.45], 'Col 5': [-0.93, 0.93], 'Col 6': [-1.0, -0.09]}
Averages: {'Col 1': -0.1967, 'Col 2': -0.185, 'Col 3': -0.1417, 'Col 4': -0.2883, 'Col 5': -0.3083, 'Col 6': -0.5883}

-0.8000 -0.2600  0.0600 -0.6000  0.9300 -0.0900 
 0.0500 -0.9900  0.6500  0.2100 -0.5600 -0.3000 
 0.5300  0.1800  0.2600 -0.9800 -0.5400 -0.7900 
 0.3000 -0.0800 -0.7900 -0.9300 -0.9300 -0.7800 
-0.9200 -0.1600 -0.9200  0.1200 -0.8000 -1.0000 
-0.3400  0.2000 -0.1100  0.4500  0.0500 -0.5700 

################
r.remove(r=2):

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [0, 86], 'Col 2': [0, 95], 'Col 3': [0, 87], 'Col 4': [30, 97]}
Averages: {'Col 1': 53.5, 'Col 2': 58.0, 'Col 3': 38.75, 'Col 4': 76.75}

53 86 65 91 
 0  0 87 97 
75 95  0 30 
86 51  3 89 

r.rank: 4

r[0]=r[1][:]

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [0, 86], 'Col 2': [0, 95], 'Col 3': [0, 87], 'Col 4': [30, 97]}
Averages: {'Col 1': 40.25, 'Col 2': 36.5, 'Col 3': 44.25, 'Col 4': 78.25}

 0  0 87 97 
 0  0 87 97 
75 95  0 30 
86 51  3 89 

Determinant is 0, can't get lower/upper triangular matrices
r.rank: 3
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 99], 'Col 2': [0, 99], 'Col 3': [0, 99], 'Col 4': [0, 99], 'Col 5': [0, 99], 'Col 6': [0, 99], 'Col 7': [0, 99], 'Col 8': [0, 99]}
Averages: {'Col 1': 12.375, 'Col 2': 12.375, 'Col 3': 12.375, 'Col 4': 12.375, 'Col 5': 12.375, 'Col 6': 12.375, 'Col 7': 12.375, 'Col 8': 12.375}

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e+=50:

Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [50, 149], 'Col 2': [50, 149], 'Col 3': [50, 149], 'Col 4': [50, 149], 'Col 5': [50, 149], 'Col 6': [50, 149], 'Col 7': [50, 149], 'Col 8': [50, 149]}
Averages: {'Col 1': 62.375, 'Col 2': 62.375, 'Col 3': 62.375, 'Col 4': 62.375, 'Col 5': 62.375, 'Col 6': 62.375, 'Col 7': 62.375, 'Col 8': 62.375}

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 1], 'Col 2': [0, 1], 'Col 3': [0, 1], 'Col 4': [0, 1], 'Col 5': [0, 1], 'Col 6': [0, 1], 'Col 7': [0, 1], 'Col 8': [0, 1]}
Averages: {'Col 1': 0.125, 'Col 2': 0.125, 'Col 3': 0.125, 'Col 4': 0.125, 'Col 5': 0.125, 'Col 6': 0.125, 'Col 7': 0.125, 'Col 8': 0.125}

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j
Division by zero! Can't get modular
None
################

f.roundForm(3)>f.roundForm(1)
False

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Numbers' range: {'Col 1': [9, 34], 'Col 2': [-52, 88], 'Col 3': [-3, 33]}
Averages: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 15.0}

 34 -52  33 
  9  88  -3 

################
validStr2:

Dimension: 1x10
Numbers' range: {'Col 1': [312, 312], 'Col 2': [45, 45], 'Col 3': [12, 12], 'Col 4': [44, 44], 'Col 5': [352, 352], 'Col 6': [45, 45], 'Col 7': [12, 12], 'Col 8': [44, 44], 'Col 9': [3, 3], 'Col 10': [-5, -5]}
Averages: {'Col 1': 312.0, 'Col 2': 45.0, 'Col 3': 12.0, 'Col 4': 44.0, 'Col 5': 352.0, 'Col 6': 45.0, 'Col 7': 12.0, 'Col 8': 44.0, 'Col 9': 3.0, 'Col 10': -5.0}

312  45  12  44 352  45  12  44   3  -5 

################
validStr3:

Dimension: 1x4
Numbers' range: {'Col 1': [34, 34], 'Col 2': [5, 5], 'Col 3': [44, 44], 'Col 4': [659, 659]}
Averages: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Numbers' range: {'Col 1': [125, 193], 'Col 2': [30, 105], 'Col 3': [9, 55]}
Averages: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################
"""
# =============================================================================

