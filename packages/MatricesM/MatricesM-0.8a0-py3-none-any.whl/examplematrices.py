# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,CMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
proj=Matrix(listed=projectGrid)
o=Matrix(dim=8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4])
d=FMatrix([4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,ranged=[-1250,1250])
g=Matrix(dim=[3,6])
p=Matrix(5,ranged=[0,100])
q=FMatrix(4)

# =============================================================================
# String inputs Matrices
# =============================================================================
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""")

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix

#a=Matrix(0)
#v=Matrix()
#k=Matrix(dim=-1)
#l=Matrix(ranged=[0])
#m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
for matrix in [proj,o,b,c,d,e,f,g,p,q]:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.uptri.p")
f.uptri.p
print('################')
      
print("g.dim:\n",g.dim)
print("g.inRange():\n",g.inRange())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.avg():",h.avg())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print('################\n')
      
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)

print("################")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('\n################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print(f)
print("f=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1][:]")
r[0]=r[1][:]
print(r)
print("r.rank:",r.rank)    

print("################")
      
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("################")
      
print("\nf.roundForm(3)>f.roundForm(1)")
print(f.roundForm(3)>f.roundForm(1))

# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Numbers' range: {'Col 1': [1, 88], 'Col 2': [2, 98], 'Col 3': [0, 99], 'Col 4': [5, 97], 'Col 5': [2, 99], 'Col 6': [0, 94], 'Col 7': [0, 99], 'Col 8': [1, 89], 'Col 9': [0, 97], 'Col 10': [17, 97], 'Col 11': [3, 99], 'Col 12': [5, 80], 'Col 13': [0, 98], 'Col 14': [8, 88], 'Col 15': [12, 84], 'Col 16': [1, 97], 'Col 17': [4, 89], 'Col 18': [2, 93], 'Col 19': [5, 98], 'Col 20': [0, 95]}
Averages: {'Col 1': 35.8, 'Col 2': 49.85, 'Col 3': 41.65, 'Col 4': 52.2, 'Col 5': 52.7, 'Col 6': 48.6, 'Col 7': 46.4, 'Col 8': 40.3, 'Col 9': 40.3, 'Col 10': 63.9, 'Col 11': 50.75, 'Col 12': 46.6, 'Col 13': 43.6, 'Col 14': 51.85, 'Col 15': 42.75, 'Col 16': 47.1, 'Col 17': 40.75, 'Col 18': 44.6, 'Col 19': 52.6, 'Col 20': 54.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Numbers' range: {'Col 1': [2, 2]}
Averages: {'Col 1': 2.0}

2 


Dimension: 2x4
Numbers' range: {'Col 1': [-4, 3], 'Col 2': [3, 4], 'Col 3': [2, 4], 'Col 4': [2, 3]}
Averages: {'Col 1': -0.5, 'Col 2': 3.5, 'Col 3': 3.0, 'Col 4': 2.5}

-4  4  2  3 
 3  3  4  2 


Float Matrix
Dimension: 4x3
Numbers' range: {'Col 1': [-2.6277, 0.6496], 'Col 2': [-1.5668, 1.0794], 'Col 3': [-4.3405, 2.9999]}
Averages: {'Col 1': -1.0249, 'Col 2': -0.3621, 'Col 3': -0.9884}

-2.6277  1.0794 -4.3405 
 0.0000  0.0000  2.9999 
 0.6496 -1.5668 -1.9888 
-2.1216 -0.9611 -0.6244 


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 0.0, 'Col 2': 0.0, 'Col 3': 0.0, 'Col 4': 0.0, 'Col 5': 0.0, 'Col 6': 0.0, 'Col 7': 0.0, 'Col 8': 0.0}

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-841.5469, 495.3673], 'Col 2': [-525.9984, 586.389], 'Col 3': [-402.0273, 385.9392], 'Col 4': [-880.0562, -53.4572], 'Col 5': [-804.5972, 528.3348], 'Col 6': [-815.8729, 514.9801]}
Averages: {'Col 1': -85.4941, 'Col 2': -73.7148, 'Col 3': -1.2768, 'Col 4': -442.878, 'Col 5': -112.1193, 'Col 6': -66.9574}

-255.6174   -6.5561  -20.9706 -645.3924  528.3348 -408.4529 
-841.5469  586.3890  267.3274  -53.4572 -337.2757   56.1306 
   4.0459 -525.9984  385.9392 -880.0562   83.4057  514.9801 
 495.3673   25.9626 -303.4265 -627.2096 -804.5972  177.0823 
 308.2639 -512.2159 -402.0273 -292.1546  380.7943 -815.8729 
-223.4775   -9.8699   65.4972 -158.9980 -523.3778   74.3882 


Dimension: 3x6
Numbers' range: {'Col 1': [-5, 5], 'Col 2': [-5, 5], 'Col 3': [-4, 4], 'Col 4': [-3, 1], 'Col 5': [2, 3], 'Col 6': [0, 4]}
Averages: {'Col 1': 1.3333, 'Col 2': 1.0, 'Col 3': 1.0, 'Col 4': -1.0, 'Col 5': 2.3333, 'Col 6': 2.6667}

-5 -5  3 -3  2  4 
 4  3 -4  1  3  0 
 5  5  4 -1  2  4 


Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [18, 84], 'Col 2': [6, 75], 'Col 3': [6, 91], 'Col 4': [1, 94], 'Col 5': [8, 91]}
Averages: {'Col 1': 36.2, 'Col 2': 50.6, 'Col 3': 41.0, 'Col 4': 48.6, 'Col 5': 50.2}

18 75 65 65 28 
18  6  6 94 71 
84 59 91 43  8 
40 50  8  1 53 
21 63 35 40 91 


Float Matrix
Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [-0.8466, 1.3108], 'Col 2': [-0.9165, 0.6867], 'Col 3': [-2.0375, 1.5489], 'Col 4': [-0.9069, 1.2118]}
Averages: {'Col 1': -0.0974, 'Col 2': -0.1249, 'Col 3': 0.1736, 'Col 4': -0.2282}

-0.2678  0.6867  0.4219 -0.8500 
-0.5860 -0.9165 -2.0375 -0.3677 
 1.3108  0.0000  1.5489  1.2118 
-0.8466 -0.2697  0.7610 -0.9069 

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Numbers' range: {'Col 1': [9, 34], 'Col 2': [-52, 88], 'Col 3': [3, 33]}
Averages: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 18.0}

 34 -52  33 
  9  88   3 


Dimension: 5x2
Numbers' range: {'Col 1': [3, 352], 'Col 2': [-5, 45]}
Averages: {'Col 1': 138.2, 'Col 2': 34.6}

312  45 
 12  44 
352  45 
 12  44 
  3  -5 


Dimension: 1x4
Numbers' range: {'Col 1': [34, 34], 'Col 2': [5, 5], 'Col 3': [44, 44], 'Col 4': [659, 659]}
Averages: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 


Dimension: 22x3
Numbers' range: {'Col 1': [125, 193], 'Col 2': [30, 105], 'Col 3': [9, 55]}
Averages: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

 1 


Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Numbers' range: {'Col 1': [-2.6277, 0.6496], 'Col 2': [-1.5668, 1.0794], 'Col 3': [-4.3405, 2.9999]}
Averages: {'Col 1': -1.0249, 'Col 2': -0.3621, 'Col 3': -0.9884}

-2.6277  1.0794 -4.3405 
 0.0000  0.0000  2.9999 
 0.6496 -1.5668 -1.9888 
-2.1216 -0.9611 -0.6244 

d.matrix:

[[-2.6277, 1.0794, -4.3405], [0.0, 0.0, 2.9999], [0.6496, -1.5668, -1.9888], [-2.1216, -0.9611, -0.6244]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Numbers' range: {'Col 1': [-525.9984, 586.389], 'Col 2': [-303.4265, 385.9392]}
Averages: {'Col 1': 19.9493, 'Col 2': 82.2174}

  -6.5561  -20.9706 
 586.3890  267.3274 
-525.9984  385.9392 
  25.9626 -303.4265 
 


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-841.5469, 495.3673], 'Col 2': [-525.9984, 586.389], 'Col 3': [-402.0273, 385.9392], 'Col 4': [-880.0562, -53.4572], 'Col 5': [-804.5972, 528.3348], 'Col 6': [-815.8729, 514.9801]}
Averages: {'Col 1': -85.4941, 'Col 2': -73.7148, 'Col 3': -1.2768, 'Col 4': -442.878, 'Col 5': -112.1193, 'Col 6': -66.9574}

-255.6174   -6.5561  -20.9706 -645.3924  528.3348 -408.4529 
-841.5469  586.3890  267.3274  -53.4572 -337.2757   56.1306 
   4.0459 -525.9984  385.9392 -880.0562   83.4057  514.9801 
 495.3673   25.9626 -303.4265 -627.2096 -804.5972  177.0823 
 308.2639 -512.2159 -402.0273 -292.1546  380.7943 -815.8729 
-223.4775   -9.8699   65.4972 -158.9980 -523.3778   74.3882 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-841.5469, 495.3673], 'Col 2': [-525.9984, 586.389], 'Col 3': [-402.0273, 385.9392], 'Col 4': [-880.0562, -53.4572], 'Col 5': [-804.5972, 528.3348], 'Col 6': [-815.8729, 514.9801]}
Averages: {'Col 1': -85.4941, 'Col 2': -73.7148, 'Col 3': -1.2768, 'Col 4': -442.878, 'Col 5': -112.1193, 'Col 6': -66.9574}

-255.6174   -6.5561  -20.9706 -645.3924  528.3348 -408.4529 
-841.5469  586.3890  267.3274  -53.4572 -337.2757   56.1306 
   4.0459 -525.9984  385.9392 -880.0562   83.4057  514.9801 
 495.3673   25.9626 -303.4265 -627.2096 -804.5972  177.0823 
 308.2639 -512.2159 -402.0273 -292.1546  380.7943 -815.8729 
-223.4775   -9.8699   65.4972 -158.9980 -523.3778   74.3882 

f.uptri.p

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-255.6174, 0], 'Col 2': [-6.5561, 607.9731], 'Col 3': [-20.9706, 676.6785], 'Col 4': [-1454.6287, 2071.312], 'Col 5': [-2076.6663, 528.3348], 'Col 6': [-408.4529, 1720.719]}
Averages: {'Col 1': -42.6029, 'Col 2': 100.2362, 'Col 3': 165.3458, 'Col 4': 145.5674, 'Col 5': -893.9671, 'Col 6': 564.8858}

 -255.6174    -6.5561   -20.9706  -645.3924   528.3348  -408.4529 
    0.0000   607.9731   336.3671  2071.3120 -2076.6663  1400.8445 
    0.0000     0.0000   676.6785   902.1135 -1705.2500  1720.7190 
    0.0000     0.0000     0.0000 -1454.6287  -620.9807   248.5579 
    0.0000     0.0000     0.0000     0.0000 -1489.2402   396.5119 
    0.0000     0.0000     0.0000     0.0000     0.0000    31.1344 

################
g.dim:
 [3, 6]
g.inRange():
 {'Col 1': [-5, 5], 'Col 2': [-5, 5], 'Col 3': [-4, 4], 'Col 4': [-3, 1], 'Col 5': [2, 3], 'Col 6': [0, 4]}
g: 
Dimension: 3x6
Numbers' range: {'Col 1': [-5, 5], 'Col 2': [-5, 5], 'Col 3': [-4, 4], 'Col 4': [-3, 1], 'Col 5': [2, 3], 'Col 6': [0, 4]}
Averages: {'Col 1': 1.3333, 'Col 2': 1.0, 'Col 3': 1.0, 'Col 4': -1.0, 'Col 5': 2.3333, 'Col 6': 2.6667}

-5 -5  3 -3  2  4 
 4  3 -4  1  3  0 
 5  5  4 -1  2  4 

g.remove(3):

Dimension: 2x6
Numbers' range: {'Col 1': [-5, 5], 'Col 2': [-5, 5], 'Col 3': [-4, 4], 'Col 4': [-3, 1], 'Col 5': [2, 3], 'Col 6': [0, 4]}
Averages: {'Col 1': -0.5, 'Col 2': -1.0, 'Col 3': -0.5, 'Col 4': -1.0, 'Col 5': 2.5, 'Col 6': 2.0}

-5 -5  3 -3  2  4 
 4  3 -4  1  3  0 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [5, 97], 'Col 2': [25, 94], 'Col 3': [20, 99], 'Col 4': [7, 88], 'Col 5': [3, 55], 'Col 6': [44, 97], 'Col 7': [33, 99]}
Averages: {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.avg(): {'Col 1': 57.1429, 'Col 2': 50.2857, 'Col 3': 49.7143, 'Col 4': 44.2857, 'Col 5': 22.2857, 'Col 6': 67.7143, 'Col 7': 69.2857}

h.det: 1287482081136.7107

h.rank: 7

h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Numbers' range: {'Col 1': [-0.0195, 0.0398], 'Col 2': [-0.0745, 0.0605], 'Col 3': [-0.0501, 0.071], 'Col 4': [-0.0545, 0.063], 'Col 5': [-0.0317, 0.0197], 'Col 6': [-0.0622, 0.0471], 'Col 7': [-0.0487, 0.041]}
Averages: {'Col 1': 0.0046, 'Col 2': -0.0086, 'Col 3': 0.0091, 'Col 4': 0.0085, 'Col 5': -0.0032, 'Col 6': -0.0081, 'Col 7': -0.0052}

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [5, 97], 'Col 2': [25, 94], 'Col 3': [20, 99], 'Col 4': [7, 88], 'Col 5': [3, 55], 'Col 6': [44, 97], 'Col 7': [33, 99]}
Averages: {'Col 1': 65.8333, 'Col 2': 43.0, 'Col 3': 50.1667, 'Col 4': 21.3333, 'Col 5': 66.8333, 'Col 6': 65.5}

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Numbers' range: {'Col 1': [-5, 4], 'Col 2': [-5, 3], 'Col 3': [-4, 3], 'Col 4': [-3, 1]}
Averages: {'Col 1': -0.5, 'Col 2': -1.0, 'Col 3': -0.5, 'Col 4': -1.0}

-5 -5  3 -3 
 4  3 -4  1 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[-5, -5, 3, -3], [4, 3, -4, 1]],inRange={'Col 1': [-5, 4], 'Col 2': [-5, 3], 'Col 3': [-4, 3], 'Col 4': [-3, 1]},randomFill=1)

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Numbers' range: {'Col 1': [8, 81], 'Col 2': [2, 70], 'Col 3': [16, 99], 'Col 4': [23, 97], 'Col 5': [4, 55], 'Col 6': [15, 81], 'Col 7': [0, 63], 'Col 8': [29, 89], 'Col 9': [0, 93], 'Col 10': [24, 92], 'Col 11': [4, 68], 'Col 12': [5, 67], 'Col 13': [1, 98], 'Col 14': [32, 88], 'Col 15': [30, 69]}
Averages: {'Col 1': 42.4, 'Col 2': 40.2, 'Col 3': 52.6, 'Col 4': 60.8, 'Col 5': 33.0, 'Col 6': 60.4, 'Col 7': 21.2, 'Col 8': 51.4, 'Col 9': 52.6, 'Col 10': 69.8, 'Col 11': 33.0, 'Col 12': 44.4, 'Col 13': 36.2, 'Col 14': 56.2, 'Col 15': 49.4}

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [18, 84], 'Col 2': [6, 75], 'Col 3': [6, 91], 'Col 4': [1, 94], 'Col 5': [8, 91]}
Averages: {'Col 1': 36.2, 'Col 2': 50.6, 'Col 3': 41.0, 'Col 4': 48.6, 'Col 5': 50.2}

18 75 65 65 28 
18  6  6 94 71 
84 59 91 43  8 
40 50  8  1 53 
21 63 35 40 91 

p.det:
 1265880995.9953144

p.adj:
 
Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [-16288660.9447, 25658774.1443], 'Col 2': [-11139882.5879, 13651118.6292], 'Col 3': [-12839340.9833, 14989027.483], 'Col 4': [-37884332.6529, 27537103.6702], 'Col 5': [-19933008.5289, 33742176.5555]}
Averages: {'Col 1': 91199.8903, 'Col 2': 1125870.3397, 'Col 3': 2090691.1697, 'Col 4': 724624.0358, 'Col 5': 1269843.9931}

 -8020842.7773   7756343.3205   9637711.3974  19954724.7039 -16052927.0768 
 25658774.1443  -3680266.2157 -12839340.9833  27537103.6702 -19933008.5289 
-13987336.4993 -11139882.5879  14989027.4830 -37884332.6529  33742176.5555 
 13094065.5287  13651118.6292  -3985491.4914   5556031.4713 -17565370.2497 
-16288660.9447   -957961.4478   2651549.4430 -11540407.0137  26158349.2653 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [-0.0129, 0.0203], 'Col 2': [-0.0088, 0.0108], 'Col 3': [-0.0101, 0.0118], 'Col 4': [-0.0299, 0.0218], 'Col 5': [-0.0157, 0.0267]}
Averages: {'Col 1': 0.0001, 'Col 2': 0.0009, 'Col 3': 0.0017, 'Col 4': 0.0006, 'Col 5': 0.001}

-0.0063  0.0061  0.0076  0.0158 -0.0127 
 0.0203 -0.0029 -0.0101  0.0218 -0.0157 
-0.0110 -0.0088  0.0118 -0.0299  0.0267 
 0.0103  0.0108 -0.0031  0.0044 -0.0139 
-0.0129 -0.0008  0.0021 -0.0091  0.0207 

################
p:

Square matrix
Dimension: 5x5
Numbers' range: {'Col 1': [18, 84], 'Col 2': [6, 75], 'Col 3': [6, 91], 'Col 4': [1, 94], 'Col 5': [8, 91]}
Averages: {'Col 1': 36.2, 'Col 2': 50.6, 'Col 3': 41.0, 'Col 4': 48.6, 'Col 5': 50.2}

18 75 65 65 28 
18  6  6 94 71 
84 59 91 43  8 
40 50  8  1 53 
21 63 35 40 91 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [18, 84], 'Col 2': [6, 75], 'Col 3': [6, 91], 'Col 4': [1, 94], 'Col 5': [8, 91]}
Averages: {'Col 1': 61.75, 'Col 2': 49.75, 'Col 3': 37.25, 'Col 4': 45.0}

75 65 65 28 
59 91 43  8 
50  8  1 53 
63 35 40 91 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Numbers' range: {'Col 1': [50, 75], 'Col 2': [55, 55], 'Col 3': [8, 91], 'Col 4': [1, 65], 'Col 5': [8, 91]}
Averages: {'Col 1': 61.75, 'Col 2': 55.0, 'Col 3': 49.75, 'Col 4': 37.25, 'Col 5': 45.0}

75 55 65 65 28 
59 55 91 43  8 
50 55  8  1 53 
63 55 35 40 91 

################

r: 
Dimension: 5x4
Numbers' range: {'Col 1': [28, 75], 'Col 2': [8, 91], 'Col 3': [1, 55], 'Col 4': [35, 91]}
Averages: {'Col 1': 57.6, 'Col 2': 51.2, 'Col 3': 33.4, 'Col 4': 56.8}

75 59 50 63 
55 55 55 55 
65 91  8 35 
65 43  1 40 
28  8 53 91 

p==r.t:

True
################
id2:
 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


id2.addDim(2): 
Identity Matrix
Dimension: 7x7

 1  0  0  0  0  0  0 
 0  1  0  0  0  0  0 
 0  0  1  0  0  0  0 
 0  0  0  1  0  0  0 
 0  0  0  0  1  0  0 
 0  0  0  0  0  1  0 
 0  0  0  0  0  0  1 

id2.matrix:
 [[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 

################
id4:


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 0x0


################
id4: 
Identity Matrix
Dimension: 0x0



id4.addDim(10)):
 
Identity Matrix
Dimension: 10x10

 1  0  0  0  0  0  0  0  0  0 
 0  1  0  0  0  0  0  0  0  0 
 0  0  1  0  0  0  0  0  0  0 
 0  0  0  1  0  0  0  0  0  0 
 0  0  0  0  1  0  0  0  0  0 
 0  0  0  0  0  1  0  0  0  0 
 0  0  0  0  0  0  1  0  0  0 
 0  0  0  0  0  0  0  1  0  0 
 0  0  0  0  0  0  0  0  1  0 
 0  0  0  0  0  0  0  0  0  1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Numbers' range: {'Col 1': [-9.5279, 5.4452], 'Col 2': [-10.3345, -4.9512], 'Col 3': [-13.2258, 23.5108]}
Averages: {'Col 1': -2.0414, 'Col 2': -7.6429, 'Col 3': 5.1425}

  5.4452 -10.3345  23.5108 
 -9.5279  -4.9512 -13.2258 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Numbers' range: {'Col 1': [0.5658, 1.0274], 'Col 2': [0.2772, 1.0174], 'Col 3': [1.6699, 1.8141]}
Averages: {'Col 1': 0.7966, 'Col 2': 0.6473, 'Col 3': 1.742}

1.0274 0.2772 1.6699 
0.5658 1.0174 1.8141 

################


Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-841.5469, 495.3673], 'Col 2': [-525.9984, 586.389], 'Col 3': [-402.0273, 385.9392], 'Col 4': [-880.0562, -53.4572], 'Col 5': [-804.5972, 528.3348], 'Col 6': [-815.8729, 514.9801]}
Averages: {'Col 1': -85.4941, 'Col 2': -73.7148, 'Col 3': -1.2768, 'Col 4': -442.878, 'Col 5': -112.1193, 'Col 6': -66.9574}

-255.6174   -6.5561  -20.9706 -645.3924  528.3348 -408.4529 
-841.5469  586.3890  267.3274  -53.4572 -337.2757   56.1306 
   4.0459 -525.9984  385.9392 -880.0562   83.4057  514.9801 
 495.3673   25.9626 -303.4265 -627.2096 -804.5972  177.0823 
 308.2639 -512.2159 -402.0273 -292.1546  380.7943 -815.8729 
-223.4775   -9.8699   65.4972 -158.9980 -523.3778   74.3882 

f=f.intForm

Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-841, 495], 'Col 2': [-525, 586], 'Col 3': [-402, 385], 'Col 4': [-880, -53], 'Col 5': [-804, 528], 'Col 6': [-815, 514]}
Averages: {'Col 1': -85.3333, 'Col 2': -73.5, 'Col 3': -1.3333, 'Col 4': -442.5, 'Col 5': -112.1667, 'Col 6': -67.0}

-255   -6  -20 -645  528 -408 
-841  586  267  -53 -337   56 
   4 -525  385 -880   83  514 
 495   25 -303 -627 -804  177 
 308 -512 -402 -292  380 -815 
-223   -9   65 -158 -523   74 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-841.55, 495.37], 'Col 2': [-526.0, 586.39], 'Col 3': [-402.03, 385.94], 'Col 4': [-880.06, -53.46], 'Col 5': [-804.6, 528.33], 'Col 6': [-815.87, 514.98]}
Averages: {'Col 1': -85.495, 'Col 2': -73.7167, 'Col 3': -1.2767, 'Col 4': -442.8783, 'Col 5': -112.1217, 'Col 6': -66.9567}

-255.6200   -6.5600  -20.9700 -645.3900  528.3300 -408.4500 
-841.5500  586.3900  267.3300  -53.4600 -337.2800   56.1300 
   4.0500 -526.0000  385.9400 -880.0600   83.4100  514.9800 
 495.3700   25.9600 -303.4300 -627.2100 -804.6000  177.0800 
 308.2600 -512.2200 -402.0300 -292.1500  380.7900 -815.8700 
-223.4800   -9.8700   65.5000 -159.0000 -523.3800   74.3900 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Numbers' range: {'Col 1': [-0.62, 0.37], 'Col 2': [-1.0, 0.96], 'Col 3': [-0.97, 0.94], 'Col 4': [-1.0, -0.06], 'Col 5': [-0.6, 0.79], 'Col 6': [-0.87, 0.98]}
Averages: {'Col 1': -0.1617, 'Col 2': -0.2167, 'Col 3': 0.0567, 'Col 4': -0.3783, 'Col 5': 0.045, 'Col 6': 0.0433}

-0.6200 -0.5600 -0.9700 -0.3900  0.3300 -0.4500 
-0.5500  0.3900  0.3300 -0.4600 -0.2800  0.1300 
 0.0500 -1.0000  0.9400 -0.0600  0.4100  0.9800 
 0.3700  0.9600 -0.4300 -0.2100 -0.6000  0.0800 
 0.2600 -0.2200 -0.0300 -0.1500  0.7900 -0.8700 
-0.4800 -0.8700  0.5000 -1.0000 -0.3800  0.3900 

################
r.remove(r=2):

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [28, 75], 'Col 2': [8, 91], 'Col 3': [1, 55], 'Col 4': [35, 91]}
Averages: {'Col 1': 58.25, 'Col 2': 50.25, 'Col 3': 28.0, 'Col 4': 57.25}

75 59 50 63 
65 91  8 35 
65 43  1 40 
28  8 53 91 

r.rank: 4

r[0]=r[1][:]

Square matrix
Dimension: 4x4
Numbers' range: {'Col 1': [28, 65], 'Col 2': [8, 91], 'Col 3': [1, 53], 'Col 4': [35, 91]}
Averages: {'Col 1': 55.75, 'Col 2': 58.25, 'Col 3': 17.5, 'Col 4': 50.25}

65 91  8 35 
65 91  8 35 
65 43  1 40 
28  8 53 91 

r.rank: 3
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 0], 'Col 2': [0, 0], 'Col 3': [0, 0], 'Col 4': [0, 0], 'Col 5': [0, 0], 'Col 6': [0, 0], 'Col 7': [0, 0], 'Col 8': [0, 0]}
Averages: {'Col 1': 12.375, 'Col 2': 12.375, 'Col 3': 12.375, 'Col 4': 12.375, 'Col 5': 12.375, 'Col 6': 12.375, 'Col 7': 12.375, 'Col 8': 12.375}

99 0 0 0 0 0 0 0 
0 99 0 0 0 0 0 0 
0 0 99 0 0 0 0 0 
0 0 0 99 0 0 0 0 
0 0 0 0 99 0 0 0 
0 0 0 0 0 99 0 0 
0 0 0 0 0 0 99 0 
0 0 0 0 0 0 0 99 


e+=50:

Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [50, 149], 'Col 2': [50, 149], 'Col 3': [50, 149], 'Col 4': [50, 149], 'Col 5': [50, 149], 'Col 6': [50, 149], 'Col 7': [50, 149], 'Col 8': [50, 149]}
Averages: {'Col 1': 62.375, 'Col 2': 62.375, 'Col 3': 62.375, 'Col 4': 62.375, 'Col 5': 62.375, 'Col 6': 62.375, 'Col 7': 62.375, 'Col 8': 62.375}

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Numbers' range: {'Col 1': [0, 1], 'Col 2': [0, 1], 'Col 3': [0, 1], 'Col 4': [0, 1], 'Col 5': [0, 1], 'Col 6': [0, 1], 'Col 7': [0, 1], 'Col 8': [0, 1]}
Averages: {'Col 1': 0.125, 'Col 2': 0.125, 'Col 3': 0.125, 'Col 4': 0.125, 'Col 5': 0.125, 'Col 6': 0.125, 'Col 7': 0.125, 'Col 8': 0.125}

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j

Dimension: 2x4
Numbers' range: {'Col 1': [-4, 3], 'Col 2': [-1, 0], 'Col 3': [0, 2], 'Col 4': [0, 0]}
Averages: {'Col 1': -0.5, 'Col 2': -0.5, 'Col 3': 1.0, 'Col 4': 0.0}

-4 -1  2  0 
 3  0  0  0 

################

f.roundForm(3)>f.roundForm(1)
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Numbers' range: {'Col 1': [9, 34], 'Col 2': [-52, 88], 'Col 3': [3, 33]}
Averages: {'Col 1': 21.5, 'Col 2': 18.0, 'Col 3': 18.0}

 34 -52  33 
  9  88   3 

################
validStr2:

Dimension: 5x2
Numbers' range: {'Col 1': [3, 352], 'Col 2': [-5, 45]}
Averages: {'Col 1': 138.2, 'Col 2': 34.6}

312  45 
 12  44 
352  45 
 12  44 
  3  -5 

################
validStr3:

Dimension: 1x4
Numbers' range: {'Col 1': [34, 34], 'Col 2': [5, 5], 'Col 3': [44, 44], 'Col 4': [659, 659]}
Averages: {'Col 1': 34.0, 'Col 2': 5.0, 'Col 3': 44.0, 'Col 4': 659.0}

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Numbers' range: {'Col 1': [125, 193], 'Col 2': [30, 105], 'Col 3': [9, 55]}
Averages: {'Col 1': 163.3636, 'Col 2': 62.1364, 'Col 3': 28.6818}

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################
"""
# =============================================================================

