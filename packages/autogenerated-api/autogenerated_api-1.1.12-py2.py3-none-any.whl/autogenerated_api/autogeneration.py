__author__="RituRaj"

from django.db import models
from rest_framework.generics import ListAPIView, RetrieveAPIView
from rest_framework.filters import DjangoFilterBackend
# from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.views import APIView
from rest_framework import filters

from django_filters import rest_framework as filterset
import django_filters
from django.conf.urls import url
from django.apps import apps

from importlib import import_module
import sys

from .serializers_config import QUERY_SERIALIZER_MAP
from .tools import StandardResultsSetPagination


def make_all_viewsets(pathname):
    """Make View sets of Api Views
    
    :param pathname : module path name
    """
    appviews = sys.modules[pathname]
    appname = pathname.split(".")[0]

    app = import_module(appname)
    models = apps.get_app_config(app.__name__).get_models()

    for model in models:
        make_viewset(app, model.__name__, appviews)


def make_viewset(app, class_name, appviews):
    """Create Viewset for models of each app
        Viewset - List Api View , Detail APi View for every models of an app

    :param app: app_name
    :param class_name: model_name  
    :param app_views: app views.py  
    """
    from .autogenerated_urls import urlpatterns
    details_view = make_details_view(app, class_name)
    query_view = make_query_view(app, class_name)

    details_raw_string = '^' + class_name.lower() + '/$'
    urlpatterns.append(url(details_raw_string, query_view.as_view()))

    query_raw_string = '^' + class_name.lower() + '/(?P<pk>[0-9]+)/$'
    urlpatterns.append(url(query_raw_string, details_view.as_view()))

    setattr(appviews, class_name + "Details", details_view)
    setattr(appviews, class_name + "QueryView", query_view)

def make_details_view(app, class_name):
    """Create DetailApi View
    :param app: app_name
    :ptype app: <django_app> 
    :param class_name: model_name
    :ptype class_name: str

    :return: ApiView - DetailAPiView
    :rtype: restframework api view Class
    """
    klass = getattr(app.models, class_name)
    serializer = getattr(app.serializers, class_name + "DeadlySerializer")
    class DetailsView(RetrieveAPIView):
        queryset = klass.objects.all()
        serializer_class = serializer
        model = klass
        model_app = app
        model_name = class_name
    return DetailsView

def make_query_view(app, class_name, page_class=StandardResultsSetPagination):
    """Create DetailApi View
    :param app: app_name
    :ptype app: <django_app> 
    
    :param class_name: model_name
    :ptype class_name: str
    
    :param page_class: StandardResultsSetPagination Class
    :ptype page_class: rstframework apgination class

    :return: ApiView - QueryAPiView - ListApiView
    :rtype: restframework api view Class
    """
    klass = getattr(app.models, class_name)
    serializer = getattr(app.serializers, class_name + "DeadlySerializer")
    filter = getattr(app.filters, class_name + "Filter")
    class QueryView(ListAPIView):
        queryset = klass.objects.all()
        serializer_class = serializer
        filter_backends = (DjangoFilterBackend, )
        filter_class = filter
        pagination_class = page_class
        model = klass
        model_app = app
        model_name = class_name

        def post(self, request, *args, **kwargs):
            self.queryset = klass.objects.filter(pk__in=request.data)
            return self.list(request, *args, **kwargs)

        def paginate_queryset(self, queryset):
            """Paginate the queryset"""
            if self.paginator is None:
                return None
            if not self.request.query_params.get('paginate'):
                return None
            return self.paginator.paginate_queryset(queryset, self.request, view=self)

        def filter_queryset(self, queryset):
            for backend in list(self.filter_backends):
                queryset = backend().filter_queryset(self.request, queryset, self)
            key = self.request.query_params.get('sort_by')
            queryset = queryset.distinct()
            if key:
                return queryset.order_by(key)
            return queryset

    return QueryView


# Soon I will add moe funtionality in make_model_filter
def make_model_filter(model , **kwargs):
    """Creates a new ModelFilter with the required(excluded) fields and
        allows custom filter functions
    
    :param model: django model , not model_name
    :param kwargs: custom_filter_methods(as kwargs)

    :return: a filterClass of given Model

    Note  :
        Custom Filter can be written this way
            def myfilter(self , qs , name , value):
                return qs.filter(**{'myfield':value}) 

    Documentation By : RituRaj
    """
    fields_of_filter = {} # temporarily {} - will be updated soon
    Meta = type('Meta', (), {'model': model , 'fields' : fields_of_filter})
    class_fields = {
        'Meta':Meta ,
        '__module__':model.__module__,
    }

    for key , value in kwargs.items():
        filter_name = key + "_filter"
        class_fields[key] = django_filters.CharFilter(method=filter_name)
        class_fields[filter_name] = value

    Filter = type('Filter' , (filterset.FilterSet,) , class_fields)

    return Filter

