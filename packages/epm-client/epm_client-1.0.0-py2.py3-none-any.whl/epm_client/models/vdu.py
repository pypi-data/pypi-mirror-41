# coding: utf-8

"""
    EPM REST API

    REST API description of the ElasTest Platform Manager Module.  # noqa: E501

    OpenAPI spec version: 0.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from epm_client.models.event import Event  # noqa: F401,E501
from epm_client.models.key_value_pair import KeyValuePair  # noqa: F401,E501


class VDU(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compute_id': 'str',
        'events': 'list[Event]',
        'id': 'str',
        'image_name': 'str',
        'ip': 'str',
        'metadata': 'list[KeyValuePair]',
        'name': 'str',
        'net_name': 'str',
        'po_p_name': 'str',
        'status': 'str',
        'key': 'str'
    }

    attribute_map = {
        'compute_id': 'computeId',
        'events': 'events',
        'id': 'id',
        'image_name': 'imageName',
        'ip': 'ip',
        'metadata': 'metadata',
        'name': 'name',
        'net_name': 'netName',
        'po_p_name': 'poPName',
        'status': 'status',
        'key': 'key'
    }

    def __init__(self, compute_id=None, events=None, id=None, image_name=None, ip=None, metadata=None, name=None, net_name=None, po_p_name=None, status=None, key=None):  # noqa: E501
        """VDU - a model defined in Swagger"""  # noqa: E501

        self._compute_id = None
        self._events = None
        self._id = None
        self._image_name = None
        self._ip = None
        self._metadata = None
        self._name = None
        self._net_name = None
        self._po_p_name = None
        self._status = None
        self._key = None
        self.discriminator = None

        self.compute_id = compute_id
        if events is not None:
            self.events = events
        if id is not None:
            self.id = id
        self.image_name = image_name
        self.ip = ip
        if metadata is not None:
            self.metadata = metadata
        self.name = name
        self.net_name = net_name
        self.po_p_name = po_p_name
        if status is not None:
            self.status = status
        if key is not None:
            self.key = key

    @property
    def compute_id(self):
        """Gets the compute_id of this VDU.  # noqa: E501

        The identifier of the deployed VDU in the virtualization technology.  # noqa: E501

        :return: The compute_id of this VDU.  # noqa: E501
        :rtype: str
        """
        return self._compute_id

    @compute_id.setter
    def compute_id(self, compute_id):
        """Sets the compute_id of this VDU.

        The identifier of the deployed VDU in the virtualization technology.  # noqa: E501

        :param compute_id: The compute_id of this VDU.  # noqa: E501
        :type: str
        """
        #if compute_id is None:
            #raise ValueError("Invalid value for `compute_id`, must not be `None`")  # noqa: E501

        self._compute_id = compute_id

    @property
    def events(self):
        """Gets the events of this VDU.  # noqa: E501

        A list of events recorded for this VDU.  # noqa: E501

        :return: The events of this VDU.  # noqa: E501
        :rtype: list[Event]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this VDU.

        A list of events recorded for this VDU.  # noqa: E501

        :param events: The events of this VDU.  # noqa: E501
        :type: list[Event]
        """

        self._events = events

    @property
    def id(self):
        """Gets the id of this VDU.  # noqa: E501

        The identifier of the VDU in the EPM.  # noqa: E501

        :return: The id of this VDU.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VDU.

        The identifier of the VDU in the EPM.  # noqa: E501

        :param id: The id of this VDU.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image_name(self):
        """Gets the image_name of this VDU.  # noqa: E501

        The name of the image used for the VDU.  # noqa: E501

        :return: The image_name of this VDU.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this VDU.

        The name of the image used for the VDU.  # noqa: E501

        :param image_name: The image_name of this VDU.  # noqa: E501
        :type: str
        """
        #if image_name is None:
            #raise ValueError("Invalid value for `image_name`, must not be `None`")  # noqa: E501

        self._image_name = image_name

    @property
    def ip(self):
        """Gets the ip of this VDU.  # noqa: E501

        The IP assigned to the VDU.  # noqa: E501

        :return: The ip of this VDU.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this VDU.

        The IP assigned to the VDU.  # noqa: E501

        :param ip: The ip of this VDU.  # noqa: E501
        :type: str
        """
        #if ip is None:
            #raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def metadata(self):
        """Gets the metadata of this VDU.  # noqa: E501

        More detailed information about the VDU in a Key-Value pair format.  # noqa: E501

        :return: The metadata of this VDU.  # noqa: E501
        :rtype: list[KeyValuePair]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this VDU.

        More detailed information about the VDU in a Key-Value pair format.  # noqa: E501

        :param metadata: The metadata of this VDU.  # noqa: E501
        :type: list[KeyValuePair]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this VDU.  # noqa: E501

        The name of the VDU.  # noqa: E501

        :return: The name of this VDU.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VDU.

        The name of the VDU.  # noqa: E501

        :param name: The name of this VDU.  # noqa: E501
        :type: str
        """
        #if name is None:
            #raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def net_name(self):
        """Gets the net_name of this VDU.  # noqa: E501

        The name of the network to which the VDU is associated with.  # noqa: E501

        :return: The net_name of this VDU.  # noqa: E501
        :rtype: str
        """
        return self._net_name

    @net_name.setter
    def net_name(self, net_name):
        """Sets the net_name of this VDU.

        The name of the network to which the VDU is associated with.  # noqa: E501

        :param net_name: The net_name of this VDU.  # noqa: E501
        :type: str
        """
        #if net_name is None:
            #raise ValueError("Invalid value for `net_name`, must not be `None`")  # noqa: E501

        self._net_name = net_name

    @property
    def po_p_name(self):
        """Gets the po_p_name of this VDU.  # noqa: E501

        The name of the PoP where the VDU is deployed.  # noqa: E501

        :return: The po_p_name of this VDU.  # noqa: E501
        :rtype: str
        """
        return self._po_p_name

    @po_p_name.setter
    def po_p_name(self, po_p_name):
        """Sets the po_p_name of this VDU.

        The name of the PoP where the VDU is deployed.  # noqa: E501

        :param po_p_name: The po_p_name of this VDU.  # noqa: E501
        :type: str
        """
        #if po_p_name is None:
            #raise ValueError("Invalid value for `po_p_name`, must not be `None`")  # noqa: E501

        self._po_p_name = po_p_name

    @property
    def status(self):
        """Gets the status of this VDU.  # noqa: E501

        The status of the virtualized compute resource.  # noqa: E501

        :return: The status of this VDU.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VDU.

        The status of the virtualized compute resource.  # noqa: E501

        :param status: The status of this VDU.  # noqa: E501
        :type: str
        """
        allowed_values = ["initializing", "initialized", "deploying", "deployed", "running", "undeploying", "undeployed", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def key(self):
        """Gets the key of this VDU.  # noqa: E501

        The name of the key saved in EPM, which can be used to execute runtime operations on this VDU.  # noqa: E501

        :return: The key of this VDU.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this VDU.

        The name of the key saved in EPM, which can be used to execute runtime operations on this VDU.  # noqa: E501

        :param key: The key of this VDU.  # noqa: E501
        :type: str
        """

        self._key = key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VDU):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
