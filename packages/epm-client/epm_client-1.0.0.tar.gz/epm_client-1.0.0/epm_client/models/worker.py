# coding: utf-8

"""
    EPM REST API

    REST API description of the ElasTest Platform Manager Module.

    OpenAPI spec version: 0.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Worker(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, ip=None, vdu_id=None, epm_ip=None, type=None, auth_credentials=None):
        """
        Worker - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'ip': 'str',
            'vdu_id': 'str',
            'epm_ip': 'str',
            'type': 'list[str]',
            'auth_credentials': 'AuthCredentials'
        }

        self.attribute_map = {
            'id': 'id',
            'ip': 'ip',
            'vdu_id': 'vduId',
            'epm_ip': 'epmIp',
            'type': 'type',
            'auth_credentials': 'authCredentials'
        }

        self._id = id
        self._ip = ip
        self._vdu_id = vdu_id
        self._epm_ip = epm_ip
        self._type = type
        self._auth_credentials = auth_credentials

    @property
    def id(self):
        """
        Gets the id of this Worker.


        :return: The id of this Worker.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Worker.


        :param id: The id of this Worker.
        :type: str
        """

        self._id = id

    @property
    def ip(self):
        """
        Gets the ip of this Worker.


        :return: The ip of this Worker.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this Worker.


        :param ip: The ip of this Worker.
        :type: str
        """

        self._ip = ip

    @property
    def vdu_id(self):
        """
        Gets the vdu_id of this Worker.
        The vduId if the worker was created from a vdu.

        :return: The vdu_id of this Worker.
        :rtype: str
        """
        return self._vdu_id

    @vdu_id.setter
    def vdu_id(self, vdu_id):
        """
        Sets the vdu_id of this Worker.
        The vduId if the worker was created from a vdu.

        :param vdu_id: The vdu_id of this Worker.
        :type: str
        """

        self._vdu_id = vdu_id

    @property
    def epm_ip(self):
        """
        Gets the epm_ip of this Worker.
        This is the IP where the EPM is reachable for the Worker. This is needed because the Worker has to be able to reach the EPM for registering adapters.

        :return: The epm_ip of this Worker.
        :rtype: str
        """
        return self._epm_ip

    @epm_ip.setter
    def epm_ip(self, epm_ip):
        """
        Sets the epm_ip of this Worker.
        This is the IP where the EPM is reachable for the Worker. This is needed because the Worker has to be able to reach the EPM for registering adapters.

        :param epm_ip: The epm_ip of this Worker.
        :type: str
        """

        self._epm_ip = epm_ip

    @property
    def type(self):
        """
        Gets the type of this Worker.
        The types which this worker supports at the moment when this information is requested.

        :return: The type of this Worker.
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Worker.
        The types which this worker supports at the moment when this information is requested.

        :param type: The type of this Worker.
        :type: list[str]
        """

        self._type = type

    @property
    def auth_credentials(self):
        """
        Gets the auth_credentials of this Worker.


        :return: The auth_credentials of this Worker.
        :rtype: AuthCredentials
        """
        return self._auth_credentials

    @auth_credentials.setter
    def auth_credentials(self, auth_credentials):
        """
        Sets the auth_credentials of this Worker.


        :param auth_credentials: The auth_credentials of this Worker.
        :type: AuthCredentials
        """

        self._auth_credentials = auth_credentials

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
